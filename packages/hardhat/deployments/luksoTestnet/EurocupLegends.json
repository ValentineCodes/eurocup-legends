{
  "address": "0x0cdb6F0B99b3617323a09BB1b8ea38619D55B2a9",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEurocupLegends.Creator[]",
          "name": "_creators",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimedPrize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creators",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPrizeForThisCountry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoShirts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoWinnersYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isMintOpen",
          "type": "bool"
        }
      ],
      "name": "MintStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "name": "PrizeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[3]",
          "name": "winners",
          "type": "address[3]"
        }
      ],
      "name": "WinnersSet",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WINNERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_country",
          "type": "address"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_country",
          "type": "address"
        }
      ],
      "name": "getCountryPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreators",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEurocupLegends.Creator[]",
          "name": "_creators",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_country",
          "type": "address"
        }
      ],
      "name": "getPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[3]",
          "name": "_winners",
          "type": "address[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_country",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_tokenId",
          "type": "bytes32"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isClaimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isMintOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isMintOpen",
          "type": "bool"
        }
      ],
      "name": "setMintStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[3]",
          "name": "_winners",
          "type": "address[3]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_shares",
          "type": "uint256[3]"
        }
      ],
      "name": "setWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f79791abc3f4cf77202c9e5585c677c5f582e3b63a143b550377a14079e454a",
  "receipt": {
    "to": null,
    "from": "0xC86946d55F52b7acF85A90141334320CaA00c5eB",
    "contractAddress": "0x0cdb6F0B99b3617323a09BB1b8ea38619D55B2a9",
    "transactionIndex": 0,
    "gasUsed": "1122305",
    "logsBloom": "0x02000000000000000000000000000000000000000000000000800000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000040000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000080000020000000000000000000000000000000000000000000000000000000080000000000",
    "blockHash": "0x8d4a43428bab368818047483978fea0a31479e1ea1c22703748e24cb8d75bf2b",
    "transactionHash": "0x9f79791abc3f4cf77202c9e5585c677c5f582e3b63a143b550377a14079e454a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2819510,
        "transactionHash": "0x9f79791abc3f4cf77202c9e5585c677c5f582e3b63a143b550377a14079e454a",
        "address": "0x0cdb6F0B99b3617323a09BB1b8ea38619D55B2a9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000413bc0e7b6d4686c1d55ccfebc7b5edb91c31095"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8d4a43428bab368818047483978fea0a31479e1ea1c22703748e24cb8d75bf2b"
      }
    ],
    "blockNumber": 2819510,
    "cumulativeGasUsed": "1122305",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "creator": "0x413Bc0E7b6D4686C1D55CCFeBC7b5EDb91c31095",
        "share": 100
      }
    ],
    "0x413Bc0E7b6D4686C1D55CCFeBC7b5EDb91c31095"
  ],
  "numDeployments": 1,
  "solcInputHash": "53691bd88f3569ff630162e0fef08874",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"_creators\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimedPrize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creators\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrizeForThisCountry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoShirts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWinnersYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintOpen\",\"type\":\"bool\"}],\"name\":\"MintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"getCountryPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"_creators\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"_winners\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMintOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMintOpen\",\"type\":\"bool\"}],\"name\":\"setMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_winners\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_shares\",\"type\":\"uint256[3]\"}],\"name\":\"setWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Eurocup Legends\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"claimPrize(address,address)\":{\"params\":{\"_country\":\"Address of the winning country\",\"_recipient\":\"Owner of the shirts to claim\"}},\"getCountryPrize(address)\":{\"params\":{\"_country\":\"Address of winning country\"},\"returns\":{\"_prize\":\"Returns the prize of the country\"}},\"getCreators()\":{\"returns\":{\"_creators\":\"Returns the creators of Eurocup Legends\"}},\"getPrize(address,address)\":{\"params\":{\"_country\":\"Address of winning country\",\"_user\":\"Owner of the Shirts\"},\"returns\":{\"_prize\":\"Prize of user for {_country}\"}},\"getWinners()\":{\"returns\":{\"_winners\":\"Returns the addresses of the winners of the tournament\"}},\"isClaimed(address,bytes32)\":{\"params\":{\"_country\":\"Address of winning country\",\"_tokenId\":\"ID of shirt for the winning country\"},\"returns\":{\"_isClaimed\":\"Return `true` if prize has been claimed and `false` otherwise\"}},\"isMintOpen()\":{\"returns\":{\"_isMintOpen\":\"Returns `true` if mint is open and `false` otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMintStatus(bool)\":{\"details\":\"Can only be called by the Admin\",\"params\":{\"_isMintOpen\":\"Updated mint status\"}},\"setWinners(address[3],uint256[3])\":{\"details\":\"Can only be called by Admin\",\"params\":{\"_shares\":\"Percentage share of each winner in order\",\"_winners\":\"Address of winners\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"EurocupLegends\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimPrize(address,address)\":{\"notice\":\"Sends prize to {_recipient} based on amount of shirts owned in the winning {_country} Anyone can claim prize for another\"},\"getCountryPrize(address)\":{\"notice\":\"Gets the prize of {_country}\"},\"getCreators()\":{\"notice\":\"Gets the addresses and shares of the creators of Eurocup Legends\"},\"getPrize(address,address)\":{\"notice\":\"Gets the prize of {_user} for the winning {_country}\"},\"getWinners()\":{\"notice\":\"Gets the winners of the tournament in order - 1st place, Runner up and 3rd place\"},\"isClaimed(address,bytes32)\":{\"notice\":\"Determines if shirt has been used to claim prize\"},\"isMintOpen()\":{\"notice\":\"Gets the mint status\"},\"setMintStatus(bool)\":{\"notice\":\"Open or close mint\"},\"setWinners(address[3],uint256[3])\":{\"notice\":\"Set the winners of the tournament and the prize share for each in order - 1st place, Runner up, and 3rd place\"}},\"notice\":\"This contract serves as the prize pool for the European Cup Tournament stake Admin can close minting at any time Admin can set the winners of the tournament Users can claim their prize after winners have been set\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EurocupLegends.sol\":\"EurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0xf24c0f30ffdc2540755ae809effdba80029f8418e2b0c9f72b878aad50ba1b72\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/EurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IEurocupLegends} from \\\"./interfaces/IEurocupLegends.sol\\\";\\nimport {IShirts} from \\\"./interfaces/IShirts.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\n/**\\n    @author Eurocup Legends\\n    @title EurocupLegends\\n    @notice This contract serves as the prize pool for the European Cup Tournament stake\\n            Admin can close minting at any time\\n            Admin can set the winners of the tournament\\n            Users can claim their prize after winners have been set\\n */\\ncontract EurocupLegends is IEurocupLegends, Ownable, ReentrancyGuard {\\n    uint256 public constant FEE_PERCENTAGE = 25;\\n    uint256 public constant SHARE_PRECISION = 100;\\n    uint256 public constant MAX_WINNERS = 3;\\n\\n    // list of creators and each of their share percentage\\n    Creator[] private s_creators;\\n\\n    // list of the winners - 1st place, Runner up and 3rd place\\n    address[3] private s_winners;\\n\\n    bool private s_isMintOpen = true;\\n\\n    // prize for each winner \\n    mapping(address country => uint256 prize) private s_prizes;\\n\\n    // determine if shirt has been used to claim prize\\n    mapping(address country => mapping(bytes32 tokenId => bool isClaimed)) private s_isClaimed;\\n\\n    // total shirts that have been used to claim prize for each country\\n    mapping(address country => uint256 totalClaimed) private s_totalClaimed;\\n\\n    constructor(Creator[] memory _creators, address _admin) Ownable(_admin) {\\n        for(uint256 i; i < _creators.length; i++) {\\n            s_creators.push(_creators[i]);\\n        }\\n    }\\n\\n    modifier ifMintOpen() {\\n        if(!s_isMintOpen) revert MintClosed();\\n        _;\\n    }\\n\\n    /**\\n        @notice Open or close mint\\n        @dev Can only be called by the Admin\\n        @param _isMintOpen Updated mint status\\n     */\\n    function setMintStatus(bool _isMintOpen) external onlyOwner {\\n        s_isMintOpen = _isMintOpen;\\n        emit MintStatus(_isMintOpen);\\n    }\\n\\n    /**\\n        @notice Set the winners of the tournament and the prize share for each in order - 1st place, Runner up, and 3rd place\\n        @dev Can only be called by Admin\\n        @param _winners Address of winners\\n        @param _shares Percentage share of each winner in order\\n     */\\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _shares) external onlyOwner {\\n        if(s_isMintOpen) {\\n            // Close mint before setting winners\\n            s_isMintOpen = false;\\n        }\\n\\n        // Set the winners and the prize for each winner\\n        for(uint256 i; i < MAX_WINNERS; i++) {\\n            address winner = _winners[i];\\n            uint256 prize = (address(this).balance * _shares[i]) / SHARE_PRECISION;\\n\\n            s_winners[i] = winner;\\n            s_prizes[winner] = prize;\\n        }\\n\\n        emit WinnersSet(_winners);\\n    }\\n\\n    /**\\n        @notice Sends prize to {_recipient} based on amount of shirts owned in the winning {_country}\\n                Anyone can claim prize for another\\n        @param _recipient Owner of the shirts to claim\\n        @param _country Address of the winning country\\n     */\\n    function claimPrize(address _recipient, address _country) external nonReentrant {\\n        if(s_winners.length != MAX_WINNERS) revert NoWinnersYet();\\n\\n        // sanity check\\n        if(_country == address(0)) revert ZeroAddress();\\n\\n        uint256 countryPrize = s_prizes[_country];\\n        if(countryPrize == 0) revert NoPrizeForThisCountry();\\n\\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_recipient);\\n        uint256 userTokenIdsLength = userTokenIds.length;\\n\\n        if(userTokenIdsLength == 0) revert NoShirts();\\n        \\n        uint256 unclaimedShirts;\\n\\n        // filter claimed shirts. Ensure prize is calculated with unclaimed shirts only\\n        for(uint256 i; i < userTokenIdsLength; i++) {\\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\\n                s_isClaimed[_country][userTokenIds[i]] = true;\\n                unclaimedShirts++;\\n            }\\n        }\\n\\n        // Ensure user has unclaimed shirts\\n        if(unclaimedShirts == 0) revert AlreadyClaimedPrize();\\n\\n        uint256 totalClaimed = s_totalClaimed[_country];\\n\\n        // Total shirts that haven't been used to claim prize for the winning {_country}\\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - totalClaimed;\\n\\n        uint256 prize = (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\\n\\n        s_prizes[_country] = countryPrize - prize;\\n        s_totalClaimed[_country] = totalClaimed + unclaimedShirts;\\n\\n        // transfer prize to {_recipient}\\n        (bool success, ) = _recipient.call{value: prize}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit PrizeClaimed(_recipient, prize);\\n    }\\n\\n    /**\\n        @notice Gets the prize of {_user} for the winning {_country}\\n        @param _user Owner of the Shirts\\n        @param _country Address of winning country\\n        @return _prize Prize of user for {_country}\\n     */\\n    function getPrize(address _user, address _country) external view returns (uint256 _prize) {\\n        uint256 countryPrize = s_prizes[_country];\\n\\n        // Total shirts that haven't been used to claim prize for the winning {_country}\\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - s_totalClaimed[_country];\\n\\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_user);\\n        uint256 userTokenIdsLength = userTokenIds.length;\\n\\n        // Ensure the user has shirts\\n        if(userTokenIdsLength == 0) revert NoShirts();\\n        \\n        uint256 unclaimedShirts;\\n\\n        // filter claimed shirts. Ensure prize is calculated with unclaimed shirts only\\n        for(uint256 i; i < userTokenIdsLength; i++) {\\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\\n                unclaimedShirts++;\\n            }\\n        }\\n\\n        return (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\\n    }\\n\\n    /**\\n        @notice Gets the mint status\\n        @return _isMintOpen Returns `true` if mint is open and `false` otherwise\\n     */\\n    function isMintOpen() external view returns (bool _isMintOpen) {\\n        return s_isMintOpen;\\n    }\\n\\n    /**\\n        @notice Determines if shirt has been used to claim prize\\n        @param _country Address of winning country\\n        @param _tokenId ID of shirt for the winning country\\n        @return _isClaimed Return `true` if prize has been claimed and `false` otherwise\\n     */\\n    function isClaimed(address _country, bytes32 _tokenId) external view returns (bool _isClaimed) {\\n        return s_isClaimed[_country][_tokenId];\\n    }\\n\\n    /**\\n        @notice Gets the addresses and shares of the creators of Eurocup Legends\\n        @return _creators Returns the creators of Eurocup Legends\\n     */\\n    function getCreators() external view returns (Creator[] memory _creators) {\\n        return s_creators;\\n    }\\n\\n    /**\\n        @notice Gets the winners of the tournament in order - 1st place, Runner up and 3rd place\\n        @return _winners Returns the addresses of the winners of the tournament\\n     */\\n    function getWinners() external view returns (address[3] memory _winners) {\\n        return s_winners;\\n    }\\n\\n    /**\\n        @notice Gets the prize of {_country}\\n        @param _country Address of winning country\\n        @return _prize Returns the prize of the country\\n     */\\n    function getCountryPrize(address _country) external view returns (uint256 _prize) {\\n        return s_prizes[_country];\\n    }\\n\\n    /**\\n        @notice Splits 25% of deposits between creators while the rest goes into the prize pool\\n                It's disabled if mint is closed by Admin\\n        @param _amount Amount deposited\\n     */\\n    function _handleDeposit(uint256 _amount) private ifMintOpen {\\n        // 25% of deposits\\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\\n\\n        uint256 creatorsLength = s_creators.length;\\n\\n        // transfer fee to creators\\n        for(uint256 i; i < creatorsLength; i++) {\\n            Creator memory creator = s_creators[i];\\n\\n            uint256 creatorShare = (fees * creator.share) / SHARE_PRECISION;\\n\\n            (bool success,) = creator.creator.call{value: creatorShare}(\\\"\\\");\\n            if(!success) revert FeeTransferFailed(creator.creator, creatorShare);\\n        }\\n    }\\n\\n    receive() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n\\n    fallback() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n}\",\"keccak256\":\"0xbcaf4628a1604f86fafcc406de62a61a18454c07c8206d550de8b03693a6fe25\",\"license\":\"MIT\"},\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n    event MintStatus(bool isMintOpen);\\n\\n    /**\\n        @notice Open or close mint\\n        @dev Can only be called by the Admin\\n        @param _isMintOpen Updated mint status\\n     */\\n    function setMintStatus(bool _isMintOpen) external;\\n\\n    /**\\n        @notice Set the winners of the tournament and the prize share for each in order - 1st place, Runner up, and 3rd place\\n        @dev Can only be called by Admin\\n        @param _winners Address of winners\\n        @param _shares Percentage share of each winner in order\\n     */\\n    function setWinners(address[3] calldata _winners, uint256[3] calldata _shares) external;\\n\\n    /**\\n        @notice Sends prize to {_recipient} based on amount of shirts owned in the winning country\\n                Anyone can claim prize for another\\n        @param _recipient Owner of the shirts to claim\\n        @param _country Address of the winning country\\n     */\\n    function claimPrize(address _recipient, address _country) external;\\n\\n    /**\\n        @notice Returns the prize of {_user} for the winning {_country}\\n        @param _user Owner of the Shirts\\n        @param _country Address of winning country\\n        @return _prize Prize of user for {_country}\\n     */\\n    function getPrize(address _user, address _country) external view returns (uint256 _prize);\\n\\n    /**\\n        @notice Gets the mint status\\n        @return _isMintOpen Returns `true` if mint is open and `false` otherwise\\n     */\\n    function isMintOpen() external view returns (bool _isMintOpen);\\n\\n    /**\\n        @notice Determines if shirt has been used to claim prize\\n        @param _country Address of winning country\\n        @param _tokenId ID of shirt for the winning country\\n        @return _isClaimed Return `true` if prize has been claimed and `false` otherwise\\n     */\\n    function isClaimed(address _country, bytes32 _tokenId) external view returns (bool _isClaimed);\\n\\n    /**\\n        @notice Gets the addresses and shares of the creators of Eurocup Legends\\n        @return _creators Returns the creators of Eurocup Legends\\n     */\\n    function getCreators() external view returns (Creator[] memory _creators);\\n\\n    /**\\n        @notice Gets the winners of the tournament in order - 1st place, Runner up and 3rd place\\n        @return _winners Returns the addresses of the winners of the tournament\\n     */\\n    function getWinners() external view returns (address[3] memory _winners);\\n\\n    /**\\n        @notice Gets the prize of {_country}\\n        @param _country Address of winning country\\n        @return _prize Returns the prize of the country\\n     */\\n    function getCountryPrize(address _country) external view returns (uint256 _prize);\\n}\",\"keccak256\":\"0xd6fada8e2be8118d5dd7456b3c6c519eb96b3bab1e690e332b7a1975fa15ce00\",\"license\":\"MIT\"},\"contracts/interfaces/IShirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\ninterface IShirts is ILSP8 {\\n    event ShirtsMinted(address _recipient, uint256 _amount);\\n\\n    /**\\n        @notice Mints {_amount} shirts to {_recipient} for the right price\\n                Users can mint 5 max and 100 in total\\n                Anyone can mint a shirt for another\\n        @dev Price is transferred to the prize pool\\n            25% is split between creators\\n        @param _recipient Address of the recipient\\n        @param _amount Amount of shirts to mint\\n     */\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n    \\n    /// @notice Returns the address of the prize pool\\n    function getPrizePool() external view returns (address _prizePool);\\n\\n    /// @notice Returns the price of each shirt\\n    function getPrice() external view returns (uint256 _price);\\n}\",\"keccak256\":\"0x1f03e65a4c9b92d1eb59c76ea3efe3151909ea0fa25d938af40977cf295bbd85\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisCountry();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoShirts();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\\n\\nerror MintClosed();\",\"keccak256\":\"0xb1d49127fde23dcec5d769e3e529be66796a8cdd80d827cd520dd6b4320804e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Eurocup Legends",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "claimPrize(address,address)": {
        "params": {
          "_country": "Address of the winning country",
          "_recipient": "Owner of the shirts to claim"
        }
      },
      "getCountryPrize(address)": {
        "params": {
          "_country": "Address of winning country"
        },
        "returns": {
          "_prize": "Returns the prize of the country"
        }
      },
      "getCreators()": {
        "returns": {
          "_creators": "Returns the creators of Eurocup Legends"
        }
      },
      "getPrize(address,address)": {
        "params": {
          "_country": "Address of winning country",
          "_user": "Owner of the Shirts"
        },
        "returns": {
          "_prize": "Prize of user for {_country}"
        }
      },
      "getWinners()": {
        "returns": {
          "_winners": "Returns the addresses of the winners of the tournament"
        }
      },
      "isClaimed(address,bytes32)": {
        "params": {
          "_country": "Address of winning country",
          "_tokenId": "ID of shirt for the winning country"
        },
        "returns": {
          "_isClaimed": "Return `true` if prize has been claimed and `false` otherwise"
        }
      },
      "isMintOpen()": {
        "returns": {
          "_isMintOpen": "Returns `true` if mint is open and `false` otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setMintStatus(bool)": {
        "details": "Can only be called by the Admin",
        "params": {
          "_isMintOpen": "Updated mint status"
        }
      },
      "setWinners(address[3],uint256[3])": {
        "details": "Can only be called by Admin",
        "params": {
          "_shares": "Percentage share of each winner in order",
          "_winners": "Address of winners"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "EurocupLegends",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimPrize(address,address)": {
        "notice": "Sends prize to {_recipient} based on amount of shirts owned in the winning {_country} Anyone can claim prize for another"
      },
      "getCountryPrize(address)": {
        "notice": "Gets the prize of {_country}"
      },
      "getCreators()": {
        "notice": "Gets the addresses and shares of the creators of Eurocup Legends"
      },
      "getPrize(address,address)": {
        "notice": "Gets the prize of {_user} for the winning {_country}"
      },
      "getWinners()": {
        "notice": "Gets the winners of the tournament in order - 1st place, Runner up and 3rd place"
      },
      "isClaimed(address,bytes32)": {
        "notice": "Determines if shirt has been used to claim prize"
      },
      "isMintOpen()": {
        "notice": "Gets the mint status"
      },
      "setMintStatus(bool)": {
        "notice": "Open or close mint"
      },
      "setWinners(address[3],uint256[3])": {
        "notice": "Set the winners of the tournament and the prize share for each in order - 1st place, Runner up, and 3rd place"
      }
    },
    "notice": "This contract serves as the prize pool for the European Cup Tournament stake Admin can close minting at any time Admin can set the winners of the tournament Users can claim their prize after winners have been set",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3746,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3926,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4859,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_creators",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Creator)5425_storage)dyn_storage"
      },
      {
        "astId": 4863,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_winners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)3_storage"
      },
      {
        "astId": 4866,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_isMintOpen",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4870,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_prizes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4876,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_isClaimed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 4880,
        "contract": "contracts/EurocupLegends.sol:EurocupLegends",
        "label": "s_totalClaimed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_struct(Creator)5425_storage)dyn_storage": {
        "base": "t_struct(Creator)5425_storage",
        "encoding": "dynamic_array",
        "label": "struct IEurocupLegends.Creator[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Creator)5425_storage": {
        "encoding": "inplace",
        "label": "struct IEurocupLegends.Creator",
        "members": [
          {
            "astId": 5422,
            "contract": "contracts/EurocupLegends.sol:EurocupLegends",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5424,
            "contract": "contracts/EurocupLegends.sol:EurocupLegends",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}