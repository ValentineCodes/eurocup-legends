/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IEurocupLegends {
  export type CreatorStruct = { creator: AddressLike; share: BigNumberish };

  export type CreatorStructOutput = [creator: string, share: bigint] & {
    creator: string;
    share: bigint;
  };
}

export interface EurocupLegendsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_PERCENTAGE"
      | "MAX_WINNERS"
      | "SHARE_PRECISION"
      | "claimPrize"
      | "getCreators"
      | "getPrize"
      | "getTicketPrize"
      | "getWinners"
      | "isClaimed"
      | "owner"
      | "renounceOwnership"
      | "setWinners"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PrizeClaimed"
      | "WinnersSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WINNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHARE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketPrize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWinners",
    values: [
      [AddressLike, AddressLike, AddressLike],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WINNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHARE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWinners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [owner: AddressLike, prize: BigNumberish];
  export type OutputTuple = [owner: string, prize: bigint];
  export interface OutputObject {
    owner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersSetEvent {
  export type InputTuple = [winners: [AddressLike, AddressLike, AddressLike]];
  export type OutputTuple = [winners: [string, string, string]];
  export interface OutputObject {
    winners: [string, string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EurocupLegends extends BaseContract {
  connect(runner?: ContractRunner | null): EurocupLegends;
  waitForDeployment(): Promise<this>;

  interface: EurocupLegendsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  MAX_WINNERS: TypedContractMethod<[], [bigint], "view">;

  SHARE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  claimPrize: TypedContractMethod<[_ticket: AddressLike], [void], "nonpayable">;

  getCreators: TypedContractMethod<
    [],
    [IEurocupLegends.CreatorStructOutput[]],
    "view"
  >;

  getPrize: TypedContractMethod<
    [_user: AddressLike, _ticket: AddressLike],
    [bigint],
    "view"
  >;

  getTicketPrize: TypedContractMethod<[_ticket: AddressLike], [bigint], "view">;

  getWinners: TypedContractMethod<[], [[string, string, string]], "view">;

  isClaimed: TypedContractMethod<
    [_user: AddressLike, _ticket: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setWinners: TypedContractMethod<
    [
      _winners: [AddressLike, AddressLike, AddressLike],
      _share: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_WINNERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SHARE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[_ticket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCreators"
  ): TypedContractMethod<[], [IEurocupLegends.CreatorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPrize"
  ): TypedContractMethod<
    [_user: AddressLike, _ticket: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketPrize"
  ): TypedContractMethod<[_ticket: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<[], [[string, string, string]], "view">;
  getFunction(
    nameOrSignature: "isClaimed"
  ): TypedContractMethod<
    [_user: AddressLike, _ticket: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWinners"
  ): TypedContractMethod<
    [
      _winners: [AddressLike, AddressLike, AddressLike],
      _share: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersSet"
  ): TypedContractEvent<
    WinnersSetEvent.InputTuple,
    WinnersSetEvent.OutputTuple,
    WinnersSetEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrizeClaimed(address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;

    "WinnersSet(address[3])": TypedContractEvent<
      WinnersSetEvent.InputTuple,
      WinnersSetEvent.OutputTuple,
      WinnersSetEvent.OutputObject
    >;
    WinnersSet: TypedContractEvent<
      WinnersSetEvent.InputTuple,
      WinnersSetEvent.OutputTuple,
      WinnersSetEvent.OutputObject
    >;
  };
}
