/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IECLInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "MintStatus" | "PrizeClaimed" | "WinnersSet"
  ): EventFragment;
}

export namespace MintStatusEvent {
  export type InputTuple = [isMintOpen: boolean];
  export type OutputTuple = [isMintOpen: boolean];
  export interface OutputObject {
    isMintOpen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [owner: AddressLike, prize: BigNumberish];
  export type OutputTuple = [owner: string, prize: bigint];
  export interface OutputObject {
    owner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersSetEvent {
  export type InputTuple = [winners: [AddressLike, AddressLike, AddressLike]];
  export type OutputTuple = [winners: [string, string, string]];
  export interface OutputObject {
    winners: [string, string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IECL extends BaseContract {
  connect(runner?: ContractRunner | null): IECL;
  waitForDeployment(): Promise<this>;

  interface: IECLInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "MintStatus"
  ): TypedContractEvent<
    MintStatusEvent.InputTuple,
    MintStatusEvent.OutputTuple,
    MintStatusEvent.OutputObject
  >;
  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersSet"
  ): TypedContractEvent<
    WinnersSetEvent.InputTuple,
    WinnersSetEvent.OutputTuple,
    WinnersSetEvent.OutputObject
  >;

  filters: {
    "MintStatus(bool)": TypedContractEvent<
      MintStatusEvent.InputTuple,
      MintStatusEvent.OutputTuple,
      MintStatusEvent.OutputObject
    >;
    MintStatus: TypedContractEvent<
      MintStatusEvent.InputTuple,
      MintStatusEvent.OutputTuple,
      MintStatusEvent.OutputObject
    >;

    "PrizeClaimed(address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;

    "WinnersSet(address[3])": TypedContractEvent<
      WinnersSetEvent.InputTuple,
      WinnersSetEvent.OutputTuple,
      WinnersSetEvent.OutputObject
    >;
    WinnersSet: TypedContractEvent<
      WinnersSetEvent.InputTuple,
      WinnersSetEvent.OutputTuple,
      WinnersSetEvent.OutputObject
    >;
  };
}
