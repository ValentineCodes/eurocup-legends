/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  UPMock,
  UPMockInterface,
} from "../../../../contracts/mocks/UPMock.sol/UPMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "typeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "receivedData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "returnedValue",
        type: "bytes",
      },
    ],
    name: "UniversalReceiver",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shirts",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "tokenId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "force",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "typeId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "universalReceiver",
    outputs: [
      {
        internalType: "bytes",
        name: "returnValue",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105a8806100206000396000f3fe6080604052600436106100565760003560e01c806301ffc9a71461005f57806312065fe0146100945780631626ba7e146100af5780636bb56a14146100f2578063876e93fe14610112578063b60d42881461005d57005b3661005d57005b005b34801561006b57600080fd5b5061007f61007a366004610267565b610132565b60405190151581526020015b60405180910390f35b3480156100a057600080fd5b5060405147815260200161008b565b3480156100bb57600080fd5b506100d96100ca366004610298565b630b135d3f60e11b9392505050565b6040516001600160e01b0319909116815260200161008b565b6101056101003660046103b7565b610184565b60405161008b9190610444565b34801561011e57600080fd5b5061005d61012d366004610473565b6101f9565b60006001600160e01b03198216631aed5a8560e21b148061016357506001600160e01b031982166324871b3d60e01b145b8061017e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60608234336001600160a01b03167f9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2856040516101c19190610502565b60405180910390a4506040805180820190915260128152717468616e6b7320666f722063616c6c696e6760701b602082015292915050565b60405163288db4a960e11b81526001600160a01b0387169063511b69529061022d908890889088908890889060040161052c565b600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b50505050505050505050565b60006020828403121561027957600080fd5b81356001600160e01b03198116811461029157600080fd5b9392505050565b6000806000604084860312156102ad57600080fd5b83359250602084013567ffffffffffffffff808211156102cc57600080fd5b818601915086601f8301126102e057600080fd5b8135818111156102ef57600080fd5b87602082850101111561030157600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261033b57600080fd5b813567ffffffffffffffff8082111561035657610356610314565b604051601f8301601f19908116603f0116810190828211818310171561037e5761037e610314565b8160405283815286602085880101111561039757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156103ca57600080fd5b82359150602083013567ffffffffffffffff8111156103e857600080fd5b6103f48582860161032a565b9150509250929050565b6000815180845260005b8181101561042457602081850181015186830182015201610408565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061029160208301846103fe565b80356001600160a01b038116811461046e57600080fd5b919050565b60008060008060008060c0878903121561048c57600080fd5b61049587610457565b95506104a360208801610457565b94506104b160408801610457565b935060608701359250608087013580151581146104cd57600080fd5b915060a087013567ffffffffffffffff8111156104e957600080fd5b6104f589828a0161032a565b9150509295509295509295565b60408152600061051560408301846103fe565b828103602093840152600081529190910192915050565b6001600160a01b0386811682528516602082015260408101849052821515606082015260a060808201819052600090610567908301846103fe565b97965050505050505056fea2646970667358221220291c03cc9f60eae53a96d69d7132f0acc4c5b22c7ca4d7e846f38ae22c4c502d64736f6c63430008140033";

type UPMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UPMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UPMock__factory extends ContractFactory {
  constructor(...args: UPMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UPMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UPMock__factory {
    return super.connect(runner) as UPMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UPMockInterface {
    return new Interface(_abi) as UPMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UPMock {
    return new Contract(address, _abi, runner) as unknown as UPMock;
  }
}
