{"id":"b557eabb286635ff4b1a4f7d5933e5fa","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"content":"// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n     * @param dataKey The data key for which to retrieve the value.\n     * @return dataValue The bytes value stored under the specified data key.\n     */\n    function getData(\n        bytes32 dataKey\n    ) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n     *\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\n     * a fee mechanism for setting specific data.\n     *\n     * @param dataKey The data key for which to set a new value.\n     * @param dataValue The new bytes value to set.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\n\n    /**\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n     *\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n     *\n     * @param dataKeys An array of data keys to set bytes values for.\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external payable;\n}\n"},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\";\n"},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\n */\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\n     * @param operator The address of operator that sent the `tokenId`\n     * @param from The previous owner of the `tokenId`\n     * @param to The new owner of `tokenId`\n     * @param tokenId The tokenId that was transferred\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\n     */\n    event Transfer(\n        address operator,\n        address indexed from,\n        address indexed to,\n        bytes32 indexed tokenId,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\n     * @param operator The address authorized as an operator.\n     * @param tokenOwner The owner of the `tokenId`.\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorAuthorizationChanged(\n        address indexed operator,\n        address indexed tokenOwner,\n        bytes32 indexed tokenId,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\n     * @param tokenOwner The owner of the `tokenId`.\n     * @param tokenId The tokenId `operator` is revoked from operating on.\n     * @param notified Bool indicating whether the operator has been notified or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorRevoked(\n        address indexed operator,\n        address indexed tokenOwner,\n        bytes32 indexed tokenId,\n        bool notified,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when setting data for `tokenId`.\n     * @param tokenId The tokenId which data is set for.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event TokenIdDataChanged(\n        bytes32 indexed tokenId,\n        bytes32 indexed dataKey,\n        bytes dataValue\n    );\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of existing tokens that have been minted in this contract.\n     * @return The number of existing tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Get the number of token IDs owned by `tokenOwner`.\n\n     * @param tokenOwner The address to query     *\n     * @return The total number of token IDs that `tokenOwner` owns.\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    /**\n     * @dev Returns the address that owns a given `tokenId`.\n     *\n     * @param tokenId The token ID to query the owner for.\n     * @return The owner address of the given `tokenId`.\n     *\n     * @custom:requirements `tokenId` must exist.\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\n     */\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\n\n    /**\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\n     * @param tokenOwner The address that we want to get the list of token IDs for.\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\n     */\n    function tokenIdsOf(\n        address tokenOwner\n    ) external view returns (bytes32[] memory);\n\n    // --- TokenId Metadata functionality\n\n    /**\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to retrieve.\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\n     */\n    function getDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey\n    ) external returns (bytes memory dataValues);\n\n    /**\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\n     * @param tokenIds An array of token IDs.\n     * @param dataKeys An array of data keys corresponding to the token IDs.\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\n     */\n    function getDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys\n    ) external returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to set.\n     * @param dataValue The value to set for the given data key.\n     * @custom:events {TokenIdDataChanged} event.\n     */\n    function setDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) external;\n\n    /**\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\n     * @param tokenIds An array of token IDs.\n     * @param dataKeys An array of data keys corresponding to the token IDs.\n     * @param dataValues An array of values to set for the given data keys.\n     * @custom:events {TokenIdDataChanged} event for each pair.\n     */\n    function setDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external;\n\n    // --- Operator functionality\n\n    /**\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The address to authorize as an operator.\n     * @param tokenId The token ID operator has access to.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} event.\n     */\n    function authorizeOperator(\n        address operator,\n        bytes32 tokenId,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\n     * See also {isOperatorFor}.\n     *\n     * @param operator The address to revoke as an operator.\n     * @param tokenId The tokenId `operator` is revoked from operating on.\n     * @param notify Boolean indicating whether to notify the operator or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller must be the {tokenOwnerOf} `tokenId`.\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\n     */\n    function revokeOperator(\n        address operator,\n        bytes32 tokenId,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\n     *\n     * @param operator The address to query operator status for.\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\n     *\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\n     *\n     * @custom:info The tokenOwner is its own operator.\n     */\n    function isOperatorFor(\n        address operator,\n        bytes32 tokenId\n    ) external view returns (bool);\n\n    /**\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\n     *\n     * @param tokenId The token ID to get the operators for.\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\n     *\n     * Requirements\n     * - `tokenId` must exist.\n     */\n    function getOperatorsOf(\n        bytes32 tokenId\n    ) external view returns (address[] memory);\n\n    // --- Transfer functionality\n\n    /**\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\n     *\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\n     *\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 standard.\n     *\n     * @param from The address that owns the given `tokenId`.\n     * @param to The address that will receive the `tokenId`.\n     * @param tokenId The token ID to transfer.\n     * @param force When set to `true`, the `to` address CAN be any addres.\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\n     * - `from` must own the given `tokenId`.\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\n     *\n     * @custom:events\n     * - {Transfer} event when the `tokenId` is successfully transferred.\n     *\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n     *\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n     *\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n     * This even if the `force` was set to `true`.\n     */\n    function transfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\n     * If any transfer fails, the whole call will revert.\n     *\n     * @param from An array of sending addresses.\n     * @param to An array of recipient addresses.\n     * @param tokenId An array of token IDs to transfer.\n     * @param force When set to `true`, `to` may be any address.\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\n     *\n     *\n     * @custom:requirements\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\n     * - no values in the `from` array can be the zero address.\n     * - no values in the `to` array can be the zero address.\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\n     * - each `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\n     *\n     * @custom:events\n     * - {Transfer} events on each successful token transfer.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        bytes32[] memory tokenId,\n        bool[] memory force,\n        bytes[] memory data\n    ) external;\n\n    /**\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n     *\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n     * @param data An array of ABI encoded function calls to be called on the contract.\n     * @return results An array of abi-encoded data returned by the functions executed.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/EurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IEurocupLegends} from \"./interfaces/IEurocupLegends.sol\";\nimport {IShirts} from \"./interfaces/IShirts.sol\";\nimport \"./utils/Errors.sol\";\n\ncontract EurocupLegends is IEurocupLegends, Ownable, ReentrancyGuard {\n    uint256 public constant FEE_PERCENTAGE = 25;\n    uint256 public constant SHARE_PRECISION = 100;\n    uint256 public constant MAX_WINNERS = 3;\n\n    Creator[] private s_creators;\n    address[3] private s_winners;\n\n    bool private s_isMintOpen = true;\n\n    mapping(address country => uint256 prize) private s_prizes;\n    mapping(address country => mapping(bytes32 tokenId => bool isClaimed)) private s_isClaimed;\n    mapping(address country => uint256 totalClaimed) private s_totalClaimed;\n\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\n        for(uint256 i; i < _creators.length; i++) {\n            s_creators.push(_creators[i]);\n        }\n    }\n\n    modifier ifMintOpen() {\n        if(!s_isMintOpen) revert MintClosed();\n        _;\n    }\n\n    function setMintStatus(bool _isMintOpen) external onlyOwner {\n        s_isMintOpen = _isMintOpen;\n        emit MintStatus(_isMintOpen);\n    }\n\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _shares) external onlyOwner {\n        if(s_isMintOpen) {\n            s_isMintOpen = false;\n        }\n        for(uint256 i; i < MAX_WINNERS; i++) {\n            address winner = _winners[i];\n            uint256 prize = (address(this).balance * _shares[i]) / SHARE_PRECISION;\n\n            s_winners[i] = winner;\n            s_prizes[winner] = prize;\n        }\n\n        emit WinnersSet(_winners);\n    }\n\n    function claimPrize(address _recipient, address _country) external nonReentrant {\n        if(s_winners.length != MAX_WINNERS) revert NoWinnersYet();\n        if(_country == address(0)) revert ZeroAddress();\n\n        uint256 countryPrize = s_prizes[_country];\n        if(countryPrize == 0) revert NoPrizeForThisCountry();\n\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_recipient);\n        uint256 userTokenIdsLength = userTokenIds.length;\n\n        if(userTokenIdsLength == 0) revert NoShirts();\n        \n        uint256 unclaimedShirts;\n\n        // filter claimed tokens\n        for(uint256 i; i < userTokenIdsLength; i++) {\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\n                s_isClaimed[_country][userTokenIds[i]] = true;\n                unclaimedShirts++;\n            }\n        }\n\n        if(unclaimedShirts == 0) revert AlreadyClaimedPrize();\n\n        uint256 totalClaimed = s_totalClaimed[_country];\n\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - totalClaimed;\n\n        uint256 prize = (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\n\n        s_prizes[_country] = countryPrize - prize;\n        s_totalClaimed[_country] = totalClaimed + unclaimedShirts;\n\n        (bool success, ) = _recipient.call{value: prize}('');\n        if(!success) revert TransferFailed();\n\n        emit PrizeClaimed(_recipient, prize);\n    }\n\n    function getPrize(address _user, address _country) external view returns (uint256) {\n        uint256 countryPrize = s_prizes[_country];\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - s_totalClaimed[_country];\n\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_user);\n        uint256 userTokenIdsLength = userTokenIds.length;\n\n        if(userTokenIdsLength == 0) revert NoShirts();\n        \n        uint256 unclaimedShirts;\n\n        // filter claimed tokens\n        for(uint256 i; i < userTokenIdsLength; i++) {\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\n                unclaimedShirts++;\n            }\n        }\n\n        return (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\n    }\n\n    function isMintOpen() external view returns (bool) {\n        return s_isMintOpen;\n    }\n\n    function isClaimed(address _country, bytes32 _tokenId) external view returns (bool) {\n        return s_isClaimed[_country][_tokenId];\n    }\n\n    function getCreators() external view returns (Creator[] memory) {\n        return s_creators;\n    }\n\n    function getWinners() external view returns (address[3] memory) {\n        return s_winners;\n    }\n\n    function getCountryPrize(address _country) public view returns (uint256) {\n        return s_prizes[_country];\n    }\n\n    function _handleDeposit(uint256 _amount) private ifMintOpen {\n        // 25% of deposits\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\n\n        uint256 creatorsLength = s_creators.length;\n\n        // transfer fee to creators\n        for(uint256 i; i < creatorsLength; i++) {\n            Creator memory creator = s_creators[i];\n\n            uint256 creatorShare = (fees * creator.share) / SHARE_PRECISION;\n\n            (bool success,) = creator.creator.call{value: creatorShare}(\"\");\n            if(!success) revert FeeTransferFailed(creator.creator, creatorShare);\n        }\n    }\n\n    receive() external payable {\n        _handleDeposit(msg.value);\n    }\n\n    fallback() external payable {\n        _handleDeposit(msg.value);\n    }\n}"},"contracts/interfaces/IEurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IEurocupLegends {\n    struct Creator {\n        address creator;\n        uint256 share;\n    }\n\n    event WinnersSet(address[3] winners);\n    event PrizeClaimed(address owner, uint256 prize);\n    event MintStatus(bool isMintOpen);\n}"},"contracts/interfaces/IShirts.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\";\ninterface IShirts is ILSP8 {\n    event ShirtsMinted(address _recipient, uint256 _amount);\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable;\n    \n    function getPrizePool() external view returns (address prizePool);\n\n    function getPrice() external view returns (uint256 price);\n}"},"contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nerror MintLimitExceeded();\n\nerror InvalidMintPrice();\n\nerror NoPrizeForThisCountry();\n\nerror AlreadyClaimedPrize();\n\nerror NoShirts();\n\nerror ZeroAddress();\n\nerror ZeroAmount();\n\nerror TransferFailed();\n\nerror FeeTransferFailed(address _creators, uint256 _amount);\n\nerror NoWinnersYet();\n\nerror MintClosed();"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","exportedSymbols":{"IERC165":[533],"IERC725Y":[50]},"id":51,"license":"CC0-1.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"36:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":51,"sourceUnit":534,"src":"75:80:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"83:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IERC165","nameLocations":["502:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":533,"src":"502:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"502:7:0"}],"canonicalName":"IERC725Y","contractDependencies":[],"contractKind":"interface","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"157:322:0","text":" @title The interface for ERC725Y sub-standard, a generic data key/value store.\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":false,"id":50,"linearizedBaseContracts":[50,533],"name":"IERC725Y","nameLocation":"490:8:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"516:373:0","text":" @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"ece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2","id":13,"name":"DataChanged","nameLocation":"900:11:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"928:7:0","nodeType":"VariableDeclaration","scope":13,"src":"912:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"943:9:0","nodeType":"VariableDeclaration","scope":13,"src":"937:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":10,"name":"bytes","nodeType":"ElementaryTypeName","src":"937:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:42:0"},"src":"894:60:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"960:361:0","text":" @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n @param dataKey The data key for which to retrieve the value.\n @return dataValue The bytes value stored under the specified data key."},"functionSelector":"54f6127f","id":21,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1335:7:0","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"dataKey","nameLocation":"1360:7:0","nodeType":"VariableDeclaration","scope":21,"src":"1352:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":15,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1352:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1342:31:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"dataValue","nameLocation":"1410:9:0","nodeType":"VariableDeclaration","scope":21,"src":"1397:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":18,"name":"bytes","nodeType":"ElementaryTypeName","src":"1397:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1396:24:0"},"scope":50,"src":"1326:95:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"1427:353:0","text":" @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n @param dataKeys The array of keys which values to retrieve\n @return dataValues The array of data stored at multiple keys"},"functionSelector":"dedff9c6","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1794:12:0","nodeType":"FunctionDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"dataKeys","nameLocation":"1833:8:0","nodeType":"VariableDeclaration","scope":31,"src":"1816:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1816:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":24,"nodeType":"ArrayTypeName","src":"1816:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1806:41:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"dataValues","nameLocation":"1886:10:0","nodeType":"VariableDeclaration","scope":31,"src":"1871:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":27,"name":"bytes","nodeType":"ElementaryTypeName","src":"1871:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":28,"nodeType":"ArrayTypeName","src":"1871:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1870:27:0"},"scope":50,"src":"1785:113:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1904:536:0","text":" @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n The function is marked as payable to enable flexibility on child contracts. For instance to implement\n a fee mechanism for setting specific data.\n @param dataKey The data key for which to set a new value.\n @param dataValue The new bytes value to set."},"functionSelector":"7f23690c","id":39,"implemented":false,"kind":"function","modifiers":[],"name":"setData","nameLocation":"2454:7:0","nodeType":"FunctionDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"dataKey","nameLocation":"2470:7:0","nodeType":"VariableDeclaration","scope":39,"src":"2462:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":33,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2462:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"dataValue","nameLocation":"2492:9:0","nodeType":"VariableDeclaration","scope":39,"src":"2479:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":35,"name":"bytes","nodeType":"ElementaryTypeName","src":"2479:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2461:41:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"2519:0:0"},"scope":50,"src":"2445:75:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"2526:478:0","text":" @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n @param dataKeys An array of data keys to set bytes values for.\n @param dataValues An array of bytes values to set for each `dataKeys`."},"functionSelector":"97902421","id":49,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatch","nameLocation":"3018:12:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"dataKeys","nameLocation":"3057:8:0","nodeType":"VariableDeclaration","scope":49,"src":"3040:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":41,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3040:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":42,"nodeType":"ArrayTypeName","src":"3040:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"dataValues","nameLocation":"3090:10:0","nodeType":"VariableDeclaration","scope":49,"src":"3075:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":44,"name":"bytes","nodeType":"ElementaryTypeName","src":"3075:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":45,"nodeType":"ArrayTypeName","src":"3075:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3030:76:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"3123:0:0"},"scope":50,"src":"3009:115:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":51,"src":"480:2646:0","usedErrors":[],"usedEvents":[13]}],"src":"36:3091:0"},"id":0},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"IERC165":[533],"IERC725Y":[50],"ILSP8IdentifiableDigitalAsset":[274]},"id":54,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":52,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:1"},{"absolutePath":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","id":53,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":54,"sourceUnit":275,"src":"64:75:1","symbolAliases":[],"unitAlias":""}],"src":"39:101:1"},"id":1},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"IERC165":[533],"IERC725Y":[50],"ILSP8IdentifiableDigitalAsset":[274]},"id":275,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":55,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":57,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":275,"sourceUnit":534,"src":"78:80:2","symbolAliases":[{"foreign":{"id":56,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"86:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":275,"sourceUnit":51,"src":"159:89:2","symbolAliases":[{"foreign":{"id":58,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"172:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":61,"name":"IERC165","nameLocations":["402:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":533,"src":"402:7:2"},"id":62,"nodeType":"InheritanceSpecifier","src":"402:7:2"},{"baseName":{"id":63,"name":"IERC725Y","nameLocations":["411:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":50,"src":"411:8:2"},"id":64,"nodeType":"InheritanceSpecifier","src":"411:8:2"}],"canonicalName":"ILSP8IdentifiableDigitalAsset","contractDependencies":[],"contractKind":"interface","documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"250:108:2","text":" @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset."},"fullyImplemented":false,"id":274,"linearizedBaseContracts":[274,50,533],"name":"ILSP8IdentifiableDigitalAsset","nameLocation":"369:29:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":65,"nodeType":"StructuredDocumentation","src":"445:616:2","text":" @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\n @param operator The address of operator that sent the `tokenId`\n @param from The previous owner of the `tokenId`\n @param to The new owner of `tokenId`\n @param tokenId The tokenId that was transferred\n @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\n @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses."},"eventSelector":"b333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf","id":79,"name":"Transfer","nameLocation":"1072:8:2","nodeType":"EventDefinition","parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1098:8:2","nodeType":"VariableDeclaration","scope":79,"src":"1090:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"1090:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":69,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1132:4:2","nodeType":"VariableDeclaration","scope":79,"src":"1116:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"1116:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":71,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1162:2:2","nodeType":"VariableDeclaration","scope":79,"src":"1146:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":73,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1190:7:2","nodeType":"VariableDeclaration","scope":79,"src":"1174:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"indexed":false,"mutability":"mutable","name":"force","nameLocation":"1212:5:2","nodeType":"VariableDeclaration","scope":79,"src":"1207:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":74,"name":"bool","nodeType":"ElementaryTypeName","src":"1207:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":77,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1233:4:2","nodeType":"VariableDeclaration","scope":79,"src":"1227:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":76,"name":"bytes","nodeType":"ElementaryTypeName","src":"1227:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1080:163:2"},"src":"1066:178:2"},{"anonymous":false,"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"1250:396:2","text":" @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\n @param operator The address authorized as an operator.\n @param tokenOwner The owner of the `tokenId`.\n @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215","id":90,"name":"OperatorAuthorizationChanged","nameLocation":"1657:28:2","nodeType":"EventDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1711:8:2","nodeType":"VariableDeclaration","scope":90,"src":"1695:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"1695:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":84,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"1745:10:2","nodeType":"VariableDeclaration","scope":90,"src":"1729:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"1729:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":86,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1781:7:2","nodeType":"VariableDeclaration","scope":90,"src":"1765:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":88,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"1804:24:2","nodeType":"VariableDeclaration","scope":90,"src":"1798:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":87,"name":"bytes","nodeType":"ElementaryTypeName","src":"1798:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1685:149:2"},"src":"1651:184:2"},{"anonymous":false,"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"1841:501:2","text":" @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\n @param operator The address revoked from the operator array ({getOperatorsOf}).\n @param tokenOwner The owner of the `tokenId`.\n @param tokenId The tokenId `operator` is revoked from operating on.\n @param notified Bool indicating whether the operator has been notified or not\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c","id":103,"name":"OperatorRevoked","nameLocation":"2353:15:2","nodeType":"EventDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2394:8:2","nodeType":"VariableDeclaration","scope":103,"src":"2378:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":95,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"2428:10:2","nodeType":"VariableDeclaration","scope":103,"src":"2412:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"2412:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":97,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"2464:7:2","nodeType":"VariableDeclaration","scope":103,"src":"2448:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2448:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":99,"indexed":false,"mutability":"mutable","name":"notified","nameLocation":"2486:8:2","nodeType":"VariableDeclaration","scope":103,"src":"2481:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":98,"name":"bool","nodeType":"ElementaryTypeName","src":"2481:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":101,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"2510:24:2","nodeType":"VariableDeclaration","scope":103,"src":"2504:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":100,"name":"bytes","nodeType":"ElementaryTypeName","src":"2504:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2368:172:2"},"src":"2347:194:2"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"2547:253:2","text":" @dev Emitted when setting data for `tokenId`.\n @param tokenId The tokenId which data is set for.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"a6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb","id":112,"name":"TokenIdDataChanged","nameLocation":"2811:18:2","nodeType":"EventDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"2855:7:2","nodeType":"VariableDeclaration","scope":112,"src":"2839:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2839:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"2888:7:2","nodeType":"VariableDeclaration","scope":112,"src":"2872:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2872:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":110,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"2911:9:2","nodeType":"VariableDeclaration","scope":112,"src":"2905:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":109,"name":"bytes","nodeType":"ElementaryTypeName","src":"2905:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2829:97:2"},"src":"2805:122:2"},{"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"2959:147:2","text":" @dev Returns the number of existing tokens that have been minted in this contract.\n @return The number of existing tokens."},"functionSelector":"18160ddd","id":118,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3120:11:2","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3131:2:2"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":118,"src":"3157:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"3157:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3156:9:2"},"scope":274,"src":"3111:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"3204:196:2","text":" @dev Get the number of token IDs owned by `tokenOwner`.\n @param tokenOwner The address to query     *\n @return The total number of token IDs that `tokenOwner` owns."},"functionSelector":"70a08231","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3414:9:2","nodeType":"FunctionDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"tokenOwner","nameLocation":"3432:10:2","nodeType":"VariableDeclaration","scope":126,"src":"3424:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"3424:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3423:20:2"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"3467:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"3467:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3466:9:2"},"scope":274,"src":"3405:71:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3482:360:2","text":" @dev Returns the address that owns a given `tokenId`.\n @param tokenId The token ID to query the owner for.\n @return The owner address of the given `tokenId`.\n @custom:requirements `tokenId` must exist.\n @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`"},"functionSelector":"217b2270","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOwnerOf","nameLocation":"3856:12:2","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"tokenId","nameLocation":"3877:7:2","nodeType":"VariableDeclaration","scope":134,"src":"3869:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3869:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3868:17:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":134,"src":"3909:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"3909:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3908:9:2"},"scope":274,"src":"3847:71:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"3924:244:2","text":" @dev Returns the list of token IDs that the `tokenOwner` address owns.\n @param tokenOwner The address that we want to get the list of token IDs for.\n @return An array of `bytes32[] tokenIds` owned by `tokenOwner`."},"functionSelector":"a3b261f2","id":143,"implemented":false,"kind":"function","modifiers":[],"name":"tokenIdsOf","nameLocation":"4182:10:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"tokenOwner","nameLocation":"4210:10:2","nodeType":"VariableDeclaration","scope":143,"src":"4202:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"4202:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4192:34:2"},"returnParameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":143,"src":"4250:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4250:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":140,"nodeType":"ArrayTypeName","src":"4250:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4249:18:2"},"scope":274,"src":"4173:95:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"4317:286:2","text":" @notice Retrieves data for a specific `tokenId` and `dataKey`.\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to retrieve.\n @return dataValues The data value associated with the given `tokenId` and `dataKey`."},"functionSelector":"16e023b3","id":153,"implemented":false,"kind":"function","modifiers":[],"name":"getDataForTokenId","nameLocation":"4617:17:2","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"tokenId","nameLocation":"4652:7:2","nodeType":"VariableDeclaration","scope":153,"src":"4644:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"dataKey","nameLocation":"4677:7:2","nodeType":"VariableDeclaration","scope":153,"src":"4669:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4634:56:2"},"returnParameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"dataValues","nameLocation":"4722:10:2","nodeType":"VariableDeclaration","scope":153,"src":"4709:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":150,"name":"bytes","nodeType":"ElementaryTypeName","src":"4709:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4708:25:2"},"scope":274,"src":"4608:126:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"4740:309:2","text":" @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\n @param tokenIds An array of token IDs.\n @param dataKeys An array of data keys corresponding to the token IDs.\n @return dataValues An array of data values for each pair of `tokenId` and `dataKey`."},"functionSelector":"1d26fce6","id":166,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatchForTokenIds","nameLocation":"5063:23:2","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"tokenIds","nameLocation":"5113:8:2","nodeType":"VariableDeclaration","scope":166,"src":"5096:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5096:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":156,"nodeType":"ArrayTypeName","src":"5096:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"dataKeys","nameLocation":"5148:8:2","nodeType":"VariableDeclaration","scope":166,"src":"5131:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5131:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":159,"nodeType":"ArrayTypeName","src":"5131:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5086:76:2"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"dataValues","nameLocation":"5196:10:2","nodeType":"VariableDeclaration","scope":166,"src":"5181:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":162,"name":"bytes","nodeType":"ElementaryTypeName","src":"5181:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":163,"nodeType":"ArrayTypeName","src":"5181:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5180:27:2"},"scope":274,"src":"5054:154:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"5214:299:2","text":" @notice Sets data for a specific `tokenId` and `dataKey`.\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to set.\n @param dataValue The value to set for the given data key.\n @custom:events {TokenIdDataChanged} event."},"functionSelector":"d6c1407c","id":176,"implemented":false,"kind":"function","modifiers":[],"name":"setDataForTokenId","nameLocation":"5527:17:2","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"tokenId","nameLocation":"5562:7:2","nodeType":"VariableDeclaration","scope":176,"src":"5554:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5554:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"dataKey","nameLocation":"5587:7:2","nodeType":"VariableDeclaration","scope":176,"src":"5579:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5579:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":173,"mutability":"mutable","name":"dataValue","nameLocation":"5617:9:2","nodeType":"VariableDeclaration","scope":176,"src":"5604:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":172,"name":"bytes","nodeType":"ElementaryTypeName","src":"5604:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5544:88:2"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"5641:0:2"},"scope":274,"src":"5518:124:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"5648:352:2","text":" @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\n @param tokenIds An array of token IDs.\n @param dataKeys An array of data keys corresponding to the token IDs.\n @param dataValues An array of values to set for the given data keys.\n @custom:events {TokenIdDataChanged} event for each pair."},"functionSelector":"be9f0e6f","id":189,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatchForTokenIds","nameLocation":"6014:23:2","nodeType":"FunctionDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"tokenIds","nameLocation":"6064:8:2","nodeType":"VariableDeclaration","scope":189,"src":"6047:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6047:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":179,"nodeType":"ArrayTypeName","src":"6047:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":183,"mutability":"mutable","name":"dataKeys","nameLocation":"6099:8:2","nodeType":"VariableDeclaration","scope":189,"src":"6082:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6082:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":182,"nodeType":"ArrayTypeName","src":"6082:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"dataValues","nameLocation":"6132:10:2","nodeType":"VariableDeclaration","scope":189,"src":"6117:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":184,"name":"bytes","nodeType":"ElementaryTypeName","src":"6117:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":185,"nodeType":"ArrayTypeName","src":"6117:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6037:111:2"},"returnParameters":{"id":188,"nodeType":"ParameterList","parameters":[],"src":"6157:0:2"},"scope":274,"src":"6005:153:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"6199:782:2","text":" @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The address to authorize as an operator.\n @param tokenId The token ID operator has access to.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `tokenId` must exist.\n - caller MUST be the {tokenOwnerOf} `tokenId`.\n - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\n - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} event."},"functionSelector":"86a10ddd","id":199,"implemented":false,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"6995:17:2","nodeType":"FunctionDefinition","parameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"operator","nameLocation":"7030:8:2","nodeType":"VariableDeclaration","scope":199,"src":"7022:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"7022:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"tokenId","nameLocation":"7056:7:2","nodeType":"VariableDeclaration","scope":199,"src":"7048:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7048:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":196,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"7086:24:2","nodeType":"VariableDeclaration","scope":199,"src":"7073:37:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":195,"name":"bytes","nodeType":"ElementaryTypeName","src":"7073:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7012:104:2"},"returnParameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"7125:0:2"},"scope":274,"src":"6986:140:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"7132:893:2","text":" @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\n See also {isOperatorFor}.\n @param operator The address to revoke as an operator.\n @param tokenId The tokenId `operator` is revoked from operating on.\n @param notify Boolean indicating whether to notify the operator or not\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `tokenId` must exist.\n - caller must be the {tokenOwnerOf} `tokenId`.\n - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\n - `operator` cannot be the zero address.\n @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner).."},"functionSelector":"db8c9663","id":211,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"8039:14:2","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"operator","nameLocation":"8071:8:2","nodeType":"VariableDeclaration","scope":211,"src":"8063:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"8063:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"tokenId","nameLocation":"8097:7:2","nodeType":"VariableDeclaration","scope":211,"src":"8089:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8089:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"notify","nameLocation":"8119:6:2","nodeType":"VariableDeclaration","scope":211,"src":"8114:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":205,"name":"bool","nodeType":"ElementaryTypeName","src":"8114:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"8148:24:2","nodeType":"VariableDeclaration","scope":211,"src":"8135:37:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":207,"name":"bytes","nodeType":"ElementaryTypeName","src":"8135:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8053:125:2"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"8187:0:2"},"scope":274,"src":"8030:158:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"8194:535:2","text":" @dev Returns whether `operator` address is an operator for a given `tokenId`.\n @param operator The address to query operator status for.\n @param tokenId The token ID to check if `operator` is allowed to operate on.\n @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\n @custom:requirements\n - `tokenId` must exist.\n - caller must be the current {tokenOwnerOf} `tokenId`.\n @custom:info The tokenOwner is its own operator."},"functionSelector":"2a3654a4","id":221,"implemented":false,"kind":"function","modifiers":[],"name":"isOperatorFor","nameLocation":"8743:13:2","nodeType":"FunctionDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"operator","nameLocation":"8774:8:2","nodeType":"VariableDeclaration","scope":221,"src":"8766:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"8766:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"tokenId","nameLocation":"8800:7:2","nodeType":"VariableDeclaration","scope":221,"src":"8792:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8792:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8756:57:2"},"returnParameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":221,"src":"8837:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":218,"name":"bool","nodeType":"ElementaryTypeName","src":"8837:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8836:6:2"},"scope":274,"src":"8734:109:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"8849:351:2","text":" @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\n @param tokenId The token ID to get the operators for.\n @return An array of operators allowed to transfer or burn a specific `tokenId`.\n Requirements\n - `tokenId` must exist."},"functionSelector":"49a6078d","id":230,"implemented":false,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"9214:14:2","nodeType":"FunctionDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":224,"mutability":"mutable","name":"tokenId","nameLocation":"9246:7:2","nodeType":"VariableDeclaration","scope":230,"src":"9238:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9238:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9228:31:2"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"9283:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"9283:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":227,"nodeType":"ArrayTypeName","src":"9283:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9282:18:2"},"scope":274,"src":"9205:96:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"9342:2075:2","text":" @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\n If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\n The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 standard.\n @param from The address that owns the given `tokenId`.\n @param to The address that will receive the `tokenId`.\n @param tokenId The token ID to transfer.\n @param force When set to `true`, the `to` address CAN be any addres.\n When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n @custom:requirements\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\n - `from` must own the given `tokenId`.\n - If the caller is not `from`, it must be an operator for the `tokenId`.\n @custom:events\n - {Transfer} event when the `tokenId` is successfully transferred.\n @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n This even if the `force` was set to `true`."},"functionSelector":"511b6952","id":244,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"11431:8:2","nodeType":"FunctionDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"from","nameLocation":"11457:4:2","nodeType":"VariableDeclaration","scope":244,"src":"11449:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"11449:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"to","nameLocation":"11479:2:2","nodeType":"VariableDeclaration","scope":244,"src":"11471:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"11471:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"tokenId","nameLocation":"11499:7:2","nodeType":"VariableDeclaration","scope":244,"src":"11491:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11491:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"force","nameLocation":"11521:5:2","nodeType":"VariableDeclaration","scope":244,"src":"11516:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":238,"name":"bool","nodeType":"ElementaryTypeName","src":"11516:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"data","nameLocation":"11549:4:2","nodeType":"VariableDeclaration","scope":244,"src":"11536:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":240,"name":"bytes","nodeType":"ElementaryTypeName","src":"11536:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11439:120:2"},"returnParameters":{"id":243,"nodeType":"ParameterList","parameters":[],"src":"11568:0:2"},"scope":274,"src":"11422:147:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"11575:1189:2","text":" @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\n If any transfer fails, the whole call will revert.\n @param from An array of sending addresses.\n @param to An array of recipient addresses.\n @param tokenId An array of token IDs to transfer.\n @param force When set to `true`, `to` may be any address.\n When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\n @custom:requirements\n - The arrays of `from`, `to` and `tokenId` must have the same length.\n - no values in the `from` array can be the zero address.\n - no values in the `to` array can be the zero address.\n - `from` and `to` cannot be the same address at the same index on each arrays.\n - each `tokenId` must be owned by `from`.\n - If the caller is not `from`, it must be an operator of each `tokenId`.\n @custom:events\n - {Transfer} events on each successful token transfer."},"functionSelector":"7e87632c","id":263,"implemented":false,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"12778:13:2","nodeType":"FunctionDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"from","nameLocation":"12818:4:2","nodeType":"VariableDeclaration","scope":263,"src":"12801:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"12801:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":247,"nodeType":"ArrayTypeName","src":"12801:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"to","nameLocation":"12849:2:2","nodeType":"VariableDeclaration","scope":263,"src":"12832:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"12832:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":250,"nodeType":"ArrayTypeName","src":"12832:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"tokenId","nameLocation":"12878:7:2","nodeType":"VariableDeclaration","scope":263,"src":"12861:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12861:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":253,"nodeType":"ArrayTypeName","src":"12861:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"force","nameLocation":"12909:5:2","nodeType":"VariableDeclaration","scope":263,"src":"12895:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":255,"name":"bool","nodeType":"ElementaryTypeName","src":"12895:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":256,"nodeType":"ArrayTypeName","src":"12895:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"data","nameLocation":"12939:4:2","nodeType":"VariableDeclaration","scope":263,"src":"12924:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":258,"name":"bytes","nodeType":"ElementaryTypeName","src":"12924:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":259,"nodeType":"ArrayTypeName","src":"12924:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"12791:158:2"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"12958:0:2"},"scope":274,"src":"12769:190:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"12965:460:2","text":" @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n @param data An array of ABI encoded function calls to be called on the contract.\n @return results An array of abi-encoded data returned by the functions executed."},"functionSelector":"6963d438","id":273,"implemented":false,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"13439:10:2","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"data","nameLocation":"13476:4:2","nodeType":"VariableDeclaration","scope":273,"src":"13459:21:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":265,"name":"bytes","nodeType":"ElementaryTypeName","src":"13459:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":266,"nodeType":"ArrayTypeName","src":"13459:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13449:37:2"},"returnParameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"results","nameLocation":"13520:7:2","nodeType":"VariableDeclaration","scope":273,"src":"13505:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":269,"name":"bytes","nodeType":"ElementaryTypeName","src":"13505:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":270,"nodeType":"ArrayTypeName","src":"13505:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13504:24:2"},"scope":274,"src":"13430:99:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":275,"src":"359:13172:2","usedErrors":[],"usedEvents":[13,79,90,103,112]}],"src":"39:13493:2"},"id":2},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[452],"Ownable":[422]},"id":423,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":276,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":423,"sourceUnit":453,"src":"128:45:3","symbolAliases":[{"foreign":{"id":277,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"136:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":280,"name":"Context","nameLocations":["692:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"692:7:3"},"id":281,"nodeType":"InheritanceSpecifier","src":"692:7:3"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"175:487:3","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":422,"linearizedBaseContracts":[422,452],"name":"Ownable","nameLocation":"681:7:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":283,"mutability":"mutable","name":"_owner","nameLocation":"722:6:3","nodeType":"VariableDeclaration","scope":422,"src":"706:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"735:85:3","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":288,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:3","nodeType":"ErrorDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"account","nameLocation":"866:7:3","nodeType":"VariableDeclaration","scope":288,"src":"858:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":285,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:3"},"src":"825:50:3"},{"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"881:82:3","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":293,"name":"OwnableInvalidOwner","nameLocation":"974:19:3","nodeType":"ErrorDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"owner","nameLocation":"1002:5:3","nodeType":"VariableDeclaration","scope":293,"src":"994:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:3"},"src":"968:41:3"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":299,"name":"OwnershipTransferred","nameLocation":"1021:20:3","nodeType":"EventDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:3","nodeType":"VariableDeclaration","scope":299,"src":"1042:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":297,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:3","nodeType":"VariableDeclaration","scope":299,"src":"1073:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:3"},"src":"1015:84:3"},{"body":{"id":324,"nodeType":"Block","src":"1259:153:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":305,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"1273:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:3","typeDescriptions":{}}},"id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":319,"nodeType":"IfStatement","src":"1269:95:3","trueBody":{"id":318,"nodeType":"Block","src":"1301:63:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":312,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:3","typeDescriptions":{}}},"id":315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":311,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1322:19:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":317,"nodeType":"RevertStatement","src":"1315:38:3"}]}},{"expression":{"arguments":[{"id":321,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"1392:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"1373:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":323,"nodeType":"ExpressionStatement","src":"1373:32:3"}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"1105:115:3","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":325,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:3","nodeType":"VariableDeclaration","scope":325,"src":"1237:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:3"},"returnParameters":{"id":304,"nodeType":"ParameterList","parameters":[],"src":"1259:0:3"},"scope":422,"src":"1225:187:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":332,"nodeType":"Block","src":"1521:41:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":328,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"1531:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":330,"nodeType":"ExpressionStatement","src":"1531:13:3"},{"id":331,"nodeType":"PlaceholderStatement","src":"1554:1:3"}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"1418:77:3","text":" @dev Throws if called by any account other than the owner."},"id":333,"name":"onlyOwner","nameLocation":"1509:9:3","nodeType":"ModifierDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[],"src":"1518:2:3"},"src":"1500:62:3","virtual":false,"visibility":"internal"},{"body":{"id":341,"nodeType":"Block","src":"1693:30:3","statements":[{"expression":{"id":339,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"1710:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":338,"id":340,"nodeType":"Return","src":"1703:13:3"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"1568:65:3","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":342,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:3","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"1652:2:3"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":342,"src":"1684:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":336,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:3"},"scope":422,"src":"1638:85:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":358,"nodeType":"Block","src":"1841:117:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":346,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"1855:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":348,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"1866:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":357,"nodeType":"IfStatement","src":"1851:101:3","trueBody":{"id":356,"nodeType":"Block","src":"1880:72:3","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"1928:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":351,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"1901:26:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":355,"nodeType":"RevertStatement","src":"1894:47:3"}]}}]},"documentation":{"id":343,"nodeType":"StructuredDocumentation","src":"1729:62:3","text":" @dev Throws if the sender is not the owner."},"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:3","nodeType":"FunctionDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[],"src":"1816:2:3"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"1841:0:3"},"scope":422,"src":"1796:162:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":372,"nodeType":"Block","src":"2347:47:3","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:3","typeDescriptions":{}}},"id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":365,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"2357:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":371,"nodeType":"ExpressionStatement","src":"2357:30:3"}]},"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"1964:324:3","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":373,"implemented":true,"kind":"function","modifiers":[{"id":363,"kind":"modifierInvocation","modifierName":{"id":362,"name":"onlyOwner","nameLocations":["2337:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"2337:9:3"},"nodeType":"ModifierInvocation","src":"2337:9:3"}],"name":"renounceOwnership","nameLocation":"2302:17:3","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"2319:2:3"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[],"src":"2347:0:3"},"scope":422,"src":"2293:101:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":400,"nodeType":"Block","src":"2613:145:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":381,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2627:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:3","typeDescriptions":{}}},"id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":395,"nodeType":"IfStatement","src":"2623:91:3","trueBody":{"id":394,"nodeType":"Block","src":"2651:63:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:3","typeDescriptions":{}}},"id":391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":387,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"2672:19:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":393,"nodeType":"RevertStatement","src":"2665:38:3"}]}},{"expression":{"arguments":[{"id":397,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2742:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":396,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"2723:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":399,"nodeType":"ExpressionStatement","src":"2723:28:3"}]},"documentation":{"id":374,"nodeType":"StructuredDocumentation","src":"2400:138:3","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":401,"implemented":true,"kind":"function","modifiers":[{"id":379,"kind":"modifierInvocation","modifierName":{"id":378,"name":"onlyOwner","nameLocations":["2603:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"2603:9:3"},"nodeType":"ModifierInvocation","src":"2603:9:3"}],"name":"transferOwnership","nameLocation":"2552:17:3","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:3","nodeType":"VariableDeclaration","scope":401,"src":"2570:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:3"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[],"src":"2613:0:3"},"scope":422,"src":"2543:215:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":420,"nodeType":"Block","src":"2975:124:3","statements":[{"assignments":[408],"declarations":[{"constant":false,"id":408,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:3","nodeType":"VariableDeclaration","scope":420,"src":"2985:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":410,"initialValue":{"id":409,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3004:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:3"},{"expression":{"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":411,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3020:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":412,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3029:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":414,"nodeType":"ExpressionStatement","src":"3020:17:3"},{"eventCall":{"arguments":[{"id":416,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3073:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":417,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3083:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":415,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"3052:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":419,"nodeType":"EmitStatement","src":"3047:45:3"}]},"documentation":{"id":402,"nodeType":"StructuredDocumentation","src":"2764:143:3","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":421,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:3","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":404,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:3","nodeType":"VariableDeclaration","scope":421,"src":"2940:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:3"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2975:0:3"},"scope":422,"src":"2912:187:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":423,"src":"663:2438:3","usedErrors":[288,293],"usedEvents":[299]}],"src":"102:3000:3"},"id":3},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[452]},"id":453,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":424,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:4"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"127:496:4","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":452,"linearizedBaseContracts":[452],"name":"Context","nameLocation":"642:7:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":433,"nodeType":"Block","src":"718:34:4","statements":[{"expression":{"expression":{"id":430,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:4","memberName":"sender","nodeType":"MemberAccess","src":"735:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":429,"id":432,"nodeType":"Return","src":"728:17:4"}]},"id":434,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:4","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[],"src":"675:2:4"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"709:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:4"},"scope":452,"src":"656:96:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":442,"nodeType":"Block","src":"825:32:4","statements":[{"expression":{"expression":{"id":439,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:4","memberName":"data","nodeType":"MemberAccess","src":"842:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":438,"id":441,"nodeType":"Return","src":"835:15:4"}]},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:4","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"775:2:4"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":443,"src":"809:14:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":436,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:4"},"scope":452,"src":"758:99:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":450,"nodeType":"Block","src":"935:25:4","statements":[{"expression":{"hexValue":"30","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":447,"id":449,"nodeType":"Return","src":"945:8:4"}]},"id":451,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:4","nodeType":"FunctionDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[],"src":"892:2:4"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"926:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:4"},"scope":452,"src":"863:97:4","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":453,"src":"624:338:4","usedErrors":[],"usedEvents":[]}],"src":"101:862:4"},"id":4},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[521]},"id":522,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":454,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:5"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":455,"nodeType":"StructuredDocumentation","src":"135:750:5","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":521,"linearizedBaseContracts":[521],"name":"ReentrancyGuard","nameLocation":"904:15:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":458,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:5","nodeType":"VariableDeclaration","scope":521,"src":"1674:40:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":461,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:5","nodeType":"VariableDeclaration","scope":521,"src":"1720:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":463,"mutability":"mutable","name":"_status","nameLocation":"1779:7:5","nodeType":"VariableDeclaration","scope":521,"src":"1763:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":462,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"1793:52:5","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":466,"name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:5","nodeType":"ErrorDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"1884:2:5"},"src":"1850:37:5"},{"body":{"id":473,"nodeType":"Block","src":"1907:38:5","statements":[{"expression":{"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":469,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"1917:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":470,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1927:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":472,"nodeType":"ExpressionStatement","src":"1917:21:5"}]},"id":474,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[],"src":"1904:2:5"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"1907:0:5"},"scope":521,"src":"1893:52:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"2346:79:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":477,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"2356:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"ExpressionStatement","src":"2356:21:5"},{"id":480,"nodeType":"PlaceholderStatement","src":"2387:1:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":481,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2398:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"ExpressionStatement","src":"2398:20:5"}]},"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"1951:366:5","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":485,"name":"nonReentrant","nameLocation":"2331:12:5","nodeType":"ModifierDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[],"src":"2343:2:5"},"src":"2322:103:5","virtual":false,"visibility":"internal"},{"body":{"id":500,"nodeType":"Block","src":"2470:268:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":488,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2558:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":489,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2569:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":495,"nodeType":"IfStatement","src":"2554:86:5","trueBody":{"id":494,"nodeType":"Block","src":"2578:62:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":491,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"2599:28:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":493,"nodeType":"RevertStatement","src":"2592:37:5"}]}},{"expression":{"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":496,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2714:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":497,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2724:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":499,"nodeType":"ExpressionStatement","src":"2714:17:5"}]},"id":501,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:5","nodeType":"FunctionDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[],"src":"2459:2:5"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[],"src":"2470:0:5"},"scope":521,"src":"2431:307:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":508,"nodeType":"Block","src":"2782:170:5","statements":[{"expression":{"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":504,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2924:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":505,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2934:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":507,"nodeType":"ExpressionStatement","src":"2924:21:5"}]},"id":509,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:5","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[],"src":"2771:2:5"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"2782:0:5"},"scope":521,"src":"2744:208:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":519,"nodeType":"Block","src":"3195:42:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":515,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"3212:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":516,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"3223:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":514,"id":518,"nodeType":"Return","src":"3205:25:5"}]},"documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"2958:168:5","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":520,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:5","nodeType":"FunctionDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[],"src":"3163:2:5"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":520,"src":"3189:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:5"},"scope":521,"src":"3131:106:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":522,"src":"886:2353:5","usedErrors":[466],"usedEvents":[]}],"src":"109:3131:5"},"id":5},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[533]},"id":534,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":523,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"141:279:6","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":533,"linearizedBaseContracts":[533],"name":"IERC165","nameLocation":"431:7:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"445:340:6","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":532,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:6","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:6","nodeType":"VariableDeclaration","scope":532,"src":"817:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":526,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:6"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":532,"src":"860:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:6"},"scope":533,"src":"790:76:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":534,"src":"421:447:6","usedErrors":[],"usedEvents":[]}],"src":"115:754:6"},"id":6},"contracts/EurocupLegends.sol":{"ast":{"absolutePath":"contracts/EurocupLegends.sol","exportedSymbols":{"AlreadyClaimedPrize":[1176],"EurocupLegends":[1112],"FeeTransferFailed":[1190],"IEurocupLegends":[1136],"IShirts":[1166],"InvalidMintPrice":[1172],"MintClosed":[1194],"MintLimitExceeded":[1170],"NoPrizeForThisCountry":[1174],"NoShirts":[1178],"NoWinnersYet":[1192],"Ownable":[422],"ReentrancyGuard":[521],"TransferFailed":[1184],"ZeroAddress":[1180],"ZeroAmount":[1182]},"id":1113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":535,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":537,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":423,"src":"57:67:7","symbolAliases":[{"foreign":{"id":536,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"65:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":539,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":522,"src":"125:84:7","symbolAliases":[{"foreign":{"id":538,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"134:15:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","file":"./interfaces/IEurocupLegends.sol","id":541,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":1137,"src":"210:65:7","symbolAliases":[{"foreign":{"id":540,"name":"IEurocupLegends","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"218:15:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IShirts.sol","file":"./interfaces/IShirts.sol","id":543,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":1167,"src":"276:49:7","symbolAliases":[{"foreign":{"id":542,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"284:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"./utils/Errors.sol","id":544,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":1195,"src":"326:28:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":545,"name":"IEurocupLegends","nameLocations":["383:15:7"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"383:15:7"},"id":546,"nodeType":"InheritanceSpecifier","src":"383:15:7"},{"baseName":{"id":547,"name":"Ownable","nameLocations":["400:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":422,"src":"400:7:7"},"id":548,"nodeType":"InheritanceSpecifier","src":"400:7:7"},{"baseName":{"id":549,"name":"ReentrancyGuard","nameLocations":["409:15:7"],"nodeType":"IdentifierPath","referencedDeclaration":521,"src":"409:15:7"},"id":550,"nodeType":"InheritanceSpecifier","src":"409:15:7"}],"canonicalName":"EurocupLegends","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1112,"linearizedBaseContracts":[1112,521,422,452,1136],"name":"EurocupLegends","nameLocation":"365:14:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"000b46f8","id":553,"mutability":"constant","name":"FEE_PERCENTAGE","nameLocation":"455:14:7","nodeType":"VariableDeclaration","scope":1112,"src":"431:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"472:2:7","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"5fc5e020","id":556,"mutability":"constant","name":"SHARE_PRECISION","nameLocation":"504:15:7","nodeType":"VariableDeclaration","scope":1112,"src":"480:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"480:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"522:3:7","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"29a62a76","id":559,"mutability":"constant","name":"MAX_WINNERS","nameLocation":"555:11:7","nodeType":"VariableDeclaration","scope":1112,"src":"531:39:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"531:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"569:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"id":563,"mutability":"mutable","name":"s_creators","nameLocation":"595:10:7","nodeType":"VariableDeclaration","scope":1112,"src":"577:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":561,"nodeType":"UserDefinedTypeName","pathNode":{"id":560,"name":"Creator","nameLocations":["577:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1119,"src":"577:7:7"},"referencedDeclaration":1119,"src":"577:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":562,"nodeType":"ArrayTypeName","src":"577:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"private"},{"constant":false,"id":567,"mutability":"mutable","name":"s_winners","nameLocation":"630:9:7","nodeType":"VariableDeclaration","scope":1112,"src":"611:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3]"},"typeName":{"baseType":{"id":564,"name":"address","nodeType":"ElementaryTypeName","src":"611:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":566,"length":{"hexValue":"33","id":565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"619:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"611:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"private"},{"constant":false,"id":570,"mutability":"mutable","name":"s_isMintOpen","nameLocation":"659:12:7","nodeType":"VariableDeclaration","scope":1112,"src":"646:32:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":568,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"674:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"private"},{"constant":false,"id":574,"mutability":"mutable","name":"s_prizes","nameLocation":"735:8:7","nodeType":"VariableDeclaration","scope":1112,"src":"685:58:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":573,"keyName":"country","keyNameLocation":"701:7:7","keyType":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"685:41:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"prize","valueNameLocation":"720:5:7","valueType":{"id":572,"name":"uint256","nodeType":"ElementaryTypeName","src":"712:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":580,"mutability":"mutable","name":"s_isClaimed","nameLocation":"828:11:7","nodeType":"VariableDeclaration","scope":1112,"src":"749:90:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"},"typeName":{"id":579,"keyName":"country","keyNameLocation":"765:7:7","keyType":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"757:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"749:70:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":578,"keyName":"tokenId","keyNameLocation":"792:7:7","keyType":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"784:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"776:42:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"isClaimed","valueNameLocation":"808:9:7","valueType":{"id":577,"name":"bool","nodeType":"ElementaryTypeName","src":"803:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":584,"mutability":"mutable","name":"s_totalClaimed","nameLocation":"902:14:7","nodeType":"VariableDeclaration","scope":1112,"src":"845:71:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":583,"keyName":"country","keyNameLocation":"861:7:7","keyType":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"853:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"845:48:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"totalClaimed","valueNameLocation":"880:12:7","valueType":{"id":582,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":616,"nodeType":"Block","src":"995:112:7","statements":[{"body":{"id":614,"nodeType":"Block","src":"1047:54:7","statements":[{"expression":{"arguments":[{"baseExpression":{"id":609,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"1077:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":611,"indexExpression":{"id":610,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"1087:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1077:12:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}],"expression":{"id":606,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"1061:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1072:4:7","memberName":"push","nodeType":"MemberAccess","src":"1061:15:7","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Creator_$1119_storage_$dyn_storage_ptr_$_t_struct$_Creator_$1119_storage_$returns$__$attached_to$_t_array$_t_struct$_Creator_$1119_storage_$dyn_storage_ptr_$","typeString":"function (struct IEurocupLegends.Creator storage ref[] storage pointer,struct IEurocupLegends.Creator storage ref)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1061:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":613,"nodeType":"ExpressionStatement","src":"1061:29:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":599,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"1020:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":600,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"1024:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1034:6:7","memberName":"length","nodeType":"MemberAccess","src":"1024:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1020:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":615,"initializationExpression":{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"i","nameLocation":"1017:1:7","nodeType":"VariableDeclaration","scope":615,"src":"1009:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"1009:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":598,"nodeType":"VariableDeclarationStatement","src":"1009:9:7"},"loopExpression":{"expression":{"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1042:3:7","subExpression":{"id":603,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"1042:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":605,"nodeType":"ExpressionStatement","src":"1042:3:7"},"nodeType":"ForStatement","src":"1005:96:7"}]},"id":617,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":593,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"987:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":594,"kind":"baseConstructorSpecifier","modifierName":{"id":592,"name":"Ownable","nameLocations":["979:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":422,"src":"979:7:7"},"nodeType":"ModifierInvocation","src":"979:15:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"_creators","nameLocation":"952:9:7","nodeType":"VariableDeclaration","scope":617,"src":"935:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"Creator","nameLocations":["935:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1119,"src":"935:7:7"},"referencedDeclaration":1119,"src":"935:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":587,"nodeType":"ArrayTypeName","src":"935:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"_owner","nameLocation":"971:6:7","nodeType":"VariableDeclaration","scope":617,"src":"963:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"963:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"934:44:7"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"995:0:7"},"scope":1112,"src":"923:184:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":626,"nodeType":"Block","src":"1135:65:7","statements":[{"condition":{"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1148:13:7","subExpression":{"id":619,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1149:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":624,"nodeType":"IfStatement","src":"1145:37:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":621,"name":"MintClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"1170:10:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"RevertStatement","src":"1163:19:7"}},{"id":625,"nodeType":"PlaceholderStatement","src":"1192:1:7"}]},"id":627,"name":"ifMintOpen","nameLocation":"1122:10:7","nodeType":"ModifierDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[],"src":"1132:2:7"},"src":"1113:87:7","virtual":false,"visibility":"internal"},{"body":{"id":642,"nodeType":"Block","src":"1266:81:7","statements":[{"expression":{"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":634,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1276:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":635,"name":"_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"1291:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1276:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":637,"nodeType":"ExpressionStatement","src":"1276:26:7"},{"eventCall":{"arguments":[{"id":639,"name":"_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"1328:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":638,"name":"MintStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"1317:10:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1317:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":641,"nodeType":"EmitStatement","src":"1312:28:7"}]},"functionSelector":"1f85e3ca","id":643,"implemented":true,"kind":"function","modifiers":[{"id":632,"kind":"modifierInvocation","modifierName":{"id":631,"name":"onlyOwner","nameLocations":["1256:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"1256:9:7"},"nodeType":"ModifierInvocation","src":"1256:9:7"}],"name":"setMintStatus","nameLocation":"1215:13:7","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"_isMintOpen","nameLocation":"1234:11:7","nodeType":"VariableDeclaration","scope":643,"src":"1229:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":628,"name":"bool","nodeType":"ElementaryTypeName","src":"1229:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1228:18:7"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[],"src":"1266:0:7"},"scope":1112,"src":"1206:141:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":711,"nodeType":"Block","src":"1471:371:7","statements":[{"condition":{"id":656,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1484:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":662,"nodeType":"IfStatement","src":"1481:62:7","trueBody":{"id":661,"nodeType":"Block","src":"1498:45:7","statements":[{"expression":{"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":657,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"1512:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1527:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1512:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":660,"nodeType":"ExpressionStatement","src":"1512:20:7"}]}},{"body":{"id":705,"nodeType":"Block","src":"1589:211:7","statements":[{"assignments":[673],"declarations":[{"constant":false,"id":673,"mutability":"mutable","name":"winner","nameLocation":"1611:6:7","nodeType":"VariableDeclaration","scope":705,"src":"1603:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":677,"initialValue":{"baseExpression":{"id":674,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"1620:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}},"id":676,"indexExpression":{"id":675,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1629:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1620:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1603:28:7"},{"assignments":[679],"declarations":[{"constant":false,"id":679,"mutability":"mutable","name":"prize","nameLocation":"1653:5:7","nodeType":"VariableDeclaration","scope":705,"src":"1645:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"1645:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":692,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":682,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1670:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_EurocupLegends_$1112","typeString":"contract EurocupLegends"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EurocupLegends_$1112","typeString":"contract EurocupLegends"}],"id":681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1662:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"1662:7:7","typeDescriptions":{}}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1676:7:7","memberName":"balance","nodeType":"MemberAccess","src":"1662:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"baseExpression":{"id":685,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1686:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3] calldata"}},"id":687,"indexExpression":{"id":686,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1694:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1686:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1662:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":689,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1661:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":690,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"1700:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1661:54:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1645:70:7"},{"expression":{"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":693,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1730:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":695,"indexExpression":{"id":694,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1740:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1730:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":696,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"1745:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1730:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":698,"nodeType":"ExpressionStatement","src":"1730:21:7"},{"expression":{"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":699,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"1765:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":701,"indexExpression":{"id":700,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"1774:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1765:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":702,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"1784:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1765:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":704,"nodeType":"ExpressionStatement","src":"1765:24:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":666,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1567:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":667,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"1571:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1567:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":706,"initializationExpression":{"assignments":[664],"declarations":[{"constant":false,"id":664,"mutability":"mutable","name":"i","nameLocation":"1564:1:7","nodeType":"VariableDeclaration","scope":706,"src":"1556:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1556:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":665,"nodeType":"VariableDeclarationStatement","src":"1556:9:7"},"loopExpression":{"expression":{"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1584:3:7","subExpression":{"id":669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1584:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":671,"nodeType":"ExpressionStatement","src":"1584:3:7"},"nodeType":"ForStatement","src":"1552:248:7"},{"eventCall":{"arguments":[{"id":708,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"1826:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}],"id":707,"name":"WinnersSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"1815:10:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_address_$3_memory_ptr_$returns$__$","typeString":"function (address[3] memory)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1815:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"EmitStatement","src":"1810:25:7"}]},"functionSelector":"76602f2f","id":712,"implemented":true,"kind":"function","modifiers":[{"id":654,"kind":"modifierInvocation","modifierName":{"id":653,"name":"onlyOwner","nameLocations":["1461:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"1461:9:7"},"nodeType":"ModifierInvocation","src":"1461:9:7"}],"name":"setWinners","nameLocation":"1362:10:7","nodeType":"FunctionDefinition","parameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"_winners","nameLocation":"1403:8:7","nodeType":"VariableDeclaration","scope":712,"src":"1373:38:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"1373:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":646,"length":{"id":645,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"1381:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"1373:20:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"_shares","nameLocation":"1443:7:7","nodeType":"VariableDeclaration","scope":712,"src":"1413:37:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1413:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":650,"length":{"id":649,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"1421:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"1413:20:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"1372:79:7"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[],"src":"1471:0:7"},"scope":1112,"src":"1353:489:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":881,"nodeType":"Block","src":"1928:1319:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":721,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1941:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1951:6:7","memberName":"length","nodeType":"MemberAccess","src":"1941:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":723,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"1961:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1941:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":728,"nodeType":"IfStatement","src":"1938:57:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":725,"name":"NoWinnersYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"1981:12:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"RevertStatement","src":"1974:21:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":729,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2008:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2028:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2020:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"2020:7:7","typeDescriptions":{}}},"id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2008:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":738,"nodeType":"IfStatement","src":"2005:47:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":735,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"2039:11:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2039:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":737,"nodeType":"RevertStatement","src":"2032:20:7"}},{"assignments":[740],"declarations":[{"constant":false,"id":740,"mutability":"mutable","name":"countryPrize","nameLocation":"2071:12:7","nodeType":"VariableDeclaration","scope":881,"src":"2063:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"2063:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":744,"initialValue":{"baseExpression":{"id":741,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"2086:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":743,"indexExpression":{"id":742,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2095:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2086:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2063:41:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":745,"name":"countryPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"2117:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2133:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2117:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"2114:52:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":748,"name":"NoPrizeForThisCountry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2143:21:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2143:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":750,"nodeType":"RevertStatement","src":"2136:30:7"}},{"assignments":[756],"declarations":[{"constant":false,"id":756,"mutability":"mutable","name":"userTokenIds","nameLocation":"2194:12:7","nodeType":"VariableDeclaration","scope":881,"src":"2177:29:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2177:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":755,"nodeType":"ArrayTypeName","src":"2177:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":763,"initialValue":{"arguments":[{"id":761,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"2238:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":758,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2217:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":757,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"2209:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IShirts_$1166_$","typeString":"type(contract IShirts)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IShirts_$1166","typeString":"contract IShirts"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:10:7","memberName":"tokenIdsOf","nodeType":"MemberAccess","referencedDeclaration":143,"src":"2209:28:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (address) view external returns (bytes32[] memory)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2177:72:7"},{"assignments":[765],"declarations":[{"constant":false,"id":765,"mutability":"mutable","name":"userTokenIdsLength","nameLocation":"2267:18:7","nodeType":"VariableDeclaration","scope":881,"src":"2259:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2259:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":768,"initialValue":{"expression":{"id":766,"name":"userTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2288:12:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2301:6:7","memberName":"length","nodeType":"MemberAccess","src":"2288:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2259:48:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":769,"name":"userTokenIdsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"2321:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2321:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":775,"nodeType":"IfStatement","src":"2318:45:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":772,"name":"NoShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"2353:8:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2353:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":774,"nodeType":"RevertStatement","src":"2346:17:7"}},{"assignments":[777],"declarations":[{"constant":false,"id":777,"mutability":"mutable","name":"unclaimedShirts","nameLocation":"2390:15:7","nodeType":"VariableDeclaration","scope":881,"src":"2382:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"2382:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":778,"nodeType":"VariableDeclarationStatement","src":"2382:23:7"},{"body":{"id":811,"nodeType":"Block","src":"2493:181:7","statements":[{"condition":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2510:39:7","subExpression":{"baseExpression":{"baseExpression":{"id":788,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"2511:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":790,"indexExpression":{"id":789,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2523:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2511:21:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":794,"indexExpression":{"baseExpression":{"id":791,"name":"userTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2533:12:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":793,"indexExpression":{"id":792,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2546:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2533:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2511:38:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":810,"nodeType":"IfStatement","src":"2507:157:7","trueBody":{"id":809,"nodeType":"Block","src":"2551:113:7","statements":[{"expression":{"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":796,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"2569:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":801,"indexExpression":{"id":797,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2581:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2569:21:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":802,"indexExpression":{"baseExpression":{"id":798,"name":"userTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2591:12:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":800,"indexExpression":{"id":799,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2604:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2591:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2569:38:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2610:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2569:45:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":805,"nodeType":"ExpressionStatement","src":"2569:45:7"},{"expression":{"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2632:17:7","subExpression":{"id":806,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2632:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":808,"nodeType":"ExpressionStatement","src":"2632:17:7"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":782,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2464:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":783,"name":"userTokenIdsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"2468:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2464:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":812,"initializationExpression":{"assignments":[780],"declarations":[{"constant":false,"id":780,"mutability":"mutable","name":"i","nameLocation":"2461:1:7","nodeType":"VariableDeclaration","scope":812,"src":"2453:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"2453:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":781,"nodeType":"VariableDeclarationStatement","src":"2453:9:7"},"loopExpression":{"expression":{"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2488:3:7","subExpression":{"id":785,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2488:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":787,"nodeType":"ExpressionStatement","src":"2488:3:7"},"nodeType":"ForStatement","src":"2449:225:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":813,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2687:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2706:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2687:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":819,"nodeType":"IfStatement","src":"2684:53:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":816,"name":"AlreadyClaimedPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"2716:19:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2716:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":818,"nodeType":"RevertStatement","src":"2709:28:7"}},{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"totalClaimed","nameLocation":"2756:12:7","nodeType":"VariableDeclaration","scope":881,"src":"2748:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":825,"initialValue":{"baseExpression":{"id":822,"name":"s_totalClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"2771:14:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":824,"indexExpression":{"id":823,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2786:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2771:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2748:47:7"},{"assignments":[827],"declarations":[{"constant":false,"id":827,"mutability":"mutable","name":"totalUnclaimedShirts","nameLocation":"2814:20:7","nodeType":"VariableDeclaration","scope":881,"src":"2806:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"2806:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":835,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":829,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2845:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":828,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"2837:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IShirts_$1166_$","typeString":"type(contract IShirts)"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2837:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IShirts_$1166","typeString":"contract IShirts"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2855:11:7","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":118,"src":"2837:29:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2837:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":833,"name":"totalClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2871:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2837:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2806:77:7"},{"assignments":[837],"declarations":[{"constant":false,"id":837,"mutability":"mutable","name":"prize","nameLocation":"2902:5:7","nodeType":"VariableDeclaration","scope":881,"src":"2894:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"2894:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":844,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":838,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2911:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":839,"name":"countryPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"2929:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2911:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2910:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":842,"name":"totalUnclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"2945:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:55:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2894:71:7"},{"expression":{"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":845,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"2976:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":847,"indexExpression":{"id":846,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2985:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2976:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":848,"name":"countryPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"2997:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":849,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"3012:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2997:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2976:41:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":852,"nodeType":"ExpressionStatement","src":"2976:41:7"},{"expression":{"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":853,"name":"s_totalClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"3027:14:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":855,"indexExpression":{"id":854,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"3042:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3027:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":856,"name":"totalClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"3054:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":857,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3069:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3054:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3027:57:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":860,"nodeType":"ExpressionStatement","src":"3027:57:7"},{"assignments":[862,null],"declarations":[{"constant":false,"id":862,"mutability":"mutable","name":"success","nameLocation":"3101:7:7","nodeType":"VariableDeclaration","scope":881,"src":"3096:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":861,"name":"bool","nodeType":"ElementaryTypeName","src":"3096:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":869,"initialValue":{"arguments":[{"hexValue":"","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3144:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":863,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"3114:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3125:4:7","memberName":"call","nodeType":"MemberAccess","src":"3114:15:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":865,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"3137:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3114:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3114:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3095:52:7"},{"condition":{"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3160:8:7","subExpression":{"id":870,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"3161:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":875,"nodeType":"IfStatement","src":"3157:36:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":872,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"3177:14:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3177:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":874,"nodeType":"RevertStatement","src":"3170:23:7"}},{"eventCall":{"arguments":[{"id":877,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"3222:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":878,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"3234:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":876,"name":"PrizeClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"3209:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3209:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"EmitStatement","src":"3204:36:7"}]},"functionSelector":"5d55307d","id":882,"implemented":true,"kind":"function","modifiers":[{"id":719,"kind":"modifierInvocation","modifierName":{"id":718,"name":"nonReentrant","nameLocations":["1915:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":485,"src":"1915:12:7"},"nodeType":"ModifierInvocation","src":"1915:12:7"}],"name":"claimPrize","nameLocation":"1857:10:7","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"mutability":"mutable","name":"_recipient","nameLocation":"1876:10:7","nodeType":"VariableDeclaration","scope":882,"src":"1868:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"1868:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"_country","nameLocation":"1896:8:7","nodeType":"VariableDeclaration","scope":882,"src":"1888:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"1888:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1867:38:7"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[],"src":"1928:0:7"},"scope":1112,"src":"1848:1399:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":967,"nodeType":"Block","src":"3336:669:7","statements":[{"assignments":[892],"declarations":[{"constant":false,"id":892,"mutability":"mutable","name":"countryPrize","nameLocation":"3354:12:7","nodeType":"VariableDeclaration","scope":967,"src":"3346:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"3346:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":896,"initialValue":{"baseExpression":{"id":893,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"3369:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":895,"indexExpression":{"id":894,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3378:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3369:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3346:41:7"},{"assignments":[898],"declarations":[{"constant":false,"id":898,"mutability":"mutable","name":"totalUnclaimedShirts","nameLocation":"3405:20:7","nodeType":"VariableDeclaration","scope":967,"src":"3397:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"3397:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":908,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":900,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3436:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":899,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"3428:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IShirts_$1166_$","typeString":"type(contract IShirts)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3428:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IShirts_$1166","typeString":"contract IShirts"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3446:11:7","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":118,"src":"3428:29:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3428:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":904,"name":"s_totalClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"3462:14:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":906,"indexExpression":{"id":905,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3477:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3462:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3428:58:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3397:89:7"},{"assignments":[913],"declarations":[{"constant":false,"id":913,"mutability":"mutable","name":"userTokenIds","nameLocation":"3514:12:7","nodeType":"VariableDeclaration","scope":967,"src":"3497:29:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3497:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":912,"nodeType":"ArrayTypeName","src":"3497:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":920,"initialValue":{"arguments":[{"id":918,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"3558:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":915,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3537:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":914,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"3529:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IShirts_$1166_$","typeString":"type(contract IShirts)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3529:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IShirts_$1166","typeString":"contract IShirts"}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3547:10:7","memberName":"tokenIdsOf","nodeType":"MemberAccess","referencedDeclaration":143,"src":"3529:28:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (address) view external returns (bytes32[] memory)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3529:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3497:67:7"},{"assignments":[922],"declarations":[{"constant":false,"id":922,"mutability":"mutable","name":"userTokenIdsLength","nameLocation":"3582:18:7","nodeType":"VariableDeclaration","scope":967,"src":"3574:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3574:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":925,"initialValue":{"expression":{"id":923,"name":"userTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"3603:12:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3616:6:7","memberName":"length","nodeType":"MemberAccess","src":"3603:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3574:48:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":926,"name":"userTokenIdsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3636:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3658:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3636:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":932,"nodeType":"IfStatement","src":"3633:45:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":929,"name":"NoShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"3668:8:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3668:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":931,"nodeType":"RevertStatement","src":"3661:17:7"}},{"assignments":[934],"declarations":[{"constant":false,"id":934,"mutability":"mutable","name":"unclaimedShirts","nameLocation":"3705:15:7","nodeType":"VariableDeclaration","scope":967,"src":"3697:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":933,"name":"uint256","nodeType":"ElementaryTypeName","src":"3697:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":935,"nodeType":"VariableDeclarationStatement","src":"3697:23:7"},{"body":{"id":958,"nodeType":"Block","src":"3808:118:7","statements":[{"condition":{"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3825:39:7","subExpression":{"baseExpression":{"baseExpression":{"id":945,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"3826:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":947,"indexExpression":{"id":946,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3838:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3826:21:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":951,"indexExpression":{"baseExpression":{"id":948,"name":"userTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"3848:12:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":950,"indexExpression":{"id":949,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3861:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3848:15:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3826:38:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":957,"nodeType":"IfStatement","src":"3822:94:7","trueBody":{"id":956,"nodeType":"Block","src":"3866:50:7","statements":[{"expression":{"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3884:17:7","subExpression":{"id":953,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3884:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":955,"nodeType":"ExpressionStatement","src":"3884:17:7"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":939,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3779:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":940,"name":"userTokenIdsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3783:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3779:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":959,"initializationExpression":{"assignments":[937],"declarations":[{"constant":false,"id":937,"mutability":"mutable","name":"i","nameLocation":"3776:1:7","nodeType":"VariableDeclaration","scope":959,"src":"3768:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"3768:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":938,"nodeType":"VariableDeclarationStatement","src":"3768:9:7"},"loopExpression":{"expression":{"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3803:3:7","subExpression":{"id":942,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3803:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":944,"nodeType":"ExpressionStatement","src":"3803:3:7"},"nodeType":"ForStatement","src":"3764:162:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":960,"name":"unclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3944:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":961,"name":"countryPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"3962:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3944:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3943:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":964,"name":"totalUnclaimedShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"3978:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3943:55:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":890,"id":966,"nodeType":"Return","src":"3936:62:7"}]},"functionSelector":"7eef2509","id":968,"implemented":true,"kind":"function","modifiers":[],"name":"getPrize","nameLocation":"3262:8:7","nodeType":"FunctionDefinition","parameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"_user","nameLocation":"3279:5:7","nodeType":"VariableDeclaration","scope":968,"src":"3271:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"3271:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"_country","nameLocation":"3294:8:7","nodeType":"VariableDeclaration","scope":968,"src":"3286:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"3286:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3270:33:7"},"returnParameters":{"id":890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":968,"src":"3327:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"3327:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3326:9:7"},"scope":1112,"src":"3253:752:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":975,"nodeType":"Block","src":"4062:36:7","statements":[{"expression":{"id":973,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4079:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":972,"id":974,"nodeType":"Return","src":"4072:19:7"}]},"functionSelector":"19908016","id":976,"implemented":true,"kind":"function","modifiers":[],"name":"isMintOpen","nameLocation":"4020:10:7","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[],"src":"4030:2:7"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":976,"src":"4056:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":970,"name":"bool","nodeType":"ElementaryTypeName","src":"4056:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4055:6:7"},"scope":1112,"src":"4011:87:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":991,"nodeType":"Block","src":"4188:55:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":985,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"4205:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":987,"indexExpression":{"id":986,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"4217:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4205:21:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":989,"indexExpression":{"id":988,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"4227:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4205:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":984,"id":990,"nodeType":"Return","src":"4198:38:7"}]},"functionSelector":"67457e4c","id":992,"implemented":true,"kind":"function","modifiers":[],"name":"isClaimed","nameLocation":"4113:9:7","nodeType":"FunctionDefinition","parameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"_country","nameLocation":"4131:8:7","nodeType":"VariableDeclaration","scope":992,"src":"4123:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"4123:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":980,"mutability":"mutable","name":"_tokenId","nameLocation":"4149:8:7","nodeType":"VariableDeclaration","scope":992,"src":"4141:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4141:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4122:36:7"},"returnParameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":992,"src":"4182:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":982,"name":"bool","nodeType":"ElementaryTypeName","src":"4182:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4181:6:7"},"scope":1112,"src":"4104:139:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1001,"nodeType":"Block","src":"4313:34:7","statements":[{"expression":{"id":999,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4330:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"functionReturnParameters":998,"id":1000,"nodeType":"Return","src":"4323:17:7"}]},"functionSelector":"e6adc1ee","id":1002,"implemented":true,"kind":"function","modifiers":[],"name":"getCreators","nameLocation":"4258:11:7","nodeType":"FunctionDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[],"src":"4269:2:7"},"returnParameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1002,"src":"4295:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":995,"nodeType":"UserDefinedTypeName","pathNode":{"id":994,"name":"Creator","nameLocations":["4295:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1119,"src":"4295:7:7"},"referencedDeclaration":1119,"src":"4295:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":996,"nodeType":"ArrayTypeName","src":"4295:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"}],"src":"4294:18:7"},"scope":1112,"src":"4249:98:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1011,"nodeType":"Block","src":"4417:33:7","statements":[{"expression":{"id":1009,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"4434:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"functionReturnParameters":1008,"id":1010,"nodeType":"Return","src":"4427:16:7"}]},"functionSelector":"df15c37e","id":1012,"implemented":true,"kind":"function","modifiers":[],"name":"getWinners","nameLocation":"4362:10:7","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[],"src":"4372:2:7"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1012,"src":"4398:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":1004,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1006,"length":{"hexValue":"33","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4406:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"4398:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"4397:19:7"},"scope":1112,"src":"4353:97:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1023,"nodeType":"Block","src":"4529:42:7","statements":[{"expression":{"baseExpression":{"id":1019,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"4546:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1021,"indexExpression":{"id":1020,"name":"_country","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"4555:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4546:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1018,"id":1022,"nodeType":"Return","src":"4539:25:7"}]},"functionSelector":"f82f83ff","id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"getCountryPrize","nameLocation":"4465:15:7","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"_country","nameLocation":"4489:8:7","nodeType":"VariableDeclaration","scope":1024,"src":"4481:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"4481:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4480:18:7"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"4520:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4520:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4519:9:7"},"scope":1112,"src":"4456:115:7","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1092,"nodeType":"Block","src":"4637:543:7","statements":[{"assignments":[1032],"declarations":[{"constant":false,"id":1032,"mutability":"mutable","name":"fees","nameLocation":"4682:4:7","nodeType":"VariableDeclaration","scope":1092,"src":"4674:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"4674:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1039,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1033,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"4690:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1034,"name":"FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"4700:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4690:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4689:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1037,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"4718:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4689:44:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4674:59:7"},{"assignments":[1041],"declarations":[{"constant":false,"id":1041,"mutability":"mutable","name":"creatorsLength","nameLocation":"4752:14:7","nodeType":"VariableDeclaration","scope":1092,"src":"4744:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"4744:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1044,"initialValue":{"expression":{"id":1042,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4769:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4780:6:7","memberName":"length","nodeType":"MemberAccess","src":"4769:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4744:42:7"},{"body":{"id":1090,"nodeType":"Block","src":"4873:301:7","statements":[{"assignments":[1056],"declarations":[{"constant":false,"id":1056,"mutability":"mutable","name":"creator","nameLocation":"4902:7:7","nodeType":"VariableDeclaration","scope":1090,"src":"4887:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator"},"typeName":{"id":1055,"nodeType":"UserDefinedTypeName","pathNode":{"id":1054,"name":"Creator","nameLocations":["4887:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1119,"src":"4887:7:7"},"referencedDeclaration":1119,"src":"4887:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"visibility":"internal"}],"id":1060,"initialValue":{"baseExpression":{"id":1057,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4912:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$1119_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":1059,"indexExpression":{"id":1058,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"4923:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4912:13:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_storage","typeString":"struct IEurocupLegends.Creator storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4887:38:7"},{"assignments":[1062],"declarations":[{"constant":false,"id":1062,"mutability":"mutable","name":"creatorShare","nameLocation":"4948:12:7","nodeType":"VariableDeclaration","scope":1090,"src":"4940:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1061,"name":"uint256","nodeType":"ElementaryTypeName","src":"4940:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1070,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1063,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"4964:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":1064,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"4971:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":1065,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4979:5:7","memberName":"share","nodeType":"MemberAccess","referencedDeclaration":1118,"src":"4971:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4964:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4963:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1068,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"4988:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4963:40:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4940:63:7"},{"assignments":[1072,null],"declarations":[{"constant":false,"id":1072,"mutability":"mutable","name":"success","nameLocation":"5024:7:7","nodeType":"VariableDeclaration","scope":1090,"src":"5019:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1071,"name":"bool","nodeType":"ElementaryTypeName","src":"5019:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1080,"initialValue":{"arguments":[{"hexValue":"","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5078:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":1073,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"5036:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":1074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5044:7:7","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":1116,"src":"5036:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5052:4:7","memberName":"call","nodeType":"MemberAccess","src":"5036:20:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1076,"name":"creatorShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5064:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5036:41:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5036:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5018:63:7"},{"condition":{"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5098:8:7","subExpression":{"id":1081,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"5099:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1089,"nodeType":"IfStatement","src":"5095:68:7","trueBody":{"errorCall":{"arguments":[{"expression":{"id":1084,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"5133:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$1119_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":1085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5141:7:7","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":1116,"src":"5133:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1086,"name":"creatorShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5150:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1083,"name":"FeeTransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5115:17:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5115:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1088,"nodeType":"RevertStatement","src":"5108:55:7"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"4848:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1049,"name":"creatorsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"4852:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4848:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"initializationExpression":{"assignments":[1046],"declarations":[{"constant":false,"id":1046,"mutability":"mutable","name":"i","nameLocation":"4845:1:7","nodeType":"VariableDeclaration","scope":1091,"src":"4837:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"4837:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1047,"nodeType":"VariableDeclarationStatement","src":"4837:9:7"},"loopExpression":{"expression":{"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4868:3:7","subExpression":{"id":1051,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"4868:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1053,"nodeType":"ExpressionStatement","src":"4868:3:7"},"nodeType":"ForStatement","src":"4833:341:7"}]},"id":1093,"implemented":true,"kind":"function","modifiers":[{"id":1029,"kind":"modifierInvocation","modifierName":{"id":1028,"name":"ifMintOpen","nameLocations":["4626:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"4626:10:7"},"nodeType":"ModifierInvocation","src":"4626:10:7"}],"name":"_handleDeposit","nameLocation":"4586:14:7","nodeType":"FunctionDefinition","parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"_amount","nameLocation":"4609:7:7","nodeType":"VariableDeclaration","scope":1093,"src":"4601:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4600:17:7"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"4637:0:7"},"scope":1112,"src":"4577:603:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1101,"nodeType":"Block","src":"5213:42:7","statements":[{"expression":{"arguments":[{"expression":{"id":1097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5238:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5242:5:7","memberName":"value","nodeType":"MemberAccess","src":"5238:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1096,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"5223:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5223:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1100,"nodeType":"ExpressionStatement","src":"5223:25:7"}]},"id":1102,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[],"src":"5193:2:7"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"5213:0:7"},"scope":1112,"src":"5186:69:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1110,"nodeType":"Block","src":"5289:42:7","statements":[{"expression":{"arguments":[{"expression":{"id":1106,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5314:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5318:5:7","memberName":"value","nodeType":"MemberAccess","src":"5314:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1105,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"5299:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5299:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"ExpressionStatement","src":"5299:25:7"}]},"id":1111,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[],"src":"5269:2:7"},"returnParameters":{"id":1104,"nodeType":"ParameterList","parameters":[],"src":"5289:0:7"},"scope":1112,"src":"5261:70:7","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1113,"src":"356:4977:7","usedErrors":[288,293,466,1174,1176,1178,1180,1184,1190,1192,1194],"usedEvents":[299,1125,1131,1135]}],"src":"32:5301:7"},"id":7},"contracts/interfaces/IEurocupLegends.sol":{"ast":{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","exportedSymbols":{"IEurocupLegends":[1136]},"id":1137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1114,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IEurocupLegends","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":1136,"linearizedBaseContracts":[1136],"name":"IEurocupLegends","nameLocation":"67:15:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IEurocupLegends.Creator","id":1119,"members":[{"constant":false,"id":1116,"mutability":"mutable","name":"creator","nameLocation":"122:7:8","nodeType":"VariableDeclaration","scope":1119,"src":"114:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"114:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"share","nameLocation":"147:5:8","nodeType":"VariableDeclaration","scope":1119,"src":"139:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"139:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Creator","nameLocation":"96:7:8","nodeType":"StructDefinition","scope":1136,"src":"89:70:8","visibility":"public"},{"anonymous":false,"eventSelector":"60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea","id":1125,"name":"WinnersSet","nameLocation":"171:10:8","nodeType":"EventDefinition","parameters":{"id":1124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"indexed":false,"mutability":"mutable","name":"winners","nameLocation":"193:7:8","nodeType":"VariableDeclaration","scope":1125,"src":"182:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"182:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1122,"length":{"hexValue":"33","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"190:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"182:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"181:20:8"},"src":"165:37:8"},{"anonymous":false,"eventSelector":"95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770","id":1131,"name":"PrizeClaimed","nameLocation":"213:12:8","nodeType":"EventDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"234:5:8","nodeType":"VariableDeclaration","scope":1131,"src":"226:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1126,"name":"address","nodeType":"ElementaryTypeName","src":"226:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1129,"indexed":false,"mutability":"mutable","name":"prize","nameLocation":"249:5:8","nodeType":"VariableDeclaration","scope":1131,"src":"241:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"225:30:8"},"src":"207:49:8"},{"anonymous":false,"eventSelector":"aff50328f57c9ced983a9e3c360c67ee11633d860350531f0c11fc435751448c","id":1135,"name":"MintStatus","nameLocation":"267:10:8","nodeType":"EventDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"indexed":false,"mutability":"mutable","name":"isMintOpen","nameLocation":"283:10:8","nodeType":"VariableDeclaration","scope":1135,"src":"278:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1132,"name":"bool","nodeType":"ElementaryTypeName","src":"278:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"277:17:8"},"src":"261:34:8"}],"scope":1137,"src":"57:240:8","usedErrors":[],"usedEvents":[1125,1131,1135]}],"src":"32:265:8"},"id":8},"contracts/interfaces/IShirts.sol":{"ast":{"absolutePath":"contracts/interfaces/IShirts.sol","exportedSymbols":{"ILSP8":[274],"IShirts":[1166]},"id":1167,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1138,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","id":1140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1167,"sourceUnit":54,"src":"57:155:9","symbolAliases":[{"foreign":{"id":1139,"name":"ILSP8IdentifiableDigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"65:29:9","typeDescriptions":{}},"local":"ILSP8","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1141,"name":"ILSP8","nameLocations":["234:5:9"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"234:5:9"},"id":1142,"nodeType":"InheritanceSpecifier","src":"234:5:9"}],"canonicalName":"IShirts","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1166,"linearizedBaseContracts":[1166,274,50,533],"name":"IShirts","nameLocation":"223:7:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2d6f147bcef20580d606c930254442a27952b0caec97caaba61b00b5dd67bba9","id":1148,"name":"ShirtsMinted","nameLocation":"252:12:9","nodeType":"EventDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"indexed":false,"mutability":"mutable","name":"_recipient","nameLocation":"273:10:9","nodeType":"VariableDeclaration","scope":1148,"src":"265:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1143,"name":"address","nodeType":"ElementaryTypeName","src":"265:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1146,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"293:7:9","nodeType":"VariableDeclaration","scope":1148,"src":"285:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"285:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"264:37:9"},"src":"246:56:9"},{"functionSelector":"40c10f19","id":1155,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"317:4:9","nodeType":"FunctionDefinition","parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"_recipient","nameLocation":"339:10:9","nodeType":"VariableDeclaration","scope":1155,"src":"331:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"_amount","nameLocation":"367:7:9","nodeType":"VariableDeclaration","scope":1155,"src":"359:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1151,"name":"uint256","nodeType":"ElementaryTypeName","src":"359:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"321:59:9"},"returnParameters":{"id":1154,"nodeType":"ParameterList","parameters":[],"src":"397:0:9"},"scope":1166,"src":"308:90:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"884bf67c","id":1160,"implemented":false,"kind":"function","modifiers":[],"name":"getPrizePool","nameLocation":"417:12:9","nodeType":"FunctionDefinition","parameters":{"id":1156,"nodeType":"ParameterList","parameters":[],"src":"429:2:9"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"prizePool","nameLocation":"463:9:9","nodeType":"VariableDeclaration","scope":1160,"src":"455:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"455:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"454:19:9"},"scope":1166,"src":"408:66:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"98d5fdca","id":1165,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"489:8:9","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[],"src":"497:2:9"},"returnParameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"price","nameLocation":"531:5:9","nodeType":"VariableDeclaration","scope":1165,"src":"523:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"523:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:15:9"},"scope":1166,"src":"480:58:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1167,"src":"213:327:9","usedErrors":[],"usedEvents":[13,79,90,103,112,1148]}],"src":"32:508:9"},"id":9},"contracts/utils/Errors.sol":{"ast":{"absolutePath":"contracts/utils/Errors.sol","exportedSymbols":{"AlreadyClaimedPrize":[1176],"FeeTransferFailed":[1190],"InvalidMintPrice":[1172],"MintClosed":[1194],"MintLimitExceeded":[1170],"NoPrizeForThisCountry":[1174],"NoShirts":[1178],"NoWinnersYet":[1192],"TransferFailed":[1184],"ZeroAddress":[1180],"ZeroAmount":[1182]},"id":1195,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1168,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:10"},{"errorSelector":"b643bfa6","id":1170,"name":"MintLimitExceeded","nameLocation":"63:17:10","nodeType":"ErrorDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[],"src":"80:2:10"},"src":"57:26:10"},{"errorSelector":"0416bc16","id":1172,"name":"InvalidMintPrice","nameLocation":"91:16:10","nodeType":"ErrorDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[],"src":"107:2:10"},"src":"85:25:10"},{"errorSelector":"08579f24","id":1174,"name":"NoPrizeForThisCountry","nameLocation":"118:21:10","nodeType":"ErrorDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[],"src":"139:2:10"},"src":"112:30:10"},{"errorSelector":"48798a90","id":1176,"name":"AlreadyClaimedPrize","nameLocation":"150:19:10","nodeType":"ErrorDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"169:2:10"},"src":"144:28:10"},{"errorSelector":"ffa4002f","id":1178,"name":"NoShirts","nameLocation":"180:8:10","nodeType":"ErrorDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"188:2:10"},"src":"174:17:10"},{"errorSelector":"d92e233d","id":1180,"name":"ZeroAddress","nameLocation":"199:11:10","nodeType":"ErrorDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[],"src":"210:2:10"},"src":"193:20:10"},{"errorSelector":"1f2a2005","id":1182,"name":"ZeroAmount","nameLocation":"221:10:10","nodeType":"ErrorDefinition","parameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"231:2:10"},"src":"215:19:10"},{"errorSelector":"90b8ec18","id":1184,"name":"TransferFailed","nameLocation":"242:14:10","nodeType":"ErrorDefinition","parameters":{"id":1183,"nodeType":"ParameterList","parameters":[],"src":"256:2:10"},"src":"236:23:10"},{"errorSelector":"6e74fa86","id":1190,"name":"FeeTransferFailed","nameLocation":"267:17:10","nodeType":"ErrorDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"_creators","nameLocation":"293:9:10","nodeType":"VariableDeclaration","scope":1190,"src":"285:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"_amount","nameLocation":"312:7:10","nodeType":"VariableDeclaration","scope":1190,"src":"304:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"304:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"284:36:10"},"src":"261:60:10"},{"errorSelector":"1bb8ccd6","id":1192,"name":"NoWinnersYet","nameLocation":"329:12:10","nodeType":"ErrorDefinition","parameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"341:2:10"},"src":"323:21:10"},{"errorSelector":"589ed34b","id":1194,"name":"MintClosed","nameLocation":"352:10:10","nodeType":"ErrorDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[],"src":"362:2:10"},"src":"346:19:10"}],"src":"32:333:10"},"id":10}},"contracts":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"IERC725Y":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"The interface for ERC725Y sub-standard, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725Y sub-standard, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":\"IERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"ILSP8IdentifiableDigitalAsset":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValues","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"custom:events":"{OperatorAuthorizationChanged} event.","custom:requirements":"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValues":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"custom:info":"The tokenOwner is its own operator.","custom:requirements":"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.","details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"revokeOperator(address,bytes32,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..","custom:requirements":"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"custom:events":"{TokenIdDataChanged} event for each pair.","params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"custom:events":"{TokenIdDataChanged} event.","params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"custom:info":"if the `tokenId` is not owned by any address, the returned address will be `address(0)`","custom:requirements":"`tokenId` must exist.","details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"custom:events":"- {Transfer} event when the `tokenId` is successfully transferred.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"custom:events":"- {Transfer} events on each successful token transfer.","custom:requirements":"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.","details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}}},"title":"Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","isOperatorFor(address,bytes32)":"2a3654a4","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValues\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} event.\",\"custom:requirements\":\"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValues\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"custom:info\":\"The tokenOwner is its own operator.\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.\",\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"revokeOperator(address,bytes32,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"custom:events\":\"{TokenIdDataChanged} event for each pair.\",\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"custom:events\":\"{TokenIdDataChanged} event.\",\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"custom:info\":\"if the `tokenId` is not owned by any address, the returned address will be `address(0)`\",\"custom:requirements\":\"`tokenId` must exist.\",\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when the `tokenId` is successfully transferred.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"custom:events\":\"- {Transfer} events on each successful token transfer.\",\"custom:requirements\":\"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.\",\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}}},\"title\":\"Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":\"ILSP8IdentifiableDigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":283,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":463,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/EurocupLegends.sol":{"EurocupLegends":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"_creators","type":"tuple[]"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyClaimedPrize","type":"error"},{"inputs":[{"internalType":"address","name":"_creators","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"FeeTransferFailed","type":"error"},{"inputs":[],"name":"MintClosed","type":"error"},{"inputs":[],"name":"NoPrizeForThisCountry","type":"error"},{"inputs":[],"name":"NoShirts","type":"error"},{"inputs":[],"name":"NoWinnersYet","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isMintOpen","type":"bool"}],"name":"MintStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WINNERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHARE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"address","name":"_country","type":"address"}],"name":"claimPrize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_country","type":"address"}],"name":"getCountryPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCreators","outputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_country","type":"address"}],"name":"getPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWinners","outputs":[{"internalType":"address[3]","name":"","type":"address[3]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_country","type":"address"},{"internalType":"bytes32","name":"_tokenId","type":"bytes32"}],"name":"isClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isMintOpen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isMintOpen","type":"bool"}],"name":"setMintStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[3]","name":"_winners","type":"address[3]"},{"internalType":"uint256[3]","name":"_shares","type":"uint256[3]"}],"name":"setWinners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_325":{"entryPoint":null,"id":325,"parameterSlots":1,"returnSlots":0},"@_474":{"entryPoint":null,"id":474,"parameterSlots":0,"returnSlots":0},"@_617":{"entryPoint":null,"id":617,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_421":{"entryPoint":268,"id":421,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":464,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptrt_address_fromMemory":{"entryPoint":493,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":413,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_575":{"entryPoint":370,"id":null,"parameterSlots":0,"returnSlots":1},"increment_t_uint256":{"entryPoint":760,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":738,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":348,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2787:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:11"},"nodeType":"YulFunctionCall","src":"66:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:11"},"nodeType":"YulFunctionCall","src":"56:31:11"},"nodeType":"YulExpressionStatement","src":"56:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:11","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:11"},"nodeType":"YulFunctionCall","src":"96:15:11"},"nodeType":"YulExpressionStatement","src":"96:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:11"},"nodeType":"YulFunctionCall","src":"120:15:11"},"nodeType":"YulExpressionStatement","src":"120:15:11"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:11"},{"body":{"nodeType":"YulBlock","src":"191:205:11","statements":[{"nodeType":"YulAssignment","src":"201:19:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:11"},"nodeType":"YulFunctionCall","src":"211:9:11"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"229:33:11","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"259:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:11"},"nodeType":"YulFunctionCall","src":"247:15:11"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"337:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"339:16:11"},"nodeType":"YulFunctionCall","src":"339:18:11"},"nodeType":"YulExpressionStatement","src":"339:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"280:10:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:2:11","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"304:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"296:3:11"},"nodeType":"YulFunctionCall","src":"296:10:11"},{"kind":"number","nodeType":"YulLiteral","src":"308:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"292:3:11"},"nodeType":"YulFunctionCall","src":"292:18:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"277:2:11"},"nodeType":"YulFunctionCall","src":"277:34:11"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"316:10:11"},{"name":"memPtr","nodeType":"YulIdentifier","src":"328:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"313:2:11"},"nodeType":"YulFunctionCall","src":"313:22:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"274:2:11"},"nodeType":"YulFunctionCall","src":"274:62:11"},"nodeType":"YulIf","src":"271:88:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"375:2:11","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"379:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"368:6:11"},"nodeType":"YulFunctionCall","src":"368:22:11"},"nodeType":"YulExpressionStatement","src":"368:22:11"}]},"name":"allocate_memory_575","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:11","type":""}],"src":"146:250:11"},{"body":{"nodeType":"YulBlock","src":"446:230:11","statements":[{"nodeType":"YulAssignment","src":"456:19:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"472:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"466:5:11"},"nodeType":"YulFunctionCall","src":"466:9:11"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"456:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"484:58:11","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"506:6:11"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"522:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:11","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"518:3:11"},"nodeType":"YulFunctionCall","src":"518:13:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:2:11","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"533:3:11"},"nodeType":"YulFunctionCall","src":"533:7:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"514:3:11"},"nodeType":"YulFunctionCall","src":"514:27:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:11"},"nodeType":"YulFunctionCall","src":"502:40:11"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"488:10:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"617:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"619:16:11"},"nodeType":"YulFunctionCall","src":"619:18:11"},"nodeType":"YulExpressionStatement","src":"619:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"560:10:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"580:2:11","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"584:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"576:3:11"},"nodeType":"YulFunctionCall","src":"576:10:11"},{"kind":"number","nodeType":"YulLiteral","src":"588:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"572:3:11"},"nodeType":"YulFunctionCall","src":"572:18:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"557:2:11"},"nodeType":"YulFunctionCall","src":"557:34:11"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"596:10:11"},{"name":"memPtr","nodeType":"YulIdentifier","src":"608:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"593:2:11"},"nodeType":"YulFunctionCall","src":"593:22:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"554:2:11"},"nodeType":"YulFunctionCall","src":"554:62:11"},"nodeType":"YulIf","src":"551:88:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"655:2:11","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"659:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:11"},"nodeType":"YulFunctionCall","src":"648:22:11"},"nodeType":"YulExpressionStatement","src":"648:22:11"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"426:4:11","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"435:6:11","type":""}],"src":"401:275:11"},{"body":{"nodeType":"YulBlock","src":"741:117:11","statements":[{"nodeType":"YulAssignment","src":"751:22:11","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"766:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"760:5:11"},"nodeType":"YulFunctionCall","src":"760:13:11"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"751:5:11"}]},{"body":{"nodeType":"YulBlock","src":"836:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"845:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"848:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"838:6:11"},"nodeType":"YulFunctionCall","src":"838:12:11"},"nodeType":"YulExpressionStatement","src":"838:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"795:5:11"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"806:5:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"821:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"826:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"817:3:11"},"nodeType":"YulFunctionCall","src":"817:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"830:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"813:3:11"},"nodeType":"YulFunctionCall","src":"813:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"802:3:11"},"nodeType":"YulFunctionCall","src":"802:31:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"792:2:11"},"nodeType":"YulFunctionCall","src":"792:42:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"785:6:11"},"nodeType":"YulFunctionCall","src":"785:50:11"},"nodeType":"YulIf","src":"782:70:11"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"720:6:11","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"731:5:11","type":""}],"src":"681:177:11"},{"body":{"nodeType":"YulBlock","src":"1011:1197:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1021:12:11","value":{"kind":"number","nodeType":"YulLiteral","src":"1031:2:11","type":"","value":"64"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1025:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1078:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:11"},"nodeType":"YulFunctionCall","src":"1080:12:11"},"nodeType":"YulExpressionStatement","src":"1080:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1053:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1062:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1049:3:11"},"nodeType":"YulFunctionCall","src":"1049:23:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1074:2:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1045:3:11"},"nodeType":"YulFunctionCall","src":"1045:32:11"},"nodeType":"YulIf","src":"1042:52:11"},{"nodeType":"YulVariableDeclaration","src":"1103:30:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1123:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1117:5:11"},"nodeType":"YulFunctionCall","src":"1117:16:11"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1107:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1142:28:11","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1160:2:11","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1164:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1156:3:11"},"nodeType":"YulFunctionCall","src":"1156:10:11"},{"kind":"number","nodeType":"YulLiteral","src":"1168:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1152:3:11"},"nodeType":"YulFunctionCall","src":"1152:18:11"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1146:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1197:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1206:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1209:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1199:6:11"},"nodeType":"YulFunctionCall","src":"1199:12:11"},"nodeType":"YulExpressionStatement","src":"1199:12:11"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1185:6:11"},{"name":"_2","nodeType":"YulIdentifier","src":"1193:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1182:2:11"},"nodeType":"YulFunctionCall","src":"1182:14:11"},"nodeType":"YulIf","src":"1179:34:11"},{"nodeType":"YulVariableDeclaration","src":"1222:32:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1236:9:11"},{"name":"offset","nodeType":"YulIdentifier","src":"1247:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1232:3:11"},"nodeType":"YulFunctionCall","src":"1232:22:11"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1226:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1302:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1311:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1314:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1304:6:11"},"nodeType":"YulFunctionCall","src":"1304:12:11"},"nodeType":"YulExpressionStatement","src":"1304:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1281:2:11"},{"kind":"number","nodeType":"YulLiteral","src":"1285:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1277:3:11"},"nodeType":"YulFunctionCall","src":"1277:13:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1292:7:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1273:3:11"},"nodeType":"YulFunctionCall","src":"1273:27:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1266:6:11"},"nodeType":"YulFunctionCall","src":"1266:35:11"},"nodeType":"YulIf","src":"1263:55:11"},{"nodeType":"YulVariableDeclaration","src":"1327:19:11","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1343:2:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1337:5:11"},"nodeType":"YulFunctionCall","src":"1337:9:11"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1331:2:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1355:14:11","value":{"kind":"number","nodeType":"YulLiteral","src":"1365:4:11","type":"","value":"0x20"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1359:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1392:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1394:16:11"},"nodeType":"YulFunctionCall","src":"1394:18:11"},"nodeType":"YulExpressionStatement","src":"1394:18:11"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1384:2:11"},{"name":"_2","nodeType":"YulIdentifier","src":"1388:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1381:2:11"},"nodeType":"YulFunctionCall","src":"1381:10:11"},"nodeType":"YulIf","src":"1378:36:11"},{"nodeType":"YulVariableDeclaration","src":"1423:47:11","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:11","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1461:2:11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1454:3:11"},"nodeType":"YulFunctionCall","src":"1454:10:11"},{"name":"_5","nodeType":"YulIdentifier","src":"1466:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1450:3:11"},"nodeType":"YulFunctionCall","src":"1450:19:11"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1434:15:11"},"nodeType":"YulFunctionCall","src":"1434:36:11"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1427:3:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1479:16:11","value":{"name":"dst","nodeType":"YulIdentifier","src":"1492:3:11"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1483:5:11","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1511:3:11"},{"name":"_4","nodeType":"YulIdentifier","src":"1516:2:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1504:6:11"},"nodeType":"YulFunctionCall","src":"1504:15:11"},"nodeType":"YulExpressionStatement","src":"1504:15:11"},{"nodeType":"YulAssignment","src":"1528:19:11","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1539:3:11"},{"name":"_5","nodeType":"YulIdentifier","src":"1544:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1535:3:11"},"nodeType":"YulFunctionCall","src":"1535:12:11"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1528:3:11"}]},{"nodeType":"YulVariableDeclaration","src":"1556:42:11","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1578:2:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1586:1:11","type":"","value":"6"},{"name":"_4","nodeType":"YulIdentifier","src":"1589:2:11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1582:3:11"},"nodeType":"YulFunctionCall","src":"1582:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1574:3:11"},"nodeType":"YulFunctionCall","src":"1574:19:11"},{"name":"_5","nodeType":"YulIdentifier","src":"1595:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1570:3:11"},"nodeType":"YulFunctionCall","src":"1570:28:11"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1560:6:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1630:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1639:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1642:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1632:6:11"},"nodeType":"YulFunctionCall","src":"1632:12:11"},"nodeType":"YulExpressionStatement","src":"1632:12:11"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1613:6:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1621:7:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1610:2:11"},"nodeType":"YulFunctionCall","src":"1610:19:11"},"nodeType":"YulIf","src":"1607:39:11"},{"nodeType":"YulVariableDeclaration","src":"1655:22:11","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1670:2:11"},{"name":"_5","nodeType":"YulIdentifier","src":"1674:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1666:3:11"},"nodeType":"YulFunctionCall","src":"1666:11:11"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1659:3:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1742:368:11","statements":[{"body":{"nodeType":"YulBlock","src":"1798:74:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1816:11:11","value":{"kind":"number","nodeType":"YulLiteral","src":"1826:1:11","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"1820:2:11","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"1851:2:11"},{"name":"_6","nodeType":"YulIdentifier","src":"1855:2:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1844:6:11"},"nodeType":"YulFunctionCall","src":"1844:14:11"},"nodeType":"YulExpressionStatement","src":"1844:14:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1767:7:11"},{"name":"src","nodeType":"YulIdentifier","src":"1776:3:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1763:3:11"},"nodeType":"YulFunctionCall","src":"1763:17:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1782:2:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1759:3:11"},"nodeType":"YulFunctionCall","src":"1759:26:11"},"nodeType":"YulIf","src":"1756:116:11"},{"nodeType":"YulVariableDeclaration","src":"1885:34:11","value":{"arguments":[],"functionName":{"name":"allocate_memory_575","nodeType":"YulIdentifier","src":"1898:19:11"},"nodeType":"YulFunctionCall","src":"1898:21:11"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1889:5:11","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1939:5:11"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1976:3:11"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1946:29:11"},"nodeType":"YulFunctionCall","src":"1946:34:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1932:6:11"},"nodeType":"YulFunctionCall","src":"1932:49:11"},"nodeType":"YulExpressionStatement","src":"1932:49:11"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2005:5:11"},{"name":"_5","nodeType":"YulIdentifier","src":"2012:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2001:3:11"},"nodeType":"YulFunctionCall","src":"2001:14:11"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2027:3:11"},{"name":"_5","nodeType":"YulIdentifier","src":"2032:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2023:3:11"},"nodeType":"YulFunctionCall","src":"2023:12:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2017:5:11"},"nodeType":"YulFunctionCall","src":"2017:19:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1994:6:11"},"nodeType":"YulFunctionCall","src":"1994:43:11"},"nodeType":"YulExpressionStatement","src":"1994:43:11"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2057:3:11"},{"name":"value","nodeType":"YulIdentifier","src":"2062:5:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2050:6:11"},"nodeType":"YulFunctionCall","src":"2050:18:11"},"nodeType":"YulExpressionStatement","src":"2050:18:11"},{"nodeType":"YulAssignment","src":"2081:19:11","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2092:3:11"},{"name":"_5","nodeType":"YulIdentifier","src":"2097:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2088:3:11"},"nodeType":"YulFunctionCall","src":"2088:12:11"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2081:3:11"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1697:3:11"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1702:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1694:2:11"},"nodeType":"YulFunctionCall","src":"1694:15:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:23:11","statements":[{"nodeType":"YulAssignment","src":"1712:19:11","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1723:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1728:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:11"},"nodeType":"YulFunctionCall","src":"1719:12:11"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1712:3:11"}]}]},"pre":{"nodeType":"YulBlock","src":"1690:3:11","statements":[]},"src":"1686:424:11"},{"nodeType":"YulAssignment","src":"2119:15:11","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2129:5:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2119:6:11"}]},{"nodeType":"YulAssignment","src":"2143:59:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2187:9:11"},{"name":"_5","nodeType":"YulIdentifier","src":"2198:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:11"},"nodeType":"YulFunctionCall","src":"2183:18:11"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2153:29:11"},"nodeType":"YulFunctionCall","src":"2153:49:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2143:6:11"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptrt_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"969:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"980:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"992:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1000:6:11","type":""}],"src":"863:1345:11"},{"body":{"nodeType":"YulBlock","src":"2314:102:11","statements":[{"nodeType":"YulAssignment","src":"2324:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2336:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:11"},"nodeType":"YulFunctionCall","src":"2332:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2324:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2366:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2381:6:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2397:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2402:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2393:3:11"},"nodeType":"YulFunctionCall","src":"2393:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"2406:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2389:3:11"},"nodeType":"YulFunctionCall","src":"2389:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2377:3:11"},"nodeType":"YulFunctionCall","src":"2377:32:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2359:6:11"},"nodeType":"YulFunctionCall","src":"2359:51:11"},"nodeType":"YulExpressionStatement","src":"2359:51:11"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2283:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2294:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2305:4:11","type":""}],"src":"2213:203:11"},{"body":{"nodeType":"YulBlock","src":"2453:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2470:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2477:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2482:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2473:3:11"},"nodeType":"YulFunctionCall","src":"2473:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2463:6:11"},"nodeType":"YulFunctionCall","src":"2463:31:11"},"nodeType":"YulExpressionStatement","src":"2463:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2513:4:11","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2503:6:11"},"nodeType":"YulFunctionCall","src":"2503:15:11"},"nodeType":"YulExpressionStatement","src":"2503:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2534:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2537:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2527:6:11"},"nodeType":"YulFunctionCall","src":"2527:15:11"},"nodeType":"YulExpressionStatement","src":"2527:15:11"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2421:127:11"},{"body":{"nodeType":"YulBlock","src":"2600:185:11","statements":[{"body":{"nodeType":"YulBlock","src":"2639:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2660:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2667:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2672:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2663:3:11"},"nodeType":"YulFunctionCall","src":"2663:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2653:6:11"},"nodeType":"YulFunctionCall","src":"2653:31:11"},"nodeType":"YulExpressionStatement","src":"2653:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2704:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2707:4:11","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2697:6:11"},"nodeType":"YulFunctionCall","src":"2697:15:11"},"nodeType":"YulExpressionStatement","src":"2697:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2732:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2735:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2725:6:11"},"nodeType":"YulFunctionCall","src":"2725:15:11"},"nodeType":"YulExpressionStatement","src":"2725:15:11"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2616:5:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2627:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2623:3:11"},"nodeType":"YulFunctionCall","src":"2623:6:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2613:2:11"},"nodeType":"YulFunctionCall","src":"2613:17:11"},"nodeType":"YulIf","src":"2610:140:11"},{"nodeType":"YulAssignment","src":"2759:20:11","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2770:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"2777:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2766:3:11"},"nodeType":"YulFunctionCall","src":"2766:13:11"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2759:3:11"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2582:5:11","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2592:3:11","type":""}],"src":"2553:232:11"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_575() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := 64\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        let _5 := 0x20\n        if gt(_4, _2) { panic_error_0x41() }\n        let dst := allocate_memory(add(shl(5, _4), _5))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _5)\n        let srcEnd := add(add(_3, shl(6, _4)), _5)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _5)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            if slt(sub(dataEnd, src), _1)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            let value := allocate_memory_575()\n            mstore(value, abi_decode_address_fromMemory(src))\n            mstore(add(value, _5), mload(add(src, _5)))\n            mstore(dst, value)\n            dst := add(dst, _5)\n        }\n        value0 := dst_1\n        value1 := abi_decode_address_fromMemory(add(headStart, _5))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x13D6 CODESIZE SUB DUP1 PUSH3 0x13D6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x41 SWAP2 PUSH3 0x1ED JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x7C DUP2 PUSH3 0x10C JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x103 JUMPI PUSH1 0x2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xA5 JUMPI PUSH3 0xA5 PUSH3 0x2E2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE SWAP4 DUP4 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x2 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP2 ADD MLOAD SWAP2 ADD SSTORE DUP1 PUSH3 0xFA DUP2 PUSH3 0x2F8 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x84 JUMP JUMPDEST POP POP POP PUSH3 0x320 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x197 JUMPI PUSH3 0x197 PUSH3 0x15C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1C8 JUMPI PUSH3 0x1C8 PUSH3 0x15C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP1 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x246 JUMPI PUSH3 0x246 PUSH3 0x15C JUMP JUMPDEST PUSH3 0x256 DUP2 DUP4 PUSH1 0x5 SHL ADD PUSH3 0x19D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP4 POP PUSH1 0x6 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH3 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x2C5 JUMPI DUP6 DUP6 DUP12 SUB SLT ISZERO PUSH3 0x296 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH3 0x2A0 PUSH3 0x172 JUMP JUMPDEST PUSH3 0x2AB DUP7 PUSH3 0x1D0 JUMP JUMPDEST DUP2 MSTORE DUP6 DUP4 ADD MLOAD DUP4 DUP3 ADD MSTORE DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH3 0x27C JUMP JUMPDEST SWAP7 POP PUSH3 0x2D4 DUP9 DUP3 ADD PUSH3 0x1D0 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x319 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x10A6 DUP1 PUSH3 0x330 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xF82F83FF EQ PUSH2 0x2BB JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22F JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH4 0x29A62A76 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x5D55307D EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x67457E4C EQ PUSH2 0x1BA JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x19908016 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x1F85E3CA EQ PUSH2 0x150 JUMPI PUSH2 0xFB JUMP JUMPDEST CALLDATASIZE PUSH2 0xFB JUMPI PUSH2 0xF9 CALLVALUE PUSH2 0x2F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF9 CALLVALUE PUSH2 0x2F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xD26 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x49D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x875 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD9 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x99E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26C PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28E PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xE3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH4 0x589ED34B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x323 PUSH1 0x19 DUP5 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x32D SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x353 JUMPI PUSH2 0x353 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x394 SWAP1 DUP8 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x39E SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x432 JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x440 SWAP1 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x336 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x456 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xAFF50328F57C9CED983A9E3C360C67EE11633D860350531F0C11FC435751448C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4A5 PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4CC JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x506 JUMPI PUSH1 0x40 MLOAD PUSH4 0x215E7C9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51D930F9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0xA3B261F2 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x550 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0x5A2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5BFFD1 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x5DD JUMPI PUSH2 0x5DD PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x66B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD PUSH1 0x1 SWAP3 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x62F JUMPI PUSH2 0x62F PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH2 0x667 SWAP1 PUSH2 0xF17 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x675 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5A6 JUMP JUMPDEST POP DUP1 PUSH1 0x0 SUB PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP1 SWAP5 DUP6 SWAP4 SWAP1 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x719 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x723 SWAP2 SWAP1 PUSH2 0x1011 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x732 DUP9 DUP7 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x73C SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP PUSH2 0x748 DUP2 DUP9 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x76B DUP5 DUP5 PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP12 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP PUSH2 0x843 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x87D PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x887 PUSH1 0x0 PUSH2 0xCB8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x891 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x8C7 JUMPI PUSH2 0x8C7 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x8DA SWAP2 SWAP1 PUSH2 0xE97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x8F2 JUMPI PUSH2 0x8F2 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD SELFBALANCE PUSH2 0x902 SWAP2 SWAP1 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x90C SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0xF01 JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x95A DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8AA JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP3 PUSH1 0x40 MLOAD PUSH2 0x992 SWAP2 SWAP1 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP3 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 MLOAD SWAP5 SWAP6 SWAP2 SWAP5 DUP7 SWAP5 SWAP2 SWAP4 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA23 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0xA2D SWAP2 SWAP1 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51D930F9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP7 AND SWAP1 PUSH4 0xA3B261F2 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAA1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5BFFD1 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xB06 JUMPI PUSH2 0xB06 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB36 JUMPI DUP2 PUSH2 0xB32 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0xB40 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xACF JUMP JUMPDEST POP DUP4 PUSH2 0xB54 DUP7 DUP4 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0xB5E SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB72 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x3 SWAP1 DUP2 SWAP1 DUP2 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB87 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xBD2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC2B PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC55 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x429 JUMP JUMPDEST PUSH2 0xC5E DUP2 PUSH2 0xCB8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x429 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD87 DUP4 PUSH2 0xD4F JUMP JUMPDEST SWAP2 POP PUSH2 0xD95 PUSH1 0x20 DUP5 ADD PUSH2 0xD4F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBA DUP4 PUSH2 0xD4F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x86F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP5 DUP5 PUSH2 0xDC8 JUMP JUMPDEST SWAP2 POP PUSH2 0xD95 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xDC8 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xE36 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xE0E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE8A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xE5C JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD48 DUP3 PUSH2 0xD4F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xEFC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xF29 JUMPI PUSH2 0xF29 PUSH2 0xEB2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0xF97 JUMPI PUSH2 0xF97 PUSH2 0xF30 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xFBC JUMPI PUSH2 0xFBC PUSH2 0xF30 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xFDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xB5E JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xE36 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x105A DUP4 PUSH2 0xD4F JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1040 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0xA156C169C8D0A1E5 GAS PUSH0 GT PUSH32 0x4B2F25199C828EFA0B5ABCDC32417A0C61587B64736F6C634300081400330000 ","sourceMap":"356:4977:7:-:0;;;646:32;;;-1:-1:-1;;646:32:7;674:4;646:32;;;923:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;987:6;-1:-1:-1;;;;;1273:26:3;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:3;;1350:1;1322:31;;;2359:51:11;2332:18;;1322:31:3;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1713:1:5;1917:21;;1009:9:7::1;1005:96;1024:9;:16;1020:1;:20;1005:96;;;1061:10;1077:9;1087:1;1077:12;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;1061:29;;::::1;::::0;;::::1;::::0;;-1:-1:-1;1061:29:7;;;;;;;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;;;;;;1061:29:7::1;-1:-1:-1::0;;;;;1061:29:7;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;1042:3;::::1;::::0;::::1;:::i;:::-;;;;1005:96;;;;923:184:::0;;356:4977;;2912:187:3;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:3;;;-1:-1:-1;;;;;;3020:17:3;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:127:11:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;217:2;211:9;;;247:15;;-1:-1:-1;;;;;277:34:11;;313:22;;;274:62;271:88;;;339:18;;:::i;:::-;375:2;368:22;146:250;:::o;401:275::-;472:2;466:9;537:2;518:13;;-1:-1:-1;;514:27:11;502:40;;-1:-1:-1;;;;;557:34:11;;593:22;;;554:62;551:88;;;619:18;;:::i;:::-;655:2;648:22;401:275;;-1:-1:-1;401:275:11:o;681:177::-;760:13;;-1:-1:-1;;;;;802:31:11;;792:42;;782:70;;848:1;845;838:12;782:70;681:177;;;:::o;863:1345::-;992:6;1000;1031:2;1074;1062:9;1053:7;1049:23;1045:32;1042:52;;;1090:1;1087;1080:12;1042:52;1117:16;;-1:-1:-1;;;;;1182:14:11;;;1179:34;;;1209:1;1206;1199:12;1179:34;1247:6;1236:9;1232:22;1222:32;;1292:7;1285:4;1281:2;1277:13;1273:27;1263:55;;1314:1;1311;1304:12;1263:55;1343:2;1337:9;1365:4;1388:2;1384;1381:10;1378:36;;;1394:18;;:::i;:::-;1434:36;1466:2;1461;1458:1;1454:10;1450:19;1434:36;:::i;:::-;1504:15;;;1535:12;;;;-1:-1:-1;1586:1:11;1582:10;;;;1574:19;;1570:28;;;1610:19;;;1607:39;;;1642:1;1639;1632:12;1607:39;1666:11;;;;1686:424;1702:6;1697:3;1694:15;1686:424;;;1782:2;1776:3;1767:7;1763:17;1759:26;1756:116;;;1826:1;1855:2;1851;1844:14;1756:116;1898:21;;:::i;:::-;1946:34;1976:3;1946:34;:::i;:::-;1932:49;;2023:12;;;2017:19;2001:14;;;1994:43;2050:18;;1719:12;;;;2088;;;;1686:424;;;2129:5;-1:-1:-1;2153:49:11;2183:18;;;2153:49;:::i;:::-;2143:59;;;;;;;863:1345;;;;;:::o;2421:127::-;2482:10;2477:3;2473:20;2470:1;2463:31;2513:4;2510:1;2503:15;2537:4;2534:1;2527:15;2553:232;2592:3;2613:17;;;2610:140;;2672:10;2667:3;2663:20;2660:1;2653:31;2707:4;2704:1;2697:15;2735:4;2732:1;2725:15;2610:140;-1:-1:-1;2777:1:11;2766:13;;2553:232::o;:::-;356:4977:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_PERCENTAGE_553":{"entryPoint":null,"id":553,"parameterSlots":0,"returnSlots":0},"@MAX_WINNERS_559":{"entryPoint":null,"id":559,"parameterSlots":0,"returnSlots":0},"@SHARE_PRECISION_556":{"entryPoint":null,"id":556,"parameterSlots":0,"returnSlots":0},"@_1102":{"entryPoint":null,"id":1102,"parameterSlots":0,"returnSlots":0},"@_1111":{"entryPoint":null,"id":1111,"parameterSlots":0,"returnSlots":0},"@_checkOwner_359":{"entryPoint":3169,"id":359,"parameterSlots":0,"returnSlots":0},"@_handleDeposit_1093":{"entryPoint":753,"id":1093,"parameterSlots":1,"returnSlots":0},"@_msgSender_434":{"entryPoint":null,"id":434,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_509":{"entryPoint":null,"id":509,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_501":{"entryPoint":3214,"id":501,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_421":{"entryPoint":3256,"id":421,"parameterSlots":1,"returnSlots":0},"@claimPrize_882":{"entryPoint":1181,"id":882,"parameterSlots":2,"returnSlots":0},"@getCountryPrize_1024":{"entryPoint":null,"id":1024,"parameterSlots":1,"returnSlots":1},"@getCreators_1002":{"entryPoint":2990,"id":1002,"parameterSlots":0,"returnSlots":1},"@getPrize_968":{"entryPoint":2462,"id":968,"parameterSlots":2,"returnSlots":1},"@getWinners_1012":{"entryPoint":2922,"id":1012,"parameterSlots":0,"returnSlots":1},"@isClaimed_992":{"entryPoint":2119,"id":992,"parameterSlots":2,"returnSlots":1},"@isMintOpen_976":{"entryPoint":null,"id":976,"parameterSlots":0,"returnSlots":1},"@owner_342":{"entryPoint":null,"id":342,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_373":{"entryPoint":2165,"id":373,"parameterSlots":0,"returnSlots":0},"@setMintStatus_643":{"entryPoint":1102,"id":643,"parameterSlots":1,"returnSlots":0},"@setWinners_712":{"entryPoint":2185,"id":712,"parameterSlots":2,"returnSlots":0},"@transferOwnership_401":{"entryPoint":3107,"id":401,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":3407,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_calldata":{"entryPoint":3528,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3735,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3435,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes32":{"entryPoint":3486,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr":{"entryPoint":3545,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory":{"entryPoint":3910,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool":{"entryPoint":3366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":4088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":4151,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":3589,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3647,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4132,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3807,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3784,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4113,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3863,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3762,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3841,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3888,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7158:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:11","statements":[{"nodeType":"YulAssignment","src":"125:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:11"},"nodeType":"YulFunctionCall","src":"133:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:11"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:11"},"nodeType":"YulFunctionCall","src":"160:25:11"},"nodeType":"YulExpressionStatement","src":"160:25:11"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:11","type":""}],"src":"14:177:11"},{"body":{"nodeType":"YulBlock","src":"291:92:11","statements":[{"nodeType":"YulAssignment","src":"301:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"313:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"324:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"309:3:11"},"nodeType":"YulFunctionCall","src":"309:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"301:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"343:9:11"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"368:6:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"361:6:11"},"nodeType":"YulFunctionCall","src":"361:14:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"354:6:11"},"nodeType":"YulFunctionCall","src":"354:22:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:11"},"nodeType":"YulFunctionCall","src":"336:41:11"},"nodeType":"YulExpressionStatement","src":"336:41:11"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"271:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"282:4:11","type":""}],"src":"196:187:11"},{"body":{"nodeType":"YulBlock","src":"455:206:11","statements":[{"body":{"nodeType":"YulBlock","src":"501:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"510:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"513:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"503:6:11"},"nodeType":"YulFunctionCall","src":"503:12:11"},"nodeType":"YulExpressionStatement","src":"503:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"476:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"485:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"472:3:11"},"nodeType":"YulFunctionCall","src":"472:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"497:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"468:3:11"},"nodeType":"YulFunctionCall","src":"468:32:11"},"nodeType":"YulIf","src":"465:52:11"},{"nodeType":"YulVariableDeclaration","src":"526:36:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"552:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"539:12:11"},"nodeType":"YulFunctionCall","src":"539:23:11"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"530:5:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"615:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"627:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"617:6:11"},"nodeType":"YulFunctionCall","src":"617:12:11"},"nodeType":"YulExpressionStatement","src":"617:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"584:5:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"605:5:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"598:6:11"},"nodeType":"YulFunctionCall","src":"598:13:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"591:6:11"},"nodeType":"YulFunctionCall","src":"591:21:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"581:2:11"},"nodeType":"YulFunctionCall","src":"581:32:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"574:6:11"},"nodeType":"YulFunctionCall","src":"574:40:11"},"nodeType":"YulIf","src":"571:60:11"},{"nodeType":"YulAssignment","src":"640:15:11","value":{"name":"value","nodeType":"YulIdentifier","src":"650:5:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"640:6:11"}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"421:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"432:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"444:6:11","type":""}],"src":"388:273:11"},{"body":{"nodeType":"YulBlock","src":"715:124:11","statements":[{"nodeType":"YulAssignment","src":"725:29:11","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"747:6:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"734:12:11"},"nodeType":"YulFunctionCall","src":"734:20:11"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"725:5:11"}]},{"body":{"nodeType":"YulBlock","src":"817:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"826:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"829:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"819:6:11"},"nodeType":"YulFunctionCall","src":"819:12:11"},"nodeType":"YulExpressionStatement","src":"819:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"776:5:11"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"787:5:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"802:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"807:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"798:3:11"},"nodeType":"YulFunctionCall","src":"798:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"811:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"794:3:11"},"nodeType":"YulFunctionCall","src":"794:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"783:3:11"},"nodeType":"YulFunctionCall","src":"783:31:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"773:2:11"},"nodeType":"YulFunctionCall","src":"773:42:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"766:6:11"},"nodeType":"YulFunctionCall","src":"766:50:11"},"nodeType":"YulIf","src":"763:70:11"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"694:6:11","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"705:5:11","type":""}],"src":"666:173:11"},{"body":{"nodeType":"YulBlock","src":"931:173:11","statements":[{"body":{"nodeType":"YulBlock","src":"977:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"986:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"979:6:11"},"nodeType":"YulFunctionCall","src":"979:12:11"},"nodeType":"YulExpressionStatement","src":"979:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"952:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"961:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"948:3:11"},"nodeType":"YulFunctionCall","src":"948:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"973:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"944:3:11"},"nodeType":"YulFunctionCall","src":"944:32:11"},"nodeType":"YulIf","src":"941:52:11"},{"nodeType":"YulAssignment","src":"1002:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1031:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1012:18:11"},"nodeType":"YulFunctionCall","src":"1012:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1002:6:11"}]},{"nodeType":"YulAssignment","src":"1050:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1083:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1094:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:11"},"nodeType":"YulFunctionCall","src":"1079:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1060:18:11"},"nodeType":"YulFunctionCall","src":"1060:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1050:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"889:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"900:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"912:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"920:6:11","type":""}],"src":"844:260:11"},{"body":{"nodeType":"YulBlock","src":"1196:167:11","statements":[{"body":{"nodeType":"YulBlock","src":"1242:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1251:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1244:6:11"},"nodeType":"YulFunctionCall","src":"1244:12:11"},"nodeType":"YulExpressionStatement","src":"1244:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1217:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1226:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1213:3:11"},"nodeType":"YulFunctionCall","src":"1213:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1238:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1209:3:11"},"nodeType":"YulFunctionCall","src":"1209:32:11"},"nodeType":"YulIf","src":"1206:52:11"},{"nodeType":"YulAssignment","src":"1267:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1296:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1277:18:11"},"nodeType":"YulFunctionCall","src":"1277:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1267:6:11"}]},{"nodeType":"YulAssignment","src":"1315:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1353:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:11"},"nodeType":"YulFunctionCall","src":"1338:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1325:12:11"},"nodeType":"YulFunctionCall","src":"1325:32:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1315:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1154:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1165:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1177:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1185:6:11","type":""}],"src":"1109:254:11"},{"body":{"nodeType":"YulBlock","src":"1440:87:11","statements":[{"nodeType":"YulAssignment","src":"1450:18:11","value":{"name":"offset","nodeType":"YulIdentifier","src":"1462:6:11"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1450:8:11"}]},{"body":{"nodeType":"YulBlock","src":"1505:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1514:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1517:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1507:6:11"},"nodeType":"YulFunctionCall","src":"1507:12:11"},"nodeType":"YulExpressionStatement","src":"1507:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1487:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"1495:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1483:3:11"},"nodeType":"YulFunctionCall","src":"1483:15:11"},{"name":"end","nodeType":"YulIdentifier","src":"1500:3:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1480:2:11"},"nodeType":"YulFunctionCall","src":"1480:24:11"},"nodeType":"YulIf","src":"1477:44:11"}]},"name":"abi_decode_array_address_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1411:6:11","type":""},{"name":"end","nodeType":"YulTypedName","src":"1419:3:11","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1427:8:11","type":""}],"src":"1368:159:11"},{"body":{"nodeType":"YulBlock","src":"1669:222:11","statements":[{"body":{"nodeType":"YulBlock","src":"1716:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1725:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1728:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1718:6:11"},"nodeType":"YulFunctionCall","src":"1718:12:11"},"nodeType":"YulExpressionStatement","src":"1718:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1690:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1699:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1686:3:11"},"nodeType":"YulFunctionCall","src":"1686:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1711:3:11","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1682:3:11"},"nodeType":"YulFunctionCall","src":"1682:33:11"},"nodeType":"YulIf","src":"1679:53:11"},{"nodeType":"YulAssignment","src":"1741:63:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1785:9:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1796:7:11"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"1751:33:11"},"nodeType":"YulFunctionCall","src":"1751:53:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1741:6:11"}]},{"nodeType":"YulAssignment","src":"1813:72:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1861:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1872:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1857:3:11"},"nodeType":"YulFunctionCall","src":"1857:18:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1877:7:11"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"1823:33:11"},"nodeType":"YulFunctionCall","src":"1823:62:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1813:6:11"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1627:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1638:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1650:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1658:6:11","type":""}],"src":"1532:359:11"},{"body":{"nodeType":"YulBlock","src":"1997:102:11","statements":[{"nodeType":"YulAssignment","src":"2007:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2019:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2030:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2015:3:11"},"nodeType":"YulFunctionCall","src":"2015:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2007:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2049:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2080:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2085:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2076:3:11"},"nodeType":"YulFunctionCall","src":"2076:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"2089:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2072:3:11"},"nodeType":"YulFunctionCall","src":"2072:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2060:3:11"},"nodeType":"YulFunctionCall","src":"2060:32:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2042:6:11"},"nodeType":"YulFunctionCall","src":"2042:51:11"},"nodeType":"YulExpressionStatement","src":"2042:51:11"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1966:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1977:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1988:4:11","type":""}],"src":"1896:203:11"},{"body":{"nodeType":"YulBlock","src":"2251:373:11","statements":[{"nodeType":"YulAssignment","src":"2261:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2273:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2284:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2269:3:11"},"nodeType":"YulFunctionCall","src":"2269:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2261:4:11"}]},{"nodeType":"YulVariableDeclaration","src":"2296:20:11","value":{"name":"headStart","nodeType":"YulIdentifier","src":"2307:9:11"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2300:3:11","type":""}]},{"nodeType":"YulAssignment","src":"2325:16:11","value":{"name":"headStart","nodeType":"YulIdentifier","src":"2332:9:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2325:3:11"}]},{"nodeType":"YulVariableDeclaration","src":"2350:20:11","value":{"name":"value0","nodeType":"YulIdentifier","src":"2364:6:11"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2354:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2379:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"2388:1:11","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2383:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"2445:173:11","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2466:3:11"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2481:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2475:5:11"},"nodeType":"YulFunctionCall","src":"2475:13:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2498:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2503:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2494:3:11"},"nodeType":"YulFunctionCall","src":"2494:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"2507:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2490:3:11"},"nodeType":"YulFunctionCall","src":"2490:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2471:3:11"},"nodeType":"YulFunctionCall","src":"2471:39:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:11"},"nodeType":"YulFunctionCall","src":"2459:52:11"},"nodeType":"YulExpressionStatement","src":"2459:52:11"},{"nodeType":"YulVariableDeclaration","src":"2524:14:11","value":{"kind":"number","nodeType":"YulLiteral","src":"2534:4:11","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2528:2:11","type":""}]},{"nodeType":"YulAssignment","src":"2551:19:11","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2562:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"2567:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2558:3:11"},"nodeType":"YulFunctionCall","src":"2558:12:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2551:3:11"}]},{"nodeType":"YulAssignment","src":"2583:25:11","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2597:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"2605:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2593:3:11"},"nodeType":"YulFunctionCall","src":"2593:15:11"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2583:6:11"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2409:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"2412:4:11","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2406:2:11"},"nodeType":"YulFunctionCall","src":"2406:11:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2418:18:11","statements":[{"nodeType":"YulAssignment","src":"2420:14:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2429:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"2432:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2425:3:11"},"nodeType":"YulFunctionCall","src":"2425:9:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2420:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"2402:3:11","statements":[]},"src":"2398:220:11"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2220:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2231:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2242:4:11","type":""}],"src":"2104:520:11"},{"body":{"nodeType":"YulBlock","src":"2830:613:11","statements":[{"nodeType":"YulVariableDeclaration","src":"2840:12:11","value":{"kind":"number","nodeType":"YulLiteral","src":"2850:2:11","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2844:2:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2861:32:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2879:9:11"},{"name":"_1","nodeType":"YulIdentifier","src":"2890:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2875:3:11"},"nodeType":"YulFunctionCall","src":"2875:18:11"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2865:6:11","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2909:9:11"},{"name":"_1","nodeType":"YulIdentifier","src":"2920:2:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2902:6:11"},"nodeType":"YulFunctionCall","src":"2902:21:11"},"nodeType":"YulExpressionStatement","src":"2902:21:11"},{"nodeType":"YulVariableDeclaration","src":"2932:17:11","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2943:6:11"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2936:3:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2958:27:11","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2978:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2972:5:11"},"nodeType":"YulFunctionCall","src":"2972:13:11"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2962:6:11","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"3001:6:11"},{"name":"length","nodeType":"YulIdentifier","src":"3009:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2994:6:11"},"nodeType":"YulFunctionCall","src":"2994:22:11"},"nodeType":"YulExpressionStatement","src":"2994:22:11"},{"nodeType":"YulVariableDeclaration","src":"3025:12:11","value":{"kind":"number","nodeType":"YulLiteral","src":"3035:2:11","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3029:2:11","type":""}]},{"nodeType":"YulAssignment","src":"3046:25:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3057:9:11"},{"name":"_2","nodeType":"YulIdentifier","src":"3068:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3053:3:11"},"nodeType":"YulFunctionCall","src":"3053:18:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3046:3:11"}]},{"nodeType":"YulVariableDeclaration","src":"3080:29:11","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3098:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"3106:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3094:3:11"},"nodeType":"YulFunctionCall","src":"3094:15:11"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3084:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3118:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"3127:1:11","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3122:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"3186:231:11","statements":[{"nodeType":"YulVariableDeclaration","src":"3200:23:11","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3216:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3210:5:11"},"nodeType":"YulFunctionCall","src":"3210:13:11"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3204:2:11","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3243:3:11"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3258:2:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3252:5:11"},"nodeType":"YulFunctionCall","src":"3252:9:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3271:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3276:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3267:3:11"},"nodeType":"YulFunctionCall","src":"3267:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"3280:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3263:3:11"},"nodeType":"YulFunctionCall","src":"3263:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3248:3:11"},"nodeType":"YulFunctionCall","src":"3248:35:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3236:6:11"},"nodeType":"YulFunctionCall","src":"3236:48:11"},"nodeType":"YulExpressionStatement","src":"3236:48:11"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3308:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"3313:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3304:3:11"},"nodeType":"YulFunctionCall","src":"3304:12:11"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3328:2:11"},{"name":"_1","nodeType":"YulIdentifier","src":"3332:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3324:3:11"},"nodeType":"YulFunctionCall","src":"3324:11:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3318:5:11"},"nodeType":"YulFunctionCall","src":"3318:18:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3297:6:11"},"nodeType":"YulFunctionCall","src":"3297:40:11"},"nodeType":"YulExpressionStatement","src":"3297:40:11"},{"nodeType":"YulAssignment","src":"3350:19:11","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3361:3:11"},{"name":"_2","nodeType":"YulIdentifier","src":"3366:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3357:3:11"},"nodeType":"YulFunctionCall","src":"3357:12:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3350:3:11"}]},{"nodeType":"YulAssignment","src":"3382:25:11","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3396:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"3404:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3392:3:11"},"nodeType":"YulFunctionCall","src":"3392:15:11"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3382:6:11"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3148:1:11"},{"name":"length","nodeType":"YulIdentifier","src":"3151:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3145:2:11"},"nodeType":"YulFunctionCall","src":"3145:13:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3159:18:11","statements":[{"nodeType":"YulAssignment","src":"3161:14:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3170:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"3173:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3166:3:11"},"nodeType":"YulFunctionCall","src":"3166:9:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3161:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"3141:3:11","statements":[]},"src":"3137:280:11"},{"nodeType":"YulAssignment","src":"3426:11:11","value":{"name":"pos","nodeType":"YulIdentifier","src":"3434:3:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3426:4:11"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2799:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2810:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2821:4:11","type":""}],"src":"2629:814:11"},{"body":{"nodeType":"YulBlock","src":"3518:116:11","statements":[{"body":{"nodeType":"YulBlock","src":"3564:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3573:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3576:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3566:6:11"},"nodeType":"YulFunctionCall","src":"3566:12:11"},"nodeType":"YulExpressionStatement","src":"3566:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3539:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3535:3:11"},"nodeType":"YulFunctionCall","src":"3535:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"3560:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3531:3:11"},"nodeType":"YulFunctionCall","src":"3531:32:11"},"nodeType":"YulIf","src":"3528:52:11"},{"nodeType":"YulAssignment","src":"3589:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3618:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3599:18:11"},"nodeType":"YulFunctionCall","src":"3599:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3589:6:11"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3484:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3495:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3507:6:11","type":""}],"src":"3448:186:11"},{"body":{"nodeType":"YulBlock","src":"3671:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3688:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3695:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3700:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3691:3:11"},"nodeType":"YulFunctionCall","src":"3691:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3681:6:11"},"nodeType":"YulFunctionCall","src":"3681:31:11"},"nodeType":"YulExpressionStatement","src":"3681:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3728:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3731:4:11","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3721:6:11"},"nodeType":"YulFunctionCall","src":"3721:15:11"},"nodeType":"YulExpressionStatement","src":"3721:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3752:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3755:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3745:6:11"},"nodeType":"YulFunctionCall","src":"3745:15:11"},"nodeType":"YulExpressionStatement","src":"3745:15:11"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3639:127:11"},{"body":{"nodeType":"YulBlock","src":"3823:116:11","statements":[{"nodeType":"YulAssignment","src":"3833:20:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3848:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"3851:1:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3844:3:11"},"nodeType":"YulFunctionCall","src":"3844:9:11"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3833:7:11"}]},{"body":{"nodeType":"YulBlock","src":"3911:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3913:16:11"},"nodeType":"YulFunctionCall","src":"3913:18:11"},"nodeType":"YulExpressionStatement","src":"3913:18:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3882:1:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3875:6:11"},"nodeType":"YulFunctionCall","src":"3875:9:11"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3889:1:11"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3896:7:11"},{"name":"x","nodeType":"YulIdentifier","src":"3905:1:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3892:3:11"},"nodeType":"YulFunctionCall","src":"3892:15:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3886:2:11"},"nodeType":"YulFunctionCall","src":"3886:22:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3872:2:11"},"nodeType":"YulFunctionCall","src":"3872:37:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3865:6:11"},"nodeType":"YulFunctionCall","src":"3865:45:11"},"nodeType":"YulIf","src":"3862:71:11"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3802:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"3805:1:11","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3811:7:11","type":""}],"src":"3771:168:11"},{"body":{"nodeType":"YulBlock","src":"3990:171:11","statements":[{"body":{"nodeType":"YulBlock","src":"4021:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4042:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4049:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4054:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4045:3:11"},"nodeType":"YulFunctionCall","src":"4045:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4035:6:11"},"nodeType":"YulFunctionCall","src":"4035:31:11"},"nodeType":"YulExpressionStatement","src":"4035:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4086:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4089:4:11","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4079:6:11"},"nodeType":"YulFunctionCall","src":"4079:15:11"},"nodeType":"YulExpressionStatement","src":"4079:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4114:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4117:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4107:6:11"},"nodeType":"YulFunctionCall","src":"4107:15:11"},"nodeType":"YulExpressionStatement","src":"4107:15:11"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4010:1:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4003:6:11"},"nodeType":"YulFunctionCall","src":"4003:9:11"},"nodeType":"YulIf","src":"4000:132:11"},{"nodeType":"YulAssignment","src":"4141:14:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4150:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"4153:1:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4146:3:11"},"nodeType":"YulFunctionCall","src":"4146:9:11"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4141:1:11"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3975:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"3978:1:11","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"3984:1:11","type":""}],"src":"3944:217:11"},{"body":{"nodeType":"YulBlock","src":"4198:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4215:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4222:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4227:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4218:3:11"},"nodeType":"YulFunctionCall","src":"4218:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4208:6:11"},"nodeType":"YulFunctionCall","src":"4208:31:11"},"nodeType":"YulExpressionStatement","src":"4208:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4255:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4258:4:11","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4248:6:11"},"nodeType":"YulFunctionCall","src":"4248:15:11"},"nodeType":"YulExpressionStatement","src":"4248:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4272:6:11"},"nodeType":"YulFunctionCall","src":"4272:15:11"},"nodeType":"YulExpressionStatement","src":"4272:15:11"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4166:127:11"},{"body":{"nodeType":"YulBlock","src":"4489:14:11","statements":[{"nodeType":"YulAssignment","src":"4491:10:11","value":{"name":"pos","nodeType":"YulIdentifier","src":"4498:3:11"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4491:3:11"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4473:3:11","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4481:3:11","type":""}],"src":"4298:205:11"},{"body":{"nodeType":"YulBlock","src":"4637:145:11","statements":[{"nodeType":"YulAssignment","src":"4647:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4659:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4670:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4655:3:11"},"nodeType":"YulFunctionCall","src":"4655:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4647:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4689:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4704:6:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4720:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4725:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4716:3:11"},"nodeType":"YulFunctionCall","src":"4716:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"4729:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4712:3:11"},"nodeType":"YulFunctionCall","src":"4712:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4700:3:11"},"nodeType":"YulFunctionCall","src":"4700:32:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4682:6:11"},"nodeType":"YulFunctionCall","src":"4682:51:11"},"nodeType":"YulExpressionStatement","src":"4682:51:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4753:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4764:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4749:3:11"},"nodeType":"YulFunctionCall","src":"4749:18:11"},{"name":"value1","nodeType":"YulIdentifier","src":"4769:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4742:6:11"},"nodeType":"YulFunctionCall","src":"4742:34:11"},"nodeType":"YulExpressionStatement","src":"4742:34:11"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4598:9:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4609:6:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4617:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4628:4:11","type":""}],"src":"4508:274:11"},{"body":{"nodeType":"YulBlock","src":"4834:88:11","statements":[{"body":{"nodeType":"YulBlock","src":"4865:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4867:16:11"},"nodeType":"YulFunctionCall","src":"4867:18:11"},"nodeType":"YulExpressionStatement","src":"4867:18:11"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4850:5:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4861:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4857:3:11"},"nodeType":"YulFunctionCall","src":"4857:6:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4847:2:11"},"nodeType":"YulFunctionCall","src":"4847:17:11"},"nodeType":"YulIf","src":"4844:43:11"},{"nodeType":"YulAssignment","src":"4896:20:11","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4907:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"4914:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4903:3:11"},"nodeType":"YulFunctionCall","src":"4903:13:11"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4896:3:11"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4816:5:11","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4826:3:11","type":""}],"src":"4787:135:11"},{"body":{"nodeType":"YulBlock","src":"4959:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4976:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4983:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4988:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4979:3:11"},"nodeType":"YulFunctionCall","src":"4979:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4969:6:11"},"nodeType":"YulFunctionCall","src":"4969:31:11"},"nodeType":"YulExpressionStatement","src":"4969:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5016:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5019:4:11","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5009:6:11"},"nodeType":"YulFunctionCall","src":"5009:15:11"},"nodeType":"YulExpressionStatement","src":"5009:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5040:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5043:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5033:6:11"},"nodeType":"YulFunctionCall","src":"5033:15:11"},"nodeType":"YulExpressionStatement","src":"5033:15:11"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"4927:127:11"},{"body":{"nodeType":"YulBlock","src":"5165:999:11","statements":[{"nodeType":"YulVariableDeclaration","src":"5175:12:11","value":{"kind":"number","nodeType":"YulLiteral","src":"5185:2:11","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5179:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5232:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5241:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5244:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5234:6:11"},"nodeType":"YulFunctionCall","src":"5234:12:11"},"nodeType":"YulExpressionStatement","src":"5234:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5207:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"5216:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5203:3:11"},"nodeType":"YulFunctionCall","src":"5203:23:11"},{"name":"_1","nodeType":"YulIdentifier","src":"5228:2:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5199:3:11"},"nodeType":"YulFunctionCall","src":"5199:32:11"},"nodeType":"YulIf","src":"5196:52:11"},{"nodeType":"YulVariableDeclaration","src":"5257:30:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5277:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5271:5:11"},"nodeType":"YulFunctionCall","src":"5271:16:11"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5261:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5296:28:11","value":{"kind":"number","nodeType":"YulLiteral","src":"5306:18:11","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5300:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5351:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5360:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5363:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5353:6:11"},"nodeType":"YulFunctionCall","src":"5353:12:11"},"nodeType":"YulExpressionStatement","src":"5353:12:11"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5339:6:11"},{"name":"_2","nodeType":"YulIdentifier","src":"5347:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5336:2:11"},"nodeType":"YulFunctionCall","src":"5336:14:11"},"nodeType":"YulIf","src":"5333:34:11"},{"nodeType":"YulVariableDeclaration","src":"5376:32:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5390:9:11"},{"name":"offset","nodeType":"YulIdentifier","src":"5401:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5386:3:11"},"nodeType":"YulFunctionCall","src":"5386:22:11"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5380:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5456:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5465:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5468:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5458:6:11"},"nodeType":"YulFunctionCall","src":"5458:12:11"},"nodeType":"YulExpressionStatement","src":"5458:12:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5435:2:11"},{"kind":"number","nodeType":"YulLiteral","src":"5439:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5431:3:11"},"nodeType":"YulFunctionCall","src":"5431:13:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5446:7:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5427:3:11"},"nodeType":"YulFunctionCall","src":"5427:27:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5420:6:11"},"nodeType":"YulFunctionCall","src":"5420:35:11"},"nodeType":"YulIf","src":"5417:55:11"},{"nodeType":"YulVariableDeclaration","src":"5481:19:11","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5497:2:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5491:5:11"},"nodeType":"YulFunctionCall","src":"5491:9:11"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5485:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5523:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5525:16:11"},"nodeType":"YulFunctionCall","src":"5525:18:11"},"nodeType":"YulExpressionStatement","src":"5525:18:11"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"5515:2:11"},{"name":"_2","nodeType":"YulIdentifier","src":"5519:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5512:2:11"},"nodeType":"YulFunctionCall","src":"5512:10:11"},"nodeType":"YulIf","src":"5509:36:11"},{"nodeType":"YulVariableDeclaration","src":"5554:20:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5568:1:11","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"5571:2:11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5564:3:11"},"nodeType":"YulFunctionCall","src":"5564:10:11"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5558:2:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5583:23:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5603:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5597:5:11"},"nodeType":"YulFunctionCall","src":"5597:9:11"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5587:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5615:56:11","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5637:6:11"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"5653:2:11"},{"kind":"number","nodeType":"YulLiteral","src":"5657:2:11","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5649:3:11"},"nodeType":"YulFunctionCall","src":"5649:11:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5666:2:11","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5662:3:11"},"nodeType":"YulFunctionCall","src":"5662:7:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5645:3:11"},"nodeType":"YulFunctionCall","src":"5645:25:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5633:3:11"},"nodeType":"YulFunctionCall","src":"5633:38:11"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5619:10:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5730:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5732:16:11"},"nodeType":"YulFunctionCall","src":"5732:18:11"},"nodeType":"YulExpressionStatement","src":"5732:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5689:10:11"},{"name":"_2","nodeType":"YulIdentifier","src":"5701:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5686:2:11"},"nodeType":"YulFunctionCall","src":"5686:18:11"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5709:10:11"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5721:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5706:2:11"},"nodeType":"YulFunctionCall","src":"5706:22:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5683:2:11"},"nodeType":"YulFunctionCall","src":"5683:46:11"},"nodeType":"YulIf","src":"5680:72:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5768:2:11","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5772:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5761:6:11"},"nodeType":"YulFunctionCall","src":"5761:22:11"},"nodeType":"YulExpressionStatement","src":"5761:22:11"},{"nodeType":"YulVariableDeclaration","src":"5792:17:11","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5803:6:11"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5796:3:11","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5825:6:11"},{"name":"_4","nodeType":"YulIdentifier","src":"5833:2:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5818:6:11"},"nodeType":"YulFunctionCall","src":"5818:18:11"},"nodeType":"YulExpressionStatement","src":"5818:18:11"},{"nodeType":"YulAssignment","src":"5845:22:11","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5856:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"5864:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5852:3:11"},"nodeType":"YulFunctionCall","src":"5852:15:11"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5845:3:11"}]},{"nodeType":"YulVariableDeclaration","src":"5876:34:11","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5898:2:11"},{"name":"_5","nodeType":"YulIdentifier","src":"5902:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5894:3:11"},"nodeType":"YulFunctionCall","src":"5894:11:11"},{"name":"_1","nodeType":"YulIdentifier","src":"5907:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5890:3:11"},"nodeType":"YulFunctionCall","src":"5890:20:11"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5880:6:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5942:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5951:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5954:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5944:6:11"},"nodeType":"YulFunctionCall","src":"5944:12:11"},"nodeType":"YulExpressionStatement","src":"5944:12:11"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5925:6:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5933:7:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5922:2:11"},"nodeType":"YulFunctionCall","src":"5922:19:11"},"nodeType":"YulIf","src":"5919:39:11"},{"nodeType":"YulVariableDeclaration","src":"5967:22:11","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5982:2:11"},{"name":"_1","nodeType":"YulIdentifier","src":"5986:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5978:3:11"},"nodeType":"YulFunctionCall","src":"5978:11:11"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5971:3:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"6054:79:11","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6075:3:11"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6086:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6080:5:11"},"nodeType":"YulFunctionCall","src":"6080:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6068:6:11"},"nodeType":"YulFunctionCall","src":"6068:23:11"},"nodeType":"YulExpressionStatement","src":"6068:23:11"},{"nodeType":"YulAssignment","src":"6104:19:11","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6115:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"6120:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6111:3:11"},"nodeType":"YulFunctionCall","src":"6111:12:11"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6104:3:11"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6009:3:11"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6014:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6006:2:11"},"nodeType":"YulFunctionCall","src":"6006:15:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6022:23:11","statements":[{"nodeType":"YulAssignment","src":"6024:19:11","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6035:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"6040:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6031:3:11"},"nodeType":"YulFunctionCall","src":"6031:12:11"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6024:3:11"}]}]},"pre":{"nodeType":"YulBlock","src":"6002:3:11","statements":[]},"src":"5998:135:11"},{"nodeType":"YulAssignment","src":"6142:16:11","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6152:6:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6142:6:11"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5131:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5142:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5154:6:11","type":""}],"src":"5059:1105:11"},{"body":{"nodeType":"YulBlock","src":"6250:103:11","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:11"},"nodeType":"YulFunctionCall","src":"6298:12:11"},"nodeType":"YulExpressionStatement","src":"6298:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6271:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"6280:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6267:3:11"},"nodeType":"YulFunctionCall","src":"6267:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"6292:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6263:3:11"},"nodeType":"YulFunctionCall","src":"6263:32:11"},"nodeType":"YulIf","src":"6260:52:11"},{"nodeType":"YulAssignment","src":"6321:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6337:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6331:5:11"},"nodeType":"YulFunctionCall","src":"6331:16:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6321:6:11"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6216:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6227:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6239:6:11","type":""}],"src":"6169:184:11"},{"body":{"nodeType":"YulBlock","src":"6407:79:11","statements":[{"nodeType":"YulAssignment","src":"6417:17:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6429:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"6432:1:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6425:3:11"},"nodeType":"YulFunctionCall","src":"6425:9:11"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"6417:4:11"}]},{"body":{"nodeType":"YulBlock","src":"6458:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6460:16:11"},"nodeType":"YulFunctionCall","src":"6460:18:11"},"nodeType":"YulExpressionStatement","src":"6460:18:11"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"6449:4:11"},{"name":"x","nodeType":"YulIdentifier","src":"6455:1:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6446:2:11"},"nodeType":"YulFunctionCall","src":"6446:11:11"},"nodeType":"YulIf","src":"6443:37:11"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6389:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"6392:1:11","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"6398:4:11","type":""}],"src":"6358:128:11"},{"body":{"nodeType":"YulBlock","src":"6539:77:11","statements":[{"nodeType":"YulAssignment","src":"6549:16:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6560:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"6563:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6556:3:11"},"nodeType":"YulFunctionCall","src":"6556:9:11"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6549:3:11"}]},{"body":{"nodeType":"YulBlock","src":"6588:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6590:16:11"},"nodeType":"YulFunctionCall","src":"6590:18:11"},"nodeType":"YulExpressionStatement","src":"6590:18:11"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6580:1:11"},{"name":"sum","nodeType":"YulIdentifier","src":"6583:3:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6577:2:11"},"nodeType":"YulFunctionCall","src":"6577:10:11"},"nodeType":"YulIf","src":"6574:36:11"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6522:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"6525:1:11","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6531:3:11","type":""}],"src":"6491:125:11"},{"body":{"nodeType":"YulBlock","src":"6770:386:11","statements":[{"nodeType":"YulAssignment","src":"6780:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6792:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6803:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6788:3:11"},"nodeType":"YulFunctionCall","src":"6788:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6780:4:11"}]},{"nodeType":"YulVariableDeclaration","src":"6815:20:11","value":{"name":"headStart","nodeType":"YulIdentifier","src":"6826:9:11"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6819:3:11","type":""}]},{"nodeType":"YulAssignment","src":"6844:16:11","value":{"name":"headStart","nodeType":"YulIdentifier","src":"6851:9:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6844:3:11"}]},{"nodeType":"YulVariableDeclaration","src":"6869:20:11","value":{"name":"value0","nodeType":"YulIdentifier","src":"6883:6:11"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6873:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6898:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"6907:1:11","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6902:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"6964:186:11","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6985:3:11"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7013:6:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6994:18:11"},"nodeType":"YulFunctionCall","src":"6994:26:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7030:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7035:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7026:3:11"},"nodeType":"YulFunctionCall","src":"7026:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"7039:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7022:3:11"},"nodeType":"YulFunctionCall","src":"7022:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6990:3:11"},"nodeType":"YulFunctionCall","src":"6990:52:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6978:6:11"},"nodeType":"YulFunctionCall","src":"6978:65:11"},"nodeType":"YulExpressionStatement","src":"6978:65:11"},{"nodeType":"YulVariableDeclaration","src":"7056:14:11","value":{"kind":"number","nodeType":"YulLiteral","src":"7066:4:11","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7060:2:11","type":""}]},{"nodeType":"YulAssignment","src":"7083:19:11","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7094:3:11"},{"name":"_1","nodeType":"YulIdentifier","src":"7099:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7090:3:11"},"nodeType":"YulFunctionCall","src":"7090:12:11"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7083:3:11"}]},{"nodeType":"YulAssignment","src":"7115:25:11","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7129:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"7137:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7125:3:11"},"nodeType":"YulFunctionCall","src":"7125:15:11"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7115:6:11"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6928:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"6931:4:11","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6925:2:11"},"nodeType":"YulFunctionCall","src":"6925:11:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6937:18:11","statements":[{"nodeType":"YulAssignment","src":"6939:14:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6948:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"6951:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6944:3:11"},"nodeType":"YulFunctionCall","src":"6944:9:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6939:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"6921:3:11","statements":[]},"src":"6917:233:11"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6739:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6750:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6761:4:11","type":""}],"src":"6621:535:11"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_array_address_calldata(offset, end) -> arrayPos\n    {\n        arrayPos := offset\n        if gt(add(offset, 96), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_array_address_calldata(headStart, dataEnd)\n        value1 := abi_decode_array_address_calldata(add(headStart, 96), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$1119_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, and(mload(_3), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xF82F83FF EQ PUSH2 0x2BB JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22F JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH4 0x29A62A76 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x5D55307D EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x67457E4C EQ PUSH2 0x1BA JUMPI PUSH2 0xFB JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x19908016 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x1F85E3CA EQ PUSH2 0x150 JUMPI PUSH2 0xFB JUMP JUMPDEST CALLDATASIZE PUSH2 0xFB JUMPI PUSH2 0xF9 CALLVALUE PUSH2 0x2F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF9 CALLVALUE PUSH2 0x2F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xD26 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x49D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x875 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xDD9 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x99E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x123 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26C PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28E PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x123 SWAP2 SWAP1 PUSH2 0xE3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE97 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH4 0x589ED34B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x323 PUSH1 0x19 DUP5 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x32D SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x353 JUMPI PUSH2 0x353 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x394 SWAP1 DUP8 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x39E SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x432 JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x440 SWAP1 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x336 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x456 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xAFF50328F57C9CED983A9E3C360C67EE11633D860350531F0C11FC435751448C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4A5 PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4CC JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x506 JUMPI PUSH1 0x40 MLOAD PUSH4 0x215E7C9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51D930F9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0xA3B261F2 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x550 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0x5A2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5BFFD1 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x5DD JUMPI PUSH2 0x5DD PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x66B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD PUSH1 0x1 SWAP3 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x62F JUMPI PUSH2 0x62F PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH2 0x667 SWAP1 PUSH2 0xF17 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x675 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5A6 JUMP JUMPDEST POP DUP1 PUSH1 0x0 SUB PUSH2 0x69F JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP1 SWAP5 DUP6 SWAP4 SWAP1 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x719 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x723 SWAP2 SWAP1 PUSH2 0x1011 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x732 DUP9 DUP7 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x73C SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP PUSH2 0x748 DUP2 DUP9 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x76B DUP5 DUP5 PUSH2 0x1024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP12 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP PUSH2 0x843 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x87D PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x887 PUSH1 0x0 PUSH2 0xCB8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x891 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x8C7 JUMPI PUSH2 0x8C7 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x8DA SWAP2 SWAP1 PUSH2 0xE97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x8F2 JUMPI PUSH2 0x8F2 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD SELFBALANCE PUSH2 0x902 SWAP2 SWAP1 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x90C SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0xF01 JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x95A DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8AA JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP3 PUSH1 0x40 MLOAD PUSH2 0x992 SWAP2 SWAP1 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP3 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 MLOAD SWAP5 SWAP6 SWAP2 SWAP5 DUP7 SWAP5 SWAP2 SWAP4 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA23 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0xA2D SWAP2 SWAP1 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51D930F9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP7 AND SWAP1 PUSH4 0xA3B261F2 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAA1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF46 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5BFFD1 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xB06 JUMPI PUSH2 0xB06 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB36 JUMPI DUP2 PUSH2 0xB32 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0xB40 DUP2 PUSH2 0xF17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xACF JUMP JUMPDEST POP DUP4 PUSH2 0xB54 DUP7 DUP4 PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0xB5E SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB72 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x3 SWAP1 DUP2 SWAP1 DUP2 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB87 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xBD2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC2B PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC55 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x429 JUMP JUMPDEST PUSH2 0xC5E DUP2 PUSH2 0xCB8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x429 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD87 DUP4 PUSH2 0xD4F JUMP JUMPDEST SWAP2 POP PUSH2 0xD95 PUSH1 0x20 DUP5 ADD PUSH2 0xD4F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBA DUP4 PUSH2 0xD4F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x86F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP5 DUP5 PUSH2 0xDC8 JUMP JUMPDEST SWAP2 POP PUSH2 0xD95 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xDC8 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xE36 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xE0E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE8A JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xE5C JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD48 DUP3 PUSH2 0xD4F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xEFC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xF29 JUMPI PUSH2 0xF29 PUSH2 0xEB2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0xF97 JUMPI PUSH2 0xF97 PUSH2 0xF30 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xFBC JUMPI PUSH2 0xFBC PUSH2 0xF30 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xFDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xB5E JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xFDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x86F JUMPI PUSH2 0x86F PUSH2 0xEB2 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xE36 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x105A DUP4 PUSH2 0xD4F JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1040 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0xA156C169C8D0A1E5 GAS PUSH0 GT PUSH32 0x4B2F25199C828EFA0B5ABCDC32417A0C61587B64736F6C634300081400330000 ","sourceMap":"356:4977:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5223:25;5238:9;5223:14;:25::i;:::-;356:4977;;5299:25;5314:9;5299:14;:25::i;431:43::-;;;;;;;;;;;;472:2;431:43;;;;;160:25:11;;;148:2;133:18;431:43:7;;;;;;;;4011:87;;;;;;;;;;-1:-1:-1;4079:12:7;;;;4011:87;;;361:14:11;;354:22;336:41;;324:2;309:18;4011:87:7;196:187:11;1206:141:7;;;;;;;;;;-1:-1:-1;1206:141:7;;;;;:::i;:::-;;:::i;531:39::-;;;;;;;;;;;;569:1;531:39;;1848:1399;;;;;;;;;;-1:-1:-1;1848:1399:7;;;;;:::i;:::-;;:::i;480:45::-;;;;;;;;;;;;522:3;480:45;;4104:139;;;;;;;;;;-1:-1:-1;4104:139:7;;;;;:::i;:::-;;:::i;2293:101:3:-;;;;;;;;;;;;;:::i;1353:489:7:-;;;;;;;;;;-1:-1:-1;1353:489:7;;;;;:::i;:::-;;:::i;3253:752::-;;;;;;;;;;-1:-1:-1;3253:752:7;;;;;:::i;:::-;;:::i;1638:85:3:-;;;;;;;;;;-1:-1:-1;1684:7:3;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:3;;;2042:51:11;;2030:2;2015:18;1638:85:3;1896:203:11;4353:97:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4249:98::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2543:215:3:-;;;;;;;;;;-1:-1:-1;2543:215:3;;;;;:::i;:::-;;:::i;4456:115:7:-;;;;;;;;;;-1:-1:-1;4456:115:7;;;;;:::i;:::-;-1:-1:-1;;;;;4546:18:7;4520:7;4546:18;;;:8;:18;;;;;;;4456:115;4577:603;1149:12;;;;1145:37;;1170:12;;-1:-1:-1;;;1170:12:7;;;;;;;;;;;1145:37;4674:12:::1;522:3;4690:24;472:2;4690:7:::0;:24:::1;:::i;:::-;4689:44;;;;:::i;:::-;4769:10;:17:::0;4674:59;;-1:-1:-1;4744:22:7::1;4833:341;4852:14;4848:1;:18;4833:341;;;4887:22;4912:10;4923:1;4912:13;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;4887:38:::1;::::0;;;;::::1;::::0;;;4912:13:::1;::::0;;::::1;;4887:38:::0;;-1:-1:-1;;;;;4887:38:7::1;::::0;;;::::1;::::0;;;::::1;::::0;;;;;-1:-1:-1;522:3:7::1;::::0;4964:20:::1;::::0;:4;:20:::1;:::i;:::-;4963:40;;;;:::i;:::-;4940:63;;5019:12;5036:7;:15;;;-1:-1:-1::0;;;;;5036:20:7::1;5064:12;5036:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5018:63;;;5099:7;5095:68;;5133:15:::0;;5115:48:::1;::::0;-1:-1:-1;;;5115:48:7;;-1:-1:-1;;;;;4700:32:11;;;5115:48:7::1;::::0;::::1;4682:51:11::0;4749:18;;;4742:34;;;4655:18;;5115:48:7::1;;;;;;;;5095:68;4873:301;;;4868:3;;;;;:::i;:::-;;;;4833:341;;;;4637:543;;4577:603:::0;:::o;1206:141::-;1531:13:3;:11;:13::i;:::-;1276:12:7::1;:26:::0;;-1:-1:-1;;1276:26:7::1;::::0;::::1;;::::0;;::::1;::::0;;;1317:23:::1;::::0;336:41:11;;;1317:23:7::1;::::0;324:2:11;309:18;1317:23:7::1;;;;;;;1206:141:::0;:::o;1848:1399::-;2356:21:5;:19;:21::i;:::-;-1:-1:-1;;;;;2008:22:7;::::1;2005:47;;2039:13;;-1:-1:-1::0;;;2039:13:7::1;;;;;;;;;;;2005:47;-1:-1:-1::0;;;;;2086:18:7;::::1;2063:20;2086:18:::0;;;:8:::1;:18;::::0;;;;;;2117:17;;;2114:52:::1;;2143:23;;-1:-1:-1::0;;;2143:23:7::1;;;;;;;;;;;2114:52;2209:40;::::0;-1:-1:-1;;;2209:40:7;;-1:-1:-1;;;;;2060:32:11;;;2209:40:7::1;::::0;::::1;2042:51:11::0;2177:29:7::1;::::0;2209:28;;::::1;::::0;::::1;::::0;2015:18:11;;2209:40:7::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;::::0;;::::1;-1:-1:-1::0;;2209:40:7::1;::::0;::::1;;::::0;::::1;::::0;;;::::1;::::0;::::1;:::i;:::-;2288:19:::0;;2177:72;;-1:-1:-1;2259:26:7::1;2321:23:::0;;;2318:45:::1;;2353:10;;-1:-1:-1::0;;;;;;2353:10:7::1;;;;;;;;;;;2318:45;2382:23;2453:9:::0;2449:225:::1;2468:18;2464:1;:22;2449:225;;;-1:-1:-1::0;;;;;2511:21:7;::::1;;::::0;;;:11:::1;:21;::::0;;;;2533:15;;2511:21;;;2533:12;;2546:1;;2533:15;::::1;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;2511:38;;;::::1;::::0;;;;;;-1:-1:-1;2511:38:7;;::::1;;2507:157;;-1:-1:-1::0;;;;;2569:21:7;::::1;;::::0;;;:11:::1;:21;::::0;;;;2591:15;;2610:4:::1;::::0;2569:21;2591:12;;2604:1;;2591:15;::::1;;;;;:::i;:::-;;;;;;;2569:38;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;2632:17;;;;;:::i;:::-;;;;2507:157;2488:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2449:225;;;;2687:15;2706:1;2687:20:::0;2684:53:::1;;2716:21;;-1:-1:-1::0;;;2716:21:7::1;;;;;;;;;;;2684:53;-1:-1:-1::0;;;;;2771:24:7;::::1;2748:20;2771:24:::0;;;:14:::1;:24;::::0;;;;;;;;2837:31;;-1:-1:-1;;;2837:31:7;;;;2771:24;;;;;;2837:29:::1;::::0;:31:::1;::::0;;::::1;::::0;2771:24;2837:31;;;;;2771:24;2837:31:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:46;;;;:::i;:::-;2806:77:::0;-1:-1:-1;2894:13:7::1;2806:77:::0;2911:30:::1;2929:12:::0;2911:15;:30:::1;:::i;:::-;2910:55;;;;:::i;:::-;2894:71:::0;-1:-1:-1;2997:20:7::1;2894:71:::0;2997:12;:20:::1;:::i;:::-;-1:-1:-1::0;;;;;2976:18:7;::::1;;::::0;;;:8:::1;:18;::::0;;;;:41;3054:30:::1;3069:15:::0;3054:12;:30:::1;:::i;:::-;-1:-1:-1::0;;;;;3027:24:7;;::::1;;::::0;;;:14:::1;:24;::::0;;;;;:57;;;;3114:33;;:15;;::::1;::::0;3137:5;;3027:24;3114:33;3027:24;3114:33;3137:5;3114:15;:33:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3095:52;;;3161:7;3157:36;;3177:16;;-1:-1:-1::0;;;3177:16:7::1;;;;;;;;;;;3157:36;3209:31;::::0;;-1:-1:-1;;;;;4700:32:11;;4682:51;;4764:2;4749:18;;4742:34;;;3209:31:7::1;::::0;4655:18:11;3209:31:7::1;;;;;;;1928:1319;;;;;;;;2398:20:5::0;1713:1;2924:21;;2744:208;2398:20;1848:1399:7;;:::o;4104:139::-;-1:-1:-1;;;;;4205:21:7;;4182:4;4205:21;;;:11;:21;;;;;;;;:31;;;;;;;;;;;4104:139;;;;;:::o;2293:101:3:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1353:489:7:-;1531:13:3;:11;:13::i;:::-;1484:12:7::1;::::0;::::1;;1481:62;;;1512:12;:20:::0;;-1:-1:-1;;1512:20:7::1;::::0;;1481:62:::1;1556:9;1552:248;569:1;1567;:15;1552:248;;;1603:14;1620:8;1629:1;1620:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1603:28;;1645:13;522:3;1686:7;1694:1;1686:10;;;;;;;:::i;:::-;;;;;1662:21;:34;;;;:::i;:::-;1661:54;;;;:::i;:::-;1645:70;;1745:6;1730:9;1740:1;1730:12;;;;;;;:::i;:::-;;:21:::0;;-1:-1:-1;;;;;;1730:21:7::1;-1:-1:-1::0;;;;;1730:21:7;;::::1;;::::0;;1765:16;;;::::1;-1:-1:-1::0;1765:16:7;;;:8:::1;:16;::::0;;;;:24;1584:3;::::1;::::0;::::1;:::i;:::-;;;;1552:248;;;;1815:20;1826:8;1815:20;;;;;;:::i;:::-;;;;;;;;1353:489:::0;;:::o;3253:752::-;-1:-1:-1;;;;;3369:18:7;;3327:7;3369:18;;;:8;:18;;;;;;;;;3462:14;:24;;;;;;3428:31;;-1:-1:-1;;;3428:31:7;;;;3327:7;;3369:18;;3327:7;;3462:24;;3428:29;;:31;;;;;3369:18;;3428:31;;;;;3369:18;3428:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:58;;;;:::i;:::-;3529:35;;-1:-1:-1;;;3529:35:7;;-1:-1:-1;;;;;2060:32:11;;;3529:35:7;;;2042:51:11;3397:89:7;;-1:-1:-1;3497:29:7;;3529:28;;;;;2015:18:11;;3529:35:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3529:35:7;;;;;;;;;;;;:::i;:::-;3603:19;;3497:67;;-1:-1:-1;3574:26:7;3636:23;;;3633:45;;3668:10;;-1:-1:-1;;;;;;3668:10:7;;;;;;;;;;;3633:45;3697:23;3768:9;3764:162;3783:18;3779:1;:22;3764:162;;;-1:-1:-1;;;;;3826:21:7;;;;;;:11;:21;;;;;3848:15;;3826:21;;;3848:12;;3861:1;;3848:15;;;;;;:::i;:::-;;;;;;;;;;;;3826:38;;;;;;;;;;-1:-1:-1;3826:38:7;;;;3822:94;;3884:17;;;;:::i;:::-;;;;3822:94;3803:3;;;;:::i;:::-;;;;3764:162;;;-1:-1:-1;3978:20:7;3944:30;3962:12;3944:15;:30;:::i;:::-;3943:55;;;;:::i;:::-;3936:62;3253:752;-1:-1:-1;;;;;;;;3253:752:7:o;4353:97::-;4398:17;;:::i;:::-;4427:16;;;;;;;;;;;4434:9;;;;;4427:16;;;;-1:-1:-1;;;;;4427:16:7;;;;;;;;;;;;;;;;;;;;;;4353:97;:::o;4249:98::-;4295:16;4330:10;4323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4323:17:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:98;:::o;2543:215:3:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:3;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:3;;2700:1:::1;2672:31;::::0;::::1;2042:51:11::0;2015:18;;2672:31:3::1;1896:203:11::0;2623:91:3::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:3;735:10:4;1855:23:3;1851:101;;1901:40;;-1:-1:-1;;;1901:40:3;;735:10:4;1901:40:3;;;2042:51:11;2015:18;;1901:40:3;1896:203:11;2431:307:5;1755:1;2558:7;;:18;2554:86;;2599:30;;-1:-1:-1;;;2599:30:5;;;;;;;;;;;2554:86;1755:1;2714:7;:17;2431:307::o;2912:187:3:-;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:3;;;-1:-1:-1;;;;;;3020:17:3;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;388:273:11:-;444:6;497:2;485:9;476:7;472:23;468:32;465:52;;;513:1;510;503:12;465:52;552:9;539:23;605:5;598:13;591:21;584:5;581:32;571:60;;627:1;624;617:12;571:60;650:5;388:273;-1:-1:-1;;;388:273:11:o;666:173::-;734:20;;-1:-1:-1;;;;;783:31:11;;773:42;;763:70;;829:1;826;819:12;763:70;666:173;;;:::o;844:260::-;912:6;920;973:2;961:9;952:7;948:23;944:32;941:52;;;989:1;986;979:12;941:52;1012:29;1031:9;1012:29;:::i;:::-;1002:39;;1060:38;1094:2;1083:9;1079:18;1060:38;:::i;:::-;1050:48;;844:260;;;;;:::o;1109:254::-;1177:6;1185;1238:2;1226:9;1217:7;1213:23;1209:32;1206:52;;;1254:1;1251;1244:12;1206:52;1277:29;1296:9;1277:29;:::i;:::-;1267:39;1353:2;1338:18;;;;1325:32;;-1:-1:-1;;;1109:254:11:o;1368:159::-;1462:6;1495:2;1483:15;;1480:24;-1:-1:-1;1477:44:11;;;1517:1;1514;1507:12;1532:359;1650:6;1658;1711:3;1699:9;1690:7;1686:23;1682:33;1679:53;;;1728:1;1725;1718:12;1679:53;1751;1796:7;1785:9;1751:53;:::i;:::-;1741:63;;1823:62;1877:7;1872:2;1861:9;1857:18;1823:62;:::i;2104:520::-;2284:2;2269:18;;2273:9;2364:6;2242:4;2398:220;2412:4;2409:1;2406:11;2398:220;;;2475:13;;-1:-1:-1;;;;;2471:39:11;2459:52;;2534:4;2558:12;;;;2593:15;;;;2507:1;2425:9;2398:220;;;2402:3;;;2104:520;;;;:::o;2629:814::-;2850:2;2902:21;;;2972:13;;2875:18;;;2994:22;;;2821:4;;2850:2;3035;;3053:18;;;;3094:15;;;2821:4;3137:280;3151:6;3148:1;3145:13;3137:280;;;3210:13;;3252:9;;-1:-1:-1;;;;;3248:35:11;3236:48;;3324:11;;3318:18;3304:12;;;3297:40;3357:12;;;;3392:15;;;;3280:1;3166:9;3137:280;;;-1:-1:-1;3434:3:11;;2629:814;-1:-1:-1;;;;;;;2629:814:11:o;3448:186::-;3507:6;3560:2;3548:9;3539:7;3535:23;3531:32;3528:52;;;3576:1;3573;3566:12;3528:52;3599:29;3618:9;3599:29;:::i;3639:127::-;3700:10;3695:3;3691:20;3688:1;3681:31;3731:4;3728:1;3721:15;3755:4;3752:1;3745:15;3771:168;3844:9;;;3875;;3892:15;;;3886:22;;3872:37;3862:71;;3913:18;;:::i;3944:217::-;3984:1;4010;4000:132;;4054:10;4049:3;4045:20;4042:1;4035:31;4089:4;4086:1;4079:15;4117:4;4114:1;4107:15;4000:132;-1:-1:-1;4146:9:11;;3944:217::o;4166:127::-;4227:10;4222:3;4218:20;4215:1;4208:31;4258:4;4255:1;4248:15;4282:4;4279:1;4272:15;4787:135;4826:3;4847:17;;;4844:43;;4867:18;;:::i;:::-;-1:-1:-1;4914:1:11;4903:13;;4787:135::o;4927:127::-;4988:10;4983:3;4979:20;4976:1;4969:31;5019:4;5016:1;5009:15;5043:4;5040:1;5033:15;5059:1105;5154:6;5185:2;5228;5216:9;5207:7;5203:23;5199:32;5196:52;;;5244:1;5241;5234:12;5196:52;5277:9;5271:16;5306:18;5347:2;5339:6;5336:14;5333:34;;;5363:1;5360;5353:12;5333:34;5401:6;5390:9;5386:22;5376:32;;5446:7;5439:4;5435:2;5431:13;5427:27;5417:55;;5468:1;5465;5458:12;5417:55;5497:2;5491:9;5519:2;5515;5512:10;5509:36;;;5525:18;;:::i;:::-;5571:2;5568:1;5564:10;5603:2;5597:9;5666:2;5662:7;5657:2;5653;5649:11;5645:25;5637:6;5633:38;5721:6;5709:10;5706:22;5701:2;5689:10;5686:18;5683:46;5680:72;;;5732:18;;:::i;:::-;5768:2;5761:22;5818:18;;;5852:15;;;;-1:-1:-1;5894:11:11;;;5890:20;;;5922:19;;;5919:39;;;5954:1;5951;5944:12;5919:39;5978:11;;;;5998:135;6014:6;6009:3;6006:15;5998:135;;;6080:10;;6068:23;;6031:12;;;;6111;;;;5998:135;;6169:184;6239:6;6292:2;6280:9;6271:7;6267:23;6263:32;6260:52;;;6308:1;6305;6298:12;6260:52;-1:-1:-1;6331:16:11;;6169:184;-1:-1:-1;6169:184:11:o;6358:128::-;6425:9;;;6446:11;;;6443:37;;;6460:18;;:::i;6491:125::-;6556:9;;;6577:10;;;6574:36;;;6590:18;;:::i;6621:535::-;6803:2;6788:18;;6792:9;6883:6;6761:4;6917:233;6931:4;6928:1;6925:11;6917:233;;;-1:-1:-1;;;;;6994:26:11;7013:6;6994:26;:::i;:::-;6990:52;6978:65;;7066:4;7090:12;;;;7125:15;;;;;6951:1;6944:9;6917:233;"},"gasEstimates":{"creation":{"codeDepositCost":"852400","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","FEE_PERCENTAGE()":"208","MAX_WINNERS()":"207","SHARE_PRECISION()":"251","claimPrize(address,address)":"infinite","getCountryPrize(address)":"2614","getCreators()":"infinite","getPrize(address,address)":"infinite","getWinners()":"infinite","isClaimed(address,bytes32)":"2754","isMintOpen()":"2339","owner()":"2390","renounceOwnership()":"infinite","setMintStatus(bool)":"27785","setWinners(address[3],uint256[3])":"infinite","transferOwnership(address)":"28399"},"internal":{"_handleDeposit(uint256)":"infinite"}},"methodIdentifiers":{"FEE_PERCENTAGE()":"000b46f8","MAX_WINNERS()":"29a62a76","SHARE_PRECISION()":"5fc5e020","claimPrize(address,address)":"5d55307d","getCountryPrize(address)":"f82f83ff","getCreators()":"e6adc1ee","getPrize(address,address)":"7eef2509","getWinners()":"df15c37e","isClaimed(address,bytes32)":"67457e4c","isMintOpen()":"19908016","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMintStatus(bool)":"1f85e3ca","setWinners(address[3],uint256[3])":"76602f2f","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"_creators\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimedPrize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creators\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrizeForThisCountry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoShirts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWinnersYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintOpen\",\"type\":\"bool\"}],\"name\":\"MintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"getCountryPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_country\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMintOpen\",\"type\":\"bool\"}],\"name\":\"setMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_winners\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_shares\",\"type\":\"uint256[3]\"}],\"name\":\"setWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EurocupLegends.sol\":\"EurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0xf24c0f30ffdc2540755ae809effdba80029f8418e2b0c9f72b878aad50ba1b72\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/EurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IEurocupLegends} from \\\"./interfaces/IEurocupLegends.sol\\\";\\nimport {IShirts} from \\\"./interfaces/IShirts.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract EurocupLegends is IEurocupLegends, Ownable, ReentrancyGuard {\\n    uint256 public constant FEE_PERCENTAGE = 25;\\n    uint256 public constant SHARE_PRECISION = 100;\\n    uint256 public constant MAX_WINNERS = 3;\\n\\n    Creator[] private s_creators;\\n    address[3] private s_winners;\\n\\n    bool private s_isMintOpen = true;\\n\\n    mapping(address country => uint256 prize) private s_prizes;\\n    mapping(address country => mapping(bytes32 tokenId => bool isClaimed)) private s_isClaimed;\\n    mapping(address country => uint256 totalClaimed) private s_totalClaimed;\\n\\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\\n        for(uint256 i; i < _creators.length; i++) {\\n            s_creators.push(_creators[i]);\\n        }\\n    }\\n\\n    modifier ifMintOpen() {\\n        if(!s_isMintOpen) revert MintClosed();\\n        _;\\n    }\\n\\n    function setMintStatus(bool _isMintOpen) external onlyOwner {\\n        s_isMintOpen = _isMintOpen;\\n        emit MintStatus(_isMintOpen);\\n    }\\n\\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _shares) external onlyOwner {\\n        if(s_isMintOpen) {\\n            s_isMintOpen = false;\\n        }\\n        for(uint256 i; i < MAX_WINNERS; i++) {\\n            address winner = _winners[i];\\n            uint256 prize = (address(this).balance * _shares[i]) / SHARE_PRECISION;\\n\\n            s_winners[i] = winner;\\n            s_prizes[winner] = prize;\\n        }\\n\\n        emit WinnersSet(_winners);\\n    }\\n\\n    function claimPrize(address _recipient, address _country) external nonReentrant {\\n        if(s_winners.length != MAX_WINNERS) revert NoWinnersYet();\\n        if(_country == address(0)) revert ZeroAddress();\\n\\n        uint256 countryPrize = s_prizes[_country];\\n        if(countryPrize == 0) revert NoPrizeForThisCountry();\\n\\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_recipient);\\n        uint256 userTokenIdsLength = userTokenIds.length;\\n\\n        if(userTokenIdsLength == 0) revert NoShirts();\\n        \\n        uint256 unclaimedShirts;\\n\\n        // filter claimed tokens\\n        for(uint256 i; i < userTokenIdsLength; i++) {\\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\\n                s_isClaimed[_country][userTokenIds[i]] = true;\\n                unclaimedShirts++;\\n            }\\n        }\\n\\n        if(unclaimedShirts == 0) revert AlreadyClaimedPrize();\\n\\n        uint256 totalClaimed = s_totalClaimed[_country];\\n\\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - totalClaimed;\\n\\n        uint256 prize = (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\\n\\n        s_prizes[_country] = countryPrize - prize;\\n        s_totalClaimed[_country] = totalClaimed + unclaimedShirts;\\n\\n        (bool success, ) = _recipient.call{value: prize}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit PrizeClaimed(_recipient, prize);\\n    }\\n\\n    function getPrize(address _user, address _country) external view returns (uint256) {\\n        uint256 countryPrize = s_prizes[_country];\\n        uint256 totalUnclaimedShirts = IShirts(_country).totalSupply() - s_totalClaimed[_country];\\n\\n        bytes32[] memory userTokenIds = IShirts(_country).tokenIdsOf(_user);\\n        uint256 userTokenIdsLength = userTokenIds.length;\\n\\n        if(userTokenIdsLength == 0) revert NoShirts();\\n        \\n        uint256 unclaimedShirts;\\n\\n        // filter claimed tokens\\n        for(uint256 i; i < userTokenIdsLength; i++) {\\n            if(!s_isClaimed[_country][userTokenIds[i]]) {\\n                unclaimedShirts++;\\n            }\\n        }\\n\\n        return (unclaimedShirts * countryPrize) / totalUnclaimedShirts;\\n    }\\n\\n    function isMintOpen() external view returns (bool) {\\n        return s_isMintOpen;\\n    }\\n\\n    function isClaimed(address _country, bytes32 _tokenId) external view returns (bool) {\\n        return s_isClaimed[_country][_tokenId];\\n    }\\n\\n    function getCreators() external view returns (Creator[] memory) {\\n        return s_creators;\\n    }\\n\\n    function getWinners() external view returns (address[3] memory) {\\n        return s_winners;\\n    }\\n\\n    function getCountryPrize(address _country) public view returns (uint256) {\\n        return s_prizes[_country];\\n    }\\n\\n    function _handleDeposit(uint256 _amount) private ifMintOpen {\\n        // 25% of deposits\\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\\n\\n        uint256 creatorsLength = s_creators.length;\\n\\n        // transfer fee to creators\\n        for(uint256 i; i < creatorsLength; i++) {\\n            Creator memory creator = s_creators[i];\\n\\n            uint256 creatorShare = (fees * creator.share) / SHARE_PRECISION;\\n\\n            (bool success,) = creator.creator.call{value: creatorShare}(\\\"\\\");\\n            if(!success) revert FeeTransferFailed(creator.creator, creatorShare);\\n        }\\n    }\\n\\n    receive() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n\\n    fallback() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n}\",\"keccak256\":\"0x53d614c288e754f2df1ef5ba489d997d5cd5f572f3778e97ea326d848ef025e9\",\"license\":\"MIT\"},\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n    event MintStatus(bool isMintOpen);\\n}\",\"keccak256\":\"0xf092ff60d3cab71a68a59838f3a0c2f4a3460af2326844f130ecfd8f45c7c1af\",\"license\":\"MIT\"},\"contracts/interfaces/IShirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\ninterface IShirts is ILSP8 {\\n    event ShirtsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n    \\n    function getPrizePool() external view returns (address prizePool);\\n\\n    function getPrice() external view returns (uint256 price);\\n}\",\"keccak256\":\"0x4e3bf68e661345d6da97b438b69e498842a75f160579b20c32306eb755407a0e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisCountry();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoShirts();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\\n\\nerror MintClosed();\",\"keccak256\":\"0xb1d49127fde23dcec5d769e3e529be66796a8cdd80d827cd520dd6b4320804e0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":283,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":463,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":563,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_creators","offset":0,"slot":"2","type":"t_array(t_struct(Creator)1119_storage)dyn_storage"},{"astId":567,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_winners","offset":0,"slot":"3","type":"t_array(t_address)3_storage"},{"astId":570,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_isMintOpen","offset":0,"slot":"6","type":"t_bool"},{"astId":574,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_prizes","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":580,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_isClaimed","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_bool))"},{"astId":584,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_totalClaimed","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)3_storage":{"base":"t_address","encoding":"inplace","label":"address[3]","numberOfBytes":"96"},"t_array(t_struct(Creator)1119_storage)dyn_storage":{"base":"t_struct(Creator)1119_storage","encoding":"dynamic_array","label":"struct IEurocupLegends.Creator[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_bytes32,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => bool))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_struct(Creator)1119_storage":{"encoding":"inplace","label":"struct IEurocupLegends.Creator","members":[{"astId":1116,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"creator","offset":0,"slot":"0","type":"t_address"},{"astId":1118,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"share","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IEurocupLegends.sol":{"IEurocupLegends":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isMintOpen","type":"bool"}],"name":"MintStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintOpen\",\"type\":\"bool\"}],\"name\":\"MintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IEurocupLegends.sol\":\"IEurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n    event MintStatus(bool isMintOpen);\\n}\",\"keccak256\":\"0xf092ff60d3cab71a68a59838f3a0c2f4a3460af2326844f130ecfd8f45c7c1af\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IShirts.sol":{"IShirts":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"ShirtsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValues","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrizePool","outputs":[{"internalType":"address","name":"prizePool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"custom:events":"{OperatorAuthorizationChanged} event.","custom:requirements":"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValues":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"custom:info":"The tokenOwner is its own operator.","custom:requirements":"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.","details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"revokeOperator(address,bytes32,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..","custom:requirements":"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"custom:events":"{TokenIdDataChanged} event for each pair.","params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"custom:events":"{TokenIdDataChanged} event.","params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"custom:info":"if the `tokenId` is not owned by any address, the returned address will be `address(0)`","custom:requirements":"`tokenId` must exist.","details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"custom:events":"- {Transfer} event when the `tokenId` is successfully transferred.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"custom:events":"- {Transfer} events on each successful token transfer.","custom:requirements":"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.","details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","getPrice()":"98d5fdca","getPrizePool()":"884bf67c","isOperatorFor(address,bytes32)":"2a3654a4","mint(address,uint256)":"40c10f19","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ShirtsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValues\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} event.\",\"custom:requirements\":\"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValues\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"custom:info\":\"The tokenOwner is its own operator.\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.\",\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"revokeOperator(address,bytes32,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"custom:events\":\"{TokenIdDataChanged} event for each pair.\",\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"custom:events\":\"{TokenIdDataChanged} event.\",\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"custom:info\":\"if the `tokenId` is not owned by any address, the returned address will be `address(0)`\",\"custom:requirements\":\"`tokenId` must exist.\",\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when the `tokenId` is successfully transferred.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"custom:events\":\"- {Transfer} events on each successful token transfer.\",\"custom:requirements\":\"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.\",\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IShirts.sol\":\"IShirts\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0xf24c0f30ffdc2540755ae809effdba80029f8418e2b0c9f72b878aad50ba1b72\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/IShirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\ninterface IShirts is ILSP8 {\\n    event ShirtsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n    \\n    function getPrizePool() external view returns (address prizePool);\\n\\n    function getPrice() external view returns (uint256 price);\\n}\",\"keccak256\":\"0x4e3bf68e661345d6da97b438b69e498842a75f160579b20c32306eb755407a0e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}}}}}