{"id":"577f43729a85c67fd7411654e459f1c3","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp0-contracts/contracts/LSP0Constants.sol\";\n"},"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\";\n"},"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\";\n"},"@lukso/lsp0-contracts/contracts/LSP0Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP0 = 0x24871b3d;\nbytes4 constant _INTERFACEID_ERC1271 = 0x1626ba7e;\n\n// ERC1271 - Standard Signature Validation\nbytes4 constant _ERC1271_SUCCESSVALUE = 0x1626ba7e;\nbytes4 constant _ERC1271_FAILVALUE = 0xffffffff;\n\n// --- Native Token Type Id\n\n// keccak256('LSP0ValueReceived')\nbytes32 constant _TYPEID_LSP0_VALUE_RECEIVED = 0x9c4705229491d365fb5434052e12a386d6771d976bea61070a8c694e8affea3d;\n\n// Ownership Transfer Type IDs\n\n// keccak256('LSP0OwnershipTransferStarted')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferStarted = 0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926;\n\n// keccak256('LSP0OwnershipTransferred_SenderNotification')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_SenderNotification = 0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814;\n\n// keccak256('LSP0OwnershipTransferred_RecipientNotification')\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_RecipientNotification = 0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538;\n"},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\n */\ninterface ILSP1UniversalReceiver {\n    /**\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n     *\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n     * @param value The amount sent to the {universalReceiver(...)} function.\n     * @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\n     */\n    event UniversalReceiver(\n        address indexed from,\n        uint256 indexed value,\n        bytes32 indexed typeId,\n        bytes receivedData,\n        bytes returnedValue\n    );\n\n    /**\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n     * @notice Reacted on received notification with `typeId` & `data`.\n     *\n     * @param typeId The hash of a specific standard or a hook.\n     * @param data The arbitrary data received with the call.\n     *\n     * @custom:events {UniversalReceiver} event.\n     */\n    function universalReceiver(\n        bytes32 typeId,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n}\n"},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\n\n// --- ERC725Y Data Keys\n\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\n\n// keccak256('LSP1UniversalReceiverDelegate')\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/mocks/UPMock.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {\n    ILSP1UniversalReceiver\n} from \"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\";\n\n// modules\nimport {\n    ERC165\n} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n// constants\nimport {_INTERFACEID_LSP1} from \"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\";\nimport {_INTERFACEID_LSP0} from \"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol\";\n\ninterface BPunX {\n    function mint(uint256 _amount) external payable;\n}\ncontract UPMock is ERC165, ILSP1UniversalReceiver {\n    \n    /// override the supportsInterface function from ERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == _INTERFACEID_LSP1 ||\n            interfaceId == _INTERFACEID_LSP0 ||\n            super.supportsInterface(interfaceId);\n    }\n    function universalReceiver(\n        bytes32 typeId,\n        bytes memory data\n    ) external payable override returns (bytes memory returnValue) {\n        emit UniversalReceiver(msg.sender, msg.value, typeId, data, \"\");\n\n        return \"thanks for calling\";\n    }\n    /**\n     * @notice Verifies that the signer is the owner of the signing contract.\n     */\n    function isValidSignature(\n        bytes32 /* messageHash */,\n        bytes calldata /* signature */\n    ) external pure returns (bytes4) {\n        // always return true (just for testing)\n        return 0x1626ba7e;\n    }\n    function mint(address _bpunx, uint256 _amount) external payable {\n        BPunX(_bpunx).mint{value: msg.value}(_amount);\n    }\n    function fund() external payable {}\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    receive() external payable {}\n    fallback() external payable {}\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol","exportedSymbols":{"_ERC1271_FAILVALUE":[22],"_ERC1271_SUCCESSVALUE":[19],"_INTERFACEID_ERC1271":[16],"_INTERFACEID_LSP0":[13],"_TYPEID_LSP0_OwnershipTransferStarted":[28],"_TYPEID_LSP0_OwnershipTransferred_RecipientNotification":[34],"_TYPEID_LSP0_OwnershipTransferred_SenderNotification":[31],"_TYPEID_LSP0_VALUE_RECEIVED":[25]},"id":3,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:0"},{"absolutePath":"@lukso/lsp0-contracts/contracts/LSP0Constants.sol","file":"@lukso/lsp0-contracts/contracts/LSP0Constants.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3,"sourceUnit":35,"src":"64:59:0","symbolAliases":[],"unitAlias":""}],"src":"39:85:0"},"id":0},"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol","exportedSymbols":{"ILSP1UniversalReceiver":[61]},"id":6,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:1"},{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","file":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6,"sourceUnit":62,"src":"64:68:1","symbolAliases":[],"unitAlias":""}],"src":"39:94:1"},"id":1},"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol","exportedSymbols":{"_INTERFACEID_LSP1":[66],"_INTERFACEID_LSP1_DELEGATE":[69],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[75],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[72]},"id":9,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":7,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:2"},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","file":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","id":8,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9,"sourceUnit":76,"src":"64:59:2","symbolAliases":[],"unitAlias":""}],"src":"39:85:2"},"id":2},"@lukso/lsp0-contracts/contracts/LSP0Constants.sol":{"ast":{"absolutePath":"@lukso/lsp0-contracts/contracts/LSP0Constants.sol","exportedSymbols":{"_ERC1271_FAILVALUE":[22],"_ERC1271_SUCCESSVALUE":[19],"_INTERFACEID_ERC1271":[16],"_INTERFACEID_LSP0":[13],"_TYPEID_LSP0_OwnershipTransferStarted":[28],"_TYPEID_LSP0_OwnershipTransferred_RecipientNotification":[34],"_TYPEID_LSP0_OwnershipTransferred_SenderNotification":[31],"_TYPEID_LSP0_VALUE_RECEIVED":[25]},"id":35,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":10,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:3"},{"constant":true,"id":13,"mutability":"constant","name":"_INTERFACEID_LSP0","nameLocation":"108:17:3","nodeType":"VariableDeclaration","scope":35,"src":"92:46:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":11,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783234383731623364","id":12,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:3","typeDescriptions":{"typeIdentifier":"t_rational_612834109_by_1","typeString":"int_const 612834109"},"value":"0x24871b3d"},"visibility":"internal"},{"constant":true,"id":16,"mutability":"constant","name":"_INTERFACEID_ERC1271","nameLocation":"156:20:3","nodeType":"VariableDeclaration","scope":35,"src":"140:49:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":14,"name":"bytes4","nodeType":"ElementaryTypeName","src":"140:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783136323662613765","id":15,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"179:10:3","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"visibility":"internal"},{"constant":true,"id":19,"mutability":"constant","name":"_ERC1271_SUCCESSVALUE","nameLocation":"251:21:3","nodeType":"VariableDeclaration","scope":35,"src":"235:50:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":17,"name":"bytes4","nodeType":"ElementaryTypeName","src":"235:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783136323662613765","id":18,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"275:10:3","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"visibility":"internal"},{"constant":true,"id":22,"mutability":"constant","name":"_ERC1271_FAILVALUE","nameLocation":"303:18:3","nodeType":"VariableDeclaration","scope":35,"src":"287:47:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":20,"name":"bytes4","nodeType":"ElementaryTypeName","src":"287:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":21,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"324:10:3","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"constant":true,"id":25,"mutability":"constant","name":"_TYPEID_LSP0_VALUE_RECEIVED","nameLocation":"417:27:3","nodeType":"VariableDeclaration","scope":35,"src":"400:113:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"400:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839633437303532323934393164333635666235343334303532653132613338366436373731643937366265613631303730613863363934653861666665613364","id":24,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"447:66:3","typeDescriptions":{"typeIdentifier":"t_rational_70686285961604950920806211732789936779336649279463392163660348800248498350653_by_1","typeString":"int_const 7068...(69 digits omitted)...0653"},"value":"0x9c4705229491d365fb5434052e12a386d6771d976bea61070a8c694e8affea3d"},"visibility":"internal"},{"constant":true,"id":28,"mutability":"constant","name":"_TYPEID_LSP0_OwnershipTransferStarted","nameLocation":"610:37:3","nodeType":"VariableDeclaration","scope":35,"src":"593:123:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":26,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865313731313763396432363635643164626562343739656438303538626265626465336335306163353065326536353631396636303030366361616336393236","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"650:66:3","typeDescriptions":{"typeIdentifier":"t_rational_101970208830827842342045397398428405290962075809797208835923719250899100264742_by_1","typeString":"int_const 1019...(70 digits omitted)...4742"},"value":"0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926"},"visibility":"internal"},{"constant":true,"id":31,"mutability":"constant","name":"_TYPEID_LSP0_OwnershipTransferred_SenderNotification","nameLocation":"796:52:3","nodeType":"VariableDeclaration","scope":35,"src":"779:138:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"779:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861346535396339333164313466376338613761333530323766393265653430623566323838366239666463646237386633306263356563636535613266383134","id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"851:66:3","typeDescriptions":{"typeIdentifier":"t_rational_74584995784094879258197140902702068663775852884950847598921907427942938638356_by_1","typeString":"int_const 7458...(69 digits omitted)...8356"},"value":"0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814"},"visibility":"internal"},{"constant":true,"id":34,"mutability":"constant","name":"_TYPEID_LSP0_OwnershipTransferred_RecipientNotification","nameLocation":"1000:55:3","nodeType":"VariableDeclaration","scope":35,"src":"983:141:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"983:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307863656361333137663130396334333530373837313532336538326463326133636336346466613138663132646130623664623134663665323366393935353338","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1058:66:3","typeDescriptions":{"typeIdentifier":"t_rational_93533691526471608619640232985592865632484953515781287531315828254921486587192_by_1","typeString":"int_const 9353...(69 digits omitted)...7192"},"value":"0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538"},"visibility":"internal"}],"src":"39:1087:3"},"id":3},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","exportedSymbols":{"ILSP1UniversalReceiver":[61]},"id":62,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":36,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"ILSP1UniversalReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"64:257:4","text":" @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received."},"fullyImplemented":false,"id":61,"linearizedBaseContracts":[61],"name":"ILSP1UniversalReceiver","nameLocation":"332:22:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"361:893:4","text":" @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n @param value The amount sent to the {universalReceiver(...)} function.\n @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n @param returnedValue The value returned by the {universalReceiver(...)} function."},"eventSelector":"9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2","id":50,"name":"UniversalReceiver","nameLocation":"1265:17:4","nodeType":"EventDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1308:4:4","nodeType":"VariableDeclaration","scope":50,"src":"1292:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"1292:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"1338:5:4","nodeType":"VariableDeclaration","scope":50,"src":"1322:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint256","nodeType":"ElementaryTypeName","src":"1322:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44,"indexed":true,"mutability":"mutable","name":"typeId","nameLocation":"1369:6:4","nodeType":"VariableDeclaration","scope":50,"src":"1353:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1353:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":46,"indexed":false,"mutability":"mutable","name":"receivedData","nameLocation":"1391:12:4","nodeType":"VariableDeclaration","scope":50,"src":"1385:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":48,"indexed":false,"mutability":"mutable","name":"returnedValue","nameLocation":"1419:13:4","nodeType":"VariableDeclaration","scope":50,"src":"1413:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":47,"name":"bytes","nodeType":"ElementaryTypeName","src":"1413:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1282:156:4"},"src":"1259:180:4"},{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1445:517:4","text":" @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n @notice Reacted on received notification with `typeId` & `data`.\n @param typeId The hash of a specific standard or a hook.\n @param data The arbitrary data received with the call.\n @custom:events {UniversalReceiver} event."},"functionSelector":"6bb56a14","id":60,"implemented":false,"kind":"function","modifiers":[],"name":"universalReceiver","nameLocation":"1976:17:4","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"typeId","nameLocation":"2011:6:4","nodeType":"VariableDeclaration","scope":60,"src":"2003:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"data","nameLocation":"2042:4:4","nodeType":"VariableDeclaration","scope":60,"src":"2027:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":54,"name":"bytes","nodeType":"ElementaryTypeName","src":"2027:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1993:59:4"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"2079:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":57,"name":"bytes","nodeType":"ElementaryTypeName","src":"2079:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2078:14:4"},"scope":61,"src":"1967:126:4","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":62,"src":"322:1773:4","usedErrors":[],"usedEvents":[50]}],"src":"39:2057:4"},"id":4},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","exportedSymbols":{"_INTERFACEID_LSP1":[66],"_INTERFACEID_LSP1_DELEGATE":[69],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[75],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[72]},"id":76,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":63,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:5"},{"constant":true,"id":66,"mutability":"constant","name":"_INTERFACEID_LSP1","nameLocation":"108:17:5","nodeType":"VariableDeclaration","scope":76,"src":"92:46:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":64,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783662623536613134","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:5","typeDescriptions":{"typeIdentifier":"t_rational_1807051284_by_1","typeString":"int_const 1807051284"},"value":"0x6bb56a14"},"visibility":"internal"},{"constant":true,"id":69,"mutability":"constant","name":"_INTERFACEID_LSP1_DELEGATE","nameLocation":"156:26:5","nodeType":"VariableDeclaration","scope":76,"src":"140:55:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":67,"name":"bytes4","nodeType":"ElementaryTypeName","src":"140:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786132343562626461","id":68,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"185:10:5","typeDescriptions":{"typeIdentifier":"t_rational_2722479066_by_1","typeString":"int_const 2722479066"},"value":"0xa245bbda"},"visibility":"internal"},{"constant":true,"id":72,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nameLocation":"296:40:5","nodeType":"VariableDeclaration","scope":76,"src":"279:82:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":70,"name":"bytes10","nodeType":"ElementaryTypeName","src":"279:7:5","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30783063666335316165633337633535613464306231","id":71,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"339:22:5","typeDescriptions":{"typeIdentifier":"t_rational_61322863157712349614257_by_1","typeString":"int_const 61322863157712349614257"},"value":"0x0cfc51aec37c55a4d0b1"},"visibility":"internal"},{"constant":true,"id":75,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nameLocation":"427:37:5","nodeType":"VariableDeclaration","scope":76,"src":"410:123:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":73,"name":"bytes32","nodeType":"ElementaryTypeName","src":"410:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830636663353161656333376335356134643062316136356336323535633462663266626466363237376633636330373330633435623832386236646238623437","id":74,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"467:66:5","typeDescriptions":{"typeIdentifier":"t_rational_5873563396395204772354203425660447968463963513255343663932314865640255753031_by_1","typeString":"int_const 5873...(68 digits omitted)...3031"},"value":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47"},"visibility":"internal"}],"src":"39:496:5"},"id":5},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[99],"IERC165":[111]},"id":100,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":77,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":79,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":100,"sourceUnit":112,"src":"140:38:6","symbolAliases":[{"foreign":{"id":78,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"148:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":81,"name":"IERC165","nameLocations":["687:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":111,"src":"687:7:6"},"id":82,"nodeType":"InheritanceSpecifier","src":"687:7:6"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"180:478:6","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":99,"linearizedBaseContracts":[99,111],"name":"ERC165","nameLocation":"677:6:6","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[110],"body":{"id":97,"nodeType":"Block","src":"844:64:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":90,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"861:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":92,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"881:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$111_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$111_$","typeString":"type(contract IERC165)"}],"id":91,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$111","typeString":"type(contract IERC165)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":89,"id":96,"nodeType":"Return","src":"854:47:6"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"701:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":98,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:6","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:6","nodeType":"VariableDeclaration","scope":98,"src":"789:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":84,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:6"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":98,"src":"838:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":87,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:6"},"scope":99,"src":"762:146:6","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":100,"src":"659:251:6","usedErrors":[],"usedEvents":[]}],"src":"114:797:6"},"id":6},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[111]},"id":112,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":101,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":102,"nodeType":"StructuredDocumentation","src":"141:279:7","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":111,"linearizedBaseContracts":[111],"name":"IERC165","nameLocation":"431:7:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":103,"nodeType":"StructuredDocumentation","src":"445:340:7","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":110,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:7","nodeType":"FunctionDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":105,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:7","nodeType":"VariableDeclaration","scope":110,"src":"817:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":104,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:7"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":110,"src":"860:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":107,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:7"},"scope":111,"src":"790:76:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":112,"src":"421:447:7","usedErrors":[],"usedEvents":[]}],"src":"115:754:7"},"id":7},"contracts/mocks/UPMock.sol":{"ast":{"absolutePath":"contracts/mocks/UPMock.sol","exportedSymbols":{"BPunX":[127],"ERC165":[99],"ILSP1UniversalReceiver":[61],"UPMock":[233],"_INTERFACEID_LSP0":[13],"_INTERFACEID_LSP1":[66]},"id":234,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":113,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:8"},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":234,"sourceUnit":6,"src":"78:131:8","symbolAliases":[{"foreign":{"id":114,"name":"ILSP1UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"91:22:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":234,"sourceUnit":100,"src":"222:84:8","symbolAliases":[{"foreign":{"id":116,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"235:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol","id":119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":234,"sourceUnit":9,"src":"321:111:8","symbolAliases":[{"foreign":{"id":118,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"329:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol","id":121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":234,"sourceUnit":3,"src":"433:107:8","symbolAliases":[{"foreign":{"id":120,"name":"_INTERFACEID_LSP0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"441:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BPunX","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":127,"linearizedBaseContracts":[127],"name":"BPunX","nameLocation":"552:5:8","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a0712d68","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"573:4:8","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"_amount","nameLocation":"586:7:8","nodeType":"VariableDeclaration","scope":126,"src":"578:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"577:17:8"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"611:0:8"},"scope":127,"src":"564:48:8","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":234,"src":"542:72:8","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":128,"name":"ERC165","nameLocations":["634:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":99,"src":"634:6:8"},"id":129,"nodeType":"InheritanceSpecifier","src":"634:6:8"},{"baseName":{"id":130,"name":"ILSP1UniversalReceiver","nameLocations":["642:22:8"],"nodeType":"IdentifierPath","referencedDeclaration":61,"src":"642:22:8"},"id":131,"nodeType":"InheritanceSpecifier","src":"642:22:8"}],"canonicalName":"UPMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":233,"linearizedBaseContracts":[233,61,99,111],"name":"UPMock","nameLocation":"624:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[98],"body":{"id":153,"nodeType":"Block","src":"871:168:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":140,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"900:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":141,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"915:17:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"900:32:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":143,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"948:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":144,"name":"_INTERFACEID_LSP0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"963:17:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"948:32:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"900:80:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":149,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"1020:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":147,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"996:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_UPMock_$233_$","typeString":"type(contract super UPMock)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1002:17:8","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":98,"src":"996:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"996:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"900:132:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":139,"id":152,"nodeType":"Return","src":"881:151:8"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"676:55:8","text":"override the supportsInterface function from ERC165"},"functionSelector":"01ffc9a7","id":154,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"745:17:8","nodeType":"FunctionDefinition","overrides":{"id":136,"nodeType":"OverrideSpecifier","overrides":[],"src":"835:8:8"},"parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"interfaceId","nameLocation":"770:11:8","nodeType":"VariableDeclaration","scope":154,"src":"763:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":133,"name":"bytes4","nodeType":"ElementaryTypeName","src":"763:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"762:20:8"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":154,"src":"861:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":137,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:8"},"scope":233,"src":"736:303:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[60],"body":{"id":176,"nodeType":"Block","src":"1189:118:8","statements":[{"eventCall":{"arguments":[{"expression":{"id":165,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1222:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1226:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1222:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":167,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1234:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1238:5:8","memberName":"value","nodeType":"MemberAccess","src":"1234:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":169,"name":"typeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1245:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":170,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"1253:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1259:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":164,"name":"UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"1204:17:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32,bytes memory,bytes memory)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":173,"nodeType":"EmitStatement","src":"1199:63:8"},{"expression":{"hexValue":"7468616e6b7320666f722063616c6c696e67","id":174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1280:20:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_dfc0b1f2319a6b0c540ddfadad59620bc50281e920ba4015ed9a098c0a4325a3","typeString":"literal_string \"thanks for calling\""},"value":"thanks for calling"},"functionReturnParameters":163,"id":175,"nodeType":"Return","src":"1273:27:8"}]},"functionSelector":"6bb56a14","id":177,"implemented":true,"kind":"function","modifiers":[],"name":"universalReceiver","nameLocation":"1053:17:8","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"1145:8:8"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"typeId","nameLocation":"1088:6:8","nodeType":"VariableDeclaration","scope":177,"src":"1080:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1080:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"data","nameLocation":"1117:4:8","nodeType":"VariableDeclaration","scope":177,"src":"1104:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"1104:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1070:57:8"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"returnValue","nameLocation":"1176:11:8","nodeType":"VariableDeclaration","scope":177,"src":"1163:24:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"1163:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1162:26:8"},"scope":233,"src":"1044:263:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":189,"nodeType":"Block","src":"1544:83:8","statements":[{"expression":{"hexValue":"30783136323662613765","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1610:10:8","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"functionReturnParameters":186,"id":188,"nodeType":"Return","src":"1603:17:8"}]},"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"1312:89:8","text":" @notice Verifies that the signer is the owner of the signing contract."},"functionSelector":"1626ba7e","id":190,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"1415:16:8","nodeType":"FunctionDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":190,"src":"1441:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":190,"src":"1476:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":181,"name":"bytes","nodeType":"ElementaryTypeName","src":"1476:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1431:81:8"},"returnParameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":190,"src":"1536:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":184,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1536:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1535:8:8"},"scope":233,"src":"1406:221:8","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":207,"nodeType":"Block","src":"1696:62:8","statements":[{"expression":{"arguments":[{"id":204,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1743:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":198,"name":"_bpunx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1712:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":197,"name":"BPunX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"1706:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BPunX_$127_$","typeString":"type(contract BPunX)"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1706:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_BPunX_$127","typeString":"contract BPunX"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1720:4:8","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":126,"src":"1706:18:8","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$returns$__$","typeString":"function (uint256) payable external"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":201,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1732:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1736:5:8","memberName":"value","nodeType":"MemberAccess","src":"1732:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1706:36:8","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$returns$__$value","typeString":"function (uint256) payable external"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1706:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"1706:45:8"}]},"functionSelector":"40c10f19","id":208,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1641:4:8","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"_bpunx","nameLocation":"1654:6:8","nodeType":"VariableDeclaration","scope":208,"src":"1646:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"1646:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"_amount","nameLocation":"1670:7:8","nodeType":"VariableDeclaration","scope":208,"src":"1662:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1662:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1645:33:8"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"1696:0:8"},"scope":233,"src":"1632:126:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":211,"nodeType":"Block","src":"1796:2:8","statements":[]},"functionSelector":"b60d4288","id":212,"implemented":true,"kind":"function","modifiers":[],"name":"fund","nameLocation":"1772:4:8","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"1776:2:8"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"1796:0:8"},"scope":233,"src":"1763:35:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":223,"nodeType":"Block","src":"1857:45:8","statements":[{"expression":{"expression":{"arguments":[{"id":219,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1882:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_UPMock_$233","typeString":"contract UPMock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UPMock_$233","typeString":"contract UPMock"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1874:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:8","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1874:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1888:7:8","memberName":"balance","nodeType":"MemberAccess","src":"1874:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":216,"id":222,"nodeType":"Return","src":"1867:28:8"}]},"functionSelector":"12065fe0","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"1812:10:8","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"1822:2:8"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"1848:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:8"},"scope":233,"src":"1803:99:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":227,"nodeType":"Block","src":"1934:2:8","statements":[]},"id":228,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[],"src":"1914:2:8"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[],"src":"1934:0:8"},"scope":233,"src":"1907:29:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":231,"nodeType":"Block","src":"1969:2:8","statements":[]},"id":232,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"1949:2:8"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"1969:0:8"},"scope":233,"src":"1941:30:8","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":234,"src":"615:1358:8","usedErrors":[],"usedEvents":[50]}],"src":"39:1934:8"},"id":8}},"contracts":{"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ILSP1UniversalReceiver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"typeId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"receivedData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"returnedValue","type":"bytes"}],"name":"UniversalReceiver","type":"event"},{"inputs":[{"internalType":"bytes32","name":"typeId","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"universalReceiver","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.","events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"details":"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`","params":{"from":"The address of the EOA or smart contract that called the {universalReceiver(...)} function.","receivedData":"Any arbitrary data that was sent to the {universalReceiver(...)} function.","returnedValue":"The value returned by the {universalReceiver(...)} function.","typeId":"A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.","value":"The amount sent to the {universalReceiver(...)} function."}}},"kind":"dev","methods":{"universalReceiver(bytes32,bytes)":{"custom:events":"{UniversalReceiver} event.","details":"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.","params":{"data":"The arbitrary data received with the call.","typeId":"The hash of a specific standard or a hook."}}},"title":"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"universalReceiver(bytes32,bytes)":"6bb56a14"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedValue\",\"type\":\"bytes\"}],\"name\":\"UniversalReceiver\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"universalReceiver\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\",\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"details\":\"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\",\"params\":{\"from\":\"The address of the EOA or smart contract that called the {universalReceiver(...)} function.\",\"receivedData\":\"Any arbitrary data that was sent to the {universalReceiver(...)} function.\",\"returnedValue\":\"The value returned by the {universalReceiver(...)} function.\",\"typeId\":\"A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\",\"value\":\"The amount sent to the {universalReceiver(...)} function.\"}}},\"kind\":\"dev\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"custom:events\":\"{UniversalReceiver} event.\",\"details\":\"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\",\"params\":{\"data\":\"The arbitrary data received with the call.\",\"typeId\":\"The hash of a specific standard or a hook.\"}}},\"title\":\"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\",\"version\":1},\"userdoc\":{\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\"}},\"kind\":\"user\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"notice\":\"Reacted on received notification with `typeId` & `data`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":\"ILSP1UniversalReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"notice":"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`."}},"kind":"user","methods":{"universalReceiver(bytes32,bytes)":{"notice":"Reacted on received notification with `typeId` & `data`."}},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/UPMock.sol":{"BPunX":{"abi":[{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"mint(uint256)":"a0712d68"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/UPMock.sol\":\"BPunX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp0-contracts/contracts/LSP0Constants.sol\\\";\\n\",\"keccak256\":\"0x82f1c5d5689df750d081fef3b0d48faca2f13f4b2b6b67426deb9da1060dc3db\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\n\",\"keccak256\":\"0x39114a8dc3ec9c8ddd22cb0219614aa82565fe8338acfbd99cdb7c9ad55b1d1c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\n\",\"keccak256\":\"0x2fbc59802e5ab01aeb72fdc69fca1bbb420eeeb1c4bc009a1e2a7b78b491999d\",\"license\":\"Apache-2.0\"},\"@lukso/lsp0-contracts/contracts/LSP0Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP0 = 0x24871b3d;\\nbytes4 constant _INTERFACEID_ERC1271 = 0x1626ba7e;\\n\\n// ERC1271 - Standard Signature Validation\\nbytes4 constant _ERC1271_SUCCESSVALUE = 0x1626ba7e;\\nbytes4 constant _ERC1271_FAILVALUE = 0xffffffff;\\n\\n// --- Native Token Type Id\\n\\n// keccak256('LSP0ValueReceived')\\nbytes32 constant _TYPEID_LSP0_VALUE_RECEIVED = 0x9c4705229491d365fb5434052e12a386d6771d976bea61070a8c694e8affea3d;\\n\\n// Ownership Transfer Type IDs\\n\\n// keccak256('LSP0OwnershipTransferStarted')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferStarted = 0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926;\\n\\n// keccak256('LSP0OwnershipTransferred_SenderNotification')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_SenderNotification = 0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814;\\n\\n// keccak256('LSP0OwnershipTransferred_RecipientNotification')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_RecipientNotification = 0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538;\\n\",\"keccak256\":\"0x9066f85dcef006b7896a367fd08fd0a62706a32457be6859191f15f5e865d049\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/mocks/UPMock.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver\\n} from \\\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\\\";\\n\\n// modules\\nimport {\\n    ERC165\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP1} from \\\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\\\";\\nimport {_INTERFACEID_LSP0} from \\\"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol\\\";\\n\\ninterface BPunX {\\n    function mint(uint256 _amount) external payable;\\n}\\ncontract UPMock is ERC165, ILSP1UniversalReceiver {\\n    \\n    /// override the supportsInterface function from ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP1 ||\\n            interfaceId == _INTERFACEID_LSP0 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes memory data\\n    ) external payable override returns (bytes memory returnValue) {\\n        emit UniversalReceiver(msg.sender, msg.value, typeId, data, \\\"\\\");\\n\\n        return \\\"thanks for calling\\\";\\n    }\\n    /**\\n     * @notice Verifies that the signer is the owner of the signing contract.\\n     */\\n    function isValidSignature(\\n        bytes32 /* messageHash */,\\n        bytes calldata /* signature */\\n    ) external pure returns (bytes4) {\\n        // always return true (just for testing)\\n        return 0x1626ba7e;\\n    }\\n    function mint(address _bpunx, uint256 _amount) external payable {\\n        BPunX(_bpunx).mint{value: msg.value}(_amount);\\n    }\\n    function fund() external payable {}\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\",\"keccak256\":\"0x5fcfae0e512c100fa0bbca0f9c5de5e26225bcced49550458ee2b5cf86b9ebeb\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"UPMock":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"typeId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"receivedData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"returnedValue","type":"bytes"}],"name":"UniversalReceiver","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"fund","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_bpunx","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"typeId","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"universalReceiver","outputs":[{"internalType":"bytes","name":"returnValue","type":"bytes"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"details":"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`","params":{"from":"The address of the EOA or smart contract that called the {universalReceiver(...)} function.","receivedData":"Any arbitrary data that was sent to the {universalReceiver(...)} function.","returnedValue":"The value returned by the {universalReceiver(...)} function.","typeId":"A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.","value":"The amount sent to the {universalReceiver(...)} function."}}},"kind":"dev","methods":{"universalReceiver(bytes32,bytes)":{"details":"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.","params":{"data":"The arbitrary data received with the call.","typeId":"The hash of a specific standard or a hook."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506104bb806100206000396000f3fe6080604052600436106100565760003560e01c806301ffc9a71461005f57806312065fe0146100945780631626ba7e146100af57806340c10f19146100f25780636bb56a1414610105578063b60d42881461005d57005b3661005d57005b005b34801561006b57600080fd5b5061007f61007a36600461024c565b610125565b60405190151581526020015b60405180910390f35b3480156100a057600080fd5b5060405147815260200161008b565b3480156100bb57600080fd5b506100d96100ca36600461027d565b630b135d3f60e11b9392505050565b6040516001600160e01b0319909116815260200161008b565b61005d6101003660046102f9565b610177565b610118610113366004610347565b6101d7565b60405161008b9190610448565b60006001600160e01b03198216631aed5a8560e21b148061015657506001600160e01b031982166324871b3d60e01b145b8061017157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60405163140e25ad60e31b8152600481018290526001600160a01b0383169063a0712d689034906024016000604051808303818588803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b50505050505050565b60608234336001600160a01b03167f9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c285604051610214919061045b565b60405180910390a4506040805180820190915260128152717468616e6b7320666f722063616c6c696e6760701b602082015292915050565b60006020828403121561025e57600080fd5b81356001600160e01b03198116811461027657600080fd5b9392505050565b60008060006040848603121561029257600080fd5b83359250602084013567ffffffffffffffff808211156102b157600080fd5b818601915086601f8301126102c557600080fd5b8135818111156102d457600080fd5b8760208285010111156102e657600080fd5b6020830194508093505050509250925092565b6000806040838503121561030c57600080fd5b82356001600160a01b038116811461032357600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561035a57600080fd5b82359150602083013567ffffffffffffffff8082111561037957600080fd5b818501915085601f83011261038d57600080fd5b81358181111561039f5761039f610331565b604051601f8201601f19908116603f011681019083821181831017156103c7576103c7610331565b816040528281528860208487010111156103e057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b818110156104285760208185018101518683018201520161040c565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006102766020830184610402565b60408152600061046e6040830184610402565b82810360209384015260008152919091019291505056fea2646970667358221220f79b2b9ec9aac963866861d5766e60067eb3534494fd19549d78b404bbf1778c64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x6BB56A14 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xB60D4288 EQ PUSH2 0x5D JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x5D JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x24C JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SELFBALANCE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x27D JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST PUSH2 0x5D PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x177 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x347 JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8B SWAP2 SWAP1 PUSH2 0x448 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x156 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24871B3D PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x171 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x140E25AD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA0712D68 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 CALLVALUE CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9C3BA68EB5742B8E3961AEA0AFC7371A71BF433C8A67A831803B64C064A178C2 DUP6 PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x7468616E6B7320666F722063616C6C696E67 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x39F JUMPI PUSH2 0x39F PUSH2 0x331 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x331 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x428 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x40C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x276 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x402 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x46E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x402 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 SWAP12 0x2B SWAP15 0xC9 0xAA 0xC9 PUSH4 0x866861D5 PUSH23 0x6E60067EB3534494FD19549D78B404BBF1778C64736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"615:1358:8:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_228":{"entryPoint":null,"id":228,"parameterSlots":0,"returnSlots":0},"@_232":{"entryPoint":null,"id":232,"parameterSlots":0,"returnSlots":0},"@fund_212":{"entryPoint":null,"id":212,"parameterSlots":0,"returnSlots":0},"@getBalance_224":{"entryPoint":null,"id":224,"parameterSlots":0,"returnSlots":1},"@isValidSignature_190":{"entryPoint":null,"id":190,"parameterSlots":3,"returnSlots":1},"@mint_208":{"entryPoint":375,"id":208,"parameterSlots":2,"returnSlots":0},"@supportsInterface_154":{"entryPoint":293,"id":154,"parameterSlots":1,"returnSlots":1},"@supportsInterface_98":{"entryPoint":null,"id":98,"parameterSlots":1,"returnSlots":1},"@universalReceiver_177":{"entryPoint":471,"id":177,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":761,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr":{"entryPoint":637,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":839,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":588,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":1026,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1115,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":817,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4126:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:9","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:9"},"nodeType":"YulFunctionCall","src":"131:12:9"},"nodeType":"YulExpressionStatement","src":"131:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:9"},"nodeType":"YulFunctionCall","src":"100:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:9"},"nodeType":"YulFunctionCall","src":"96:32:9"},"nodeType":"YulIf","src":"93:52:9"},{"nodeType":"YulVariableDeclaration","src":"154:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:9"},"nodeType":"YulFunctionCall","src":"167:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:9"},"nodeType":"YulFunctionCall","src":"256:12:9"},"nodeType":"YulExpressionStatement","src":"256:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:9"},"nodeType":"YulFunctionCall","src":"230:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:9"},"nodeType":"YulFunctionCall","src":"219:32:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:9"},"nodeType":"YulFunctionCall","src":"209:43:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:9"},"nodeType":"YulFunctionCall","src":"202:51:9"},"nodeType":"YulIf","src":"199:71:9"},{"nodeType":"YulAssignment","src":"279:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:9","type":""}],"src":"14:286:9"},{"body":{"nodeType":"YulBlock","src":"400:92:9","statements":[{"nodeType":"YulAssignment","src":"410:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:9"},"nodeType":"YulFunctionCall","src":"418:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:9"},"nodeType":"YulFunctionCall","src":"470:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:9"},"nodeType":"YulFunctionCall","src":"463:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:9"},"nodeType":"YulFunctionCall","src":"445:41:9"},"nodeType":"YulExpressionStatement","src":"445:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:9","type":""}],"src":"305:187:9"},{"body":{"nodeType":"YulBlock","src":"598:76:9","statements":[{"nodeType":"YulAssignment","src":"608:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"620:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:9"},"nodeType":"YulFunctionCall","src":"616:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"608:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"650:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"661:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:9"},"nodeType":"YulFunctionCall","src":"643:25:9"},"nodeType":"YulExpressionStatement","src":"643:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"567:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"578:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"589:4:9","type":""}],"src":"497:177:9"},{"body":{"nodeType":"YulBlock","src":"785:553:9","statements":[{"body":{"nodeType":"YulBlock","src":"831:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"840:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"843:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"833:6:9"},"nodeType":"YulFunctionCall","src":"833:12:9"},"nodeType":"YulExpressionStatement","src":"833:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"806:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"815:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"802:3:9"},"nodeType":"YulFunctionCall","src":"802:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"827:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"798:3:9"},"nodeType":"YulFunctionCall","src":"798:32:9"},"nodeType":"YulIf","src":"795:52:9"},{"nodeType":"YulAssignment","src":"856:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"879:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"866:12:9"},"nodeType":"YulFunctionCall","src":"866:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"856:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"898:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"929:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"940:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"925:3:9"},"nodeType":"YulFunctionCall","src":"925:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"912:12:9"},"nodeType":"YulFunctionCall","src":"912:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"902:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"953:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"963:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"957:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1008:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1017:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1020:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1010:6:9"},"nodeType":"YulFunctionCall","src":"1010:12:9"},"nodeType":"YulExpressionStatement","src":"1010:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"996:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1004:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"993:2:9"},"nodeType":"YulFunctionCall","src":"993:14:9"},"nodeType":"YulIf","src":"990:34:9"},{"nodeType":"YulVariableDeclaration","src":"1033:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1047:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"1058:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1043:3:9"},"nodeType":"YulFunctionCall","src":"1043:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1037:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1113:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1122:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1125:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1115:6:9"},"nodeType":"YulFunctionCall","src":"1115:12:9"},"nodeType":"YulExpressionStatement","src":"1115:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1092:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"1096:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1088:3:9"},"nodeType":"YulFunctionCall","src":"1088:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1103:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1084:3:9"},"nodeType":"YulFunctionCall","src":"1084:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1077:6:9"},"nodeType":"YulFunctionCall","src":"1077:35:9"},"nodeType":"YulIf","src":"1074:55:9"},{"nodeType":"YulVariableDeclaration","src":"1138:30:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1165:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1152:12:9"},"nodeType":"YulFunctionCall","src":"1152:16:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1142:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1195:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1204:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1207:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1197:6:9"},"nodeType":"YulFunctionCall","src":"1197:12:9"},"nodeType":"YulExpressionStatement","src":"1197:12:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1183:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1191:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1180:2:9"},"nodeType":"YulFunctionCall","src":"1180:14:9"},"nodeType":"YulIf","src":"1177:34:9"},{"body":{"nodeType":"YulBlock","src":"1261:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1270:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1273:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1263:6:9"},"nodeType":"YulFunctionCall","src":"1263:12:9"},"nodeType":"YulExpressionStatement","src":"1263:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1234:2:9"},{"name":"length","nodeType":"YulIdentifier","src":"1238:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1230:3:9"},"nodeType":"YulFunctionCall","src":"1230:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"1247:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1226:3:9"},"nodeType":"YulFunctionCall","src":"1226:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1252:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1223:2:9"},"nodeType":"YulFunctionCall","src":"1223:37:9"},"nodeType":"YulIf","src":"1220:57:9"},{"nodeType":"YulAssignment","src":"1286:21:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1300:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"1304:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1296:3:9"},"nodeType":"YulFunctionCall","src":"1296:11:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1286:6:9"}]},{"nodeType":"YulAssignment","src":"1316:16:9","value":{"name":"length","nodeType":"YulIdentifier","src":"1326:6:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1316:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"735:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"746:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"758:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"766:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"774:6:9","type":""}],"src":"679:659:9"},{"body":{"nodeType":"YulBlock","src":"1442:103:9","statements":[{"nodeType":"YulAssignment","src":"1452:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1464:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1475:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1460:3:9"},"nodeType":"YulFunctionCall","src":"1460:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1452:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1494:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1509:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1521:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1526:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1517:3:9"},"nodeType":"YulFunctionCall","src":"1517:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1505:3:9"},"nodeType":"YulFunctionCall","src":"1505:33:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1487:6:9"},"nodeType":"YulFunctionCall","src":"1487:52:9"},"nodeType":"YulExpressionStatement","src":"1487:52:9"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1411:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1422:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1433:4:9","type":""}],"src":"1343:202:9"},{"body":{"nodeType":"YulBlock","src":"1637:267:9","statements":[{"body":{"nodeType":"YulBlock","src":"1683:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1692:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1695:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1685:6:9"},"nodeType":"YulFunctionCall","src":"1685:12:9"},"nodeType":"YulExpressionStatement","src":"1685:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1658:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1667:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1654:3:9"},"nodeType":"YulFunctionCall","src":"1654:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1679:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1650:3:9"},"nodeType":"YulFunctionCall","src":"1650:32:9"},"nodeType":"YulIf","src":"1647:52:9"},{"nodeType":"YulVariableDeclaration","src":"1708:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1734:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1721:12:9"},"nodeType":"YulFunctionCall","src":"1721:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1712:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1807:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1816:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1819:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1809:6:9"},"nodeType":"YulFunctionCall","src":"1809:12:9"},"nodeType":"YulExpressionStatement","src":"1809:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1766:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1777:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1792:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1797:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1788:3:9"},"nodeType":"YulFunctionCall","src":"1788:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1801:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1784:3:9"},"nodeType":"YulFunctionCall","src":"1784:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1773:3:9"},"nodeType":"YulFunctionCall","src":"1773:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1763:2:9"},"nodeType":"YulFunctionCall","src":"1763:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1756:6:9"},"nodeType":"YulFunctionCall","src":"1756:50:9"},"nodeType":"YulIf","src":"1753:70:9"},{"nodeType":"YulAssignment","src":"1832:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"1842:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1832:6:9"}]},{"nodeType":"YulAssignment","src":"1856:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1883:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1894:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1879:3:9"},"nodeType":"YulFunctionCall","src":"1879:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1866:12:9"},"nodeType":"YulFunctionCall","src":"1866:32:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1856:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1595:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1606:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1618:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1626:6:9","type":""}],"src":"1550:354:9"},{"body":{"nodeType":"YulBlock","src":"1941:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1958:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1965:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1970:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1961:3:9"},"nodeType":"YulFunctionCall","src":"1961:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1951:6:9"},"nodeType":"YulFunctionCall","src":"1951:31:9"},"nodeType":"YulExpressionStatement","src":"1951:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1998:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2001:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1991:6:9"},"nodeType":"YulFunctionCall","src":"1991:15:9"},"nodeType":"YulExpressionStatement","src":"1991:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2022:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2025:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2015:6:9"},"nodeType":"YulFunctionCall","src":"2015:15:9"},"nodeType":"YulExpressionStatement","src":"2015:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1909:127:9"},{"body":{"nodeType":"YulBlock","src":"2137:893:9","statements":[{"body":{"nodeType":"YulBlock","src":"2183:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2192:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2195:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2185:6:9"},"nodeType":"YulFunctionCall","src":"2185:12:9"},"nodeType":"YulExpressionStatement","src":"2185:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2158:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2167:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2154:3:9"},"nodeType":"YulFunctionCall","src":"2154:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2179:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2150:3:9"},"nodeType":"YulFunctionCall","src":"2150:32:9"},"nodeType":"YulIf","src":"2147:52:9"},{"nodeType":"YulAssignment","src":"2208:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2231:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2218:12:9"},"nodeType":"YulFunctionCall","src":"2218:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2208:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"2250:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2281:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2292:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2277:3:9"},"nodeType":"YulFunctionCall","src":"2277:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2264:12:9"},"nodeType":"YulFunctionCall","src":"2264:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2254:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2305:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2315:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2309:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2360:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2369:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2372:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2362:6:9"},"nodeType":"YulFunctionCall","src":"2362:12:9"},"nodeType":"YulExpressionStatement","src":"2362:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2348:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2356:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2345:2:9"},"nodeType":"YulFunctionCall","src":"2345:14:9"},"nodeType":"YulIf","src":"2342:34:9"},{"nodeType":"YulVariableDeclaration","src":"2385:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2399:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"2410:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2395:3:9"},"nodeType":"YulFunctionCall","src":"2395:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2389:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2465:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2474:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2477:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2467:6:9"},"nodeType":"YulFunctionCall","src":"2467:12:9"},"nodeType":"YulExpressionStatement","src":"2467:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2444:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2448:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:9"},"nodeType":"YulFunctionCall","src":"2440:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2455:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2436:3:9"},"nodeType":"YulFunctionCall","src":"2436:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2429:6:9"},"nodeType":"YulFunctionCall","src":"2429:35:9"},"nodeType":"YulIf","src":"2426:55:9"},{"nodeType":"YulVariableDeclaration","src":"2490:26:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2513:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2500:12:9"},"nodeType":"YulFunctionCall","src":"2500:16:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2494:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2539:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2541:16:9"},"nodeType":"YulFunctionCall","src":"2541:18:9"},"nodeType":"YulExpressionStatement","src":"2541:18:9"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2531:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2535:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2528:2:9"},"nodeType":"YulFunctionCall","src":"2528:10:9"},"nodeType":"YulIf","src":"2525:36:9"},{"nodeType":"YulVariableDeclaration","src":"2570:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2584:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2580:3:9"},"nodeType":"YulFunctionCall","src":"2580:7:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2574:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2596:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2616:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2610:5:9"},"nodeType":"YulFunctionCall","src":"2610:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2600:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2628:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2650:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2674:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2678:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2670:3:9"},"nodeType":"YulFunctionCall","src":"2670:13:9"},{"name":"_4","nodeType":"YulIdentifier","src":"2685:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2666:3:9"},"nodeType":"YulFunctionCall","src":"2666:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"2690:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2662:3:9"},"nodeType":"YulFunctionCall","src":"2662:31:9"},{"name":"_4","nodeType":"YulIdentifier","src":"2695:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2658:3:9"},"nodeType":"YulFunctionCall","src":"2658:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2646:3:9"},"nodeType":"YulFunctionCall","src":"2646:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2632:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2758:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2760:16:9"},"nodeType":"YulFunctionCall","src":"2760:18:9"},"nodeType":"YulExpressionStatement","src":"2760:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2717:10:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2729:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2714:2:9"},"nodeType":"YulFunctionCall","src":"2714:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2737:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2749:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2734:2:9"},"nodeType":"YulFunctionCall","src":"2734:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2711:2:9"},"nodeType":"YulFunctionCall","src":"2711:46:9"},"nodeType":"YulIf","src":"2708:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2796:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2800:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2789:6:9"},"nodeType":"YulFunctionCall","src":"2789:22:9"},"nodeType":"YulExpressionStatement","src":"2789:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2827:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"2835:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2820:6:9"},"nodeType":"YulFunctionCall","src":"2820:18:9"},"nodeType":"YulExpressionStatement","src":"2820:18:9"},{"body":{"nodeType":"YulBlock","src":"2884:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2893:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2896:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2886:6:9"},"nodeType":"YulFunctionCall","src":"2886:12:9"},"nodeType":"YulExpressionStatement","src":"2886:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2861:2:9"},{"name":"_3","nodeType":"YulIdentifier","src":"2865:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2857:3:9"},"nodeType":"YulFunctionCall","src":"2857:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"2870:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2853:3:9"},"nodeType":"YulFunctionCall","src":"2853:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2875:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2850:2:9"},"nodeType":"YulFunctionCall","src":"2850:33:9"},"nodeType":"YulIf","src":"2847:53:9"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2926:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2934:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2922:3:9"},"nodeType":"YulFunctionCall","src":"2922:15:9"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2943:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2947:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2939:3:9"},"nodeType":"YulFunctionCall","src":"2939:11:9"},{"name":"_3","nodeType":"YulIdentifier","src":"2952:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2909:12:9"},"nodeType":"YulFunctionCall","src":"2909:46:9"},"nodeType":"YulExpressionStatement","src":"2909:46:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2979:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"2987:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2975:3:9"},"nodeType":"YulFunctionCall","src":"2975:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"2992:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2971:3:9"},"nodeType":"YulFunctionCall","src":"2971:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"2997:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2964:6:9"},"nodeType":"YulFunctionCall","src":"2964:35:9"},"nodeType":"YulExpressionStatement","src":"2964:35:9"},{"nodeType":"YulAssignment","src":"3008:16:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3018:6:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3008:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2095:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2106:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2118:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2126:6:9","type":""}],"src":"2041:989:9"},{"body":{"nodeType":"YulBlock","src":"3084:373:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3094:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3114:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3108:5:9"},"nodeType":"YulFunctionCall","src":"3108:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3098:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3136:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"3141:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3129:6:9"},"nodeType":"YulFunctionCall","src":"3129:19:9"},"nodeType":"YulExpressionStatement","src":"3129:19:9"},{"nodeType":"YulVariableDeclaration","src":"3157:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3166:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3161:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3228:110:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3242:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3252:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3246:2:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3284:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"3289:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:9"},"nodeType":"YulFunctionCall","src":"3280:11:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3293:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3276:3:9"},"nodeType":"YulFunctionCall","src":"3276:20:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3312:5:9"},{"name":"i","nodeType":"YulIdentifier","src":"3319:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3308:3:9"},"nodeType":"YulFunctionCall","src":"3308:13:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3323:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3304:3:9"},"nodeType":"YulFunctionCall","src":"3304:22:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3298:5:9"},"nodeType":"YulFunctionCall","src":"3298:29:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3269:6:9"},"nodeType":"YulFunctionCall","src":"3269:59:9"},"nodeType":"YulExpressionStatement","src":"3269:59:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3187:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"3190:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3184:2:9"},"nodeType":"YulFunctionCall","src":"3184:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3198:21:9","statements":[{"nodeType":"YulAssignment","src":"3200:17:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3209:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"3212:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3205:3:9"},"nodeType":"YulFunctionCall","src":"3205:12:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3200:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3180:3:9","statements":[]},"src":"3176:162:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3362:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"3367:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3358:3:9"},"nodeType":"YulFunctionCall","src":"3358:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"3376:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3354:3:9"},"nodeType":"YulFunctionCall","src":"3354:27:9"},{"kind":"number","nodeType":"YulLiteral","src":"3383:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3347:6:9"},"nodeType":"YulFunctionCall","src":"3347:38:9"},"nodeType":"YulExpressionStatement","src":"3347:38:9"},{"nodeType":"YulAssignment","src":"3394:57:9","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3409:3:9"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3422:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3430:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3418:3:9"},"nodeType":"YulFunctionCall","src":"3418:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3439:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3435:3:9"},"nodeType":"YulFunctionCall","src":"3435:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3414:3:9"},"nodeType":"YulFunctionCall","src":"3414:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3405:3:9"},"nodeType":"YulFunctionCall","src":"3405:39:9"},{"kind":"number","nodeType":"YulLiteral","src":"3446:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3401:3:9"},"nodeType":"YulFunctionCall","src":"3401:50:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3394:3:9"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3061:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3068:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3076:3:9","type":""}],"src":"3035:422:9"},{"body":{"nodeType":"YulBlock","src":"3581:98:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3598:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3609:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3591:6:9"},"nodeType":"YulFunctionCall","src":"3591:21:9"},"nodeType":"YulExpressionStatement","src":"3591:21:9"},{"nodeType":"YulAssignment","src":"3621:52:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3646:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3658:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3669:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3654:3:9"},"nodeType":"YulFunctionCall","src":"3654:18:9"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"3629:16:9"},"nodeType":"YulFunctionCall","src":"3629:44:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3621:4:9"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3550:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3561:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3572:4:9","type":""}],"src":"3462:217:9"},{"body":{"nodeType":"YulBlock","src":"3903:221:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3920:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3931:2:9","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3913:6:9"},"nodeType":"YulFunctionCall","src":"3913:21:9"},"nodeType":"YulExpressionStatement","src":"3913:21:9"},{"nodeType":"YulVariableDeclaration","src":"3943:58:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3974:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3986:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3997:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3982:3:9"},"nodeType":"YulFunctionCall","src":"3982:18:9"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"3957:16:9"},"nodeType":"YulFunctionCall","src":"3957:44:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"3947:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4021:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4032:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4017:3:9"},"nodeType":"YulFunctionCall","src":"4017:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4041:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"4049:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4037:3:9"},"nodeType":"YulFunctionCall","src":"4037:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4010:6:9"},"nodeType":"YulFunctionCall","src":"4010:50:9"},"nodeType":"YulExpressionStatement","src":"4010:50:9"},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4076:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4084:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4069:6:9"},"nodeType":"YulFunctionCall","src":"4069:17:9"},"nodeType":"YulExpressionStatement","src":"4069:17:9"},{"nodeType":"YulAssignment","src":"4095:23:9","value":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4107:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4115:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4103:3:9"},"nodeType":"YulFunctionCall","src":"4103:15:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4095:4:9"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3872:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3883:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3894:4:9","type":""}],"src":"3684:440:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 0)\n        tail := add(tail_1, 32)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100565760003560e01c806301ffc9a71461005f57806312065fe0146100945780631626ba7e146100af57806340c10f19146100f25780636bb56a1414610105578063b60d42881461005d57005b3661005d57005b005b34801561006b57600080fd5b5061007f61007a36600461024c565b610125565b60405190151581526020015b60405180910390f35b3480156100a057600080fd5b5060405147815260200161008b565b3480156100bb57600080fd5b506100d96100ca36600461027d565b630b135d3f60e11b9392505050565b6040516001600160e01b0319909116815260200161008b565b61005d6101003660046102f9565b610177565b610118610113366004610347565b6101d7565b60405161008b9190610448565b60006001600160e01b03198216631aed5a8560e21b148061015657506001600160e01b031982166324871b3d60e01b145b8061017157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60405163140e25ad60e31b8152600481018290526001600160a01b0383169063a0712d689034906024016000604051808303818588803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b50505050505050565b60608234336001600160a01b03167f9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c285604051610214919061045b565b60405180910390a4506040805180820190915260128152717468616e6b7320666f722063616c6c696e6760701b602082015292915050565b60006020828403121561025e57600080fd5b81356001600160e01b03198116811461027657600080fd5b9392505050565b60008060006040848603121561029257600080fd5b83359250602084013567ffffffffffffffff808211156102b157600080fd5b818601915086601f8301126102c557600080fd5b8135818111156102d457600080fd5b8760208285010111156102e657600080fd5b6020830194508093505050509250925092565b6000806040838503121561030c57600080fd5b82356001600160a01b038116811461032357600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561035a57600080fd5b82359150602083013567ffffffffffffffff8082111561037957600080fd5b818501915085601f83011261038d57600080fd5b81358181111561039f5761039f610331565b604051601f8201601f19908116603f011681019083821181831017156103c7576103c7610331565b816040528281528860208487010111156103e057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b818110156104285760208185018101518683018201520161040c565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006102766020830184610402565b60408152600061046e6040830184610402565b82810360209384015260008152919091019291505056fea2646970667358221220f79b2b9ec9aac963866861d5766e60067eb3534494fd19549d78b404bbf1778c64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x6BB56A14 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xB60D4288 EQ PUSH2 0x5D JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x5D JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x24C JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SELFBALANCE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x27D JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST PUSH2 0x5D PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x177 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x347 JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8B SWAP2 SWAP1 PUSH2 0x448 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x156 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24871B3D PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x171 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x140E25AD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA0712D68 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 CALLVALUE CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9C3BA68EB5742B8E3961AEA0AFC7371A71BF433C8A67A831803B64C064A178C2 DUP6 PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x7468616E6B7320666F722063616C6C696E67 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x39F JUMPI PUSH2 0x39F PUSH2 0x331 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x331 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x428 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x40C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x276 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x402 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x46E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x402 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 SWAP12 0x2B SWAP15 0xC9 0xAA 0xC9 PUSH4 0x866861D5 PUSH23 0x6E60067EB3534494FD19549D78B404BBF1778C64736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"615:1358:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;736:303;;;;;;;;;;-1:-1:-1;736:303:8;;;;;:::i;:::-;;:::i;:::-;;;470:14:9;;463:22;445:41;;433:2;418:18;736:303:8;;;;;;;;1803:99;;;;;;;;;;-1:-1:-1;1803:99:8;;1874:21;643:25:9;;631:2;616:18;1803:99:8;497:177:9;1406:221:8;;;;;;;;;;-1:-1:-1;1406:221:8;;;;;:::i;:::-;-1:-1:-1;;;1406:221:8;;;;;;;;;-1:-1:-1;;;;;;1505:33:9;;;1487:52;;1475:2;1460:18;1406:221:8;1343:202:9;1632:126:8;;;;;;:::i;:::-;;:::i;1044:263::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;736:303::-;861:4;-1:-1:-1;;;;;;900:32:8;;-1:-1:-1;;;900:32:8;;:80;;-1:-1:-1;;;;;;;948:32:8;;-1:-1:-1;;;948:32:8;900:80;:132;;;-1:-1:-1;;;;;;;;;;861:40:6;;;996:36:8;881:151;736:303;-1:-1:-1;;736:303:8:o;1632:126::-;1706:45;;-1:-1:-1;;;1706:45:8;;;;;643:25:9;;;-1:-1:-1;;;;;1706:18:8;;;;;1732:9;;616:18:9;;1706:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1632:126;;:::o;1044:263::-;1163:24;1245:6;1234:9;1222:10;-1:-1:-1;;;;;1204:58:8;;1253:4;1204:58;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;1273:27:8;;;;;;;;;;;;-1:-1:-1;;;1273:27:8;;;;1044:263;;;;:::o;14:286:9:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:9;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:9:o;679:659::-;758:6;766;774;827:2;815:9;806:7;802:23;798:32;795:52;;;843:1;840;833:12;795:52;879:9;866:23;856:33;;940:2;929:9;925:18;912:32;963:18;1004:2;996:6;993:14;990:34;;;1020:1;1017;1010:12;990:34;1058:6;1047:9;1043:22;1033:32;;1103:7;1096:4;1092:2;1088:13;1084:27;1074:55;;1125:1;1122;1115:12;1074:55;1165:2;1152:16;1191:2;1183:6;1180:14;1177:34;;;1207:1;1204;1197:12;1177:34;1252:7;1247:2;1238:6;1234:2;1230:15;1226:24;1223:37;1220:57;;;1273:1;1270;1263:12;1220:57;1304:2;1300;1296:11;1286:21;;1326:6;1316:16;;;;;679:659;;;;;:::o;1550:354::-;1618:6;1626;1679:2;1667:9;1658:7;1654:23;1650:32;1647:52;;;1695:1;1692;1685:12;1647:52;1721:23;;-1:-1:-1;;;;;1773:31:9;;1763:42;;1753:70;;1819:1;1816;1809:12;1753:70;1842:5;1894:2;1879:18;;;;1866:32;;-1:-1:-1;;;1550:354:9:o;1909:127::-;1970:10;1965:3;1961:20;1958:1;1951:31;2001:4;1998:1;1991:15;2025:4;2022:1;2015:15;2041:989;2118:6;2126;2179:2;2167:9;2158:7;2154:23;2150:32;2147:52;;;2195:1;2192;2185:12;2147:52;2231:9;2218:23;2208:33;;2292:2;2281:9;2277:18;2264:32;2315:18;2356:2;2348:6;2345:14;2342:34;;;2372:1;2369;2362:12;2342:34;2410:6;2399:9;2395:22;2385:32;;2455:7;2448:4;2444:2;2440:13;2436:27;2426:55;;2477:1;2474;2467:12;2426:55;2513:2;2500:16;2535:2;2531;2528:10;2525:36;;;2541:18;;:::i;:::-;2616:2;2610:9;2584:2;2670:13;;-1:-1:-1;;2666:22:9;;;2690:2;2662:31;2658:40;2646:53;;;2714:18;;;2734:22;;;2711:46;2708:72;;;2760:18;;:::i;:::-;2800:10;2796:2;2789:22;2835:2;2827:6;2820:18;2875:7;2870:2;2865;2861;2857:11;2853:20;2850:33;2847:53;;;2896:1;2893;2886:12;2847:53;2952:2;2947;2943;2939:11;2934:2;2926:6;2922:15;2909:46;2997:1;2992:2;2987;2979:6;2975:15;2971:24;2964:35;3018:6;3008:16;;;;;;;2041:989;;;;;:::o;3035:422::-;3076:3;3114:5;3108:12;3141:6;3136:3;3129:19;3166:1;3176:162;3190:6;3187:1;3184:13;3176:162;;;3252:4;3308:13;;;3304:22;;3298:29;3280:11;;;3276:20;;3269:59;3205:12;3176:162;;;3180:3;3383:1;3376:4;3367:6;3362:3;3358:16;3354:27;3347:38;3446:4;3439:2;3435:7;3430:2;3422:6;3418:15;3414:29;3409:3;3405:39;3401:50;3394:57;;;3035:422;;;;:::o;3462:217::-;3609:2;3598:9;3591:21;3572:4;3629:44;3669:2;3658:9;3654:18;3646:6;3629:44;:::i;3684:440::-;3931:2;3920:9;3913:21;3894:4;3957:44;3997:2;3986:9;3982:18;3974:6;3957:44;:::i;:::-;4037:22;;;4032:2;4017:18;;;4010:50;4084:1;4069:17;;4103:15;;;;;3684:440;-1:-1:-1;;3684:440:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"242200","executionCost":"281","totalCost":"242481"},"external":{"":"183","fund()":"184","getBalance()":"179","isValidSignature(bytes32,bytes)":"532","mint(address,uint256)":"infinite","supportsInterface(bytes4)":"459","universalReceiver(bytes32,bytes)":"infinite"}},"methodIdentifiers":{"fund()":"b60d4288","getBalance()":"12065fe0","isValidSignature(bytes32,bytes)":"1626ba7e","mint(address,uint256)":"40c10f19","supportsInterface(bytes4)":"01ffc9a7","universalReceiver(bytes32,bytes)":"6bb56a14"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedValue\",\"type\":\"bytes\"}],\"name\":\"UniversalReceiver\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bpunx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"universalReceiver\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnValue\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"details\":\"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\",\"params\":{\"from\":\"The address of the EOA or smart contract that called the {universalReceiver(...)} function.\",\"receivedData\":\"Any arbitrary data that was sent to the {universalReceiver(...)} function.\",\"returnedValue\":\"The value returned by the {universalReceiver(...)} function.\",\"typeId\":\"A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\",\"value\":\"The amount sent to the {universalReceiver(...)} function.\"}}},\"kind\":\"dev\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"details\":\"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\",\"params\":{\"data\":\"The arbitrary data received with the call.\",\"typeId\":\"The hash of a specific standard or a hook.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\"}},\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies that the signer is the owner of the signing contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"override the supportsInterface function from ERC165\"},\"universalReceiver(bytes32,bytes)\":{\"notice\":\"Reacted on received notification with `typeId` & `data`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/UPMock.sol\":\"UPMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp0-contracts/contracts/LSP0Constants.sol\\\";\\n\",\"keccak256\":\"0x82f1c5d5689df750d081fef3b0d48faca2f13f4b2b6b67426deb9da1060dc3db\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\n\",\"keccak256\":\"0x39114a8dc3ec9c8ddd22cb0219614aa82565fe8338acfbd99cdb7c9ad55b1d1c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\n\",\"keccak256\":\"0x2fbc59802e5ab01aeb72fdc69fca1bbb420eeeb1c4bc009a1e2a7b78b491999d\",\"license\":\"Apache-2.0\"},\"@lukso/lsp0-contracts/contracts/LSP0Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP0 = 0x24871b3d;\\nbytes4 constant _INTERFACEID_ERC1271 = 0x1626ba7e;\\n\\n// ERC1271 - Standard Signature Validation\\nbytes4 constant _ERC1271_SUCCESSVALUE = 0x1626ba7e;\\nbytes4 constant _ERC1271_FAILVALUE = 0xffffffff;\\n\\n// --- Native Token Type Id\\n\\n// keccak256('LSP0ValueReceived')\\nbytes32 constant _TYPEID_LSP0_VALUE_RECEIVED = 0x9c4705229491d365fb5434052e12a386d6771d976bea61070a8c694e8affea3d;\\n\\n// Ownership Transfer Type IDs\\n\\n// keccak256('LSP0OwnershipTransferStarted')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferStarted = 0xe17117c9d2665d1dbeb479ed8058bbebde3c50ac50e2e65619f60006caac6926;\\n\\n// keccak256('LSP0OwnershipTransferred_SenderNotification')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_SenderNotification = 0xa4e59c931d14f7c8a7a35027f92ee40b5f2886b9fdcdb78f30bc5ecce5a2f814;\\n\\n// keccak256('LSP0OwnershipTransferred_RecipientNotification')\\nbytes32 constant _TYPEID_LSP0_OwnershipTransferred_RecipientNotification = 0xceca317f109c43507871523e82dc2a3cc64dfa18f12da0b6db14f6e23f995538;\\n\",\"keccak256\":\"0x9066f85dcef006b7896a367fd08fd0a62706a32457be6859191f15f5e865d049\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/mocks/UPMock.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver\\n} from \\\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\\\";\\n\\n// modules\\nimport {\\n    ERC165\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP1} from \\\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\\\";\\nimport {_INTERFACEID_LSP0} from \\\"@lukso/lsp-smart-contracts/contracts/LSP0ERC725Account/LSP0Constants.sol\\\";\\n\\ninterface BPunX {\\n    function mint(uint256 _amount) external payable;\\n}\\ncontract UPMock is ERC165, ILSP1UniversalReceiver {\\n    \\n    /// override the supportsInterface function from ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP1 ||\\n            interfaceId == _INTERFACEID_LSP0 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes memory data\\n    ) external payable override returns (bytes memory returnValue) {\\n        emit UniversalReceiver(msg.sender, msg.value, typeId, data, \\\"\\\");\\n\\n        return \\\"thanks for calling\\\";\\n    }\\n    /**\\n     * @notice Verifies that the signer is the owner of the signing contract.\\n     */\\n    function isValidSignature(\\n        bytes32 /* messageHash */,\\n        bytes calldata /* signature */\\n    ) external pure returns (bytes4) {\\n        // always return true (just for testing)\\n        return 0x1626ba7e;\\n    }\\n    function mint(address _bpunx, uint256 _amount) external payable {\\n        BPunX(_bpunx).mint{value: msg.value}(_amount);\\n    }\\n    function fund() external payable {}\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\",\"keccak256\":\"0x5fcfae0e512c100fa0bbca0f9c5de5e26225bcced49550458ee2b5cf86b9ebeb\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"notice":"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`."}},"kind":"user","methods":{"isValidSignature(bytes32,bytes)":{"notice":"Verifies that the signer is the owner of the signing contract."},"supportsInterface(bytes4)":{"notice":"override the supportsInterface function from ERC165"},"universalReceiver(bytes32,bytes)":{"notice":"Reacted on received notification with `typeId` & `data`."}},"version":1}}}}}}