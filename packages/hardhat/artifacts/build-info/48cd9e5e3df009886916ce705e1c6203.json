{"id":"48cd9e5e3df009886916ce705e1c6203","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@erc725/smart-contracts/contracts/constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// ERC165 INTERFACE IDs\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\n\n// ERC725X OPERATION TYPES\nuint256 constant OPERATION_0_CALL = 0;\nuint256 constant OPERATION_1_CREATE = 1;\nuint256 constant OPERATION_2_CREATE2 = 2;\nuint256 constant OPERATION_3_STATICCALL = 3;\nuint256 constant OPERATION_4_DELEGATECALL = 4;\n"},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// errors\nimport {\n    OwnableCannotSetZeroAddressAsOwner,\n    OwnableCallerNotTheOwner\n} from \"../errors.sol\";\n\n/**\n * @title OwnableUnset\n * @dev modified version of OpenZeppelin implementation, where:\n * - _setOwner(address) function is internal, so this function can be used in constructor\n * of contracts implementation (instead of using transferOwnership(address)\n * - the contract does not inherit from Context contract\n */\nabstract contract OwnableUnset {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableCannotSetZeroAddressAsOwner();\n        }\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != msg.sender) {\n            revert OwnableCallerNotTheOwner(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Changes the owner if `newOwner` and oldOwner are different\n     * This pattern is useful in inheritance.\n     */\n    function _setOwner(address newOwner) internal virtual {\n        if (newOwner != owner()) {\n            emit OwnershipTransferred(_owner, newOwner);\n            _owner = newOwner;\n        }\n    }\n}\n"},"@erc725/smart-contracts/contracts/ERC725Y.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\nimport {ERC725YCore} from \"./ERC725YCore.sol\";\n\n// errors\nimport {OwnableCannotSetZeroAddressAsOwner} from \"./errors.sol\";\n\n/**\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ncontract ERC725Y is ERC725YCore {\n    /**\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\n     * @param initialOwner the owner of the contract.\n     *\n     * @custom:requirements\n     * - `initialOwner` CANNOT be the zero address.\n     */\n    constructor(address initialOwner) payable {\n        if (initialOwner == address(0)) {\n            revert OwnableCannotSetZeroAddressAsOwner();\n        }\n        OwnableUnset._setOwner(initialOwner);\n    }\n}\n"},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725Y} from \"./interfaces/IERC725Y.sol\";\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\n\n// constants\nimport {_INTERFACEID_ERC725Y} from \"./constants.sol\";\n\nimport {\n    ERC725Y_MsgValueDisallowed,\n    ERC725Y_DataKeysValuesLengthMismatch,\n    ERC725Y_DataKeysValuesEmptyArray\n} from \"./errors.sol\";\n\n/**\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\n    /**\n     * @dev Map `bytes32` data keys to their `bytes` data values.\n     */\n    mapping(bytes32 => bytes) internal _store;\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getData(\n        bytes32 dataKey\n    ) public view virtual override returns (bytes memory dataValue) {\n        dataValue = _getData(dataKey);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) public view virtual override returns (bytes[] memory dataValues) {\n        dataValues = new bytes[](dataKeys.length);\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            dataValues[i] = _getData(dataKeys[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n\n        return dataValues;\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner}.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event.\n     */\n    function setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) public payable virtual override onlyOwner {\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n        _setData(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner} of the contract.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) public payable virtual override onlyOwner {\n        /// @dev do not allow to send value by default when setting data in ERC725Y\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n\n        if (dataKeys.length != dataValues.length) {\n            revert ERC725Y_DataKeysValuesLengthMismatch();\n        }\n\n        if (dataKeys.length == 0) {\n            revert ERC725Y_DataKeysValuesEmptyArray();\n        }\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            _setData(dataKeys[i], dataValues[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\n     */\n    function _getData(\n        bytes32 dataKey\n    ) internal view virtual returns (bytes memory dataValue) {\n        return _store[dataKey];\n    }\n\n    /**\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n     * `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\n     *\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual {\n        _store[dataKey] = dataValue;\n        emit DataChanged(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == _INTERFACEID_ERC725Y ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"},"@erc725/smart-contracts/contracts/errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\n * initializing it or transferring ownership of the contract.\n */\nerror OwnableCannotSetZeroAddressAsOwner();\n\n/**\n * @dev Reverts when only the owner is allowed to call the function.\n * @param callerAddress The address that tried to make the call.\n */\nerror OwnableCallerNotTheOwner(address callerAddress);\n\n/**\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\n * @param balance The balance of native tokens of the ERC725X smart contract.\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\n */\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\n\n/**\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\n */\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\n */\nerror ERC725X_MsgValueDisallowedInStaticCall();\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\n */\nerror ERC725X_MsgValueDisallowedInDelegateCall();\n\n/**\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\n\n/**\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_ContractDeploymentFailed();\n\n/**\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_NoContractBytecodeProvided();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\n * array parameters provided when calling the {executeBatch} function.\n */\nerror ERC725X_ExecuteParametersLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\n */\nerror ERC725X_ExecuteParametersEmptyArray();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\n * array parameters provided when calling the {setDataBatch} function.\n */\nerror ERC725Y_DataKeysValuesLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\n */\nerror ERC725Y_DataKeysValuesEmptyArray();\n\n/**\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\n */\nerror ERC725Y_MsgValueDisallowed();\n"},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"content":"// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n     * @param dataKey The data key for which to retrieve the value.\n     * @return dataValue The bytes value stored under the specified data key.\n     */\n    function getData(\n        bytes32 dataKey\n    ) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n     *\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\n     * a fee mechanism for setting specific data.\n     *\n     * @param dataKey The data key for which to set a new value.\n     * @param dataValue The new bytes value to set.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\n\n    /**\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n     *\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n     *\n     * @param dataKeys An array of data keys to set bytes values for.\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external payable;\n}\n"},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\n */\ninterface ILSP1UniversalReceiver {\n    /**\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n     *\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n     * @param value The amount sent to the {universalReceiver(...)} function.\n     * @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\n     */\n    event UniversalReceiver(\n        address indexed from,\n        uint256 indexed value,\n        bytes32 indexed typeId,\n        bytes receivedData,\n        bytes returnedValue\n    );\n\n    /**\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n     * @notice Reacted on received notification with `typeId` & `data`.\n     *\n     * @param typeId The hash of a specific standard or a hook.\n     * @param data The arbitrary data received with the call.\n     *\n     * @custom:events {UniversalReceiver} event.\n     */\n    function universalReceiver(\n        bytes32 typeId,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n}\n"},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\n\n// --- ERC725Y Data Keys\n\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\n\n// keccak256('LSP1UniversalReceiverDelegate')\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\n"},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// libraries\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// constants\nimport {ILSP1UniversalReceiver as ILSP1} from \"./ILSP1UniversalReceiver.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP1,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\n} from \"./LSP1Constants.sol\";\n\n/**\n * @title LSP1 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\n * Based on LSP1 Universal Receiver standard.\n */\nlibrary LSP1Utils {\n    using ERC165Checker for address;\n\n    /**\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\n     * supports the LSP1 interface.\n     *\n     * @param lsp1Implementation The address of the contract to notify.\n     * @param typeId A `bytes32` typeId.\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\n     */\n    function notifyUniversalReceiver(\n        address lsp1Implementation,\n        bytes32 typeId,\n        bytes memory data\n    ) internal {\n        if (\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\n                _INTERFACEID_LSP1\n            )\n        ) {\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\n        }\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\n     */\n    function getLSP1DelegateValue(\n        mapping(bytes32 => bytes) storage erc725YStorage\n    ) internal view returns (bytes memory) {\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @param typeId A bytes32 LSP1 `typeId`;\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\n     */\n    function getLSP1DelegateValueForTypeId(\n        mapping(bytes32 => bytes) storage erc725YStorage,\n        bytes32 typeId\n    ) internal view returns (bytes memory) {\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\n            bytes20(typeId)\n        );\n        return erc725YStorage[lsp1TypeIdDataKey];\n    }\n}\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\n\n// bytes4(keccack256(\"LSP17Extendable\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\n\n// bytes4(keccack256(\"LSP17Extension\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\n\n// --- ERC725Y Data Keys\n\n// Extension Handler Prefix\n\n// bytes10(keccak256('LSP17Extension'))\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev reverts when there is no extension for the function selector being called with\n */\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\n\n/**\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\n */\nerror InvalidFunctionSelector(bytes data);\n\n/**\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\n */\nerror InvalidExtensionAddress(bytes storedData);\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n// constants\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \"./LSP17Constants.sol\";\n\n// errors\nimport {NoExtensionFoundForFunctionSelector} from \"./LSP17Errors.sol\";\n\n/**\n * @title Module to add more functionalities to a contract using extensions.\n *\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\n * This module can be inherited to extend the functionality of the parent contract when\n * calling a function that doesn't exist on the parent contract via forwarding the call\n * to an extension mapped to the function selector being called, set originally by the parent contract\n */\nabstract contract LSP17Extendable is ERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\n     * {supportsInterface} selector.\n     *\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n     * extension if the extension is set, if not it returns false.\n     */\n    function _supportsInterfaceInERC165Extension(\n        bytes4 interfaceId\n    ) internal view virtual returns (bool) {\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\n            ERC165.supportsInterface.selector\n        );\n        if (erc165Extension == address(0)) return false;\n\n        return\n            ERC165Checker.supportsERC165InterfaceUnchecked(\n                erc165Extension,\n                interfaceId\n            );\n    }\n\n    /**\n     * @dev Returns the extension mapped to a specific function selector\n     * If no extension was found, return the address(0)\n     * To be overrided.\n     * Up to the implementor contract to return an extension based on a function selector\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual returns (address, bool);\n\n    /**\n     * @dev Forwards the call to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the `address(0)` will be returned.\n     * Forwards the value if the extension is payable.\n     *\n     * Reverts if there is no extension for the function being called.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n     *\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n     *\n     * ```solidity\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\n     *     abi.encodePacked(callData, msg.sender, msg.value)\n     * );\n     * ```\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual returns (bytes memory) {\n        // If there is a function selector\n        (\n            address extension,\n            bool shouldForwardValue\n        ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if no extension was found, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{\n            value: shouldForwardValue ? msg.value : 0\n        }(abi.encodePacked(callData, msg.sender, msg.value));\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            // solhint-disable no-inline-assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n}\n"},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title LSP2 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\n * defined on the LSP2 standard.\n * Based on LSP2 ERC725Y JSON Schema standard.\n */\nlibrary LSP2Utils {\n    /**\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\n     *\n     * ```\n     * keccak256(\"keyName\")\n     * ```\n     *\n     * @param keyName The string to hash to generate a Singleton data key.\n     *\n     * @return The generated `bytes32` data key of key type Singleton.\n     */\n    function generateSingletonKey(\n        string memory keyName\n    ) internal pure returns (bytes32) {\n        return keccak256(bytes(keyName));\n    }\n\n    /**\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\n     *\n     * ```\n     * keccak256(\"arrayKeyName[]\")\n     * ```\n     *\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\n     *\n     * @return The generated `bytes32` data key of key type Array.\n     *\n     * @custom:requirements\n     * - The `keyName` must include at the end of the string the square brackets `\"[]\"`.\n     */\n    function generateArrayKey(\n        string memory arrayKeyName\n    ) internal pure returns (bytes32) {\n        bytes memory dataKey = bytes(arrayKeyName);\n        require(dataKey.length >= 2, \"MUST be longer than 2 characters\");\n        require(\n            dataKey[dataKey.length - 2] == 0x5b && // \"[\" in utf8 encoded\n                dataKey[dataKey.length - 1] == 0x5d, // \"]\" in utf8\n            \"Missing empty square brackets '[]' at the end of the key name\"\n        );\n\n        return keccak256(dataKey);\n    }\n\n    /**\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\n     * with the 16 bytes of `index`. As:\n     *\n     * ```\n     * arrayKey[index]\n     * ```\n     *\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\n     * @param index The index number in the `arrayKey`.\n     *\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\n     */\n    function generateArrayElementKeyAtIndex(\n        bytes32 arrayKey,\n        uint128 index\n    ) internal pure returns (bytes32) {\n        bytes memory elementInArray = bytes.concat(\n            bytes16(arrayKey),\n            bytes16(index)\n        );\n        return bytes32(elementInArray);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        string memory lastWord\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(lastWordHash)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param addr An address to map `firstWord` to.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\n     *\n     * ```\n     * keyPrefix:bytes20Value\n     * ```\n     *\n     * @param keyPrefix The first part of the data key of key type Mapping.\n     * @param bytes20Value The second part of the data key of key type Mapping.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\n     */\n    function generateMappingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\n     *\n     * ```\n     * bytes6(keccak256(\"firstWord\")):bytes4(keccak256(\"secondWord\")):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\n     * @param addr The address that makes the last part of the MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\n     */\n    function generateMappingWithGroupingKey(\n        string memory firstWord,\n        string memory secondWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes6(firstWordHash),\n            bytes4(secondWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\n     *\n     * ```\n     * keyPrefix:mapPrefix:0000:subMapKey\n     * ```\n     *\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes6 keyPrefix,\n        bytes4 mapPrefix,\n        bytes20 subMapKey\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            mapPrefix,\n            bytes2(0),\n            subMapKey\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\n     *\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a JSONURL value content.\n     * @param hashFunction The function used to hash the JSON file.\n     * @param json Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     */\n    function generateJSONURLValue(\n        string memory hashFunction,\n        string memory json,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(json));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Generate a ASSETURL value content.\n     *\n     * @param hashFunction The function used to hash the JSON file.\n     * @param assetBytes Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     *\n     * @return The encoded value as an `ASSETURL`.\n     */\n    function generateASSETURLValue(\n        string memory hashFunction,\n        string memory assetBytes,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\n     *\n     * @param compactBytesArray The bytes value to verify.\n     *\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\n     */\n    function isCompactBytesArray(\n        bytes memory compactBytesArray\n    ) internal pure returns (bool) {\n        /**\n         * Pointer will always land on these values:\n         *\n         * ↓↓↓↓\n         * 0003 a00000\n         * 0005 fff83a0011\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\n         * 0012 bb000000000000000000000000000000beef\n         * 0019 cc00000000000000000000000000000000000000000000deed\n         * ↑↑↑↑\n         *\n         * The pointer can only land on the length of the following bytes value.\n         */\n        uint256 pointer = 0;\n\n        /**\n         * Check each length byte and make sure that when you reach the last length byte.\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\n         */\n        while (pointer < compactBytesArray.length) {\n            if (pointer + 1 >= compactBytesArray.length) return false;\n            uint256 elementLength = uint16(\n                bytes2(\n                    abi.encodePacked(\n                        compactBytesArray[pointer],\n                        compactBytesArray[pointer + 1]\n                    )\n                )\n            );\n            pointer += elementLength + 2;\n        }\n        if (pointer == compactBytesArray.length) return true;\n        return false;\n    }\n\n    /**\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\n     *\n     * @param arrayLength Plain bytes that should be validated.\n     *\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\n     */\n    function isValidLSP2ArrayLengthValue(\n        bytes memory arrayLength\n    ) internal pure returns (bool) {\n        if (arrayLength.length == 16) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\n     *\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeLastElementFromArrayAndMap(\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        bytes32 removedElementMapKey\n    )\n        internal\n        pure\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](3);\n        dataValues = new bytes[](3);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // remove the data value for the map key of the element\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = \"\";\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\n     *\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\n     *\n     * @param erc725YContract The ERC725Y contract.\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementIndex the index of the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeElementFromArrayAndMap(\n        IERC725Y erc725YContract,\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        uint128 removedElementIndex,\n        bytes32 removedElementMapKey\n    )\n        internal\n        view\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](5);\n        dataValues = new bytes[](5);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // Generate the key of the last element in the array\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\n            arrayKey,\n            newArrayLength\n        );\n\n        // Get the data value from the key of the last element in the array\n        bytes20 lastElementIndexValue = bytes20(\n            erc725YContract.getData(lastElementIndexKey)\n        );\n\n        // Set data value of the last element instead of the element from the array that will be removed\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = bytes.concat(lastElementIndexValue);\n\n        // Remove the data value for the swapped array element\n        dataKeys[3] = lastElementIndexKey;\n        dataValues[3] = \"\";\n\n        // Generate mapping key for the swapped array element\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\n            bytes10(removedElementMapKey),\n            lastElementIndexValue\n        );\n\n        // Generate the mapping value for the swapped array element\n        bytes memory lastElementMapValue = abi.encodePacked(\n            bytes4(erc725YContract.getData(lastElementMapKey)),\n            removedElementIndex\n        );\n\n        // Update the map value of the swapped array element to the new index\n        dataKeys[4] = lastElementMapKey;\n        dataValues[4] = lastElementMapValue;\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// Token types\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\n\n// --- ERC725Y entries\n\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\n\n// bytes4(keccak256('LSP4DigitalAsset'))\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\"a4d96624\";\n\n// keccak256('LSP4TokenName')\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\n\n// keccak256('LSP4TokenSymbol')\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\n\n// keccak256('LSP4TokenType')\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\n\n// keccak256('LSP4Creators[]')\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\n\n// bytes10(keccak256('LSP4CreatorsMap'))\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\n\n// keccak256('LSP4Metadata')\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\n"},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC725Y} from \"@erc725/smart-contracts/contracts/ERC725Y.sol\";\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {LSP4DigitalAssetMetadataCore} from \"./LSP4DigitalAssetMetadataCore.sol\";\n\n// constants\nimport {\n    _LSP4_SUPPORTED_STANDARDS_KEY,\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\n    _LSP4_TOKEN_NAME_KEY,\n    _LSP4_TOKEN_SYMBOL_KEY,\n    _LSP4_TOKEN_TYPE_KEY\n} from \"./LSP4Constants.sol\";\n\n/**\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n * @author Matthew Stevens\n * @dev Standard Implementation of the LSP4 standard.\n */\nabstract contract LSP4DigitalAssetMetadata is\n    ERC725Y,\n    LSP4DigitalAssetMetadataCore\n{\n    /**\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\n     *\n     * @param name_ The name of the token.\n     * @param symbol_ The symbol of the token.\n     * @param initialOwner_ The owner of the token contract.\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address initialOwner_,\n        uint256 lsp4TokenType_\n    ) ERC725Y(initialOwner_) {\n        // set data key SupportedStandards:LSP4DigitalAsset\n        ERC725YCore._setData(\n            _LSP4_SUPPORTED_STANDARDS_KEY,\n            _LSP4_SUPPORTED_STANDARDS_VALUE\n        );\n\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\n    }\n\n    /**\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n     * via this function once the digital asset contract has been deployed.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\n\n// constants\nimport {\n    _LSP4_TOKEN_NAME_KEY,\n    _LSP4_TOKEN_SYMBOL_KEY,\n    _LSP4_TOKEN_TYPE_KEY\n} from \"./LSP4Constants.sol\";\n\n// errors\nimport {\n    LSP4TokenNameNotEditable,\n    LSP4TokenSymbolNotEditable,\n    LSP4TokenTypeNotEditable\n} from \"./LSP4Errors.sol\";\n\n/**\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n * @author Matthew Stevens\n * @dev Standard Implementation of the LSP4 standard.\n */\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\n    /**\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n     * via this function once the digital asset contract has been deployed.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual override {\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\n            revert LSP4TokenNameNotEditable();\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\n            revert LSP4TokenSymbolNotEditable();\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\n            revert LSP4TokenTypeNotEditable();\n        } else {\n            _store[dataKey] = dataValue;\n\n            emit DataChanged(dataKey, dataValue);\n        }\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenNameNotEditable();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenSymbolNotEditable();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenTypeNotEditable();\n"},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\n */\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\n     * @param operator The address of the operator that executed the transfer.\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\n     * @param to The address that received the tokens (balance increased by `+amount`).\n     * @param amount The amount of tokens transferred.\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\n     */\n    event Transfer(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n     * @param operator The address authorized as an operator\n     * @param tokenOwner The token owner\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorAuthorizationChanged(\n        address indexed operator,\n        address indexed tokenOwner,\n        uint256 indexed amount,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\n     * @param operator The address revoked from operating\n     * @param tokenOwner The token owner\n     * @param notified Bool indicating whether the operator has been notified or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorRevoked(\n        address indexed operator,\n        address indexed tokenOwner,\n        bool indexed notified,\n        bytes operatorNotificationData\n    );\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\n     *\n     * @custom:notice This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {balanceOf} and {transfer}.\n     *\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the number of existing tokens that have been minted in this contract.\n     * @return The number of existing tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Get the number of tokens owned by `tokenOwner`.\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\n     *\n     * _Example:_\n     *\n     * ```\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\n     * ```\n     *\n     * @param tokenOwner The address of the token holder to query the balance for.\n     * @return The amount of tokens owned by `tokenOwner`.\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    // --- Operator functionality\n\n    /**\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The address to authorize as an operator.\n     * @param amount The allowance amount of tokens operator has access to.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\n     * an existing operator's allowance is updated.\n     */\n    function authorizeOperator(\n        address operator,\n        uint256 amount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\n     * This function also allows the `operator` to remove itself if it is the caller of this function\n     *\n     * @param operator The address to revoke as an operator.\n     * @param tokenOwner The address of the token owner.\n     * @param notify Boolean indicating whether to notify the operator or not.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - caller MUST be `operator` or `tokenOwner`\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\n     */\n    function revokeOperator(\n        address operator,\n        address tokenOwner,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n     * against double spending allowance vulnerability.\n     *\n     * @notice Increase the allowance of `operator` by +`addedAmount`\n     *\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n     * for the double spending allowance problem.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The operator to increase the allowance for `msg.sender`\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\n     *\n     * @custom:requirements\n     *  - `operator` cannot be the same address as `msg.sender`\n     *  - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\n     */\n    function increaseAllowance(\n        address operator,\n        uint256 addedAmount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n     * against the double spending allowance vulnerability.\n     *\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\n     *\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n     * for the double spending allowance problem.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @custom:events\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\n     *\n     * @param operator The operator to decrease allowance for `msg.sender`\n     * @param tokenOwner The address of the token owner.\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\n     *\n     * @custom:requirements\n     *  - `operator` cannot be the zero address.\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\n     */\n    function decreaseAllowance(\n        address operator,\n        address tokenOwner,\n        uint256 subtractedAmount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\n     * Operators can send and burn tokens on behalf of their owners.\n     *\n     * @param operator The operator's address to query the authorized amount for.\n     * @param tokenOwner The token owner that `operator` has allowance on.\n     *\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\n     *\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\n     * (since a tokenOwner is its own operator).\n     */\n    function authorizedAmountFor(\n        address operator,\n        address tokenOwner\n    ) external view returns (uint256);\n\n    /**\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\n     *\n     * @param tokenOwner The token owner to get the operators for.\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\n     */\n    function getOperatorsOf(\n        address tokenOwner\n    ) external view returns (address[] memory);\n\n    // --- Transfer functionality\n\n    /**\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\n     * has been completed (See {authorizedAmountFor}).\n     *\n     * @param from The sender address.\n     * @param to The recipient address.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\n     * - `from` MUST have a balance of at least `amount` tokens.\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\n     *\n     * @custom:events\n     * - {Transfer} event when tokens get successfully transferred.\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\n     * event will be emitted if the operator has no more allowance left.\n     *\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n     *\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n     *\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n     * This even if the `force` was set to `true`.\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\n     *\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\n     *\n     * @param from An array of sending addresses.\n     * @param to An array of receiving addresses.\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from`, `to`, `amount` lists MUST be of the same length.\n     * - no values in `from` can be the zero address.\n     * - no values in `to` can be the zero address.\n     * - each `amount` tokens MUST be owned by `from`.\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\n     *\n     * @custom:events {Transfer} event **for each token transfer**.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool[] memory force,\n        bytes[] memory data\n    ) external;\n\n    /**\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n     *\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n     * @param data An array of ABI encoded function calls to be called on the contract.\n     * @return results An array of abi-encoded data returned by the functions executed.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"},"@lukso/lsp7-contracts/contracts/LSP7Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP7 = 0xc52d6008;\n\n// --- Token Hooks\n\n// keccak256('LSP7Tokens_SenderNotification')\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea;\n\n// keccak256('LSP7Tokens_RecipientNotification')\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c;\n\n// keccak256('LSP7Tokens_OperatorNotification')\nbytes32 constant _TYPEID_LSP7_TOKENOPERATOR = 0x386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc;\n"},"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {\n    LSP4DigitalAssetMetadata\n} from \"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\";\nimport {LSP7DigitalAssetCore} from \"./LSP7DigitalAssetCore.sol\";\nimport {\n    LSP17Extendable\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\";\n\n// libraries\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// constants\nimport {_INTERFACEID_LSP7} from \"./LSP7Constants.sol\";\nimport {LSP7TokenContractCannotHoldValue} from \"./LSP7Errors.sol\";\n\nimport {\n    _LSP17_EXTENSION_PREFIX\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\";\n\n// errors\n\nimport {\n    NoExtensionFoundForFunctionSelector,\n    InvalidFunctionSelector,\n    InvalidExtensionAddress\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\";\n\n/**\n * @title Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.\n * @author Matthew Stevens\n *\n * @dev Minting and transferring are supplied with a `uint256` amount.\n * This implementation is agnostic to the way tokens are created.\n * A supply mechanism has to be added in a derived contract using {_mint}\n * For a generic mechanism, see {LSP7Mintable}.\n */\nabstract contract LSP7DigitalAsset is\n    LSP4DigitalAssetMetadata,\n    LSP7DigitalAssetCore,\n    LSP17Extendable\n{\n    /**\n     * @notice Sets the token-Metadata\n     * @param name_ The name of the token.\n     * @param symbol_ The symbol of the token.\n     * @param newOwner_ The owner of the the token-Metadata.\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n     * @param isNonDivisible_ Specify if the LSP7 token is a fungible or non-fungible token.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address newOwner_,\n        uint256 lsp4TokenType_,\n        bool isNonDivisible_\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\n        _isNonDivisible = isNonDivisible_;\n    }\n\n    // fallback function\n\n    /**\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\n     *\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\n     * forwarding the function call to the extension address mapped to the function being called.\n     *\n     * This function is executed when:\n     *    - Sending data of length less than 4 bytes to the contract.\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\n     *    - Receiving native tokens\n     *\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n     *\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\n     *\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\n     *\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\n     */\n    // solhint-disable-next-line no-complex-fallback\n    fallback(\n        bytes calldata callData\n    ) external payable virtual returns (bytes memory) {\n        if (msg.data.length < 4) {\n            revert InvalidFunctionSelector(callData);\n        }\n        return _fallbackLSP17Extendable(callData);\n    }\n\n    /**\n     * @dev Reverts whenever someone tries to send native tokens to a LSP7 contract.\n     * @notice LSP7 contract cannot receive native tokens.\n     */\n    receive() external payable virtual {\n        // revert on empty calls with no value\n        if (msg.value == 0) {\n            revert InvalidFunctionSelector(hex\"00000000\");\n        }\n\n        revert LSP7TokenContractCannotHoldValue();\n    }\n\n    /**\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the address(0) will be returned.\n     * Forwards the value if the extension is payable.\n     *\n     * Reverts if there is no extension for the function being called.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\n     * 32 bytes of the {msg.value}\n     *\n     * @custom:info The LSP7 Token contract should not hold any native tokens. Any native tokens received by the contract\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual override returns (bytes memory) {\n        // If there is a function selector\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if no extension was found, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\n            abi.encodePacked(callData, msg.sender, msg.value)\n        );\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            /// @solidity memory-safe-assembly\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the extension address stored under the following data key:\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\n     * - If no extension is stored, returns the address(0).\n     * - we do not check that payable bool as in lsp7 standard we will always forward the value to the extension\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual override returns (address, bool) {\n        // Generate the data key relevant for the functionSelector being called\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\n            _LSP17_EXTENSION_PREFIX,\n            functionSelector\n        );\n\n        // Check if there is an extension stored under the generated data key\n        bytes memory extensionAddress = ERC725YCore._getData(\n            mappedExtensionDataKey\n        );\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\n            revert InvalidExtensionAddress(extensionAddress);\n\n        return (address(bytes20(extensionAddress)), true);\n    }\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(IERC165, ERC725YCore, LSP17Extendable)\n        returns (bool)\n    {\n        return\n            interfaceId == _INTERFACEID_LSP7 ||\n            super.supportsInterface(interfaceId) ||\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\n    }\n}\n"},"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {\n    ILSP1UniversalReceiver as ILSP1\n} from \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\";\nimport {ILSP7DigitalAsset} from \"./ILSP7DigitalAsset.sol\";\n\n// modules\n\n// libraries\nimport {\n    EnumerableSet\n} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {LSP1Utils} from \"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\";\n\n// errors\nimport {\n    LSP7AmountExceedsAuthorizedAmount,\n    LSP7InvalidTransferBatch,\n    LSP7AmountExceedsBalance,\n    LSP7DecreasedAllowanceBelowZero,\n    LSP7CannotUseAddressZeroAsOperator,\n    LSP7TokenOwnerCannotBeOperator,\n    LSP7CannotSendWithAddressZero,\n    LSP7NotifyTokenReceiverContractMissingLSP1Interface,\n    LSP7NotifyTokenReceiverIsEOA,\n    OperatorAllowanceCannotBeIncreasedFromZero,\n    LSP7BatchCallFailed,\n    LSP7RevokeOperatorNotAuthorized,\n    LSP7DecreaseAllowanceNotAuthorized\n} from \"./LSP7Errors.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP1\n} from \"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\";\nimport {\n    _TYPEID_LSP7_TOKENOPERATOR,\n    _TYPEID_LSP7_TOKENSSENDER,\n    _TYPEID_LSP7_TOKENSRECIPIENT\n} from \"./LSP7Constants.sol\";\n\n/**\n * @title LSP7DigitalAsset contract\n * @author Matthew Stevens\n * @dev Core Implementation of a LSP7 compliant contract.\n *\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\n */\nabstract contract LSP7DigitalAssetCore is ILSP7DigitalAsset {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // --- Storage\n\n    bool internal _isNonDivisible;\n\n    uint256 internal _existingTokens;\n\n    // Mapping from `tokenOwner` to an `amount` of tokens\n    mapping(address => uint256) internal _tokenOwnerBalances;\n\n    // Mapping an `address` to its authorized operator addresses.\n    mapping(address => EnumerableSet.AddressSet) internal _operators;\n\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\n    mapping(address => mapping(address => uint256))\n        internal _operatorAuthorizedAmount;\n\n    // --- Token queries\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _isNonDivisible ? 0 : 18;\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _existingTokens;\n    }\n\n    // --- Token owner queries\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function balanceOf(\n        address tokenOwner\n    ) public view virtual override returns (uint256) {\n        return _tokenOwnerBalances[tokenOwner];\n    }\n\n    // --- General functionality\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     *\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) public virtual override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i; i < data.length; ) {\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n\n            if (!success) {\n                // Look for revert reason and bubble it up if present\n                if (result.length != 0) {\n                    // The easiest way to bubble the revert reason is using memory via assembly\n                    // solhint-disable no-inline-assembly\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        let returndata_size := mload(result)\n                        revert(add(32, result), returndata_size)\n                    }\n                } else {\n                    revert LSP7BatchCallFailed({callIndex: i});\n                }\n            }\n\n            results[i] = result;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // --- Operator functionality\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     *\n     * @custom:danger To avoid front-running and Allowance Double-Spend Exploit when\n     * increasing or decreasing the authorized amount of an operator, it is advised to\n     * use the {increaseAllowance} and {decreaseAllowance} functions.\n     *\n     * For more information, see:\n     * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n     */\n    function authorizeOperator(\n        address operator,\n        uint256 amount,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        _updateOperator(\n            msg.sender,\n            operator,\n            amount,\n            true,\n            operatorNotificationData\n        );\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            amount,\n            operatorNotificationData\n        );\n\n        _notifyTokenOperator(operator, lsp1Data);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function revokeOperator(\n        address operator,\n        address tokenOwner,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        if (msg.sender != tokenOwner && msg.sender != operator) {\n            revert LSP7RevokeOperatorNotAuthorized(\n                msg.sender,\n                tokenOwner,\n                operator\n            );\n        }\n\n        _updateOperator(\n            tokenOwner,\n            operator,\n            0,\n            notify,\n            operatorNotificationData\n        );\n\n        if (notify) {\n            bytes memory lsp1Data = abi.encode(\n                tokenOwner,\n                0,\n                operatorNotificationData\n            );\n\n            _notifyTokenOperator(operator, lsp1Data);\n        }\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function authorizedAmountFor(\n        address operator,\n        address tokenOwner\n    ) public view virtual override returns (uint256) {\n        if (tokenOwner == operator) {\n            return _tokenOwnerBalances[tokenOwner];\n        } else {\n            return _operatorAuthorizedAmount[tokenOwner][operator];\n        }\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function getOperatorsOf(\n        address tokenOwner\n    ) public view virtual override returns (address[] memory) {\n        return _operators[tokenOwner].values();\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function increaseAllowance(\n        address operator,\n        uint256 addedAmount,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        uint256 oldAllowance = authorizedAmountFor(operator, msg.sender);\n        if (oldAllowance == 0)\n            revert OperatorAllowanceCannotBeIncreasedFromZero(operator);\n\n        uint256 newAllowance = oldAllowance + addedAmount;\n\n        _updateOperator(\n            msg.sender,\n            operator,\n            newAllowance,\n            true,\n            operatorNotificationData\n        );\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            newAllowance,\n            operatorNotificationData\n        );\n\n        _notifyTokenOperator(operator, lsp1Data);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function decreaseAllowance(\n        address operator,\n        address tokenOwner,\n        uint256 subtractedAmount,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        if (msg.sender != tokenOwner && msg.sender != operator) {\n            revert LSP7DecreaseAllowanceNotAuthorized(\n                msg.sender,\n                tokenOwner,\n                operator\n            );\n        }\n\n        uint256 currentAllowance = authorizedAmountFor(operator, tokenOwner);\n        if (currentAllowance < subtractedAmount) {\n            revert LSP7DecreasedAllowanceBelowZero();\n        }\n\n        uint256 newAllowance;\n        unchecked {\n            newAllowance = currentAllowance - subtractedAmount;\n            _updateOperator(\n                tokenOwner,\n                operator,\n                newAllowance,\n                true,\n                operatorNotificationData\n            );\n        }\n\n        bytes memory lsp1Data = abi.encode(\n            tokenOwner,\n            newAllowance,\n            operatorNotificationData\n        );\n\n        _notifyTokenOperator(operator, lsp1Data);\n    }\n\n    // --- Transfer functionality\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) public virtual override {\n        if (msg.sender != from) {\n            _spendAllowance({\n                operator: msg.sender,\n                tokenOwner: from,\n                amountToSpend: amount\n            });\n        }\n\n        _transfer(from, to, amount, force, data);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool[] memory force,\n        bytes[] memory data\n    ) public virtual override {\n        uint256 fromLength = from.length;\n        if (\n            fromLength != to.length ||\n            fromLength != amount.length ||\n            fromLength != force.length ||\n            fromLength != data.length\n        ) {\n            revert LSP7InvalidTransferBatch();\n        }\n\n        for (uint256 i; i < fromLength; ) {\n            // using the public transfer function to handle updates to operator authorized amounts\n            transfer(from[i], to[i], amount[i], force[i], data[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens.\n     * If the amount is zero the operator is removed from the list of operators, otherwise he is added to the list of operators.\n     * If the amount is zero then the operator is being revoked, otherwise the operator amount is being modified.\n     *\n     * @param tokenOwner The address that will give `operator` an allowance for on its balance.\n     * @param operator The address to grant an allowance to spend.\n     * @param allowance The maximum amount of token that `operator` can spend from the `tokenOwner`'s balance.\n     * @param notified Boolean indicating whether the operator has been notified about the change of allowance\n     * @param operatorNotificationData The data to send to the universalReceiver function of the operator in case of notifying\n     *\n     * @custom:events\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\n     *\n     * @custom:requirements\n     * - `operator` cannot be the zero address.\n     * - `operator` cannot be the same address as `tokenOwner`.\n     */\n    function _updateOperator(\n        address tokenOwner,\n        address operator,\n        uint256 allowance,\n        bool notified,\n        bytes memory operatorNotificationData\n    ) internal virtual {\n        if (operator == address(0)) {\n            revert LSP7CannotUseAddressZeroAsOperator();\n        }\n\n        if (operator == tokenOwner) {\n            revert LSP7TokenOwnerCannotBeOperator();\n        }\n\n        _operatorAuthorizedAmount[tokenOwner][operator] = allowance;\n\n        if (allowance != 0) {\n            _operators[tokenOwner].add(operator);\n            emit OperatorAuthorizationChanged(\n                operator,\n                tokenOwner,\n                allowance,\n                operatorNotificationData\n            );\n        } else {\n            _operators[tokenOwner].remove(operator);\n            emit OperatorRevoked(\n                operator,\n                tokenOwner,\n                notified,\n                operatorNotificationData\n            );\n        }\n    }\n\n    /**\n     * @dev Mints `amount` of tokens and transfers it to `to`.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances.\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the recipient via LSP1**.\n     *\n     * @param to The address to mint tokens for.\n     * @param amount The amount of tokens to mint.\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n     * @param data Additional data the caller wants included in the emitted {Transfer} event, and sent in the LSP1 hook to the `to` address.\n     *\n     * @custom:requirements\n     * - `to` cannot be the zero address.\n     *\n     * @custom:events {Transfer} event with `address(0)` as `from`.\n     */\n    function _mint(\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        _beforeTokenTransfer(address(0), to, amount, data);\n\n        // tokens being minted\n        _existingTokens += amount;\n\n        _tokenOwnerBalances[to] += amount;\n\n        emit Transfer({\n            operator: msg.sender,\n            from: address(0),\n            to: to,\n            amount: amount,\n            force: force,\n            data: data\n        });\n\n        _afterTokenTransfer(address(0), to, amount, data);\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            address(0),\n            to,\n            amount,\n            data\n        );\n        _notifyTokenReceiver(to, force, lsp1Data);\n    }\n\n    /**\n     * @dev Burns (= destroys) `amount` of tokens, decrease the `from` balance. This is done by sending them to the zero address.\n     *\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n     * all the parameters in the calldata packed encoded.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances.\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender via LSP1**.\n     *\n     * @param from The address to burn tokens from its balance.\n     * @param amount The amount of tokens to burn.\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\n     *\n     * @custom:hint In dApps, you can know which address is burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * @custom:events {Transfer} event with `address(0)` as the `to` address\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (from == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        _beforeTokenTransfer(from, address(0), amount, data);\n\n        uint256 balance = _tokenOwnerBalances[from];\n        if (amount > balance) {\n            revert LSP7AmountExceedsBalance(balance, from, amount);\n        }\n        // tokens being burnt\n        _existingTokens -= amount;\n\n        _tokenOwnerBalances[from] -= amount;\n\n        emit Transfer({\n            operator: msg.sender,\n            from: from,\n            to: address(0),\n            amount: amount,\n            force: false,\n            data: data\n        });\n\n        _afterTokenTransfer(from, address(0), amount, data);\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            from,\n            address(0),\n            amount,\n            data\n        );\n        _notifyTokenSender(from, lsp1Data);\n    }\n\n    /**\n     * @dev Spend `amountToSpend` from the `operator`'s authorized on behalf of the `tokenOwner`.\n     *\n     * @param operator The address of the operator to decrease the allowance of.\n     * @param tokenOwner The address that granted an allowance on its balance to `operator`.\n     * @param amountToSpend The amount of tokens to substract in allowance of `operator`.\n     *\n     * @custom:events\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\n     *\n     * @custom:requirements\n     * - The `amountToSpend` MUST be at least the allowance granted to `operator` (accessible via {`authorizedAmountFor}`)\n     * - `operator` cannot be the zero address.\n     * - `operator` cannot be the same address as `tokenOwner`.\n     */\n    function _spendAllowance(\n        address operator,\n        address tokenOwner,\n        uint256 amountToSpend\n    ) internal virtual {\n        uint256 authorizedAmount = _operatorAuthorizedAmount[tokenOwner][\n            operator\n        ];\n\n        if (amountToSpend > authorizedAmount) {\n            revert LSP7AmountExceedsAuthorizedAmount(\n                tokenOwner,\n                authorizedAmount,\n                operator,\n                amountToSpend\n            );\n        }\n\n        _updateOperator({\n            tokenOwner: tokenOwner,\n            operator: operator,\n            allowance: authorizedAmount - amountToSpend,\n            notified: false,\n            operatorNotificationData: \"\"\n        });\n    }\n\n    /**\n     * @dev Transfer tokens from `from` to `to` by decreasing the balance of `from` by `-amount` and increasing the balance\n     * of `to` by `+amount`.\n     *\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n     * all the parameters in the calldata packed encoded.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances.\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender/recipient via LSP1**.\n     *\n     * @param from The address to decrease the balance.\n     * @param to The address to increase the balance.\n     * @param amount The amount of tokens to transfer from `from` to `to`.\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have at least `amount` of tokens.\n     *\n     * @custom:events {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (from == address(0) || to == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        _beforeTokenTransfer(from, to, amount, data);\n\n        uint256 balance = _tokenOwnerBalances[from];\n        if (amount > balance) {\n            revert LSP7AmountExceedsBalance(balance, from, amount);\n        }\n\n        _tokenOwnerBalances[from] -= amount;\n        _tokenOwnerBalances[to] += amount;\n\n        emit Transfer({\n            operator: msg.sender,\n            from: from,\n            to: to,\n            amount: amount,\n            force: force,\n            data: data\n        });\n\n        _afterTokenTransfer(from, to, amount, data);\n\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, amount, data);\n\n        _notifyTokenSender(from, lsp1Data);\n        _notifyTokenReceiver(to, force, lsp1Data);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer, including minting and burning.\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\n     *\n     * @param from The sender address\n     * @param to The recipient address\n     * @param amount The amount of token to transfer\n     * @param data The data sent alongside the transfer\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory data // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer, including minting and burning.\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient** by overriding this function.\n     *\n     * @param from The sender address\n     * @param to The recipient address\n     * @param amount The amount of token to transfer\n     * @param data The data sent alongside the transfer\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory data // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev Attempt to notify the operator `operator` about the `amount` tokens being authorized with.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n\n     * @param operator The address to call the {universalReceiver} function on.\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\n     */\n    function _notifyTokenOperator(\n        address operator,\n        bytes memory lsp1Data\n    ) internal virtual {\n        LSP1Utils.notifyUniversalReceiver(\n            operator,\n            _TYPEID_LSP7_TOKENOPERATOR,\n            lsp1Data\n        );\n    }\n\n    /**\n     * @dev Attempt to notify the token sender `from` about the `amount` of tokens being transferred.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n\n     * @param from The address to call the {universalReceiver} function on.\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\n     */\n    function _notifyTokenSender(\n        address from,\n        bytes memory lsp1Data\n    ) internal virtual {\n        LSP1Utils.notifyUniversalReceiver(\n            from,\n            _TYPEID_LSP7_TOKENSSENDER,\n            lsp1Data\n        );\n    }\n\n    /**\n     * @dev Attempt to notify the token receiver `to` about the `amount` tokens being received.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\n     *\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\n     * - if `force` is set to `false, the transaction will revert.\n     *\n     * @param to The address to call the {universalReceiver} function on.\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\n     */\n    function _notifyTokenReceiver(\n        address to,\n        bool force,\n        bytes memory lsp1Data\n    ) internal virtual {\n        if (\n            ERC165Checker.supportsERC165InterfaceUnchecked(\n                to,\n                _INTERFACEID_LSP1\n            )\n        ) {\n            ILSP1(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, lsp1Data);\n        } else if (!force) {\n            if (to.code.length != 0) {\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\n            } else {\n                revert LSP7NotifyTokenReceiverIsEOA(to);\n            }\n        }\n    }\n}\n"},"@lukso/lsp7-contracts/contracts/LSP7Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- Errors\n\n/**\n * @dev reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\n */\nerror LSP7AmountExceedsBalance(\n    uint256 balance,\n    address tokenOwner,\n    uint256 amount\n);\n\n/**\n * @dev reverts when `operator` of `tokenOwner` send an `amount` of tokens\n * larger than the `authorizedAmount`.\n */\nerror LSP7AmountExceedsAuthorizedAmount(\n    address tokenOwner,\n    uint256 authorizedAmount,\n    address operator,\n    uint256 amount\n);\n\n/**\n * @dev reverts when trying to set the zero address as an operator.\n */\nerror LSP7CannotUseAddressZeroAsOperator();\n\n/**\n * @dev reverts when trying to:\n * - mint tokens to the zero address.\n * - burn tokens from the zero address.\n * - transfer tokens from or to the zero address.\n */\nerror LSP7CannotSendWithAddressZero();\n\n/**\n * @dev reverts when the array parameters used in {transferBatch} have different lengths.\n */\nerror LSP7InvalidTransferBatch();\n\n/**\n * @dev reverts if the `tokenReceiver` does not implement LSP1\n * when minting or transferring tokens with `bool force` set as `false`.\n */\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(\n    address tokenReceiver\n);\n\n/**\n * @dev reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\n */\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\n\n/**\n * @dev reverts when trying to authorize or revoke the token's owner as an operator.\n */\nerror LSP7TokenOwnerCannotBeOperator();\n\n/**\n * @dev Reverts when trying to decrease an operator's allowance to more than its current allowance.\n */\nerror LSP7DecreasedAllowanceBelowZero();\n\n/**\n * @dev Error occurs when sending native tokens to the LSP7 contract without sending any data.\n *\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\n *\n * @notice LSP7 contract cannot receive native tokens.\n */\nerror LSP7TokenContractCannotHoldValue();\n\n/**\n * @dev Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\n */\nerror OperatorAllowanceCannotBeIncreasedFromZero(address operator);\n\n/**\n * @dev Reverts when a batch call failed.\n * @notice Batch call failed.\n */\nerror LSP7BatchCallFailed(uint256 callIndex);\n\n/**\n * @dev Reverts when the call to revoke operator is not authorized.\n */\nerror LSP7RevokeOperatorNotAuthorized(\n    address caller,\n    address tokenOwner,\n    address operator\n);\n\n/**\n * @dev Reverts when the call to decrease allowance is not authorized.\n */\nerror LSP7DecreaseAllowanceNotAuthorized(\n    address caller,\n    address tokenOwner,\n    address operator\n);\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/EurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IEurocupLegends} from \"./interfaces/IEurocupLegends.sol\";\nimport {ITickets} from \"./interfaces/ITickets.sol\";\nimport \"./utils/Errors.sol\";\n\ncontract EurocupLegends is IEurocupLegends, Ownable {\n    uint256 public constant FEE_PERCENTAGE = 25;\n    uint256 public constant SHARE_PRECISION = 100;\n    uint256 public constant MAX_WINNERS = 3;\n\n    Creator[] private s_creators;\n    address[3] private s_winners;\n\n    bool private s_isMintOpen = true;\n\n    mapping(address ticket => uint256 prize) private s_prizes;\n    mapping(address user => mapping(address ticket => bool isClaimed)) private s_isClaimed;\n\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\n        for(uint256 i; i < _creators.length; i++) {\n            s_creators.push(_creators[i]);\n        }\n    }\n\n    modifier isMintOpen() {\n        if(!s_isMintOpen) revert MintClosed();\n        _;\n    }\n\n    function setMintStatus(bool _isMintOpen) external onlyOwner {\n        s_isMintOpen = _isMintOpen;\n        emit MintStatus(_isMintOpen);\n    }\n\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _shares) external onlyOwner {\n        for(uint256 i; i < MAX_WINNERS; i++) {\n            address winner = _winners[i];\n            uint256 prize = (address(this).balance * _shares[i]) / SHARE_PRECISION;\n\n            s_winners[i] = winner;\n            s_prizes[winner] = prize;\n        }\n\n        emit WinnersSet(_winners);\n    }\n\n    function claimPrize(address _ticket) external {\n        if(s_winners.length != MAX_WINNERS) revert NoWinnersYet();\n        if(_ticket == address(0)) revert ZeroAddress();\n        if(s_prizes[_ticket] == 0) revert NoPrizeForThisTicket();\n        if(s_isClaimed[msg.sender][_ticket]) revert AlreadyClaimedPrize();\n\n        uint256 prize = getPrize(msg.sender, _ticket);\n\n        s_prizes[_ticket] = s_prizes[_ticket] - prize;\n        s_isClaimed[msg.sender][_ticket] = true;\n\n        (bool success, ) = msg.sender.call{value: prize}('');\n        if(!success) revert TransferFailed();\n\n        emit PrizeClaimed(msg.sender, prize);\n    }\n\n    function isClaimed(address _user, address _ticket) external view returns (bool) {\n        return s_isClaimed[_user][_ticket];\n    }\n\n    function getCreators() external view returns (Creator[] memory) {\n        return s_creators;\n    }\n\n    function getWinners() external view returns (address[3] memory) {\n        return s_winners;\n    }\n\n    function getPrize(address _user, address _ticket) public view returns (uint256) {\n        uint256 ticketPrize = s_prizes[_ticket];\n        uint256 userTickets = ITickets(_ticket).balanceOf(_user);\n        uint256 totalTickets = ITickets(_ticket).totalSupply();\n\n        if(userTickets == 0) revert NoTickets();\n\n        return (userTickets * ticketPrize) / totalTickets;\n    }\n\n    function getTicketPrize(address _ticket) public view returns (uint256) {\n        return s_prizes[_ticket];\n    }\n\n    function _handleDeposit(uint256 _amount) private isMintOpen {\n        // 25% of deposits\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\n\n        uint256 creatorsLength = s_creators.length;\n\n        // transfer fee to creators\n        for(uint256 i; i < creatorsLength; i++) {\n            Creator memory creator = s_creators[i];\n\n            uint256 feeCut = (fees * creator.share) / SHARE_PRECISION;\n\n            (bool success,) = creator.creator.call{value: feeCut}(\"\");\n            if(!success) revert FeeTransferFailed(creator.creator, feeCut);\n        }\n    }\n\n    receive() external payable {\n        _handleDeposit(msg.value);\n    }\n\n    fallback() external payable {\n        _handleDeposit(msg.value);\n    }\n}"},"contracts/interfaces/IEurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IEurocupLegends {\n    struct Creator {\n        address creator;\n        uint256 share;\n    }\n\n    event WinnersSet(address[3] winners);\n    event PrizeClaimed(address owner, uint256 prize);\n    event MintStatus(bool isMintOpen);\n}"},"contracts/interfaces/ITickets.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ILSP7DigitalAsset} from \"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\";\ninterface ITickets is ILSP7DigitalAsset {\n    event TicketsMinted(address _recipient, uint256 _amount);\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable;\n}"},"contracts/tokens/Tickets.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {LSP7DigitalAsset} from '@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol';\nimport {_LSP4_TOKEN_TYPE_NFT} from '@lukso/lsp4-contracts/contracts/LSP4Constants.sol';\nimport {ITickets} from '../interfaces/ITickets.sol';\nimport '../utils/Errors.sol';\n\ncontract Tickets is ITickets, LSP7DigitalAsset {\n    uint256 public constant MAX_SUPPLY = 100;\n    uint256 public constant MAX_MINT = 5;\n    address private immutable i_prizePool;\n    uint256 private immutable i_price; \n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        address _prizePool,\n        uint256 _price\n    ) LSP7DigitalAsset(_name, _symbol, _owner, _LSP4_TOKEN_TYPE_NFT, true) {\n        i_prizePool = _prizePool;\n        i_price = _price;\n    }\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable {\n        if(_existingTokens + _amount > MAX_SUPPLY) revert MintLimitExceeded();\n        if(balanceOf(_recipient) + _amount > MAX_MINT) revert MintLimitExceeded();\n        if(msg.value != i_price * _amount) revert InvalidMintPrice();\n\n        _mint(_recipient, _amount, false, '');\n\n        (bool success,) = i_prizePool.call{value: msg.value}('');\n        if(!success) revert TransferFailed();\n\n        emit TicketsMinted(_recipient, _amount);\n    }\n\n    function getPrizePool() external view returns (address) {\n        return i_prizePool;\n    }\n\n    function getPrice() external view returns (uint256) {\n        return i_price;\n    }\n}"},"contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nerror MintLimitExceeded();\n\nerror InvalidMintPrice();\n\nerror NoPrizeForThisTicket();\n\nerror AlreadyClaimedPrize();\n\nerror NoTickets();\n\nerror ZeroAddress();\n\nerror ZeroAmount();\n\nerror TransferFailed();\n\nerror FeeTransferFailed(address _creators, uint256 _amount);\n\nerror NoWinnersYet();\n\nerror MintClosed();"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@erc725/smart-contracts/contracts/ERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/ERC725Y.sol","exportedSymbols":{"ERC725Y":[35],"ERC725YCore":[270],"OwnableCannotSetZeroAddressAsOwner":[407],"OwnableUnset":[402]},"id":36,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:0"},{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","file":"./custom/OwnableUnset.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":403,"src":"75:55:0","symbolAliases":[{"foreign":{"id":2,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"83:12:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"./ERC725YCore.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":271,"src":"131:46:0","symbolAliases":[{"foreign":{"id":4,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"139:11:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"./errors.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":455,"src":"189:64:0","symbolAliases":[{"foreign":{"id":6,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"197:34:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9,"name":"ERC725YCore","nameLocations":["669:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"669:11:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"669:11:0"}],"canonicalName":"ERC725Y","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"255:393:0","text":" @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\n @author Fabian Vogelsteller <fabian@lukso.network>\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":true,"id":35,"linearizedBaseContracts":[35,270,505,3511,3718,402],"name":"ERC725Y","nameLocation":"658:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":33,"nodeType":"Block","src":"1095:162:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":16,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1109:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":19,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1133:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":18,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1125:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:0","typeDescriptions":{}}},"id":20,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1125:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1109:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":26,"nodeType":"IfStatement","src":"1105:100:0","trueBody":{"id":25,"nodeType":"Block","src":"1137:68:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1158:34:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1158:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"RevertStatement","src":"1151:43:0"}]}},{"expression":{"arguments":[{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1237:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":27,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"1214:12:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OwnableUnset_$402_$","typeString":"type(contract OwnableUnset)"}},"id":29,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1227:9:0","memberName":"_setOwner","nodeType":"MemberAccess","referencedDeclaration":401,"src":"1214:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1214:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":32,"nodeType":"ExpressionStatement","src":"1214:36:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"687:361:0","text":" @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\n @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\n @param initialOwner the owner of the contract.\n @custom:requirements\n - `initialOwner` CANNOT be the zero address."},"id":34,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"initialOwner","nameLocation":"1073:12:0","nodeType":"VariableDeclaration","scope":34,"src":"1065:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"1065:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1064:22:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"1095:0:0"},"scope":35,"src":"1053:204:0","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":36,"src":"649:610:0","usedErrors":[407,412,448,451,454],"usedEvents":[307,468]}],"src":"39:1221:0"},"id":0},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","exportedSymbols":{"ERC165":[3511],"ERC725YCore":[270],"ERC725Y_DataKeysValuesEmptyArray":[451],"ERC725Y_DataKeysValuesLengthMismatch":[448],"ERC725Y_MsgValueDisallowed":[454],"IERC165":[3718],"IERC725Y":[505],"OwnableUnset":[402],"_INTERFACEID_ERC725Y":[278]},"id":271,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":37,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":39,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":3719,"src":"78:80:1","symbolAliases":[{"foreign":{"id":38,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"86:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"./interfaces/IERC725Y.sol","id":41,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":506,"src":"159:51:1","symbolAliases":[{"foreign":{"id":40,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"167:8:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":43,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":3512,"src":"223:78:1","symbolAliases":[{"foreign":{"id":42,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"231:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","file":"./custom/OwnableUnset.sol","id":45,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":403,"src":"302:55:1","symbolAliases":[{"foreign":{"id":44,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"310:12:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/constants.sol","file":"./constants.sol","id":47,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":294,"src":"372:53:1","symbolAliases":[{"foreign":{"id":46,"name":"_INTERFACEID_ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"380:20:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"./errors.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":455,"src":"427:142:1","symbolAliases":[{"foreign":{"id":48,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"440:26:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":49,"name":"ERC725Y_DataKeysValuesLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"472:36:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":50,"name":"ERC725Y_DataKeysValuesEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"514:32:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":53,"name":"OwnableUnset","nameLocations":["986:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":402,"src":"986:12:1"},"id":54,"nodeType":"InheritanceSpecifier","src":"986:12:1"},{"baseName":{"id":55,"name":"ERC165","nameLocations":["1000:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":3511,"src":"1000:6:1"},"id":56,"nodeType":"InheritanceSpecifier","src":"1000:6:1"},{"baseName":{"id":57,"name":"IERC725Y","nameLocations":["1008:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"1008:8:1"},"id":58,"nodeType":"InheritanceSpecifier","src":"1008:8:1"}],"canonicalName":"ERC725YCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"571:381:1","text":" @title Core implementation of ERC725Y sub-standard, a general data key/value store.\n @author Fabian Vogelsteller <fabian@lukso.network>\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":true,"id":270,"linearizedBaseContracts":[270,505,3511,3718,402],"name":"ERC725YCore","nameLocation":"971:11:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1023:77:1","text":" @dev Map `bytes32` data keys to their `bytes` data values."},"id":63,"mutability":"mutable","name":"_store","nameLocation":"1140:6:1","nodeType":"VariableDeclaration","scope":270,"src":"1105:41:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":62,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":60,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1105:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1124:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"},{"baseFunctions":[476],"body":{"id":78,"nodeType":"Block","src":"1307:46:1","statements":[{"expression":{"id":76,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":72,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1317:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":74,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1338:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":73,"name":"_getData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"1329:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1317:29:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":77,"nodeType":"ExpressionStatement","src":"1317:29:1"}]},"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"1153:39:1","text":" @inheritdoc IERC725Y"},"functionSelector":"54f6127f","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1206:7:1","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:1"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"dataKey","nameLocation":"1231:7:1","nodeType":"VariableDeclaration","scope":79,"src":"1223:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1223:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1213:31:1"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"dataValue","nameLocation":"1296:9:1","nodeType":"VariableDeclaration","scope":79,"src":"1283:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":69,"name":"bytes","nodeType":"ElementaryTypeName","src":"1283:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1282:24:1"},"scope":270,"src":"1197:156:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[486],"body":{"id":125,"nodeType":"Block","src":"1531:330:1","statements":[{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":90,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1541:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":94,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1566:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1575:6:1","memberName":"length","nodeType":"MemberAccess","src":"1566:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1554:11:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":91,"name":"bytes","nodeType":"ElementaryTypeName","src":"1558:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":92,"nodeType":"ArrayTypeName","src":"1558:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1554:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"1541:41:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":98,"nodeType":"ExpressionStatement","src":"1541:41:1"},{"body":{"id":121,"nodeType":"Block","src":"1636:191:1","statements":[{"expression":{"id":115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":107,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1650:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":109,"indexExpression":{"id":108,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1661:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1650:13:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":111,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1675:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":113,"indexExpression":{"id":112,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1684:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1675:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":110,"name":"_getData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"1666:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1666:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1650:37:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":116,"nodeType":"ExpressionStatement","src":"1650:37:1"},{"id":120,"nodeType":"UncheckedBlock","src":"1771:46:1","statements":[{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1799:3:1","subExpression":{"id":117,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1801:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"1799:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1613:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":104,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1617:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:6:1","memberName":"length","nodeType":"MemberAccess","src":"1617:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1613:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":122,"initializationExpression":{"assignments":[100],"declarations":[{"constant":false,"id":100,"mutability":"mutable","name":"i","nameLocation":"1606:1:1","nodeType":"VariableDeclaration","scope":122,"src":"1598:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99,"name":"uint256","nodeType":"ElementaryTypeName","src":"1598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":102,"initialValue":{"hexValue":"30","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1598:13:1"},"nodeType":"ForStatement","src":"1593:234:1"},{"expression":{"id":123,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1844:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":89,"id":124,"nodeType":"Return","src":"1837:17:1"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"1359:39:1","text":" @inheritdoc IERC725Y"},"functionSelector":"dedff9c6","id":126,"implemented":true,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1412:12:1","nodeType":"FunctionDefinition","overrides":{"id":85,"nodeType":"OverrideSpecifier","overrides":[],"src":"1486:8:1"},"parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"dataKeys","nameLocation":"1451:8:1","nodeType":"VariableDeclaration","scope":126,"src":"1434:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1434:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":82,"nodeType":"ArrayTypeName","src":"1434:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1424:41:1"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"dataValues","nameLocation":"1519:10:1","nodeType":"VariableDeclaration","scope":126,"src":"1504:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":86,"name":"bytes","nodeType":"ElementaryTypeName","src":"1504:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":87,"nodeType":"ArrayTypeName","src":"1504:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1503:27:1"},"scope":270,"src":"1403:458:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[494],"body":{"id":150,"nodeType":"Block","src":"2448:110:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2462:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2466:5:1","memberName":"value","nodeType":"MemberAccess","src":"2462:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2475:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2462:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"2458:55:1","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":141,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"2485:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2485:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"RevertStatement","src":"2478:35:1"}},{"expression":{"arguments":[{"id":146,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"2532:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":147,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"2541:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":145,"name":"_setData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"2523:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":149,"nodeType":"ExpressionStatement","src":"2523:28:1"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"1867:454:1","text":" @inheritdoc IERC725Y\n @custom:requirements\n - SHOULD only be callable by the {owner}.\n @custom:warning\n **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n @custom:events {DataChanged} event."},"functionSelector":"7f23690c","id":151,"implemented":true,"kind":"function","modifiers":[{"id":135,"kind":"modifierInvocation","modifierName":{"id":134,"name":"onlyOwner","nameLocations":["2438:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"2438:9:1"},"nodeType":"ModifierInvocation","src":"2438:9:1"}],"name":"setData","nameLocation":"2335:7:1","nodeType":"FunctionDefinition","overrides":{"id":133,"nodeType":"OverrideSpecifier","overrides":[],"src":"2429:8:1"},"parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"dataKey","nameLocation":"2360:7:1","nodeType":"VariableDeclaration","scope":151,"src":"2352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2352:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"dataValue","nameLocation":"2390:9:1","nodeType":"VariableDeclaration","scope":151,"src":"2377:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2377:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2342:63:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"2448:0:1"},"scope":270,"src":"2326:232:1","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[504],"body":{"id":214,"nodeType":"Block","src":"3216:623:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3314:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3318:5:1","memberName":"value","nodeType":"MemberAccess","src":"3314:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3327:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3314:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev do not allow to send value by default when setting data in ERC725Y","id":171,"nodeType":"IfStatement","src":"3310:55:1","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":168,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"3337:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3337:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"RevertStatement","src":"3330:35:1"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":172,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3380:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3389:6:1","memberName":"length","nodeType":"MemberAccess","src":"3380:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":174,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3399:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3410:6:1","memberName":"length","nodeType":"MemberAccess","src":"3399:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3380:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":181,"nodeType":"IfStatement","src":"3376:112:1","trueBody":{"id":180,"nodeType":"Block","src":"3418:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":177,"name":"ERC725Y_DataKeysValuesLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"3439:36:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3439:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"RevertStatement","src":"3432:45:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":182,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3502:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3511:6:1","memberName":"length","nodeType":"MemberAccess","src":"3502:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3521:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3502:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":190,"nodeType":"IfStatement","src":"3498:92:1","trueBody":{"id":189,"nodeType":"Block","src":"3524:66:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":186,"name":"ERC725Y_DataKeysValuesEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"3545:32:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3545:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"RevertStatement","src":"3538:41:1"}]}},{"body":{"id":212,"nodeType":"Block","src":"3643:190:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":200,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3666:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":202,"indexExpression":{"id":201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3675:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3666:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":203,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3679:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":205,"indexExpression":{"id":204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3690:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3679:13:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":199,"name":"_setData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"3657:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3657:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"3657:36:1"},{"id":211,"nodeType":"UncheckedBlock","src":"3777:46:1","statements":[{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3805:3:1","subExpression":{"id":208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3807:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":210,"nodeType":"ExpressionStatement","src":"3805:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":195,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3620:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":196,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3624:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3633:6:1","memberName":"length","nodeType":"MemberAccess","src":"3624:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3620:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"initializationExpression":{"assignments":[192],"declarations":[{"constant":false,"id":192,"mutability":"mutable","name":"i","nameLocation":"3613:1:1","nodeType":"VariableDeclaration","scope":213,"src":"3605:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"3605:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":194,"initialValue":{"hexValue":"30","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3617:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3605:13:1"},"nodeType":"ForStatement","src":"3600:233:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"2564:507:1","text":" @inheritdoc IERC725Y\n @custom:requirements\n - SHOULD only be callable by the {owner} of the contract.\n @custom:warning\n **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n @custom:events {DataChanged} event **for each data key/value pair set**."},"functionSelector":"97902421","id":215,"implemented":true,"kind":"function","modifiers":[{"id":162,"kind":"modifierInvocation","modifierName":{"id":161,"name":"onlyOwner","nameLocations":["3206:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"3206:9:1"},"nodeType":"ModifierInvocation","src":"3206:9:1"}],"name":"setDataBatch","nameLocation":"3085:12:1","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"3197:8:1"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"dataKeys","nameLocation":"3124:8:1","nodeType":"VariableDeclaration","scope":215,"src":"3107:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3107:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":154,"nodeType":"ArrayTypeName","src":"3107:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"dataValues","nameLocation":"3157:10:1","nodeType":"VariableDeclaration","scope":215,"src":"3142:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":156,"name":"bytes","nodeType":"ElementaryTypeName","src":"3142:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":157,"nodeType":"ArrayTypeName","src":"3142:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3097:76:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"3216:0:1"},"scope":270,"src":"3076:763:1","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":227,"nodeType":"Block","src":"4439:39:1","statements":[{"expression":{"baseExpression":{"id":223,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"4456:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":225,"indexExpression":{"id":224,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"4463:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4456:15:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":222,"id":226,"nodeType":"Return","src":"4449:22:1"}]},"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"3845:485:1","text":" @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```\n @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\n @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage."},"id":228,"implemented":true,"kind":"function","modifiers":[],"name":"_getData","nameLocation":"4344:8:1","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"dataKey","nameLocation":"4370:7:1","nodeType":"VariableDeclaration","scope":228,"src":"4362:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4362:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4352:31:1"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"dataValue","nameLocation":"4428:9:1","nodeType":"VariableDeclaration","scope":228,"src":"4415:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":220,"name":"bytes","nodeType":"ElementaryTypeName","src":"4415:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4414:24:1"},"scope":270,"src":"4335:143:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":247,"nodeType":"Block","src":"5130:90:1","statements":[{"expression":{"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":236,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"5140:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":238,"indexExpression":{"id":237,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"5147:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5140:15:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":239,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5158:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5140:27:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":241,"nodeType":"ExpressionStatement","src":"5140:27:1"},{"eventCall":{"arguments":[{"id":243,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"5194:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":244,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5203:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":242,"name":"DataChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5182:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"EmitStatement","src":"5177:36:1"}]},"documentation":{"id":229,"nodeType":"StructuredDocumentation","src":"4484:543:1","text":" @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```\n @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\n @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\n @custom:events {DataChanged} event emitted after a successful `setData` call."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"5041:8:1","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"dataKey","nameLocation":"5067:7:1","nodeType":"VariableDeclaration","scope":248,"src":"5059:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5059:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"dataValue","nameLocation":"5097:9:1","nodeType":"VariableDeclaration","scope":248,"src":"5084:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"5084:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5049:63:1"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"5130:0:1"},"scope":270,"src":"5032:188:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3510,3717],"body":{"id":268,"nodeType":"Block","src":"5390:123:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":259,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5419:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":260,"name":"_INTERFACEID_ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"5434:20:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5419:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":264,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5494:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":262,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5470:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC725YCore_$270_$","typeString":"type(contract super ERC725YCore)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5476:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3510,"src":"5470:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5470:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5419:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":258,"id":267,"nodeType":"Return","src":"5400:106:1"}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"5226:37:1","text":" @inheritdoc ERC165"},"functionSelector":"01ffc9a7","id":269,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5277:17:1","nodeType":"FunctionDefinition","overrides":{"id":255,"nodeType":"OverrideSpecifier","overrides":[{"id":253,"name":"IERC165","nameLocations":["5358:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":3718,"src":"5358:7:1"},{"id":254,"name":"ERC165","nameLocations":["5367:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":3511,"src":"5367:6:1"}],"src":"5349:25:1"},"parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"interfaceId","nameLocation":"5311:11:1","nodeType":"VariableDeclaration","scope":269,"src":"5304:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":250,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5304:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5294:34:1"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":269,"src":"5384:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":256,"name":"bool","nodeType":"ElementaryTypeName","src":"5384:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5383:6:1"},"scope":270,"src":"5268:245:1","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":271,"src":"953:4562:1","usedErrors":[407,412,448,451,454],"usedEvents":[307,468]}],"src":"39:5477:1"},"id":1},"@erc725/smart-contracts/contracts/constants.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/constants.sol","exportedSymbols":{"OPERATION_0_CALL":[281],"OPERATION_1_CREATE":[284],"OPERATION_2_CREATE2":[287],"OPERATION_3_STATICCALL":[290],"OPERATION_4_DELEGATECALL":[293],"_INTERFACEID_ERC725X":[275],"_INTERFACEID_ERC725Y":[278]},"id":294,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":272,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:2"},{"constant":true,"id":275,"mutability":"constant","name":"_INTERFACEID_ERC725X","nameLocation":"104:20:2","nodeType":"VariableDeclaration","scope":294,"src":"88:49:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":273,"name":"bytes4","nodeType":"ElementaryTypeName","src":"88:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783735343561636163","id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"127:10:2","typeDescriptions":{"typeIdentifier":"t_rational_1967500460_by_1","typeString":"int_const 1967500460"},"value":"0x7545acac"},"visibility":"internal"},{"constant":true,"id":278,"mutability":"constant","name":"_INTERFACEID_ERC725Y","nameLocation":"155:20:2","nodeType":"VariableDeclaration","scope":294,"src":"139:49:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":276,"name":"bytes4","nodeType":"ElementaryTypeName","src":"139:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783632396161363934","id":277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"178:10:2","typeDescriptions":{"typeIdentifier":"t_rational_1654302356_by_1","typeString":"int_const 1654302356"},"value":"0x629aa694"},"visibility":"internal"},{"constant":true,"id":281,"mutability":"constant","name":"OPERATION_0_CALL","nameLocation":"235:16:2","nodeType":"VariableDeclaration","scope":294,"src":"218:37:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"218:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"254:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":284,"mutability":"constant","name":"OPERATION_1_CREATE","nameLocation":"274:18:2","nodeType":"VariableDeclaration","scope":294,"src":"257:39:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"257:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"295:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":287,"mutability":"constant","name":"OPERATION_2_CREATE2","nameLocation":"315:19:2","nodeType":"VariableDeclaration","scope":294,"src":"298:40:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"298:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"337:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":290,"mutability":"constant","name":"OPERATION_3_STATICCALL","nameLocation":"357:22:2","nodeType":"VariableDeclaration","scope":294,"src":"340:43:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"382:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":293,"mutability":"constant","name":"OPERATION_4_DELEGATECALL","nameLocation":"402:24:2","nodeType":"VariableDeclaration","scope":294,"src":"385:45:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"385:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"429:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"}],"src":"39:393:2"},"id":2},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","exportedSymbols":{"OwnableCallerNotTheOwner":[412],"OwnableCannotSetZeroAddressAsOwner":[407],"OwnableUnset":[402]},"id":403,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":295,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"../errors.sol","id":298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":403,"sourceUnit":455,"src":"67:101:3","symbolAliases":[{"foreign":{"id":296,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"80:34:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":297,"name":"OwnableCallerNotTheOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"120:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"OwnableUnset","contractDependencies":[],"contractKind":"contract","documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"170:317:3","text":" @title OwnableUnset\n @dev modified version of OpenZeppelin implementation, where:\n - _setOwner(address) function is internal, so this function can be used in constructor\n of contracts implementation (instead of using transferOwnership(address)\n - the contract does not inherit from Context contract"},"fullyImplemented":true,"id":402,"linearizedBaseContracts":[402],"name":"OwnableUnset","nameLocation":"506:12:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":301,"mutability":"mutable","name":"_owner","nameLocation":"541:6:3","nodeType":"VariableDeclaration","scope":402,"src":"525:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"525:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":307,"name":"OwnershipTransferred","nameLocation":"560:20:3","nodeType":"EventDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"606:13:3","nodeType":"VariableDeclaration","scope":307,"src":"590:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":305,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"645:8:3","nodeType":"VariableDeclaration","scope":307,"src":"629:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"629:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:79:3"},"src":"554:106:3"},{"body":{"id":315,"nodeType":"Block","src":"791:30:3","statements":[{"expression":{"id":313,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"808:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":312,"id":314,"nodeType":"Return","src":"801:13:3"}]},"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"666:65:3","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":316,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"745:5:3","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[],"src":"750:2:3"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":316,"src":"782:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"782:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"781:9:3"},"scope":402,"src":"736:85:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":323,"nodeType":"Block","src":"930:41:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":319,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"940:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"940:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"ExpressionStatement","src":"940:13:3"},{"id":322,"nodeType":"PlaceholderStatement","src":"963:1:3"}]},"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"827:77:3","text":" @dev Throws if called by any account other than the owner."},"id":324,"name":"onlyOwner","nameLocation":"918:9:3","nodeType":"ModifierDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[],"src":"927:2:3"},"src":"909:62:3","virtual":false,"visibility":"internal"},{"body":{"id":337,"nodeType":"Block","src":"1367:38:3","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1395:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1387:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"1387:7:3","typeDescriptions":{}}},"id":334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1387:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":330,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"1377:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"ExpressionStatement","src":"1377:21:3"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"977:331:3","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":338,"implemented":true,"kind":"function","modifiers":[{"id":328,"kind":"modifierInvocation","modifierName":{"id":327,"name":"onlyOwner","nameLocations":["1357:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"1357:9:3"},"nodeType":"ModifierInvocation","src":"1357:9:3"}],"name":"renounceOwnership","nameLocation":"1322:17:3","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"1339:2:3"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[],"src":"1367:0:3"},"scope":402,"src":"1313:92:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":361,"nodeType":"Block","src":"1624:141:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1638:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1650:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1650:7:3","typeDescriptions":{}}},"id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1650:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1638:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":356,"nodeType":"IfStatement","src":"1634:96:3","trueBody":{"id":355,"nodeType":"Block","src":"1662:68:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1683:34:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"RevertStatement","src":"1676:43:3"}]}},{"expression":{"arguments":[{"id":358,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1749:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":357,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"1739:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":360,"nodeType":"ExpressionStatement","src":"1739:19:3"}]},"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"1411:138:3","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":362,"implemented":true,"kind":"function","modifiers":[{"id":344,"kind":"modifierInvocation","modifierName":{"id":343,"name":"onlyOwner","nameLocations":["1614:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"1614:9:3"},"nodeType":"ModifierInvocation","src":"1614:9:3"}],"name":"transferOwnership","nameLocation":"1563:17:3","nodeType":"FunctionDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"newOwner","nameLocation":"1589:8:3","nodeType":"VariableDeclaration","scope":362,"src":"1581:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1580:18:3"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"1624:0:3"},"scope":402,"src":"1554:211:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":378,"nodeType":"Block","src":"1883:111:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":366,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"1897:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1897:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":368,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1908:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1908:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1897:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":377,"nodeType":"IfStatement","src":"1893:95:3","trueBody":{"id":376,"nodeType":"Block","src":"1920:68:3","statements":[{"errorCall":{"arguments":[{"expression":{"id":372,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1966:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1970:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1966:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":371,"name":"OwnableCallerNotTheOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1941:24:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":375,"nodeType":"RevertStatement","src":"1934:43:3"}]}}]},"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"1771:62:3","text":" @dev Throws if the sender is not the owner."},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1847:11:3","nodeType":"FunctionDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[],"src":"1858:2:3"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[],"src":"1883:0:3"},"scope":402,"src":"1838:156:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":400,"nodeType":"Block","src":"2187:140:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":385,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2201:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":386,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"2213:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2213:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2201:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":399,"nodeType":"IfStatement","src":"2197:124:3","trueBody":{"id":398,"nodeType":"Block","src":"2222:99:3","statements":[{"eventCall":{"arguments":[{"id":390,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2262:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":391,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2270:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":389,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2241:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2241:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":393,"nodeType":"EmitStatement","src":"2236:43:3"},{"expression":{"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":394,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2293:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":395,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2302:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2293:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":397,"nodeType":"ExpressionStatement","src":"2293:17:3"}]}}]},"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2000:128:3","text":" @dev Changes the owner if `newOwner` and oldOwner are different\n This pattern is useful in inheritance."},"id":401,"implemented":true,"kind":"function","modifiers":[],"name":"_setOwner","nameLocation":"2142:9:3","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"newOwner","nameLocation":"2160:8:3","nodeType":"VariableDeclaration","scope":401,"src":"2152:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"2152:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2151:18:3"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[],"src":"2187:0:3"},"scope":402,"src":"2133:194:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":403,"src":"488:1841:3","usedErrors":[407,412],"usedEvents":[307]}],"src":"32:2298:3"},"id":3},"@erc725/smart-contracts/contracts/errors.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","exportedSymbols":{"ERC725X_ContractDeploymentFailed":[436],"ERC725X_CreateOperationsRequireEmptyRecipientAddress":[433],"ERC725X_ExecuteParametersEmptyArray":[445],"ERC725X_ExecuteParametersLengthMismatch":[442],"ERC725X_InsufficientBalance":[419],"ERC725X_MsgValueDisallowedInDelegateCall":[430],"ERC725X_MsgValueDisallowedInStaticCall":[427],"ERC725X_NoContractBytecodeProvided":[439],"ERC725X_UnknownOperationType":[424],"ERC725Y_DataKeysValuesEmptyArray":[451],"ERC725Y_DataKeysValuesLengthMismatch":[448],"ERC725Y_MsgValueDisallowed":[454],"OwnableCallerNotTheOwner":[412],"OwnableCannotSetZeroAddressAsOwner":[407]},"id":455,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":404,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:4"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"64:168:4","text":" @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\n initializing it or transferring ownership of the contract."},"errorSelector":"1ad8836c","id":407,"name":"OwnableCannotSetZeroAddressAsOwner","nameLocation":"239:34:4","nodeType":"ErrorDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"273:2:4"},"src":"233:43:4"},{"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"278:141:4","text":" @dev Reverts when only the owner is allowed to call the function.\n @param callerAddress The address that tried to make the call."},"errorSelector":"bf1169c5","id":412,"name":"OwnableCallerNotTheOwner","nameLocation":"426:24:4","nodeType":"ErrorDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"callerAddress","nameLocation":"459:13:4","nodeType":"VariableDeclaration","scope":412,"src":"451:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":409,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:23:4"},"src":"420:54:4"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"476:336:4","text":" @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\n @param balance The balance of native tokens of the ERC725X smart contract.\n @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`."},"errorSelector":"0df9a8f8","id":419,"name":"ERC725X_InsufficientBalance","nameLocation":"819:27:4","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"balance","nameLocation":"855:7:4","nodeType":"VariableDeclaration","scope":419,"src":"847:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"847:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"value","nameLocation":"872:5:4","nodeType":"VariableDeclaration","scope":419,"src":"864:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"864:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"846:32:4"},"src":"813:66:4"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"881:314:4","text":" @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\n (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\n @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`."},"errorSelector":"7583b3bc","id":424,"name":"ERC725X_UnknownOperationType","nameLocation":"1202:28:4","nodeType":"ErrorDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"operationTypeProvided","nameLocation":"1239:21:4","nodeType":"VariableDeclaration","scope":424,"src":"1231:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1230:31:4"},"src":"1196:66:4"},{"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"1264:282:4","text":" @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\n Sending native tokens via `staticcall` is not allowed because it is a state changing operation."},"errorSelector":"72f2bc6a","id":427,"name":"ERC725X_MsgValueDisallowedInStaticCall","nameLocation":"1553:38:4","nodeType":"ErrorDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[],"src":"1591:2:4"},"src":"1547:47:4"},{"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"1596:277:4","text":" @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\n Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting."},"errorSelector":"5ac83135","id":430,"name":"ERC725X_MsgValueDisallowedInDelegateCall","nameLocation":"1880:40:4","nodeType":"ErrorDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[],"src":"1920:2:4"},"src":"1874:49:4"},{"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"1925:246:4","text":" @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"3041824a","id":433,"name":"ERC725X_CreateOperationsRequireEmptyRecipientAddress","nameLocation":"2178:52:4","nodeType":"ErrorDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"2230:2:4"},"src":"2172:61:4"},{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"2235:181:4","text":" @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"0b07489b","id":436,"name":"ERC725X_ContractDeploymentFailed","nameLocation":"2423:32:4","nodeType":"ErrorDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"2455:2:4"},"src":"2417:41:4"},{"documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"2460:224:4","text":" @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"b81cd8d9","id":439,"name":"ERC725X_NoContractBytecodeProvided","nameLocation":"2691:34:4","nodeType":"ErrorDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[],"src":"2725:2:4"},"src":"2685:43:4"},{"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"2730:208:4","text":" @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\n array parameters provided when calling the {executeBatch} function."},"errorSelector":"3ff55f4d","id":442,"name":"ERC725X_ExecuteParametersLengthMismatch","nameLocation":"2945:39:4","nodeType":"ErrorDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[],"src":"2984:2:4"},"src":"2939:48:4"},{"documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"2989:114:4","text":" @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array."},"errorSelector":"e9ad2b5f","id":445,"name":"ERC725X_ExecuteParametersEmptyArray","nameLocation":"3110:35:4","nodeType":"ErrorDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[],"src":"3145:2:4"},"src":"3104:44:4"},{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"3150:175:4","text":" @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\n array parameters provided when calling the {setDataBatch} function."},"errorSelector":"3bcc8979","id":448,"name":"ERC725Y_DataKeysValuesLengthMismatch","nameLocation":"3332:36:4","nodeType":"ErrorDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[],"src":"3368:2:4"},"src":"3326:45:4"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"3373:110:4","text":" @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."},"errorSelector":"97da5f95","id":451,"name":"ERC725Y_DataKeysValuesEmptyArray","nameLocation":"3490:32:4","nodeType":"ErrorDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"3522:2:4"},"src":"3484:41:4"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"3527:87:4","text":" @dev Reverts when sending value to the {setData} or {setDataBatch} function."},"errorSelector":"f36ba737","id":454,"name":"ERC725Y_MsgValueDisallowed","nameLocation":"3621:26:4","nodeType":"ErrorDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"3647:2:4"},"src":"3615:35:4"}],"src":"39:3612:4"},"id":4},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","exportedSymbols":{"IERC165":[3718],"IERC725Y":[505]},"id":506,"license":"CC0-1.0","nodeType":"SourceUnit","nodes":[{"id":456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"36:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":506,"sourceUnit":3719,"src":"75:80:5","symbolAliases":[{"foreign":{"id":457,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"83:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":460,"name":"IERC165","nameLocations":["502:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":3718,"src":"502:7:5"},"id":461,"nodeType":"InheritanceSpecifier","src":"502:7:5"}],"canonicalName":"IERC725Y","contractDependencies":[],"contractKind":"interface","documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"157:322:5","text":" @title The interface for ERC725Y sub-standard, a generic data key/value store.\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":false,"id":505,"linearizedBaseContracts":[505,3718],"name":"IERC725Y","nameLocation":"490:8:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"516:373:5","text":" @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"ece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2","id":468,"name":"DataChanged","nameLocation":"900:11:5","nodeType":"EventDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"928:7:5","nodeType":"VariableDeclaration","scope":468,"src":"912:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":466,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"943:9:5","nodeType":"VariableDeclaration","scope":468,"src":"937:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":465,"name":"bytes","nodeType":"ElementaryTypeName","src":"937:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:42:5"},"src":"894:60:5"},{"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"960:361:5","text":" @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n @param dataKey The data key for which to retrieve the value.\n @return dataValue The bytes value stored under the specified data key."},"functionSelector":"54f6127f","id":476,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1335:7:5","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"dataKey","nameLocation":"1360:7:5","nodeType":"VariableDeclaration","scope":476,"src":"1352:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1352:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1342:31:5"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"dataValue","nameLocation":"1410:9:5","nodeType":"VariableDeclaration","scope":476,"src":"1397:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":473,"name":"bytes","nodeType":"ElementaryTypeName","src":"1397:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1396:24:5"},"scope":505,"src":"1326:95:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"1427:353:5","text":" @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n @param dataKeys The array of keys which values to retrieve\n @return dataValues The array of data stored at multiple keys"},"functionSelector":"dedff9c6","id":486,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1794:12:5","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"dataKeys","nameLocation":"1833:8:5","nodeType":"VariableDeclaration","scope":486,"src":"1816:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1816:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":479,"nodeType":"ArrayTypeName","src":"1816:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1806:41:5"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"dataValues","nameLocation":"1886:10:5","nodeType":"VariableDeclaration","scope":486,"src":"1871:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":482,"name":"bytes","nodeType":"ElementaryTypeName","src":"1871:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":483,"nodeType":"ArrayTypeName","src":"1871:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1870:27:5"},"scope":505,"src":"1785:113:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"1904:536:5","text":" @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n The function is marked as payable to enable flexibility on child contracts. For instance to implement\n a fee mechanism for setting specific data.\n @param dataKey The data key for which to set a new value.\n @param dataValue The new bytes value to set."},"functionSelector":"7f23690c","id":494,"implemented":false,"kind":"function","modifiers":[],"name":"setData","nameLocation":"2454:7:5","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"dataKey","nameLocation":"2470:7:5","nodeType":"VariableDeclaration","scope":494,"src":"2462:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2462:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"dataValue","nameLocation":"2492:9:5","nodeType":"VariableDeclaration","scope":494,"src":"2479:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":490,"name":"bytes","nodeType":"ElementaryTypeName","src":"2479:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2461:41:5"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[],"src":"2519:0:5"},"scope":505,"src":"2445:75:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"2526:478:5","text":" @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n @param dataKeys An array of data keys to set bytes values for.\n @param dataValues An array of bytes values to set for each `dataKeys`."},"functionSelector":"97902421","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatch","nameLocation":"3018:12:5","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"dataKeys","nameLocation":"3057:8:5","nodeType":"VariableDeclaration","scope":504,"src":"3040:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3040:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":497,"nodeType":"ArrayTypeName","src":"3040:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"dataValues","nameLocation":"3090:10:5","nodeType":"VariableDeclaration","scope":504,"src":"3075:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":499,"name":"bytes","nodeType":"ElementaryTypeName","src":"3075:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":500,"nodeType":"ArrayTypeName","src":"3075:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3030:76:5"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"3123:0:5"},"scope":505,"src":"3009:115:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":506,"src":"480:2646:5","usedErrors":[],"usedEvents":[468]}],"src":"36:3091:5"},"id":5},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","exportedSymbols":{"ILSP1UniversalReceiver":[532]},"id":533,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":507,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"ILSP1UniversalReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"64:257:6","text":" @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received."},"fullyImplemented":false,"id":532,"linearizedBaseContracts":[532],"name":"ILSP1UniversalReceiver","nameLocation":"332:22:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"361:893:6","text":" @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n @param value The amount sent to the {universalReceiver(...)} function.\n @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n @param returnedValue The value returned by the {universalReceiver(...)} function."},"eventSelector":"9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2","id":521,"name":"UniversalReceiver","nameLocation":"1265:17:6","nodeType":"EventDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1308:4:6","nodeType":"VariableDeclaration","scope":521,"src":"1292:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"1292:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":513,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"1338:5:6","nodeType":"VariableDeclaration","scope":521,"src":"1322:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1322:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":515,"indexed":true,"mutability":"mutable","name":"typeId","nameLocation":"1369:6:6","nodeType":"VariableDeclaration","scope":521,"src":"1353:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1353:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":517,"indexed":false,"mutability":"mutable","name":"receivedData","nameLocation":"1391:12:6","nodeType":"VariableDeclaration","scope":521,"src":"1385:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":516,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":519,"indexed":false,"mutability":"mutable","name":"returnedValue","nameLocation":"1419:13:6","nodeType":"VariableDeclaration","scope":521,"src":"1413:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":518,"name":"bytes","nodeType":"ElementaryTypeName","src":"1413:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1282:156:6"},"src":"1259:180:6"},{"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"1445:517:6","text":" @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n @notice Reacted on received notification with `typeId` & `data`.\n @param typeId The hash of a specific standard or a hook.\n @param data The arbitrary data received with the call.\n @custom:events {UniversalReceiver} event."},"functionSelector":"6bb56a14","id":531,"implemented":false,"kind":"function","modifiers":[],"name":"universalReceiver","nameLocation":"1976:17:6","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"typeId","nameLocation":"2011:6:6","nodeType":"VariableDeclaration","scope":531,"src":"2003:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"data","nameLocation":"2042:4:6","nodeType":"VariableDeclaration","scope":531,"src":"2027:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":525,"name":"bytes","nodeType":"ElementaryTypeName","src":"2027:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1993:59:6"},"returnParameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":531,"src":"2079:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":528,"name":"bytes","nodeType":"ElementaryTypeName","src":"2079:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2078:14:6"},"scope":532,"src":"1967:126:6","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":533,"src":"322:1773:6","usedErrors":[],"usedEvents":[521]}],"src":"39:2057:6"},"id":6},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","exportedSymbols":{"_INTERFACEID_LSP1":[537],"_INTERFACEID_LSP1_DELEGATE":[540],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[546],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[543]},"id":547,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:7"},{"constant":true,"id":537,"mutability":"constant","name":"_INTERFACEID_LSP1","nameLocation":"108:17:7","nodeType":"VariableDeclaration","scope":547,"src":"92:46:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":535,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783662623536613134","id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:7","typeDescriptions":{"typeIdentifier":"t_rational_1807051284_by_1","typeString":"int_const 1807051284"},"value":"0x6bb56a14"},"visibility":"internal"},{"constant":true,"id":540,"mutability":"constant","name":"_INTERFACEID_LSP1_DELEGATE","nameLocation":"156:26:7","nodeType":"VariableDeclaration","scope":547,"src":"140:55:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":538,"name":"bytes4","nodeType":"ElementaryTypeName","src":"140:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786132343562626461","id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"185:10:7","typeDescriptions":{"typeIdentifier":"t_rational_2722479066_by_1","typeString":"int_const 2722479066"},"value":"0xa245bbda"},"visibility":"internal"},{"constant":true,"id":543,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nameLocation":"296:40:7","nodeType":"VariableDeclaration","scope":547,"src":"279:82:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":541,"name":"bytes10","nodeType":"ElementaryTypeName","src":"279:7:7","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30783063666335316165633337633535613464306231","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"339:22:7","typeDescriptions":{"typeIdentifier":"t_rational_61322863157712349614257_by_1","typeString":"int_const 61322863157712349614257"},"value":"0x0cfc51aec37c55a4d0b1"},"visibility":"internal"},{"constant":true,"id":546,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nameLocation":"427:37:7","nodeType":"VariableDeclaration","scope":547,"src":"410:123:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"410:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830636663353161656333376335356134643062316136356336323535633462663266626466363237376633636330373330633435623832386236646238623437","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"467:66:7","typeDescriptions":{"typeIdentifier":"t_rational_5873563396395204772354203425660447968463963513255343663932314865640255753031_by_1","typeString":"int_const 5873...(68 digits omitted)...3031"},"value":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47"},"visibility":"internal"}],"src":"39:496:7"},"id":7},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","exportedSymbols":{"ERC165Checker":[3706],"ILSP1":[532],"LSP1Utils":[631],"LSP2Utils":[1530],"_INTERFACEID_LSP1":[537],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[546],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[543]},"id":632,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":548,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":632,"sourceUnit":3707,"src":"77:98:8","symbolAliases":[{"foreign":{"id":549,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"90:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","file":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","id":552,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":632,"sourceUnit":1531,"src":"176:72:8","symbolAliases":[{"foreign":{"id":551,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"184:9:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","file":"./ILSP1UniversalReceiver.sol","id":554,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":632,"sourceUnit":533,"src":"263:77:8","symbolAliases":[{"foreign":{"id":553,"name":"ILSP1UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"271:22:8","typeDescriptions":{}},"local":"ILSP1","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","file":"./LSP1Constants.sol","id":558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":632,"sourceUnit":547,"src":"355:149:8","symbolAliases":[{"foreign":{"id":555,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"368:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":556,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"391:37:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":557,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"434:40:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LSP1Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"506:370:8","text":" @title LSP1 Utility library.\n @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\n that implements LSP1 and retrieve informations related to LSP1 `typeId`.\n Based on LSP1 Universal Receiver standard."},"fullyImplemented":true,"id":631,"linearizedBaseContracts":[631],"name":"LSP1Utils","nameLocation":"885:9:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":562,"libraryName":{"id":560,"name":"ERC165Checker","nameLocations":["907:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":3706,"src":"907:13:8"},"nodeType":"UsingForDirective","src":"901:32:8","typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":586,"nodeType":"Block","src":"1487:226:8","statements":[{"condition":{"arguments":[{"id":574,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1583:17:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":572,"name":"lsp1Implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"1514:18:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1533:32:8","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3705,"src":"1514:51:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1514:100:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":585,"nodeType":"IfStatement","src":"1497:210:8","trueBody":{"id":584,"nodeType":"Block","src":"1625:82:8","statements":[{"expression":{"arguments":[{"id":580,"name":"typeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1683:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":581,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"1691:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":577,"name":"lsp1Implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"1645:18:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":576,"name":"ILSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1639:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILSP1UniversalReceiver_$532_$","typeString":"type(contract ILSP1UniversalReceiver)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILSP1UniversalReceiver_$532","typeString":"contract ILSP1UniversalReceiver"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:17:8","memberName":"universalReceiver","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1639:43:8","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes memory) payable external returns (bytes memory)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:57:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":583,"nodeType":"ExpressionStatement","src":"1639:57:8"}]}}]},"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"939:408:8","text":" @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\n supports the LSP1 interface.\n @param lsp1Implementation The address of the contract to notify.\n @param typeId A `bytes32` typeId.\n @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address."},"id":587,"implemented":true,"kind":"function","modifiers":[],"name":"notifyUniversalReceiver","nameLocation":"1361:23:8","nodeType":"FunctionDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"lsp1Implementation","nameLocation":"1402:18:8","nodeType":"VariableDeclaration","scope":587,"src":"1394:26:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":564,"name":"address","nodeType":"ElementaryTypeName","src":"1394:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"typeId","nameLocation":"1438:6:8","nodeType":"VariableDeclaration","scope":587,"src":"1430:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1430:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":569,"mutability":"mutable","name":"data","nameLocation":"1467:4:8","nodeType":"VariableDeclaration","scope":587,"src":"1454:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":568,"name":"bytes","nodeType":"ElementaryTypeName","src":"1454:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1384:93:8"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[],"src":"1487:0:8"},"scope":631,"src":"1352:361:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"2326:77:8","statements":[{"expression":{"baseExpression":{"id":597,"name":"erc725YStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"2343:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":599,"indexExpression":{"id":598,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"2358:37:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2343:53:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":596,"id":600,"nodeType":"Return","src":"2336:60:8"}]},"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"1719:471:8","text":" @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\n @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n the value set under the `LSP1UniversalReceiverDelegate` data key.\n @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key."},"id":602,"implemented":true,"kind":"function","modifiers":[],"name":"getLSP1DelegateValue","nameLocation":"2204:20:8","nodeType":"FunctionDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"mutability":"mutable","name":"erc725YStorage","nameLocation":"2268:14:8","nodeType":"VariableDeclaration","scope":602,"src":"2234:48:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":591,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2242:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2234:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":590,"name":"bytes","nodeType":"ElementaryTypeName","src":"2253:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"}],"src":"2224:64:8"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":602,"src":"2312:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":594,"name":"bytes","nodeType":"ElementaryTypeName","src":"2312:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2311:14:8"},"scope":631,"src":"2195:208:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":629,"nodeType":"Block","src":"3178:216:8","statements":[{"assignments":[615],"declarations":[{"constant":false,"id":615,"mutability":"mutable","name":"lsp1TypeIdDataKey","nameLocation":"3196:17:8","nodeType":"VariableDeclaration","scope":629,"src":"3188:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3188:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":624,"initialValue":{"arguments":[{"id":618,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"3258:40:8","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"id":621,"name":"typeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"3320:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3312:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":619,"name":"bytes20","nodeType":"ElementaryTypeName","src":"3312:7:8","typeDescriptions":{}}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3312:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":616,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"3216:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1530_$","typeString":"type(library LSP2Utils)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3226:18:8","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1020,"src":"3216:28:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3216:121:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3188:149:8"},{"expression":{"baseExpression":{"id":625,"name":"erc725YStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"3354:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":627,"indexExpression":{"id":626,"name":"lsp1TypeIdDataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"3369:17:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3354:33:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":613,"id":628,"nodeType":"Return","src":"3347:40:8"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"2409:600:8","text":" @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\n @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\n @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n @param typeId A bytes32 LSP1 `typeId`;\n @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key."},"id":630,"implemented":true,"kind":"function","modifiers":[],"name":"getLSP1DelegateValueForTypeId","nameLocation":"3023:29:8","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"erc725YStorage","nameLocation":"3096:14:8","nodeType":"VariableDeclaration","scope":630,"src":"3062:48:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":606,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3070:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3062:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":605,"name":"bytes","nodeType":"ElementaryTypeName","src":"3081:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"typeId","nameLocation":"3128:6:8","nodeType":"VariableDeclaration","scope":630,"src":"3120:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3120:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3052:88:8"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":630,"src":"3164:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":611,"name":"bytes","nodeType":"ElementaryTypeName","src":"3164:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3163:14:8"},"scope":631,"src":"3014:380:8","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":632,"src":"877:2519:8","usedErrors":[],"usedEvents":[]}],"src":"39:3358:8"},"id":8},"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","exportedSymbols":{"_INTERFACEID_LSP17_EXTENDABLE":[636],"_INTERFACEID_LSP17_EXTENSION":[639],"_LSP17_EXTENSION_PREFIX":[642]},"id":643,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":633,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:9"},{"constant":true,"id":636,"mutability":"constant","name":"_INTERFACEID_LSP17_EXTENDABLE","nameLocation":"150:29:9","nodeType":"VariableDeclaration","scope":643,"src":"134:58:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":634,"name":"bytes4","nodeType":"ElementaryTypeName","src":"134:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786139313866613662","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"182:10:9","typeDescriptions":{"typeIdentifier":"t_rational_2836986475_by_1","typeString":"int_const 2836986475"},"value":"0xa918fa6b"},"visibility":"internal"},{"constant":true,"id":639,"mutability":"constant","name":"_INTERFACEID_LSP17_EXTENSION","nameLocation":"251:28:9","nodeType":"VariableDeclaration","scope":643,"src":"235:57:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":637,"name":"bytes4","nodeType":"ElementaryTypeName","src":"235:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786365653738623430","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"282:10:9","typeDescriptions":{"typeIdentifier":"t_rational_3471280960_by_1","typeString":"int_const 3471280960"},"value":"0xcee78b40"},"visibility":"internal"},{"constant":true,"id":642,"mutability":"constant","name":"_LSP17_EXTENSION_PREFIX","nameLocation":"407:23:9","nodeType":"VariableDeclaration","scope":643,"src":"390:65:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":640,"name":"bytes10","nodeType":"ElementaryTypeName","src":"390:7:9","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30786365653738623430393464613836303131303936","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"433:22:9","typeDescriptions":{"typeIdentifier":"t_rational_977078727535809873907862_by_1","typeString":"int_const 977078727535809873907862"},"value":"0xcee78b4094da86011096"},"visibility":"internal"}],"src":"39:418:9"},"id":9},"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","exportedSymbols":{"InvalidExtensionAddress":[659],"InvalidFunctionSelector":[654],"NoExtensionFoundForFunctionSelector":[649]},"id":660,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":644,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:10"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"64:94:10","text":" @dev reverts when there is no extension for the function selector being called with"},"errorSelector":"bb370b2b","id":649,"name":"NoExtensionFoundForFunctionSelector","nameLocation":"165:35:10","nodeType":"ErrorDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"functionSelector","nameLocation":"208:16:10","nodeType":"VariableDeclaration","scope":649,"src":"201:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":646,"name":"bytes4","nodeType":"ElementaryTypeName","src":"201:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"200:25:10"},"src":"159:67:10"},{"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"228:114:10","text":" @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"},"errorSelector":"e5099ee3","id":654,"name":"InvalidFunctionSelector","nameLocation":"349:23:10","nodeType":"ErrorDefinition","parameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"data","nameLocation":"379:4:10","nodeType":"VariableDeclaration","scope":654,"src":"373:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":651,"name":"bytes","nodeType":"ElementaryTypeName","src":"373:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"372:12:10"},"src":"343:42:10"},{"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"387:110:10","text":" @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"},"errorSelector":"42bfe79f","id":659,"name":"InvalidExtensionAddress","nameLocation":"504:23:10","nodeType":"ErrorDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"storedData","nameLocation":"534:10:10","nodeType":"VariableDeclaration","scope":659,"src":"528:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":656,"name":"bytes","nodeType":"ElementaryTypeName","src":"528:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"527:18:10"},"src":"498:48:10"}],"src":"39:508:10"},"id":10},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","exportedSymbols":{"ERC165":[3511],"ERC165Checker":[3706],"LSP17Extendable":[793],"NoExtensionFoundForFunctionSelector":[649],"_INTERFACEID_LSP17_EXTENDABLE":[636]},"id":794,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":661,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":663,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":794,"sourceUnit":3512,"src":"75:78:11","symbolAliases":[{"foreign":{"id":662,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"83:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":665,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":794,"sourceUnit":3707,"src":"154:98:11","symbolAliases":[{"foreign":{"id":664,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"167:13:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","file":"./LSP17Constants.sol","id":667,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":794,"sourceUnit":643,"src":"267:67:11","symbolAliases":[{"foreign":{"id":666,"name":"_INTERFACEID_LSP17_EXTENDABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"275:29:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","file":"./LSP17Errors.sol","id":669,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":794,"sourceUnit":660,"src":"346:70:11","symbolAliases":[{"foreign":{"id":668,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"354:35:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":671,"name":"ERC165","nameLocations":["924:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":3511,"src":"924:6:11"},"id":672,"nodeType":"InheritanceSpecifier","src":"924:6:11"}],"canonicalName":"LSP17Extendable","contractDependencies":[],"contractKind":"contract","documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"418:468:11","text":" @title Module to add more functionalities to a contract using extensions.\n @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\n This module can be inherited to extend the functionality of the parent contract when\n calling a function that doesn't exist on the parent contract via forwarding the call\n to an extension mapped to the function selector being called, set originally by the parent contract"},"fullyImplemented":false,"id":793,"linearizedBaseContracts":[793,3511,3718],"name":"LSP17Extendable","nameLocation":"905:15:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3510],"body":{"id":690,"nodeType":"Block","src":"1103:132:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":681,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"1132:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":682,"name":"_INTERFACEID_LSP17_EXTENDABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"1147:29:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1132:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":686,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"1216:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":684,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1192:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_LSP17Extendable_$793_$","typeString":"type(contract super LSP17Extendable)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1198:17:11","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3510,"src":"1192:23:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1192:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1132:96:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":680,"id":689,"nodeType":"Return","src":"1113:115:11"}]},"documentation":{"id":673,"nodeType":"StructuredDocumentation","src":"937:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":691,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1007:17:11","nodeType":"FunctionDefinition","overrides":{"id":677,"nodeType":"OverrideSpecifier","overrides":[],"src":"1079:8:11"},"parameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"mutability":"mutable","name":"interfaceId","nameLocation":"1041:11:11","nodeType":"VariableDeclaration","scope":691,"src":"1034:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":674,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1034:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1024:34:11"},"returnParameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":691,"src":"1097:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":678,"name":"bool","nodeType":"ElementaryTypeName","src":"1097:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1096:6:11"},"scope":793,"src":"998:237:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":722,"nodeType":"Block","src":"1774:341:11","statements":[{"assignments":[700,null],"declarations":[{"constant":false,"id":700,"mutability":"mutable","name":"erc165Extension","nameLocation":"1793:15:11","nodeType":"VariableDeclaration","scope":722,"src":"1785:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":706,"initialValue":{"arguments":[{"expression":{"expression":{"id":702,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"1856:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165_$3511_$","typeString":"type(contract ERC165)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1863:17:11","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3510,"src":"1856:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1881:8:11","memberName":"selector","nodeType":"MemberAccess","src":"1856:33:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":701,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1814:28:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1814:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"1784:115:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":707,"name":"erc165Extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"1913:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1940:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1932:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":708,"name":"address","nodeType":"ElementaryTypeName","src":"1932:7:11","typeDescriptions":{}}},"id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1932:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1913:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":715,"nodeType":"IfStatement","src":"1909:47:11","trueBody":{"expression":{"hexValue":"66616c7365","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1951:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":698,"id":714,"nodeType":"Return","src":"1944:12:11"}},{"expression":{"arguments":[{"id":718,"name":"erc165Extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"2050:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":719,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2083:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":716,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"1986:13:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$3706_$","typeString":"type(library ERC165Checker)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:32:11","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3705,"src":"1986:46:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1986:122:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":698,"id":721,"nodeType":"Return","src":"1967:141:11"}]},"documentation":{"id":692,"nodeType":"StructuredDocumentation","src":"1241:412:11","text":" @dev Returns whether the interfaceId being checked is supported in the extension of the\n {supportsInterface} selector.\n To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n extension if the extension is set, if not it returns false."},"id":723,"implemented":true,"kind":"function","modifiers":[],"name":"_supportsInterfaceInERC165Extension","nameLocation":"1667:35:11","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"interfaceId","nameLocation":"1719:11:11","nodeType":"VariableDeclaration","scope":723,"src":"1712:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":693,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1712:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1702:34:11"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":723,"src":"1768:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":696,"name":"bool","nodeType":"ElementaryTypeName","src":"1768:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1767:6:11"},"scope":793,"src":"1658:457:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"2121:254:11","text":" @dev Returns the extension mapped to a specific function selector\n If no extension was found, return the address(0)\n To be overrided.\n Up to the implementor contract to return an extension based on a function selector"},"id":733,"implemented":false,"kind":"function","modifiers":[],"name":"_getExtensionAndForwardValue","nameLocation":"2389:28:11","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"functionSelector","nameLocation":"2434:16:11","nodeType":"VariableDeclaration","scope":733,"src":"2427:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":725,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2427:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2417:39:11"},"returnParameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":733,"src":"2488:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"2488:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":733,"src":"2497:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":730,"name":"bool","nodeType":"ElementaryTypeName","src":"2497:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2487:15:11"},"scope":793,"src":"2380:123:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":791,"nodeType":"Block","src":"3787:991:11","statements":[{"assignments":[742,744],"declarations":[{"constant":false,"id":742,"mutability":"mutable","name":"extension","nameLocation":"3862:9:11","nodeType":"VariableDeclaration","scope":791,"src":"3854:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"3854:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"shouldForwardValue","nameLocation":"3890:18:11","nodeType":"VariableDeclaration","scope":791,"src":"3885:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":743,"name":"bool","nodeType":"ElementaryTypeName","src":"3885:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":749,"initialValue":{"arguments":[{"expression":{"id":746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3950:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3954:3:11","memberName":"sig","nodeType":"MemberAccess","src":"3950:7:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":745,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"3921:28:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3921:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"3840:118:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"4018:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4039:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4031:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"4031:7:11","typeDescriptions":{}}},"id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4031:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4018:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":761,"nodeType":"IfStatement","src":"4014:92:11","trueBody":{"errorCall":{"arguments":[{"expression":{"id":757,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4098:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4102:3:11","memberName":"sig","nodeType":"MemberAccess","src":"4098:7:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":756,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"4062:35:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes4_$returns$__$","typeString":"function (bytes4) pure"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":760,"nodeType":"RevertStatement","src":"4055:51:11"}},{"assignments":[763,765],"declarations":[{"constant":false,"id":763,"mutability":"mutable","name":"success","nameLocation":"4123:7:11","nodeType":"VariableDeclaration","scope":791,"src":"4118:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":762,"name":"bool","nodeType":"ElementaryTypeName","src":"4118:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":765,"mutability":"mutable","name":"result","nameLocation":"4145:6:11","nodeType":"VariableDeclaration","scope":791,"src":"4132:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":764,"name":"bytes","nodeType":"ElementaryTypeName","src":"4132:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":783,"initialValue":{"arguments":[{"arguments":[{"id":776,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"4252:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"id":777,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4262:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4266:6:11","memberName":"sender","nodeType":"MemberAccess","src":"4262:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":779,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4274:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4278:5:11","memberName":"value","nodeType":"MemberAccess","src":"4274:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":774,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4235:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4239:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"4235:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4235:49:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":766,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"4155:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4165:4:11","memberName":"call","nodeType":"MemberAccess","src":"4155:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"condition":{"id":768,"name":"shouldForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"4190:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4223:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4190:34:11","trueExpression":{"expression":{"id":769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4211:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4215:5:11","memberName":"value","nodeType":"MemberAccess","src":"4211:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4155:79:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4155:130:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4117:168:11"},{"condition":{"id":784,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"4300:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":789,"nodeType":"Block","src":"4353:419:11","statements":[{"AST":{"nodeType":"YulBlock","src":"4637:125:11","statements":[{"nodeType":"YulVariableDeclaration","src":"4655:36:11","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4684:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4678:5:11"},"nodeType":"YulFunctionCall","src":"4678:13:11"},"variables":[{"name":"resultdata_size","nodeType":"YulTypedName","src":"4659:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4719:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"4727:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4715:3:11"},"nodeType":"YulFunctionCall","src":"4715:15:11"},{"name":"resultdata_size","nodeType":"YulIdentifier","src":"4732:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4708:6:11"},"nodeType":"YulFunctionCall","src":"4708:40:11"},"nodeType":"YulExpressionStatement","src":"4708:40:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":765,"isOffset":false,"isSlot":false,"src":"4684:6:11","valueSize":1},{"declaration":765,"isOffset":false,"isSlot":false,"src":"4719:6:11","valueSize":1}],"id":788,"nodeType":"InlineAssembly","src":"4628:134:11"}]},"id":790,"nodeType":"IfStatement","src":"4296:476:11","trueBody":{"id":787,"nodeType":"Block","src":"4309:38:11","statements":[{"expression":{"id":785,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"4330:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":740,"id":786,"nodeType":"Return","src":"4323:13:11"}]}}]},"documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"2509:1160:11","text":" @dev Forwards the call to an extension mapped to a function selector.\n Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n called on the account. If there is no extension, the `address(0)` will be returned.\n Forwards the value if the extension is payable.\n Reverts if there is no extension for the function being called.\n If there is an extension for the function selector being called, it calls the extension with the\n `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n ```solidity\n (bool success, bytes memory result) = extension.call{value: msg.value}(\n     abi.encodePacked(callData, msg.sender, msg.value)\n );\n ```"},"id":792,"implemented":true,"kind":"function","modifiers":[],"name":"_fallbackLSP17Extendable","nameLocation":"3683:24:11","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":736,"mutability":"mutable","name":"callData","nameLocation":"3732:8:11","nodeType":"VariableDeclaration","scope":792,"src":"3717:23:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":735,"name":"bytes","nodeType":"ElementaryTypeName","src":"3717:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3707:39:11"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":792,"src":"3773:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":738,"name":"bytes","nodeType":"ElementaryTypeName","src":"3773:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3772:14:11"},"scope":793,"src":"3674:1104:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":794,"src":"887:3893:11","usedErrors":[],"usedEvents":[]}],"src":"39:4742:11"},"id":11},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"ast":{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","exportedSymbols":{"IERC725Y":[505],"LSP2Utils":[1530]},"id":1531,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":795,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:12"},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":797,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1531,"sourceUnit":506,"src":"78:89:12","symbolAliases":[{"foreign":{"id":796,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"91:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LSP2Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"169:312:12","text":" @title LSP2 Utility library.\n @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\n defined on the LSP2 standard.\n Based on LSP2 ERC725Y JSON Schema standard."},"fullyImplemented":true,"id":1530,"linearizedBaseContracts":[1530],"name":"LSP2Utils","nameLocation":"490:9:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":813,"nodeType":"Block","src":"929:49:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":809,"name":"keyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"962:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"956:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":807,"name":"bytes","nodeType":"ElementaryTypeName","src":"956:5:12","typeDescriptions":{}}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"956:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":806,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"946:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":805,"id":812,"nodeType":"Return","src":"939:32:12"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"506:319:12","text":" @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\n ```\n keccak256(\"keyName\")\n ```\n @param keyName The string to hash to generate a Singleton data key.\n @return The generated `bytes32` data key of key type Singleton."},"id":814,"implemented":true,"kind":"function","modifiers":[],"name":"generateSingletonKey","nameLocation":"839:20:12","nodeType":"FunctionDefinition","parameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"keyName","nameLocation":"883:7:12","nodeType":"VariableDeclaration","scope":814,"src":"869:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":800,"name":"string","nodeType":"ElementaryTypeName","src":"869:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"859:37:12"},"returnParameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":814,"src":"920:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"920:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"919:9:12"},"scope":1530,"src":"830:148:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":862,"nodeType":"Block","src":"1548:415:12","statements":[{"assignments":[823],"declarations":[{"constant":false,"id":823,"mutability":"mutable","name":"dataKey","nameLocation":"1571:7:12","nodeType":"VariableDeclaration","scope":862,"src":"1558:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":822,"name":"bytes","nodeType":"ElementaryTypeName","src":"1558:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":828,"initialValue":{"arguments":[{"id":826,"name":"arrayKeyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"1587:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1581:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":824,"name":"bytes","nodeType":"ElementaryTypeName","src":"1581:5:12","typeDescriptions":{}}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1558:42:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":830,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1618:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:6:12","memberName":"length","nodeType":"MemberAccess","src":"1618:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1636:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1618:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d555354206265206c6f6e676572207468616e20322063686172616374657273","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1639:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1330e5505d03eb8c2f3c566a974e84b491f709354814e0b84c5b75865f42fea2","typeString":"literal_string \"MUST be longer than 2 characters\""},"value":"MUST be longer than 2 characters"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1330e5505d03eb8c2f3c566a974e84b491f709354814e0b84c5b75865f42fea2","typeString":"literal_string \"MUST be longer than 2 characters\""}],"id":829,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1610:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1610:64:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":836,"nodeType":"ExpressionStatement","src":"1610:64:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":838,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1705:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":843,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":839,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1713:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:6:12","memberName":"length","nodeType":"MemberAccess","src":"1713:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1730:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1713:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1705:27:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783562","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1736:4:12","typeDescriptions":{"typeIdentifier":"t_rational_91_by_1","typeString":"int_const 91"},"value":"0x5b"},"src":"1705:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":846,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1783:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":851,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":847,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1791:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:6:12","memberName":"length","nodeType":"MemberAccess","src":"1791:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1791:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1783:27:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783564","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1814:4:12","typeDescriptions":{"typeIdentifier":"t_rational_93_by_1","typeString":"int_const 93"},"value":"0x5d"},"src":"1783:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1705:113:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d697373696e6720656d7074792073717561726520627261636b65747320275b5d272061742074686520656e64206f6620746865206b6579206e616d65","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:63:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e3b6aa919fe1aff12eb32ef9916d0e70635ca417f19f845d5b01296b02b93b3","typeString":"literal_string \"Missing empty square brackets '[]' at the end of the key name\""},"value":"Missing empty square brackets '[]' at the end of the key name"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e3b6aa919fe1aff12eb32ef9916d0e70635ca417f19f845d5b01296b02b93b3","typeString":"literal_string \"Missing empty square brackets '[]' at the end of the key name\""}],"id":837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1684:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1684:236:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"1684:236:12"},{"expression":{"arguments":[{"id":859,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1948:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":858,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1938:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":821,"id":861,"nodeType":"Return","src":"1931:25:12"}]},"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"984:459:12","text":" @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\n ```\n keccak256(\"arrayKeyName[]\")\n ```\n @param arrayKeyName The string that will be used to generate a data key of key type Array.\n @return The generated `bytes32` data key of key type Array.\n @custom:requirements\n - The `keyName` must include at the end of the string the square brackets `\"[]\"`."},"id":863,"implemented":true,"kind":"function","modifiers":[],"name":"generateArrayKey","nameLocation":"1457:16:12","nodeType":"FunctionDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"mutability":"mutable","name":"arrayKeyName","nameLocation":"1497:12:12","nodeType":"VariableDeclaration","scope":863,"src":"1483:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":816,"name":"string","nodeType":"ElementaryTypeName","src":"1483:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1473:42:12"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":863,"src":"1539:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":819,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1539:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1538:9:12"},"scope":1530,"src":"1448:515:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":893,"nodeType":"Block","src":"2592:168:12","statements":[{"assignments":[874],"declarations":[{"constant":false,"id":874,"mutability":"mutable","name":"elementInArray","nameLocation":"2615:14:12","nodeType":"VariableDeclaration","scope":893,"src":"2602:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":873,"name":"bytes","nodeType":"ElementaryTypeName","src":"2602:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":887,"initialValue":{"arguments":[{"arguments":[{"id":880,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"2666:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2658:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes16_$","typeString":"type(bytes16)"},"typeName":{"id":878,"name":"bytes16","nodeType":"ElementaryTypeName","src":"2658:7:12","typeDescriptions":{}}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2658:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},{"arguments":[{"id":884,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"2697:5:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2689:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes16_$","typeString":"type(bytes16)"},"typeName":{"id":882,"name":"bytes16","nodeType":"ElementaryTypeName","src":"2689:7:12","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes16","typeString":"bytes16"},{"typeIdentifier":"t_bytes16","typeString":"bytes16"}],"expression":{"id":876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2632:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":875,"name":"bytes","nodeType":"ElementaryTypeName","src":"2632:5:12","typeDescriptions":{}}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2638:6:12","memberName":"concat","nodeType":"MemberAccess","src":"2632:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2632:81:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2602:111:12"},{"expression":{"arguments":[{"id":890,"name":"elementInArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"2738:14:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2730:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2730:7:12","typeDescriptions":{}}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":872,"id":892,"nodeType":"Return","src":"2723:30:12"}]},"documentation":{"id":864,"nodeType":"StructuredDocumentation","src":"1969:491:12","text":" @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\n with the 16 bytes of `index`. As:\n ```\n arrayKey[index]\n ```\n @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\n @param index The index number in the `arrayKey`.\n @return The generated `bytes32` data key of key type Array at a specific `index`."},"id":894,"implemented":true,"kind":"function","modifiers":[],"name":"generateArrayElementKeyAtIndex","nameLocation":"2474:30:12","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":866,"mutability":"mutable","name":"arrayKey","nameLocation":"2522:8:12","nodeType":"VariableDeclaration","scope":894,"src":"2514:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2514:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"index","nameLocation":"2548:5:12","nodeType":"VariableDeclaration","scope":894,"src":"2540:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":867,"name":"uint128","nodeType":"ElementaryTypeName","src":"2540:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2504:55:12"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":894,"src":"2583:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2583:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2582:9:12"},"scope":1530,"src":"2465:295:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":946,"nodeType":"Block","src":"3444:325:12","statements":[{"assignments":[905],"declarations":[{"constant":false,"id":905,"mutability":"mutable","name":"firstWordHash","nameLocation":"3462:13:12","nodeType":"VariableDeclaration","scope":946,"src":"3454:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":904,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3454:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":912,"initialValue":{"arguments":[{"arguments":[{"id":909,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"3494:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3488:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":907,"name":"bytes","nodeType":"ElementaryTypeName","src":"3488:5:12","typeDescriptions":{}}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":906,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3478:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3478:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3454:51:12"},{"assignments":[914],"declarations":[{"constant":false,"id":914,"mutability":"mutable","name":"lastWordHash","nameLocation":"3523:12:12","nodeType":"VariableDeclaration","scope":946,"src":"3515:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":913,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3515:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":921,"initialValue":{"arguments":[{"arguments":[{"id":918,"name":"lastWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"3554:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3548:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":916,"name":"bytes","nodeType":"ElementaryTypeName","src":"3548:5:12","typeDescriptions":{}}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3548:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":915,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3538:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3538:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3515:49:12"},{"assignments":[923],"declarations":[{"constant":false,"id":923,"mutability":"mutable","name":"temporaryBytes","nameLocation":"3588:14:12","nodeType":"VariableDeclaration","scope":946,"src":"3575:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":922,"name":"bytes","nodeType":"ElementaryTypeName","src":"3575:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":940,"initialValue":{"arguments":[{"arguments":[{"id":929,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"3639:13:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3631:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":927,"name":"bytes10","nodeType":"ElementaryTypeName","src":"3631:7:12","typeDescriptions":{}}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3674:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3667:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":931,"name":"bytes2","nodeType":"ElementaryTypeName","src":"3667:6:12","typeDescriptions":{}}},"id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3667:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":937,"name":"lastWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"3698:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3690:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":935,"name":"bytes20","nodeType":"ElementaryTypeName","src":"3690:7:12","typeDescriptions":{}}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3690:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3605:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":924,"name":"bytes","nodeType":"ElementaryTypeName","src":"3605:5:12","typeDescriptions":{}}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3611:6:12","memberName":"concat","nodeType":"MemberAccess","src":"3605:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3605:116:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3575:146:12"},{"expression":{"arguments":[{"id":943,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"3747:14:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3739:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3739:7:12","typeDescriptions":{}}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":903,"id":945,"nodeType":"Return","src":"3732:30:12"}]},"documentation":{"id":895,"nodeType":"StructuredDocumentation","src":"2766:542:12","text":" @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\n ```\n bytes10(firstWordHash):0000:bytes20(lastWordHash)\n ```\n @param firstWord The word to retrieve the first 10 bytes of its hash.\n @param lastWord The word to retrieve the first 10 bytes of its hash.\n @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`."},"id":947,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"3322:18:12","nodeType":"FunctionDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"firstWord","nameLocation":"3364:9:12","nodeType":"VariableDeclaration","scope":947,"src":"3350:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":896,"name":"string","nodeType":"ElementaryTypeName","src":"3350:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"lastWord","nameLocation":"3397:8:12","nodeType":"VariableDeclaration","scope":947,"src":"3383:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":898,"name":"string","nodeType":"ElementaryTypeName","src":"3383:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3340:71:12"},"returnParameters":{"id":903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":947,"src":"3435:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3435:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3434:9:12"},"scope":1530,"src":"3313:456:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":990,"nodeType":"Block","src":"4458:258:12","statements":[{"assignments":[958],"declarations":[{"constant":false,"id":958,"mutability":"mutable","name":"firstWordHash","nameLocation":"4476:13:12","nodeType":"VariableDeclaration","scope":990,"src":"4468:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4468:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":965,"initialValue":{"arguments":[{"arguments":[{"id":962,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"4508:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4502:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":960,"name":"bytes","nodeType":"ElementaryTypeName","src":"4502:5:12","typeDescriptions":{}}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4502:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":959,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4492:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4468:51:12"},{"assignments":[967],"declarations":[{"constant":false,"id":967,"mutability":"mutable","name":"temporaryBytes","nameLocation":"4543:14:12","nodeType":"VariableDeclaration","scope":990,"src":"4530:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":966,"name":"bytes","nodeType":"ElementaryTypeName","src":"4530:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":984,"initialValue":{"arguments":[{"arguments":[{"id":973,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"4594:13:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4586:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":971,"name":"bytes10","nodeType":"ElementaryTypeName","src":"4586:7:12","typeDescriptions":{}}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4586:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4629:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4622:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":975,"name":"bytes2","nodeType":"ElementaryTypeName","src":"4622:6:12","typeDescriptions":{}}},"id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4622:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":981,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"4653:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4645:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":979,"name":"bytes20","nodeType":"ElementaryTypeName","src":"4645:7:12","typeDescriptions":{}}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4645:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4560:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":968,"name":"bytes","nodeType":"ElementaryTypeName","src":"4560:5:12","typeDescriptions":{}}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4566:6:12","memberName":"concat","nodeType":"MemberAccess","src":"4560:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4560:108:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4530:138:12"},{"expression":{"arguments":[{"id":987,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4694:14:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4686:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4686:7:12","typeDescriptions":{}}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4686:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":956,"id":989,"nodeType":"Return","src":"4679:30:12"}]},"documentation":{"id":948,"nodeType":"StructuredDocumentation","src":"3775:557:12","text":" @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\n This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\n ```\n bytes10(firstWordHash):0000:<address>\n ```\n @param firstWord The word to retrieve the first 10 bytes of its hash.\n @param addr An address to map `firstWord` to.\n @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`."},"id":991,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"4346:18:12","nodeType":"FunctionDefinition","parameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"firstWord","nameLocation":"4388:9:12","nodeType":"VariableDeclaration","scope":991,"src":"4374:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":949,"name":"string","nodeType":"ElementaryTypeName","src":"4374:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":952,"mutability":"mutable","name":"addr","nameLocation":"4415:4:12","nodeType":"VariableDeclaration","scope":991,"src":"4407:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"4407:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4364:61:12"},"returnParameters":{"id":956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":991,"src":"4449:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4449:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4448:9:12"},"scope":1530,"src":"4337:379:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"5320:177:12","statements":[{"assignments":[1002],"declarations":[{"constant":false,"id":1002,"mutability":"mutable","name":"generatedKey","nameLocation":"5343:12:12","nodeType":"VariableDeclaration","scope":1019,"src":"5330:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1001,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1013,"initialValue":{"arguments":[{"id":1006,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"5384:9:12","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5414:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5407:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1007,"name":"bytes2","nodeType":"ElementaryTypeName","src":"5407:6:12","typeDescriptions":{}}},"id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5407:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1011,"name":"bytes20Value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"5430:12:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5358:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1003,"name":"bytes","nodeType":"ElementaryTypeName","src":"5358:5:12","typeDescriptions":{}}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5364:6:12","memberName":"concat","nodeType":"MemberAccess","src":"5358:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5358:94:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5330:122:12"},{"expression":{"arguments":[{"id":1016,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"5477:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5469:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5469:7:12","typeDescriptions":{}}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5469:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1000,"id":1018,"nodeType":"Return","src":"5462:28:12"}]},"documentation":{"id":992,"nodeType":"StructuredDocumentation","src":"4722:470:12","text":" @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\n ```\n keyPrefix:bytes20Value\n ```\n @param keyPrefix The first part of the data key of key type Mapping.\n @param bytes20Value The second part of the data key of key type Mapping.\n @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`."},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"5206:18:12","nodeType":"FunctionDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"keyPrefix","nameLocation":"5242:9:12","nodeType":"VariableDeclaration","scope":1020,"src":"5234:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":993,"name":"bytes10","nodeType":"ElementaryTypeName","src":"5234:7:12","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"bytes20Value","nameLocation":"5269:12:12","nodeType":"VariableDeclaration","scope":1020,"src":"5261:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":995,"name":"bytes20","nodeType":"ElementaryTypeName","src":"5261:7:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"5224:63:12"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1020,"src":"5311:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5311:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5310:9:12"},"scope":1530,"src":"5197:300:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1078,"nodeType":"Block","src":"6379:356:12","statements":[{"assignments":[1033],"declarations":[{"constant":false,"id":1033,"mutability":"mutable","name":"firstWordHash","nameLocation":"6397:13:12","nodeType":"VariableDeclaration","scope":1078,"src":"6389:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6389:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1040,"initialValue":{"arguments":[{"arguments":[{"id":1037,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6429:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6423:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"6423:5:12","typeDescriptions":{}}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1034,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6413:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6413:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6389:51:12"},{"assignments":[1042],"declarations":[{"constant":false,"id":1042,"mutability":"mutable","name":"secondWordHash","nameLocation":"6458:14:12","nodeType":"VariableDeclaration","scope":1078,"src":"6450:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6450:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1049,"initialValue":{"arguments":[{"arguments":[{"id":1046,"name":"secondWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"6491:10:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6485:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1044,"name":"bytes","nodeType":"ElementaryTypeName","src":"6485:5:12","typeDescriptions":{}}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6485:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1043,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6475:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6475:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6450:53:12"},{"assignments":[1051],"declarations":[{"constant":false,"id":1051,"mutability":"mutable","name":"temporaryBytes","nameLocation":"6527:14:12","nodeType":"VariableDeclaration","scope":1078,"src":"6514:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1050,"name":"bytes","nodeType":"ElementaryTypeName","src":"6514:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1072,"initialValue":{"arguments":[{"arguments":[{"id":1057,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"6577:13:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6570:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes6_$","typeString":"type(bytes6)"},"typeName":{"id":1055,"name":"bytes6","nodeType":"ElementaryTypeName","src":"6570:6:12","typeDescriptions":{}}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6570:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},{"arguments":[{"id":1061,"name":"secondWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"6612:14:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6605:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1059,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6605:6:12","typeDescriptions":{}}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6605:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"arguments":[{"hexValue":"30","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6648:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6641:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1063,"name":"bytes2","nodeType":"ElementaryTypeName","src":"6641:6:12","typeDescriptions":{}}},"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":1069,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"6672:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6664:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1067,"name":"bytes20","nodeType":"ElementaryTypeName","src":"6664:7:12","typeDescriptions":{}}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6664:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes6","typeString":"bytes6"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6544:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1052,"name":"bytes","nodeType":"ElementaryTypeName","src":"6544:5:12","typeDescriptions":{}}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6550:6:12","memberName":"concat","nodeType":"MemberAccess","src":"6544:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6544:143:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6514:173:12"},{"expression":{"arguments":[{"id":1075,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6713:14:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6705:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1073,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6705:7:12","typeDescriptions":{}}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6705:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1031,"id":1077,"nodeType":"Return","src":"6698:30:12"}]},"documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"5503:704:12","text":" @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\n mapped to a `secondWord` mapped itself to a specific address `addr`. As:\n ```\n bytes6(keccak256(\"firstWord\")):bytes4(keccak256(\"secondWord\")):0000:<address>\n ```\n @param firstWord The word to retrieve the first 6 bytes of its hash.\n @param secondWord The word to retrieve the first 4 bytes of its hash.\n @param addr The address that makes the last part of the MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`."},"id":1079,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"6221:30:12","nodeType":"FunctionDefinition","parameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"firstWord","nameLocation":"6275:9:12","nodeType":"VariableDeclaration","scope":1079,"src":"6261:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1022,"name":"string","nodeType":"ElementaryTypeName","src":"6261:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1025,"mutability":"mutable","name":"secondWord","nameLocation":"6308:10:12","nodeType":"VariableDeclaration","scope":1079,"src":"6294:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1024,"name":"string","nodeType":"ElementaryTypeName","src":"6294:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1027,"mutability":"mutable","name":"addr","nameLocation":"6336:4:12","nodeType":"VariableDeclaration","scope":1079,"src":"6328:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1026,"name":"address","nodeType":"ElementaryTypeName","src":"6328:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6251:95:12"},"returnParameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1079,"src":"6370:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1029,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6370:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6369:9:12"},"scope":1530,"src":"6212:523:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1110,"nodeType":"Block","src":"7579:197:12","statements":[{"assignments":[1092],"declarations":[{"constant":false,"id":1092,"mutability":"mutable","name":"generatedKey","nameLocation":"7602:12:12","nodeType":"VariableDeclaration","scope":1110,"src":"7589:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1091,"name":"bytes","nodeType":"ElementaryTypeName","src":"7589:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1104,"initialValue":{"arguments":[{"id":1096,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"7643:9:12","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},{"id":1097,"name":"mapPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"7666:9:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"arguments":[{"hexValue":"30","id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7696:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7689:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1098,"name":"bytes2","nodeType":"ElementaryTypeName","src":"7689:6:12","typeDescriptions":{}}},"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7689:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1102,"name":"subMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"7712:9:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes6","typeString":"bytes6"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7617:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1093,"name":"bytes","nodeType":"ElementaryTypeName","src":"7617:5:12","typeDescriptions":{}}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7623:6:12","memberName":"concat","nodeType":"MemberAccess","src":"7617:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7617:114:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7589:142:12"},{"expression":{"arguments":[{"id":1107,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"7756:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7748:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7748:7:12","typeDescriptions":{}}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7748:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1090,"id":1109,"nodeType":"Return","src":"7741:28:12"}]},"documentation":{"id":1080,"nodeType":"StructuredDocumentation","src":"6741:676:12","text":" @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\n ```\n keyPrefix:mapPrefix:0000:subMapKey\n ```\n @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\n @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\n @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`."},"id":1111,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"7431:30:12","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"keyPrefix","nameLocation":"7478:9:12","nodeType":"VariableDeclaration","scope":1111,"src":"7471:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"},"typeName":{"id":1081,"name":"bytes6","nodeType":"ElementaryTypeName","src":"7471:6:12","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"mapPrefix","nameLocation":"7504:9:12","nodeType":"VariableDeclaration","scope":1111,"src":"7497:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1083,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7497:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1086,"mutability":"mutable","name":"subMapKey","nameLocation":"7531:9:12","nodeType":"VariableDeclaration","scope":1111,"src":"7523:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1085,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7523:7:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7461:85:12"},"returnParameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1111,"src":"7570:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1088,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7570:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7569:9:12"},"scope":1530,"src":"7422:354:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"8434:177:12","statements":[{"assignments":[1122],"declarations":[{"constant":false,"id":1122,"mutability":"mutable","name":"generatedKey","nameLocation":"8457:12:12","nodeType":"VariableDeclaration","scope":1139,"src":"8444:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1121,"name":"bytes","nodeType":"ElementaryTypeName","src":"8444:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1133,"initialValue":{"arguments":[{"id":1126,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"8498:9:12","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8528:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8521:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1127,"name":"bytes2","nodeType":"ElementaryTypeName","src":"8521:6:12","typeDescriptions":{}}},"id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8521:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1131,"name":"bytes20Value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"8544:12:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8472:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"8472:5:12","typeDescriptions":{}}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8478:6:12","memberName":"concat","nodeType":"MemberAccess","src":"8472:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8472:94:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8444:122:12"},{"expression":{"arguments":[{"id":1136,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8591:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8583:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1134,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8583:7:12","typeDescriptions":{}}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8583:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1120,"id":1138,"nodeType":"Return","src":"8576:28:12"}]},"documentation":{"id":1112,"nodeType":"StructuredDocumentation","src":"7782:512:12","text":" @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\n @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\n @param bytes20Value The last of the data key of keyType MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\n (containing the first and second mapped word) to a specific `bytes20Value`."},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"8308:30:12","nodeType":"FunctionDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1114,"mutability":"mutable","name":"keyPrefix","nameLocation":"8356:9:12","nodeType":"VariableDeclaration","scope":1140,"src":"8348:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":1113,"name":"bytes10","nodeType":"ElementaryTypeName","src":"8348:7:12","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"visibility":"internal"},{"constant":false,"id":1116,"mutability":"mutable","name":"bytes20Value","nameLocation":"8383:12:12","nodeType":"VariableDeclaration","scope":1140,"src":"8375:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1115,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8375:7:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8338:63:12"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1140,"src":"8425:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8424:9:12"},"scope":1530,"src":"8299:312:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1180,"nodeType":"Block","src":"9017:208:12","statements":[{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"hashFunctionDigest","nameLocation":"9035:18:12","nodeType":"VariableDeclaration","scope":1180,"src":"9027:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9027:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1160,"initialValue":{"arguments":[{"arguments":[{"id":1157,"name":"hashFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"9072:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9066:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1155,"name":"bytes","nodeType":"ElementaryTypeName","src":"9066:5:12","typeDescriptions":{}}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9066:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1154,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9056:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9056:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9027:59:12"},{"assignments":[1162],"declarations":[{"constant":false,"id":1162,"mutability":"mutable","name":"jsonDigest","nameLocation":"9104:10:12","nodeType":"VariableDeclaration","scope":1180,"src":"9096:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9096:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1169,"initialValue":{"arguments":[{"arguments":[{"id":1166,"name":"json","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"9133:4:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9127:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1164,"name":"bytes","nodeType":"ElementaryTypeName","src":"9127:5:12","typeDescriptions":{}}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9127:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9117:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9117:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9096:43:12"},{"expression":{"arguments":[{"arguments":[{"id":1174,"name":"hashFunctionDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"9181:18:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9174:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1172,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9174:6:12","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9174:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1176,"name":"jsonDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"9202:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1177,"name":"url","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9214:3:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1170,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9157:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9161:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"9157:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1151,"id":1179,"nodeType":"Return","src":"9150:68:12"}]},"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"8617:231:12","text":" @dev Generate a JSONURL value content.\n @param hashFunction The function used to hash the JSON file.\n @param json Bytes value of the JSON file.\n @param url The URL where the JSON file is hosted."},"id":1181,"implemented":true,"kind":"function","modifiers":[],"name":"generateJSONURLValue","nameLocation":"8862:20:12","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"hashFunction","nameLocation":"8906:12:12","nodeType":"VariableDeclaration","scope":1181,"src":"8892:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1142,"name":"string","nodeType":"ElementaryTypeName","src":"8892:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"json","nameLocation":"8942:4:12","nodeType":"VariableDeclaration","scope":1181,"src":"8928:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1144,"name":"string","nodeType":"ElementaryTypeName","src":"8928:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"url","nameLocation":"8970:3:12","nodeType":"VariableDeclaration","scope":1181,"src":"8956:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1146,"name":"string","nodeType":"ElementaryTypeName","src":"8956:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8882:97:12"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1181,"src":"9003:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1149,"name":"bytes","nodeType":"ElementaryTypeName","src":"9003:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9002:14:12"},"scope":1530,"src":"8853:372:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1221,"nodeType":"Block","src":"9710:214:12","statements":[{"assignments":[1194],"declarations":[{"constant":false,"id":1194,"mutability":"mutable","name":"hashFunctionDigest","nameLocation":"9728:18:12","nodeType":"VariableDeclaration","scope":1221,"src":"9720:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9720:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1201,"initialValue":{"arguments":[{"arguments":[{"id":1198,"name":"hashFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"9765:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9759:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1196,"name":"bytes","nodeType":"ElementaryTypeName","src":"9759:5:12","typeDescriptions":{}}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9759:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1195,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9749:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9749:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9720:59:12"},{"assignments":[1203],"declarations":[{"constant":false,"id":1203,"mutability":"mutable","name":"jsonDigest","nameLocation":"9797:10:12","nodeType":"VariableDeclaration","scope":1221,"src":"9789:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1202,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9789:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1210,"initialValue":{"arguments":[{"arguments":[{"id":1207,"name":"assetBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"9826:10:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9820:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1205,"name":"bytes","nodeType":"ElementaryTypeName","src":"9820:5:12","typeDescriptions":{}}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9820:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1204,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9810:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9810:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9789:49:12"},{"expression":{"arguments":[{"arguments":[{"id":1215,"name":"hashFunctionDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"9880:18:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9873:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1213,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9873:6:12","typeDescriptions":{}}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9873:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1217,"name":"jsonDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"9901:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1218,"name":"url","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"9913:3:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1211,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9856:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9860:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"9856:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1192,"id":1220,"nodeType":"Return","src":"9849:68:12"}]},"documentation":{"id":1182,"nodeType":"StructuredDocumentation","src":"9231:303:12","text":" @dev Generate a ASSETURL value content.\n @param hashFunction The function used to hash the JSON file.\n @param assetBytes Bytes value of the JSON file.\n @param url The URL where the JSON file is hosted.\n @return The encoded value as an `ASSETURL`."},"id":1222,"implemented":true,"kind":"function","modifiers":[],"name":"generateASSETURLValue","nameLocation":"9548:21:12","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"hashFunction","nameLocation":"9593:12:12","nodeType":"VariableDeclaration","scope":1222,"src":"9579:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1183,"name":"string","nodeType":"ElementaryTypeName","src":"9579:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"assetBytes","nameLocation":"9629:10:12","nodeType":"VariableDeclaration","scope":1222,"src":"9615:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1185,"name":"string","nodeType":"ElementaryTypeName","src":"9615:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"url","nameLocation":"9663:3:12","nodeType":"VariableDeclaration","scope":1222,"src":"9649:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1187,"name":"string","nodeType":"ElementaryTypeName","src":"9649:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9569:103:12"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1222,"src":"9696:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1190,"name":"bytes","nodeType":"ElementaryTypeName","src":"9696:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9695:14:12"},"scope":1530,"src":"9539:385:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1285,"nodeType":"Block","src":"10373:1273:12","statements":[{"assignments":[1232],"declarations":[{"constant":false,"id":1232,"mutability":"mutable","name":"pointer","nameLocation":"10870:7:12","nodeType":"VariableDeclaration","scope":1285,"src":"10862:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"10862:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"documentation":" Pointer will always land on these values:\n ↓↓↓↓\n 0003 a00000\n 0005 fff83a0011\n 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\n 0012 bb000000000000000000000000000000beef\n 0019 cc00000000000000000000000000000000000000000000deed\n ↑↑↑↑\n The pointer can only land on the length of the following bytes value.","id":1234,"initialValue":{"hexValue":"30","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10880:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10862:19:12"},{"body":{"id":1274,"nodeType":"Block","src":"11164:392:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1239,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11182:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11192:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11182:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1242,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"11197:17:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11215:6:12","memberName":"length","nodeType":"MemberAccess","src":"11197:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11182:39:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1247,"nodeType":"IfStatement","src":"11178:57:12","trueBody":{"expression":{"hexValue":"66616c7365","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11230:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1229,"id":1246,"nodeType":"Return","src":"11223:12:12"}},{"assignments":[1249],"declarations":[{"constant":false,"id":1249,"mutability":"mutable","name":"elementLength","nameLocation":"11257:13:12","nodeType":"VariableDeclaration","scope":1274,"src":"11249:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"11249:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1267,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"baseExpression":{"id":1256,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"11367:17:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1258,"indexExpression":{"id":1257,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11385:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11367:26:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"baseExpression":{"id":1259,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"11419:17:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1263,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1260,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11437:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11419:30:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"expression":{"id":1254,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11325:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11329:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"11325:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11325:146:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11297:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1252,"name":"bytes2","nodeType":"ElementaryTypeName","src":"11297:6:12","typeDescriptions":{}}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11297:192:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes2","typeString":"bytes2"}],"id":1251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11273:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":1250,"name":"uint16","nodeType":"ElementaryTypeName","src":"11273:6:12","typeDescriptions":{}}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11273:230:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"11249:254:12"},{"expression":{"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1268,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11517:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1269,"name":"elementLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"11528:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11544:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11528:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11517:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1273,"nodeType":"ExpressionStatement","src":"11517:28:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1235,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11128:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1236,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"11138:17:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11156:6:12","memberName":"length","nodeType":"MemberAccess","src":"11138:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11128:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Check each length byte and make sure that when you reach the last length byte.\n Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.","id":1275,"nodeType":"WhileStatement","src":"11121:435:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1276,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"11569:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1277,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"11580:17:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11598:6:12","memberName":"length","nodeType":"MemberAccess","src":"11580:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11569:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1282,"nodeType":"IfStatement","src":"11565:52:12","trueBody":{"expression":{"hexValue":"74727565","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11613:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1229,"id":1281,"nodeType":"Return","src":"11606:11:12"}},{"expression":{"hexValue":"66616c7365","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11634:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1229,"id":1284,"nodeType":"Return","src":"11627:12:12"}]},"documentation":{"id":1223,"nodeType":"StructuredDocumentation","src":"9930:334:12","text":" @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\n @param compactBytesArray The bytes value to verify.\n @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise."},"id":1286,"implemented":true,"kind":"function","modifiers":[],"name":"isCompactBytesArray","nameLocation":"10278:19:12","nodeType":"FunctionDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"compactBytesArray","nameLocation":"10320:17:12","nodeType":"VariableDeclaration","scope":1286,"src":"10307:30:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1224,"name":"bytes","nodeType":"ElementaryTypeName","src":"10307:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10297:46:12"},"returnParameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1286,"src":"10367:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1227,"name":"bool","nodeType":"ElementaryTypeName","src":"10367:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10366:6:12"},"scope":1530,"src":"10269:1377:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1304,"nodeType":"Block","src":"12056:104:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1294,"name":"arrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"12070:11:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12082:6:12","memberName":"length","nodeType":"MemberAccess","src":"12070:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3136","id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12070:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1301,"nodeType":"IfStatement","src":"12066:66:12","trueBody":{"id":1300,"nodeType":"Block","src":"12096:36:12","statements":[{"expression":{"hexValue":"74727565","id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12117:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1293,"id":1299,"nodeType":"Return","src":"12110:11:12"}]}},{"expression":{"hexValue":"66616c7365","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12148:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1293,"id":1303,"nodeType":"Return","src":"12141:12:12"}]},"documentation":{"id":1287,"nodeType":"StructuredDocumentation","src":"11652:293:12","text":" @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\n @param arrayLength Plain bytes that should be validated.\n @return `true` if the value is 16 bytes long, `false` otherwise."},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"isValidLSP2ArrayLengthValue","nameLocation":"11959:27:12","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"arrayLength","nameLocation":"12009:11:12","nodeType":"VariableDeclaration","scope":1305,"src":"11996:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1288,"name":"bytes","nodeType":"ElementaryTypeName","src":"11996:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11986:40:12"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"12050:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1291,"name":"bool","nodeType":"ElementaryTypeName","src":"12050:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12049:6:12"},"scope":1530,"src":"11950:210:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1378,"nodeType":"Block","src":"12894:512:12","statements":[{"expression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1323,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12904:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"33","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12929:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"id":1326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12915:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12919:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1325,"nodeType":"ArrayTypeName","src":"12919:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12915:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"12904:27:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1330,"nodeType":"ExpressionStatement","src":"12904:27:12"},{"expression":{"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1331,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12941:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"33","id":1335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12966:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"id":1334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12954:11:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1332,"name":"bytes","nodeType":"ElementaryTypeName","src":"12958:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1333,"nodeType":"ArrayTypeName","src":"12958:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12954:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"12941:27:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1338,"nodeType":"ExpressionStatement","src":"12941:27:12"},{"expression":{"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1339,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"13043:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1341,"indexExpression":{"hexValue":"30","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13052:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13043:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1342,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"13057:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13043:22:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1344,"nodeType":"ExpressionStatement","src":"13043:22:12"},{"expression":{"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1345,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"13075:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1347,"indexExpression":{"hexValue":"30","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13086:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13075:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1350,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"13108:14:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1348,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13091:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13095:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"13091:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13091:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"13075:48:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1353,"nodeType":"ExpressionStatement","src":"13075:48:12"},{"expression":{"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1354,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"13198:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1356,"indexExpression":{"hexValue":"31","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13207:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13198:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1357,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"13212:20:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13198:34:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1359,"nodeType":"ExpressionStatement","src":"13198:34:12"},{"expression":{"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1360,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"13242:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1362,"indexExpression":{"hexValue":"31","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13253:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13242:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13258:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"13242:18:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1365,"nodeType":"ExpressionStatement","src":"13242:18:12"},{"expression":{"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1366,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"13335:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1368,"indexExpression":{"hexValue":"32","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13344:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13335:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1369,"name":"removedElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"13349:22:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13335:36:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1371,"nodeType":"ExpressionStatement","src":"13335:36:12"},{"expression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1372,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"13381:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1374,"indexExpression":{"hexValue":"32","id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13392:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13381:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13397:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"13381:18:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1377,"nodeType":"ExpressionStatement","src":"13381:18:12"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"12166:434:12","text":" @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\n @param arrayKey The Data Key of Key Type Array.\n @param newArrayLength The new Array Length for the `arrayKey`.\n @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n @param removedElementMapKey The Data Key of a mapping to be removed."},"id":1379,"implemented":true,"kind":"function","modifiers":[],"name":"removeLastElementFromArrayAndMap","nameLocation":"12614:32:12","nodeType":"FunctionDefinition","parameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"arrayKey","nameLocation":"12664:8:12","nodeType":"VariableDeclaration","scope":1379,"src":"12656:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12656:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"newArrayLength","nameLocation":"12690:14:12","nodeType":"VariableDeclaration","scope":1379,"src":"12682:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1309,"name":"uint128","nodeType":"ElementaryTypeName","src":"12682:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"removedElementIndexKey","nameLocation":"12722:22:12","nodeType":"VariableDeclaration","scope":1379,"src":"12714:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12714:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1314,"mutability":"mutable","name":"removedElementMapKey","nameLocation":"12762:20:12","nodeType":"VariableDeclaration","scope":1379,"src":"12754:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1313,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12754:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12646:142:12"},"returnParameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"dataKeys","nameLocation":"12853:8:12","nodeType":"VariableDeclaration","scope":1379,"src":"12836:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12836:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1317,"nodeType":"ArrayTypeName","src":"12836:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1321,"mutability":"mutable","name":"dataValues","nameLocation":"12878:10:12","nodeType":"VariableDeclaration","scope":1379,"src":"12863:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1319,"name":"bytes","nodeType":"ElementaryTypeName","src":"12863:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1320,"nodeType":"ArrayTypeName","src":"12863:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"12835:54:12"},"scope":1530,"src":"12605:801:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1528,"nodeType":"Block","src":"14506:1736:12","statements":[{"expression":{"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1402,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"14516:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"35","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14541:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"}],"id":1405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14527:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14531:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1404,"nodeType":"ArrayTypeName","src":"14531:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14527:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"14516:27:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1409,"nodeType":"ExpressionStatement","src":"14516:27:12"},{"expression":{"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"14553:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"35","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14578:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"}],"id":1413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14566:11:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1411,"name":"bytes","nodeType":"ElementaryTypeName","src":"14570:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1412,"nodeType":"ArrayTypeName","src":"14570:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14566:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"14553:27:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1417,"nodeType":"ExpressionStatement","src":"14553:27:12"},{"expression":{"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1418,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"14655:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1420,"indexExpression":{"hexValue":"30","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14664:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14655:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1421,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"14669:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"14655:22:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1423,"nodeType":"ExpressionStatement","src":"14655:22:12"},{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1424,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"14687:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1426,"indexExpression":{"hexValue":"30","id":1425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14698:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14687:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1429,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"14720:14:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1427,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"14703:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14707:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"14703:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14703:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"14687:48:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1432,"nodeType":"ExpressionStatement","src":"14687:48:12"},{"expression":{"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1433,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"14810:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1435,"indexExpression":{"hexValue":"31","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14819:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14810:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1436,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"14824:20:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"14810:34:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1438,"nodeType":"ExpressionStatement","src":"14810:34:12"},{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1439,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"14854:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1441,"indexExpression":{"hexValue":"31","id":1440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14865:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14854:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14870:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"14854:18:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1444,"nodeType":"ExpressionStatement","src":"14854:18:12"},{"assignments":[1446],"declarations":[{"constant":false,"id":1446,"mutability":"mutable","name":"lastElementIndexKey","nameLocation":"14952:19:12","nodeType":"VariableDeclaration","scope":1528,"src":"14944:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14944:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1452,"initialValue":{"arguments":[{"id":1449,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"15028:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1450,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"15050:14:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1447,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"14974:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1530_$","typeString":"type(library LSP2Utils)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14984:30:12","memberName":"generateArrayElementKeyAtIndex","nodeType":"MemberAccess","referencedDeclaration":894,"src":"14974:40:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint128_$returns$_t_bytes32_$","typeString":"function (bytes32,uint128) pure returns (bytes32)"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14974:100:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14944:130:12"},{"assignments":[1454],"declarations":[{"constant":false,"id":1454,"mutability":"mutable","name":"lastElementIndexValue","nameLocation":"15169:21:12","nodeType":"VariableDeclaration","scope":1528,"src":"15161:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1453,"name":"bytes20","nodeType":"ElementaryTypeName","src":"15161:7:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"id":1462,"initialValue":{"arguments":[{"arguments":[{"id":1459,"name":"lastElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"15238:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1457,"name":"erc725YContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"15214:15:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15230:7:12","memberName":"getData","nodeType":"MemberAccess","referencedDeclaration":476,"src":"15214:23:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view external returns (bytes memory)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15214:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15193:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1455,"name":"bytes20","nodeType":"ElementaryTypeName","src":"15193:7:12","typeDescriptions":{}}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15193:75:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"VariableDeclarationStatement","src":"15161:107:12"},{"expression":{"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1463,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"15384:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1465,"indexExpression":{"hexValue":"32","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15393:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15384:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1466,"name":"removedElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"15398:22:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15384:36:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1468,"nodeType":"ExpressionStatement","src":"15384:36:12"},{"expression":{"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1469,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"15430:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1471,"indexExpression":{"hexValue":"32","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15441:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15430:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1475,"name":"lastElementIndexValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"15459:21:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15446:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1472,"name":"bytes","nodeType":"ElementaryTypeName","src":"15446:5:12","typeDescriptions":{}}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15452:6:12","memberName":"concat","nodeType":"MemberAccess","src":"15446:12:12","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15446:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"15430:51:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1478,"nodeType":"ExpressionStatement","src":"15430:51:12"},{"expression":{"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1479,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"15555:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1481,"indexExpression":{"hexValue":"33","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15564:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15555:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1482,"name":"lastElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"15569:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15555:33:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1484,"nodeType":"ExpressionStatement","src":"15555:33:12"},{"expression":{"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1485,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"15598:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1487,"indexExpression":{"hexValue":"33","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15598:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15614:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"15598:18:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1490,"nodeType":"ExpressionStatement","src":"15598:18:12"},{"assignments":[1492],"declarations":[{"constant":false,"id":1492,"mutability":"mutable","name":"lastElementMapKey","nameLocation":"15697:17:12","nodeType":"VariableDeclaration","scope":1528,"src":"15689:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15689:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1501,"initialValue":{"arguments":[{"arguments":[{"id":1497,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"15767:20:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15759:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":1495,"name":"bytes10","nodeType":"ElementaryTypeName","src":"15759:7:12","typeDescriptions":{}}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15759:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"id":1499,"name":"lastElementIndexValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"15802:21:12","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1493,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"15717:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1530_$","typeString":"type(library LSP2Utils)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15727:18:12","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1020,"src":"15717:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15717:116:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15689:144:12"},{"assignments":[1503],"declarations":[{"constant":false,"id":1503,"mutability":"mutable","name":"lastElementMapValue","nameLocation":"15925:19:12","nodeType":"VariableDeclaration","scope":1528,"src":"15912:32:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1502,"name":"bytes","nodeType":"ElementaryTypeName","src":"15912:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1515,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1510,"name":"lastElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"16008:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1508,"name":"erc725YContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"15984:15:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16000:7:12","memberName":"getData","nodeType":"MemberAccess","referencedDeclaration":476,"src":"15984:23:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view external returns (bytes memory)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15977:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1506,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15977:6:12","typeDescriptions":{}}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15977:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1513,"name":"removedElementIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"16041:19:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1504,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15947:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15951:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"15947:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15947:123:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"15912:158:12"},{"expression":{"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1516,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"16159:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1518,"indexExpression":{"hexValue":"34","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16168:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16159:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1519,"name":"lastElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"16173:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16159:31:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1521,"nodeType":"ExpressionStatement","src":"16159:31:12"},{"expression":{"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1522,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16200:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1524,"indexExpression":{"hexValue":"34","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16211:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16200:13:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1525,"name":"lastElementMapValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"16216:19:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"16200:35:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1527,"nodeType":"ExpressionStatement","src":"16200:35:12"}]},"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"13412:733:12","text":" @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\n @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\n @param erc725YContract The ERC725Y contract.\n @param arrayKey The Data Key of Key Type Array.\n @param newArrayLength The new Array Length for the `arrayKey`.\n @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n @param removedElementIndex the index of the removed element.\n @param removedElementMapKey The Data Key of a mapping to be removed."},"id":1529,"implemented":true,"kind":"function","modifiers":[],"name":"removeElementFromArrayAndMap","nameLocation":"14159:28:12","nodeType":"FunctionDefinition","parameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"erc725YContract","nameLocation":"14206:15:12","nodeType":"VariableDeclaration","scope":1529,"src":"14197:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"},"typeName":{"id":1382,"nodeType":"UserDefinedTypeName","pathNode":{"id":1381,"name":"IERC725Y","nameLocations":["14197:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"14197:8:12"},"referencedDeclaration":505,"src":"14197:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"arrayKey","nameLocation":"14239:8:12","nodeType":"VariableDeclaration","scope":1529,"src":"14231:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14231:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"newArrayLength","nameLocation":"14265:14:12","nodeType":"VariableDeclaration","scope":1529,"src":"14257:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1386,"name":"uint128","nodeType":"ElementaryTypeName","src":"14257:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"removedElementIndexKey","nameLocation":"14297:22:12","nodeType":"VariableDeclaration","scope":1529,"src":"14289:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14289:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"removedElementIndex","nameLocation":"14337:19:12","nodeType":"VariableDeclaration","scope":1529,"src":"14329:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1390,"name":"uint128","nodeType":"ElementaryTypeName","src":"14329:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"removedElementMapKey","nameLocation":"14374:20:12","nodeType":"VariableDeclaration","scope":1529,"src":"14366:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14366:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14187:213:12"},"returnParameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"dataKeys","nameLocation":"14465:8:12","nodeType":"VariableDeclaration","scope":1529,"src":"14448:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14448:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1396,"nodeType":"ArrayTypeName","src":"14448:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"dataValues","nameLocation":"14490:10:12","nodeType":"VariableDeclaration","scope":1529,"src":"14475:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1398,"name":"bytes","nodeType":"ElementaryTypeName","src":"14475:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1399,"nodeType":"ArrayTypeName","src":"14475:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14447:54:12"},"scope":1530,"src":"14150:2092:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1531,"src":"482:15762:12","usedErrors":[],"usedEvents":[]}],"src":"39:16206:12"},"id":12},"@lukso/lsp4-contracts/contracts/LSP4Constants.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","exportedSymbols":{"_LSP4_CREATORS_ARRAY_KEY":[1559],"_LSP4_CREATORS_MAP_KEY_PREFIX":[1562],"_LSP4_METADATA_KEY":[1565],"_LSP4_SUPPORTED_STANDARDS_KEY":[1544],"_LSP4_SUPPORTED_STANDARDS_VALUE":[1547],"_LSP4_TOKEN_NAME_KEY":[1550],"_LSP4_TOKEN_SYMBOL_KEY":[1553],"_LSP4_TOKEN_TYPE_COLLECTION":[1541],"_LSP4_TOKEN_TYPE_KEY":[1556],"_LSP4_TOKEN_TYPE_NFT":[1538],"_LSP4_TOKEN_TYPE_TOKEN":[1535]},"id":1566,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1532,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:13"},{"constant":true,"id":1535,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_TOKEN","nameLocation":"96:22:13","nodeType":"VariableDeclaration","scope":1566,"src":"79:43:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1533,"name":"uint256","nodeType":"ElementaryTypeName","src":"79:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"121:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":1538,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_NFT","nameLocation":"141:20:13","nodeType":"VariableDeclaration","scope":1566,"src":"124:41:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"124:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"164:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":1541,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_COLLECTION","nameLocation":"184:27:13","nodeType":"VariableDeclaration","scope":1566,"src":"167:48:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"167:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"214:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":1544,"mutability":"constant","name":"_LSP4_SUPPORTED_STANDARDS_KEY","nameLocation":"356:29:13","nodeType":"VariableDeclaration","scope":1566,"src":"339:115:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"339:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865616665633464383966613936313938383462363030303061346439363632346133386637616332643864396136303465636630376331326337376534383063","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"388:66:13","typeDescriptions":{"typeIdentifier":"t_rational_106291344305384829327323777171026204092068863755428044681309751323096797562892_by_1","typeString":"int_const 1062...(70 digits omitted)...2892"},"value":"0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c"},"visibility":"internal"},{"constant":true,"id":1547,"mutability":"constant","name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nameLocation":"513:31:13","nodeType":"VariableDeclaration","scope":1566,"src":"498:62:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1545,"name":"bytes","nodeType":"ElementaryTypeName","src":"498:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"a4d96624","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"547:13:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8031d7c868dca389fb4e96c3f4df5650d21c8966ab67d753610d01e72b8a0278","typeString":"literal_string hex\"a4d96624\""}},"visibility":"internal"},{"constant":true,"id":1550,"mutability":"constant","name":"_LSP4_TOKEN_NAME_KEY","nameLocation":"610:20:13","nodeType":"VariableDeclaration","scope":1566,"src":"593:106:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864656261316532393266386261383832333865313061623363376638386264346265346661633536636164353139346236656363656166363533343638616631","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:66:13","typeDescriptions":{"typeIdentifier":"t_rational_100742294102289264549068743044138917200237013684961480918773254279156963117809_by_1","typeString":"int_const 1007...(70 digits omitted)...7809"},"value":"0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1"},"visibility":"internal"},{"constant":true,"id":1553,"mutability":"constant","name":"_LSP4_TOKEN_SYMBOL_KEY","nameLocation":"751:22:13","nodeType":"VariableDeclaration","scope":1566,"src":"734:108:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"734:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307832663061363861623037373638653031393433613539396537333336326130653137613633613732653934646432653338346432633164346462393332373536","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"776:66:13","typeDescriptions":{"typeIdentifier":"t_rational_21277094746618207019470167271284656117398221945515764204453433194201650243414_by_1","typeString":"int_const 2127...(69 digits omitted)...3414"},"value":"0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756"},"visibility":"internal"},{"constant":true,"id":1556,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_KEY","nameLocation":"892:20:13","nodeType":"VariableDeclaration","scope":1566,"src":"875:106:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1554,"name":"bytes32","nodeType":"ElementaryTypeName","src":"875:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865303236316661393564623265623362353433396264303333636461363664353662393666393266323433613832323866643837353530656437626466646233","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"915:66:13","typeDescriptions":{"typeIdentifier":"t_rational_101385436791348632936915532486413845551797772917774025249609027894947960716723_by_1","typeString":"int_const 1013...(70 digits omitted)...6723"},"value":"0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3"},"visibility":"internal"},{"constant":true,"id":1559,"mutability":"constant","name":"_LSP4_CREATORS_ARRAY_KEY","nameLocation":"1032:24:13","nodeType":"VariableDeclaration","scope":1566,"src":"1015:110:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1015:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307831313462643033623361343664343837353936383064383165626232623431346664613764303330613731303561383531383637616363663163323335326537","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1059:66:13","typeDescriptions":{"typeIdentifier":"t_rational_7823269115788143993216587392684831921119603420524855766908370213719800763111_by_1","typeString":"int_const 7823...(68 digits omitted)...3111"},"value":"0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7"},"visibility":"internal"},{"constant":true,"id":1562,"mutability":"constant","name":"_LSP4_CREATORS_MAP_KEY_PREFIX","nameLocation":"1186:29:13","nodeType":"VariableDeclaration","scope":1566,"src":"1169:71:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":1560,"name":"bytes10","nodeType":"ElementaryTypeName","src":"1169:7:13","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30783664653835656166356439383262346535646130","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1218:22:13","typeDescriptions":{"typeIdentifier":"t_rational_519024414032760576826784_by_1","typeString":"int_const 519024414032760576826784"},"value":"0x6de85eaf5d982b4e5da0"},"visibility":"internal"},{"constant":true,"id":1565,"mutability":"constant","name":"_LSP4_METADATA_KEY","nameLocation":"1289:18:13","nodeType":"VariableDeclaration","scope":1566,"src":"1272:104:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1272:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839616662393563616363396639353835386563343461613863336236383535313130303265333061653534343135383233663430363132386238356232333865","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1310:66:13","typeDescriptions":{"typeIdentifier":"t_rational_70100691122746653413313834938425876827577001362390431744658469452576166978446_by_1","typeString":"int_const 7010...(69 digits omitted)...8446"},"value":"0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e"},"visibility":"internal"}],"src":"39:1339:13"},"id":13},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","exportedSymbols":{"ERC725Y":[35],"ERC725YCore":[270],"LSP4DigitalAssetMetadata":[1657],"LSP4DigitalAssetMetadataCore":[1719],"_LSP4_SUPPORTED_STANDARDS_KEY":[1544],"_LSP4_SUPPORTED_STANDARDS_VALUE":[1547],"_LSP4_TOKEN_NAME_KEY":[1550],"_LSP4_TOKEN_SYMBOL_KEY":[1553],"_LSP4_TOKEN_TYPE_KEY":[1556]},"id":1658,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1567,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:14"},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725Y.sol","file":"@erc725/smart-contracts/contracts/ERC725Y.sol","id":1569,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1658,"sourceUnit":36,"src":"75:70:14","symbolAliases":[{"foreign":{"id":1568,"name":"ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"83:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":1571,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1658,"sourceUnit":271,"src":"146:78:14","symbolAliases":[{"foreign":{"id":1570,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"154:11:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","file":"./LSP4DigitalAssetMetadataCore.sol","id":1573,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1658,"sourceUnit":1720,"src":"225:80:14","symbolAliases":[{"foreign":{"id":1572,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"233:28:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"./LSP4Constants.sol","id":1579,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1658,"sourceUnit":1566,"src":"320:189:14","symbolAliases":[{"foreign":{"id":1574,"name":"_LSP4_SUPPORTED_STANDARDS_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"333:29:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1575,"name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"368:31:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1576,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"405:20:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1577,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"431:22:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1578,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"459:20:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1581,"name":"ERC725Y","nameLocations":["816:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"816:7:14"},"id":1582,"nodeType":"InheritanceSpecifier","src":"816:7:14"},{"baseName":{"id":1583,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["829:28:14"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"829:28:14"},"id":1584,"nodeType":"InheritanceSpecifier","src":"829:28:14"}],"canonicalName":"LSP4DigitalAssetMetadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"511:254:14","text":" @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n @author Matthew Stevens\n @dev Standard Implementation of the LSP4 standard."},"fullyImplemented":true,"id":1657,"linearizedBaseContracts":[1657,1719,35,270,505,3511,3718,402],"name":"LSP4DigitalAssetMetadata","nameLocation":"784:24:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1636,"nodeType":"Block","src":"1408:412:14","statements":[{"expression":{"arguments":[{"id":1602,"name":"_LSP4_SUPPORTED_STANDARDS_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"1512:29:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1603,"name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"1555:31:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1599,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1478:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1490:8:14","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1478:20:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1478:118:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1605,"nodeType":"ExpressionStatement","src":"1478:118:14"},{"expression":{"arguments":[{"id":1609,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"1628:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1612,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"1656:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1650:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1610,"name":"bytes","nodeType":"ElementaryTypeName","src":"1650:5:14","typeDescriptions":{}}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1650:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1606,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1607:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1619:8:14","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1607:20:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1607:56:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1615,"nodeType":"ExpressionStatement","src":"1607:56:14"},{"expression":{"arguments":[{"id":1619,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"1694:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1622,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"1724:7:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1718:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1620,"name":"bytes","nodeType":"ElementaryTypeName","src":"1718:5:14","typeDescriptions":{}}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1616,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1673:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1685:8:14","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1673:20:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1625,"nodeType":"ExpressionStatement","src":"1673:60:14"},{"expression":{"arguments":[{"id":1629,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1764:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1632,"name":"lsp4TokenType_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"1797:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1630,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1786:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1790:6:14","memberName":"encode","nodeType":"MemberAccess","src":"1786:10:14","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1626,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1743:11:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1755:8:14","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1743:20:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1743:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1635,"nodeType":"ExpressionStatement","src":"1743:70:14"}]},"documentation":{"id":1585,"nodeType":"StructuredDocumentation","src":"864:375:14","text":" @notice Deploying a digital asset `name_` with the `symbol_` symbol.\n @param name_ The name of the token.\n @param symbol_ The symbol of the token.\n @param initialOwner_ The owner of the token contract.\n @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection)."},"id":1637,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1596,"name":"initialOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"1393:13:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1597,"kind":"baseConstructorSpecifier","modifierName":{"id":1595,"name":"ERC725Y","nameLocations":["1385:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"1385:7:14"},"nodeType":"ModifierInvocation","src":"1385:22:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"name_","nameLocation":"1279:5:14","nodeType":"VariableDeclaration","scope":1637,"src":"1265:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1586,"name":"string","nodeType":"ElementaryTypeName","src":"1265:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"symbol_","nameLocation":"1308:7:14","nodeType":"VariableDeclaration","scope":1637,"src":"1294:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1588,"name":"string","nodeType":"ElementaryTypeName","src":"1294:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"initialOwner_","nameLocation":"1333:13:14","nodeType":"VariableDeclaration","scope":1637,"src":"1325:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"1325:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1593,"mutability":"mutable","name":"lsp4TokenType_","nameLocation":"1364:14:14","nodeType":"VariableDeclaration","scope":1637,"src":"1356:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1356:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1255:129:14"},"returnParameters":{"id":1598,"nodeType":"ParameterList","parameters":[],"src":"1408:0:14"},"scope":1657,"src":"1244:576:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[248,1718],"body":{"id":1655,"nodeType":"Block","src":"2158:74:14","statements":[{"expression":{"arguments":[{"id":1651,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"2206:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1652,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"2215:9:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1648,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"2168:28:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP4DigitalAssetMetadataCore_$1719_$","typeString":"type(contract LSP4DigitalAssetMetadataCore)"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2197:8:14","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":1718,"src":"2168:37:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:57:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1654,"nodeType":"ExpressionStatement","src":"2168:57:14"}]},"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"1826:177:14","text":" @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n via this function once the digital asset contract has been deployed."},"id":1656,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"2017:8:14","nodeType":"FunctionDefinition","overrides":{"id":1646,"nodeType":"OverrideSpecifier","overrides":[{"id":1644,"name":"ERC725YCore","nameLocations":["2115:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"2115:11:14"},{"id":1645,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["2128:28:14"],"nodeType":"IdentifierPath","referencedDeclaration":1719,"src":"2128:28:14"}],"src":"2106:51:14"},"parameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"dataKey","nameLocation":"2043:7:14","nodeType":"VariableDeclaration","scope":1656,"src":"2035:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2035:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"dataValue","nameLocation":"2073:9:14","nodeType":"VariableDeclaration","scope":1656,"src":"2060:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1641,"name":"bytes","nodeType":"ElementaryTypeName","src":"2060:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2025:63:14"},"returnParameters":{"id":1647,"nodeType":"ParameterList","parameters":[],"src":"2158:0:14"},"scope":1657,"src":"2008:224:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1658,"src":"766:1468:14","usedErrors":[407,412,448,451,454,1724,1727,1730],"usedEvents":[307,468]}],"src":"39:2196:14"},"id":14},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","exportedSymbols":{"ERC725YCore":[270],"LSP4DigitalAssetMetadataCore":[1719],"LSP4TokenNameNotEditable":[1724],"LSP4TokenSymbolNotEditable":[1727],"LSP4TokenTypeNotEditable":[1730],"_LSP4_TOKEN_NAME_KEY":[1550],"_LSP4_TOKEN_SYMBOL_KEY":[1553],"_LSP4_TOKEN_TYPE_KEY":[1556]},"id":1720,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1659,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:15"},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":1661,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1720,"sourceUnit":271,"src":"75:78:15","symbolAliases":[{"foreign":{"id":1660,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"83:11:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"./LSP4Constants.sol","id":1665,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1720,"sourceUnit":1566,"src":"168:117:15","symbolAliases":[{"foreign":{"id":1662,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"181:20:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1663,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"207:22:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1664,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"235:20:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Errors.sol","file":"./LSP4Errors.sol","id":1669,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1720,"sourceUnit":1731,"src":"297:126:15","symbolAliases":[{"foreign":{"id":1666,"name":"LSP4TokenNameNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"310:24:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1667,"name":"LSP4TokenSymbolNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"340:26:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1668,"name":"LSP4TokenTypeNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"372:24:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1671,"name":"ERC725YCore","nameLocations":["730:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"730:11:15"},"id":1672,"nodeType":"InheritanceSpecifier","src":"730:11:15"}],"canonicalName":"LSP4DigitalAssetMetadataCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"425:254:15","text":" @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n @author Matthew Stevens\n @dev Standard Implementation of the LSP4 standard."},"fullyImplemented":true,"id":1719,"linearizedBaseContracts":[1719,270,505,3511,3718,402],"name":"LSP4DigitalAssetMetadataCore","nameLocation":"698:28:15","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[248],"body":{"id":1717,"nodeType":"Block","src":"1037:426:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1681,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1051:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1682,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"1062:20:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1051:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1152:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1689,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"1163:22:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1152:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1695,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1257:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1696,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1268:20:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1257:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1713,"nodeType":"Block","src":"1354:103:15","statements":[{"expression":{"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1702,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1368:6:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":1704,"indexExpression":{"id":1703,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1375:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1368:15:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1705,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"1386:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1368:27:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1707,"nodeType":"ExpressionStatement","src":"1368:27:15"},{"eventCall":{"arguments":[{"id":1709,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"1427:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1710,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"1436:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1708,"name":"DataChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"1415:11:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1415:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1712,"nodeType":"EmitStatement","src":"1410:36:15"}]},"id":1714,"nodeType":"IfStatement","src":"1253:204:15","trueBody":{"id":1701,"nodeType":"Block","src":"1290:58:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1698,"name":"LSP4TokenTypeNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"1311:24:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1311:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1700,"nodeType":"RevertStatement","src":"1304:33:15"}]}},"id":1715,"nodeType":"IfStatement","src":"1148:309:15","trueBody":{"id":1694,"nodeType":"Block","src":"1187:60:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1691,"name":"LSP4TokenSymbolNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"1208:26:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1208:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"RevertStatement","src":"1201:35:15"}]}},"id":1716,"nodeType":"IfStatement","src":"1047:410:15","trueBody":{"id":1687,"nodeType":"Block","src":"1084:58:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1684,"name":"LSP4TokenNameNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"1105:24:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1105:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1686,"nodeType":"RevertStatement","src":"1098:33:15"}]}}]},"documentation":{"id":1673,"nodeType":"StructuredDocumentation","src":"748:177:15","text":" @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n via this function once the digital asset contract has been deployed."},"id":1718,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"939:8:15","nodeType":"FunctionDefinition","overrides":{"id":1679,"nodeType":"OverrideSpecifier","overrides":[],"src":"1028:8:15"},"parameters":{"id":1678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"dataKey","nameLocation":"965:7:15","nodeType":"VariableDeclaration","scope":1718,"src":"957:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"957:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1677,"mutability":"mutable","name":"dataValue","nameLocation":"995:9:15","nodeType":"VariableDeclaration","scope":1718,"src":"982:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1676,"name":"bytes","nodeType":"ElementaryTypeName","src":"982:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"947:63:15"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"1037:0:15"},"scope":1719,"src":"930:533:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1720,"src":"680:785:15","usedErrors":[407,412,448,451,454,1724,1727,1730],"usedEvents":[307,468]}],"src":"39:1427:15"},"id":15},"@lukso/lsp4-contracts/contracts/LSP4Errors.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Errors.sol","exportedSymbols":{"LSP4TokenNameNotEditable":[1724],"LSP4TokenSymbolNotEditable":[1727],"LSP4TokenTypeNotEditable":[1730]},"id":1731,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1721,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:16"},{"documentation":{"id":1722,"nodeType":"StructuredDocumentation","src":"64:379:16","text":" @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"85c169bd","id":1724,"name":"LSP4TokenNameNotEditable","nameLocation":"450:24:16","nodeType":"ErrorDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[],"src":"474:2:16"},"src":"444:33:16"},{"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"479:383:16","text":" @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"76755b38","id":1727,"name":"LSP4TokenSymbolNotEditable","nameLocation":"869:26:16","nodeType":"ErrorDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[],"src":"895:2:16"},"src":"863:35:16"},{"documentation":{"id":1728,"nodeType":"StructuredDocumentation","src":"900:381:16","text":" @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"4ef6d7fb","id":1730,"name":"LSP4TokenTypeNotEditable","nameLocation":"1288:24:16","nodeType":"ErrorDefinition","parameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"1312:2:16"},"src":"1282:33:16"}],"src":"39:1277:16"},"id":16},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","exportedSymbols":{"IERC165":[3718],"IERC725Y":[505],"ILSP7DigitalAsset":[1905]},"id":1906,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1732,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"40:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":1734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1906,"sourceUnit":3719,"src":"79:80:17","symbolAliases":[{"foreign":{"id":1733,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"87:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":1736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1906,"sourceUnit":506,"src":"160:89:17","symbolAliases":[{"foreign":{"id":1735,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"173:8:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1738,"name":"IERC165","nameLocations":["374:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3718,"src":"374:7:17"},"id":1739,"nodeType":"InheritanceSpecifier","src":"374:7:17"},{"baseName":{"id":1740,"name":"IERC725Y","nameLocations":["383:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"383:8:17"},"id":1741,"nodeType":"InheritanceSpecifier","src":"383:8:17"}],"canonicalName":"ILSP7DigitalAsset","contractDependencies":[],"contractKind":"interface","documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"251:91:17","text":" @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset."},"fullyImplemented":false,"id":1905,"linearizedBaseContracts":[1905,505,3718],"name":"ILSP7DigitalAsset","nameLocation":"353:17:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1742,"nodeType":"StructuredDocumentation","src":"417:693:17","text":" @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\n @param operator The address of the operator that executed the transfer.\n @param from The address which tokens were sent from (balance decreased by `-amount`).\n @param to The address that received the tokens (balance increased by `+amount`).\n @param amount The amount of tokens transferred.\n @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\n @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses."},"eventSelector":"3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6","id":1756,"name":"Transfer","nameLocation":"1121:8:17","nodeType":"EventDefinition","parameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1155:8:17","nodeType":"VariableDeclaration","scope":1756,"src":"1139:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1743,"name":"address","nodeType":"ElementaryTypeName","src":"1139:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1746,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1189:4:17","nodeType":"VariableDeclaration","scope":1756,"src":"1173:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1748,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1219:2:17","nodeType":"VariableDeclaration","scope":1756,"src":"1203:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"1203:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1239:6:17","nodeType":"VariableDeclaration","scope":1756,"src":"1231:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1749,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1752,"indexed":false,"mutability":"mutable","name":"force","nameLocation":"1260:5:17","nodeType":"VariableDeclaration","scope":1756,"src":"1255:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1751,"name":"bool","nodeType":"ElementaryTypeName","src":"1255:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1754,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1281:4:17","nodeType":"VariableDeclaration","scope":1756,"src":"1275:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1753,"name":"bytes","nodeType":"ElementaryTypeName","src":"1275:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1129:162:17"},"src":"1115:177:17"},{"anonymous":false,"documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"1298:371:17","text":" @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n @param operator The address authorized as an operator\n @param tokenOwner The token owner\n @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"f772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d","id":1767,"name":"OperatorAuthorizationChanged","nameLocation":"1680:28:17","nodeType":"EventDefinition","parameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1734:8:17","nodeType":"VariableDeclaration","scope":1767,"src":"1718:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"1718:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"1768:10:17","nodeType":"VariableDeclaration","scope":1767,"src":"1752:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"1752:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1763,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1804:6:17","nodeType":"VariableDeclaration","scope":1767,"src":"1788:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"1788:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1765,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"1826:24:17","nodeType":"VariableDeclaration","scope":1767,"src":"1820:30:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1764,"name":"bytes","nodeType":"ElementaryTypeName","src":"1820:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:148:17"},"src":"1674:183:17"},{"anonymous":false,"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"1863:409:17","text":" @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\n @param operator The address revoked from operating\n @param tokenOwner The token owner\n @param notified Bool indicating whether the operator has been notified or not\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167","id":1778,"name":"OperatorRevoked","nameLocation":"2283:15:17","nodeType":"EventDefinition","parameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2324:8:17","nodeType":"VariableDeclaration","scope":1778,"src":"2308:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"2308:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1772,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"2358:10:17","nodeType":"VariableDeclaration","scope":1778,"src":"2342:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"2342:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1774,"indexed":true,"mutability":"mutable","name":"notified","nameLocation":"2391:8:17","nodeType":"VariableDeclaration","scope":1778,"src":"2378:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1773,"name":"bool","nodeType":"ElementaryTypeName","src":"2378:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1776,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"2415:24:17","nodeType":"VariableDeclaration","scope":1778,"src":"2409:30:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1775,"name":"bytes","nodeType":"ElementaryTypeName","src":"2409:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2298:147:17"},"src":"2277:169:17"},{"documentation":{"id":1779,"nodeType":"StructuredDocumentation","src":"2478:578:17","text":" @dev Returns the number of decimals used to get its user representation.\n If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\n the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\n @custom:notice This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {balanceOf} and {transfer}.\n @return the number of decimals. If `0` is returned, the asset is non-divisible."},"functionSelector":"313ce567","id":1784,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3070:8:17","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[],"src":"3078:2:17"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1784,"src":"3104:5:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1781,"name":"uint8","nodeType":"ElementaryTypeName","src":"3104:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3103:7:17"},"scope":1905,"src":"3061:50:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1785,"nodeType":"StructuredDocumentation","src":"3117:147:17","text":" @dev Returns the number of existing tokens that have been minted in this contract.\n @return The number of existing tokens."},"functionSelector":"18160ddd","id":1790,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3278:11:17","nodeType":"FunctionDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"3289:2:17"},"returnParameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1790,"src":"3315:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"3315:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3314:9:17"},"scope":1905,"src":"3269:55:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"3362:546:17","text":" @dev Get the number of tokens owned by `tokenOwner`.\n If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\n by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\n _Example:_\n ```\n balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\n ```\n @param tokenOwner The address of the token holder to query the balance for.\n @return The amount of tokens owned by `tokenOwner`."},"functionSelector":"70a08231","id":1798,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3922:9:17","nodeType":"FunctionDefinition","parameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"tokenOwner","nameLocation":"3940:10:17","nodeType":"VariableDeclaration","scope":1798,"src":"3932:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1792,"name":"address","nodeType":"ElementaryTypeName","src":"3932:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3931:20:17"},"returnParameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"3975:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1795,"name":"uint256","nodeType":"ElementaryTypeName","src":"3975:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3974:9:17"},"scope":1905,"src":"3913:71:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"4025:692:17","text":" @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The address to authorize as an operator.\n @param amount The allowance amount of tokens operator has access to.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\n an existing operator's allowance is updated."},"functionSelector":"b49506fd","id":1808,"implemented":false,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"4731:17:17","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"operator","nameLocation":"4766:8:17","nodeType":"VariableDeclaration","scope":1808,"src":"4758:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"4758:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"amount","nameLocation":"4792:6:17","nodeType":"VariableDeclaration","scope":1808,"src":"4784:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"4784:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1805,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"4821:24:17","nodeType":"VariableDeclaration","scope":1808,"src":"4808:37:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1804,"name":"bytes","nodeType":"ElementaryTypeName","src":"4808:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4748:103:17"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[],"src":"4860:0:17"},"scope":1905,"src":"4722:139:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"4867:794:17","text":" @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\n This function also allows the `operator` to remove itself if it is the caller of this function\n @param operator The address to revoke as an operator.\n @param tokenOwner The address of the token owner.\n @param notify Boolean indicating whether to notify the operator or not.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - caller MUST be `operator` or `tokenOwner`\n - `operator` cannot be the zero address.\n @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder)."},"functionSelector":"30d0dc37","id":1820,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"5675:14:17","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"operator","nameLocation":"5707:8:17","nodeType":"VariableDeclaration","scope":1820,"src":"5699:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1810,"name":"address","nodeType":"ElementaryTypeName","src":"5699:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"tokenOwner","nameLocation":"5733:10:17","nodeType":"VariableDeclaration","scope":1820,"src":"5725:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1812,"name":"address","nodeType":"ElementaryTypeName","src":"5725:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1815,"mutability":"mutable","name":"notify","nameLocation":"5758:6:17","nodeType":"VariableDeclaration","scope":1820,"src":"5753:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1814,"name":"bool","nodeType":"ElementaryTypeName","src":"5753:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"5787:24:17","nodeType":"VariableDeclaration","scope":1820,"src":"5774:37:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1816,"name":"bytes","nodeType":"ElementaryTypeName","src":"5774:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5689:128:17"},"returnParameters":{"id":1819,"nodeType":"ParameterList","parameters":[],"src":"5826:0:17"},"scope":1905,"src":"5666:161:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"5833:970:17","text":" @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n against double spending allowance vulnerability.\n @notice Increase the allowance of `operator` by +`addedAmount`\n @dev Atomically increases the allowance granted to `operator` by the caller.\n This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n for the double spending allowance problem.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The operator to increase the allowance for `msg.sender`\n @param addedAmount The additional amount to add on top of the current operator's allowance\n @custom:requirements\n  - `operator` cannot be the same address as `msg.sender`\n  - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} indicating the updated allowance"},"functionSelector":"2bc1da82","id":1830,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6817:17:17","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"operator","nameLocation":"6852:8:17","nodeType":"VariableDeclaration","scope":1830,"src":"6844:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"6844:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"addedAmount","nameLocation":"6878:11:17","nodeType":"VariableDeclaration","scope":1830,"src":"6870:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"6870:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"6912:24:17","nodeType":"VariableDeclaration","scope":1830,"src":"6899:37:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1826,"name":"bytes","nodeType":"ElementaryTypeName","src":"6899:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6834:108:17"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[],"src":"6951:0:17"},"scope":1905,"src":"6808:144:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"6958:1262:17","text":" @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n against the double spending allowance vulnerability.\n @notice Decrease the allowance of `operator` by -`subtractedAmount`\n @dev Atomically decreases the allowance granted to `operator` by the caller.\n This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n for the double spending allowance problem.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @custom:events\n  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\n  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\n    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\n @param operator The operator to decrease allowance for `msg.sender`\n @param tokenOwner The address of the token owner.\n @param subtractedAmount The amount to decrease by in the operator's allowance.\n @custom:requirements\n  - `operator` cannot be the zero address.\n  - `operator` must have allowance for the caller of at least `subtractedAmount`."},"functionSelector":"78381670","id":1842,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"8234:17:17","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"operator","nameLocation":"8269:8:17","nodeType":"VariableDeclaration","scope":1842,"src":"8261:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"8261:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"tokenOwner","nameLocation":"8295:10:17","nodeType":"VariableDeclaration","scope":1842,"src":"8287:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1834,"name":"address","nodeType":"ElementaryTypeName","src":"8287:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"subtractedAmount","nameLocation":"8323:16:17","nodeType":"VariableDeclaration","scope":1842,"src":"8315:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"8315:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"8362:24:17","nodeType":"VariableDeclaration","scope":1842,"src":"8349:37:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1838,"name":"bytes","nodeType":"ElementaryTypeName","src":"8349:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8251:141:17"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[],"src":"8401:0:17"},"scope":1905,"src":"8225:177:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1843,"nodeType":"StructuredDocumentation","src":"8408:648:17","text":" @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\n Operators can send and burn tokens on behalf of their owners.\n @param operator The operator's address to query the authorized amount for.\n @param tokenOwner The token owner that `operator` has allowance on.\n @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\n @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\n (since a tokenOwner is its own operator)."},"functionSelector":"65aeaa95","id":1852,"implemented":false,"kind":"function","modifiers":[],"name":"authorizedAmountFor","nameLocation":"9070:19:17","nodeType":"FunctionDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"operator","nameLocation":"9107:8:17","nodeType":"VariableDeclaration","scope":1852,"src":"9099:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1844,"name":"address","nodeType":"ElementaryTypeName","src":"9099:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1847,"mutability":"mutable","name":"tokenOwner","nameLocation":"9133:10:17","nodeType":"VariableDeclaration","scope":1852,"src":"9125:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"9125:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9089:60:17"},"returnParameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1852,"src":"9173:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"9173:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9172:9:17"},"scope":1905,"src":"9061:121:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"9188:293:17","text":" @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\n @param tokenOwner The token owner to get the operators for.\n @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."},"functionSelector":"d72fc29a","id":1861,"implemented":false,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"9495:14:17","nodeType":"FunctionDefinition","parameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"tokenOwner","nameLocation":"9527:10:17","nodeType":"VariableDeclaration","scope":1861,"src":"9519:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1854,"name":"address","nodeType":"ElementaryTypeName","src":"9519:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9509:34:17"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"9567:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1857,"name":"address","nodeType":"ElementaryTypeName","src":"9567:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1858,"nodeType":"ArrayTypeName","src":"9567:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9566:18:17"},"scope":1905,"src":"9486:99:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"9626:2317:17","text":" @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\n If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\n has been completed (See {authorizedAmountFor}).\n @param from The sender address.\n @param to The recipient address.\n @param amount The amount of tokens to transfer.\n @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n @custom:requirements\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\n - `from` MUST have a balance of at least `amount` tokens.\n - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\n @custom:events\n - {Transfer} event when tokens get successfully transferred.\n - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\n event will be emitted if the operator has no more allowance left.\n @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n This even if the `force` was set to `true`."},"functionSelector":"760d9bba","id":1875,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"11957:8:17","nodeType":"FunctionDefinition","parameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"from","nameLocation":"11983:4:17","nodeType":"VariableDeclaration","scope":1875,"src":"11975:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1863,"name":"address","nodeType":"ElementaryTypeName","src":"11975:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"to","nameLocation":"12005:2:17","nodeType":"VariableDeclaration","scope":1875,"src":"11997:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1865,"name":"address","nodeType":"ElementaryTypeName","src":"11997:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1868,"mutability":"mutable","name":"amount","nameLocation":"12025:6:17","nodeType":"VariableDeclaration","scope":1875,"src":"12017:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"12017:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1870,"mutability":"mutable","name":"force","nameLocation":"12046:5:17","nodeType":"VariableDeclaration","scope":1875,"src":"12041:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1869,"name":"bool","nodeType":"ElementaryTypeName","src":"12041:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"data","nameLocation":"12074:4:17","nodeType":"VariableDeclaration","scope":1875,"src":"12061:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1871,"name":"bytes","nodeType":"ElementaryTypeName","src":"12061:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11965:119:17"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[],"src":"12093:0:17"},"scope":1905,"src":"11948:146:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"12100:1246:17","text":" @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\n @custom:info If any transfer in the batch fail or revert, the whole call will revert.\n @param from An array of sending addresses.\n @param to An array of receiving addresses.\n @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\n @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n @custom:requirements\n - `from`, `to`, `amount` lists MUST be of the same length.\n - no values in `from` can be the zero address.\n - no values in `to` can be the zero address.\n - each `amount` tokens MUST be owned by `from`.\n - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\n @custom:events {Transfer} event **for each token transfer**."},"functionSelector":"2d7667c9","id":1894,"implemented":false,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"13360:13:17","nodeType":"FunctionDefinition","parameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1879,"mutability":"mutable","name":"from","nameLocation":"13400:4:17","nodeType":"VariableDeclaration","scope":1894,"src":"13383:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"13383:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1878,"nodeType":"ArrayTypeName","src":"13383:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"to","nameLocation":"13431:2:17","nodeType":"VariableDeclaration","scope":1894,"src":"13414:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1880,"name":"address","nodeType":"ElementaryTypeName","src":"13414:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1881,"nodeType":"ArrayTypeName","src":"13414:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"amount","nameLocation":"13460:6:17","nodeType":"VariableDeclaration","scope":1894,"src":"13443:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"13443:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1884,"nodeType":"ArrayTypeName","src":"13443:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"force","nameLocation":"13490:5:17","nodeType":"VariableDeclaration","scope":1894,"src":"13476:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1886,"name":"bool","nodeType":"ElementaryTypeName","src":"13476:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1887,"nodeType":"ArrayTypeName","src":"13476:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1891,"mutability":"mutable","name":"data","nameLocation":"13520:4:17","nodeType":"VariableDeclaration","scope":1894,"src":"13505:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1889,"name":"bytes","nodeType":"ElementaryTypeName","src":"13505:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1890,"nodeType":"ArrayTypeName","src":"13505:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13373:157:17"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[],"src":"13539:0:17"},"scope":1905,"src":"13351:189:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1895,"nodeType":"StructuredDocumentation","src":"13546:460:17","text":" @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n @param data An array of ABI encoded function calls to be called on the contract.\n @return results An array of abi-encoded data returned by the functions executed."},"functionSelector":"6963d438","id":1904,"implemented":false,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"14020:10:17","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"data","nameLocation":"14057:4:17","nodeType":"VariableDeclaration","scope":1904,"src":"14040:21:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1896,"name":"bytes","nodeType":"ElementaryTypeName","src":"14040:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1897,"nodeType":"ArrayTypeName","src":"14040:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14030:37:17"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"results","nameLocation":"14101:7:17","nodeType":"VariableDeclaration","scope":1904,"src":"14086:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1900,"name":"bytes","nodeType":"ElementaryTypeName","src":"14086:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1901,"nodeType":"ArrayTypeName","src":"14086:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14085:24:17"},"scope":1905,"src":"14011:99:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1906,"src":"343:13769:17","usedErrors":[],"usedEvents":[468,1756,1767,1778]}],"src":"40:14073:17"},"id":17},"@lukso/lsp7-contracts/contracts/LSP7Constants.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Constants.sol","exportedSymbols":{"_INTERFACEID_LSP7":[1910],"_TYPEID_LSP7_TOKENOPERATOR":[1919],"_TYPEID_LSP7_TOKENSRECIPIENT":[1916],"_TYPEID_LSP7_TOKENSSENDER":[1913]},"id":1920,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1907,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:18"},{"constant":true,"id":1910,"mutability":"constant","name":"_INTERFACEID_LSP7","nameLocation":"108:17:18","nodeType":"VariableDeclaration","scope":1920,"src":"92:46:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1908,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786335326436303038","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:18","typeDescriptions":{"typeIdentifier":"t_rational_3308085256_by_1","typeString":"int_const 3308085256"},"value":"0xc52d6008"},"visibility":"internal"},{"constant":true,"id":1913,"mutability":"constant","name":"_TYPEID_LSP7_TOKENSSENDER","nameLocation":"224:25:18","nodeType":"VariableDeclaration","scope":1920,"src":"207:111:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"207:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834323961633761303639303364626339633133646663623363396431316466383139343538316661303437633936643761343137316663373430323935386561","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"252:66:18","typeDescriptions":{"typeIdentifier":"t_rational_30126120226645308825175209506809961281114499779192639813518124737519344507114_by_1","typeString":"int_const 3012...(69 digits omitted)...7114"},"value":"0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea"},"visibility":"internal"},{"constant":true,"id":1916,"mutability":"constant","name":"_TYPEID_LSP7_TOKENSRECIPIENT","nameLocation":"387:28:18","nodeType":"VariableDeclaration","scope":1920,"src":"370:114:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"370:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307832303830343631316233653265613231633438306463343635313432323130616366346132343835393437353431373730656331666238376465653461353563","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"418:66:18","typeDescriptions":{"typeIdentifier":"t_rational_14700651178463773754784378975248309303000044702861470394749468040853262214492_by_1","typeString":"int_const 1470...(69 digits omitted)...4492"},"value":"0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c"},"visibility":"internal"},{"constant":true,"id":1919,"mutability":"constant","name":"_TYPEID_LSP7_TOKENOPERATOR","nameLocation":"552:26:18","nodeType":"VariableDeclaration","scope":1920,"src":"535:112:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"535:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833383630373263633561353865363132363362343334633732323732356632313033316364303665376335353263666161303664623564653861333230646263","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"581:66:18","typeDescriptions":{"typeIdentifier":"t_rational_25499929147308973929162392603536425004387276054373913310965843359994056150460_by_1","typeString":"int_const 2549...(69 digits omitted)...0460"},"value":"0x386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc"},"visibility":"internal"}],"src":"39:610:18"},"id":18},"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol","exportedSymbols":{"ERC725YCore":[270],"IERC165":[3718],"InvalidExtensionAddress":[659],"InvalidFunctionSelector":[654],"LSP17Extendable":[793],"LSP2Utils":[1530],"LSP4DigitalAssetMetadata":[1657],"LSP7DigitalAsset":[2151],"LSP7DigitalAssetCore":[3231],"LSP7TokenContractCannotHoldValue":[3281],"NoExtensionFoundForFunctionSelector":[649],"_INTERFACEID_LSP7":[1910],"_LSP17_EXTENSION_PREFIX":[642]},"id":2152,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1921,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":1923,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":3719,"src":"78:80:19","symbolAliases":[{"foreign":{"id":1922,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"86:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":1925,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":271,"src":"171:78:19","symbolAliases":[{"foreign":{"id":1924,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"179:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","file":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","id":1927,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":1658,"src":"250:108:19","symbolAliases":[{"foreign":{"id":1926,"name":"LSP4DigitalAssetMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"263:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol","file":"./LSP7DigitalAssetCore.sol","id":1929,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":3232,"src":"359:64:19","symbolAliases":[{"foreign":{"id":1928,"name":"LSP7DigitalAssetCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"367:20:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","id":1931,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":794,"src":"424:108:19","symbolAliases":[{"foreign":{"id":1930,"name":"LSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"437:15:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","file":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","id":1933,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":1531,"src":"547:72:19","symbolAliases":[{"foreign":{"id":1932,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"555:9:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Constants.sol","file":"./LSP7Constants.sol","id":1935,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":1920,"src":"634:54:19","symbolAliases":[{"foreign":{"id":1934,"name":"_INTERFACEID_LSP7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"642:17:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Errors.sol","file":"./LSP7Errors.sol","id":1937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":3310,"src":"689:66:19","symbolAliases":[{"foreign":{"id":1936,"name":"LSP7TokenContractCannotHoldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"697:32:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","id":1939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":643,"src":"757:115:19","symbolAliases":[{"foreign":{"id":1938,"name":"_LSP17_EXTENSION_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"770:23:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","id":1943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2152,"sourceUnit":660,"src":"885:182:19","symbolAliases":[{"foreign":{"id":1940,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"898:35:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1941,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"939:23:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1942,"name":"InvalidExtensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"968:23:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1945,"name":"LSP4DigitalAssetMetadata","nameLocations":["1503:24:19"],"nodeType":"IdentifierPath","referencedDeclaration":1657,"src":"1503:24:19"},"id":1946,"nodeType":"InheritanceSpecifier","src":"1503:24:19"},{"baseName":{"id":1947,"name":"LSP7DigitalAssetCore","nameLocations":["1533:20:19"],"nodeType":"IdentifierPath","referencedDeclaration":3231,"src":"1533:20:19"},"id":1948,"nodeType":"InheritanceSpecifier","src":"1533:20:19"},{"baseName":{"id":1949,"name":"LSP17Extendable","nameLocations":["1559:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":793,"src":"1559:15:19"},"id":1950,"nodeType":"InheritanceSpecifier","src":"1559:15:19"}],"canonicalName":"LSP7DigitalAsset","contractDependencies":[],"contractKind":"contract","documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"1069:391:19","text":" @title Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.\n @author Matthew Stevens\n @dev Minting and transferring are supplied with a `uint256` amount.\n This implementation is agnostic to the way tokens are created.\n A supply mechanism has to be added in a derived contract using {_mint}\n For a generic mechanism, see {LSP7Mintable}."},"fullyImplemented":true,"id":2151,"internalFunctionIDs":{"3510":1},"linearizedBaseContracts":[2151,793,3231,1905,1657,1719,35,270,505,3511,3718,402],"name":"LSP7DigitalAsset","nameLocation":"1479:16:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1974,"nodeType":"Block","src":"2245:50:19","statements":[{"expression":{"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1970,"name":"_isNonDivisible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"2255:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1971,"name":"isNonDivisible_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2273:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2255:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1973,"nodeType":"ExpressionStatement","src":"2255:33:19"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"1581:424:19","text":" @notice Sets the token-Metadata\n @param name_ The name of the token.\n @param symbol_ The symbol of the token.\n @param newOwner_ The owner of the the token-Metadata.\n @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n @param isNonDivisible_ Specify if the LSP7 token is a fungible or non-fungible token."},"id":1975,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1964,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2202:5:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1965,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2209:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1966,"name":"newOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"2218:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1967,"name":"lsp4TokenType_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2229:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1968,"kind":"baseConstructorSpecifier","modifierName":{"id":1963,"name":"LSP4DigitalAssetMetadata","nameLocations":["2177:24:19"],"nodeType":"IdentifierPath","referencedDeclaration":1657,"src":"2177:24:19"},"nodeType":"ModifierInvocation","src":"2177:67:19"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"name_","nameLocation":"2045:5:19","nodeType":"VariableDeclaration","scope":1975,"src":"2031:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1952,"name":"string","nodeType":"ElementaryTypeName","src":"2031:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"symbol_","nameLocation":"2074:7:19","nodeType":"VariableDeclaration","scope":1975,"src":"2060:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1954,"name":"string","nodeType":"ElementaryTypeName","src":"2060:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"newOwner_","nameLocation":"2099:9:19","nodeType":"VariableDeclaration","scope":1975,"src":"2091:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1956,"name":"address","nodeType":"ElementaryTypeName","src":"2091:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"lsp4TokenType_","nameLocation":"2126:14:19","nodeType":"VariableDeclaration","scope":1975,"src":"2118:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2118:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"isNonDivisible_","nameLocation":"2155:15:19","nodeType":"VariableDeclaration","scope":1975,"src":"2150:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1960,"name":"bool","nodeType":"ElementaryTypeName","src":"2150:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2021:155:19"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[],"src":"2245:0:19"},"scope":2151,"src":"2010:285:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1998,"nodeType":"Block","src":"4128:157:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1983,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4142:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4146:4:19","memberName":"data","nodeType":"MemberAccess","src":"4142:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4151:6:19","memberName":"length","nodeType":"MemberAccess","src":"4142:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4160:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4142:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1993,"nodeType":"IfStatement","src":"4138:90:19","trueBody":{"id":1992,"nodeType":"Block","src":"4163:65:19","statements":[{"errorCall":{"arguments":[{"id":1989,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"4208:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1988,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"4184:23:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4184:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1991,"nodeType":"RevertStatement","src":"4177:40:19"}]}},{"expression":{"arguments":[{"id":1995,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"4269:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1994,"name":"_fallbackLSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[2072],"referencedDeclaration":2072,"src":"4244:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes calldata) returns (bytes memory)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1982,"id":1997,"nodeType":"Return","src":"4237:41:19"}]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"2327:1647:19","text":" @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\n @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\n forwarding the function call to the extension address mapped to the function being called.\n This function is executed when:\n    - Sending data of length less than 4 bytes to the contract.\n    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\n    - Receiving native tokens\n 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\n   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\n 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert."},"id":1999,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"callData","nameLocation":"4065:8:19","nodeType":"VariableDeclaration","scope":1999,"src":"4050:23:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"4050:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4040:39:19"},"returnParameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1999,"src":"4114:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1980,"name":"bytes","nodeType":"ElementaryTypeName","src":"4114:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4113:14:19"},"scope":2151,"src":"4032:253:19","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":2016,"nodeType":"Block","src":"4486:205:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2003,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4547:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4551:5:19","memberName":"value","nodeType":"MemberAccess","src":"4547:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4560:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4547:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2012,"nodeType":"IfStatement","src":"4543:90:19","trueBody":{"id":2011,"nodeType":"Block","src":"4563:70:19","statements":[{"errorCall":{"arguments":[{"hexValue":"00000000","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"4608:13:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c","typeString":"literal_string hex\"00000000\""},"value":"\u0000\u0000\u0000\u0000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c","typeString":"literal_string hex\"00000000\""}],"id":2007,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"4584:23:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4584:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2010,"nodeType":"RevertStatement","src":"4577:45:19"}]}},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2013,"name":"LSP7TokenContractCannotHoldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"4650:32:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4650:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2015,"nodeType":"RevertStatement","src":"4643:41:19"}]},"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"4291:155:19","text":" @dev Reverts whenever someone tries to send native tokens to a LSP7 contract.\n @notice LSP7 contract cannot receive native tokens."},"id":2017,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2001,"nodeType":"ParameterList","parameters":[],"src":"4458:2:19"},"returnParameters":{"id":2002,"nodeType":"ParameterList","parameters":[],"src":"4486:0:19"},"scope":2151,"src":"4451:240:19","stateMutability":"payable","virtual":true,"visibility":"external"},{"baseFunctions":[792],"body":{"id":2071,"nodeType":"Block","src":"5741:919:19","statements":[{"assignments":[2027,null],"declarations":[{"constant":false,"id":2027,"mutability":"mutable","name":"extension","nameLocation":"5803:9:19","nodeType":"VariableDeclaration","scope":2071,"src":"5795:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2026,"name":"address","nodeType":"ElementaryTypeName","src":"5795:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":2032,"initialValue":{"arguments":[{"expression":{"id":2029,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5847:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5851:3:19","memberName":"sig","nodeType":"MemberAccess","src":"5847:7:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":2028,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[2123],"referencedDeclaration":2123,"src":"5818:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5818:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"5794:61:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"5915:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5936:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5928:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"5928:7:19","typeDescriptions":{}}},"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5928:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5915:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2044,"nodeType":"IfStatement","src":"5911:92:19","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2040,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5995:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5999:3:19","memberName":"sig","nodeType":"MemberAccess","src":"5995:7:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":2039,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"5959:35:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes4_$returns$__$","typeString":"function (bytes4) pure"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5959:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2043,"nodeType":"RevertStatement","src":"5952:51:19"}},{"assignments":[2046,2048],"declarations":[{"constant":false,"id":2046,"mutability":"mutable","name":"success","nameLocation":"6020:7:19","nodeType":"VariableDeclaration","scope":2071,"src":"6015:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2045,"name":"bool","nodeType":"ElementaryTypeName","src":"6015:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2048,"mutability":"mutable","name":"result","nameLocation":"6042:6:19","nodeType":"VariableDeclaration","scope":2071,"src":"6029:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2047,"name":"bytes","nodeType":"ElementaryTypeName","src":"6029:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2063,"initialValue":{"arguments":[{"arguments":[{"id":2056,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"6115:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"id":2057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6125:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6129:6:19","memberName":"sender","nodeType":"MemberAccess","src":"6125:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2059,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6137:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6141:5:19","memberName":"value","nodeType":"MemberAccess","src":"6137:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2054,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6098:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6102:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"6098:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6098:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2049,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"6052:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6062:4:19","memberName":"call","nodeType":"MemberAccess","src":"6052:14:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2051,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6074:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6078:5:19","memberName":"value","nodeType":"MemberAccess","src":"6074:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6052:32:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6052:105:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6014:143:19"},{"condition":{"id":2064,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"6172:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2069,"nodeType":"Block","src":"6225:429:19","statements":[{"AST":{"nodeType":"YulBlock","src":"6519:125:19","statements":[{"nodeType":"YulVariableDeclaration","src":"6537:36:19","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"6566:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6560:5:19"},"nodeType":"YulFunctionCall","src":"6560:13:19"},"variables":[{"name":"resultdata_size","nodeType":"YulTypedName","src":"6541:15:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"6601:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"6609:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6597:3:19"},"nodeType":"YulFunctionCall","src":"6597:15:19"},{"name":"resultdata_size","nodeType":"YulIdentifier","src":"6614:15:19"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6590:6:19"},"nodeType":"YulFunctionCall","src":"6590:40:19"},"nodeType":"YulExpressionStatement","src":"6590:40:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2048,"isOffset":false,"isSlot":false,"src":"6566:6:19","valueSize":1},{"declaration":2048,"isOffset":false,"isSlot":false,"src":"6601:6:19","valueSize":1}],"id":2068,"nodeType":"InlineAssembly","src":"6510:134:19"}]},"id":2070,"nodeType":"IfStatement","src":"6168:486:19","trueBody":{"id":2067,"nodeType":"Block","src":"6181:38:19","statements":[{"expression":{"id":2065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"6202:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2025,"id":2066,"nodeType":"Return","src":"6195:13:19"}]}}]},"documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"4697:917:19","text":" @dev Forwards the call with the received value to an extension mapped to a function selector.\n Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n called on the account. If there is no extension, the address(0) will be returned.\n Forwards the value if the extension is payable.\n Reverts if there is no extension for the function being called.\n If there is an extension for the function selector being called, it calls the extension with the\n CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\n 32 bytes of the {msg.value}\n @custom:info The LSP7 Token contract should not hold any native tokens. Any native tokens received by the contract\n will be forwarded to the extension address mapped to the selector from `msg.sig`."},"id":2072,"implemented":true,"kind":"function","modifiers":[],"name":"_fallbackLSP17Extendable","nameLocation":"5628:24:19","nodeType":"FunctionDefinition","overrides":{"id":2022,"nodeType":"OverrideSpecifier","overrides":[],"src":"5709:8:19"},"parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"callData","nameLocation":"5677:8:19","nodeType":"VariableDeclaration","scope":2072,"src":"5662:23:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2019,"name":"bytes","nodeType":"ElementaryTypeName","src":"5662:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5652:39:19"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2072,"src":"5727:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2023,"name":"bytes","nodeType":"ElementaryTypeName","src":"5727:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5726:14:19"},"scope":2151,"src":"5619:1041:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[733],"body":{"id":2122,"nodeType":"Block","src":"7174:619:19","statements":[{"assignments":[2084],"declarations":[{"constant":false,"id":2084,"mutability":"mutable","name":"mappedExtensionDataKey","nameLocation":"7272:22:19","nodeType":"VariableDeclaration","scope":2122,"src":"7264:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7264:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2090,"initialValue":{"arguments":[{"id":2087,"name":"_LSP17_EXTENSION_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"7339:23:19","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"id":2088,"name":"functionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"7376:16:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2085,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"7297:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1530_$","typeString":"type(library LSP2Utils)"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7307:18:19","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1020,"src":"7297:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7297:105:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7264:138:19"},{"assignments":[2092],"declarations":[{"constant":false,"id":2092,"mutability":"mutable","name":"extensionAddress","nameLocation":"7504:16:19","nodeType":"VariableDeclaration","scope":2122,"src":"7491:29:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2091,"name":"bytes","nodeType":"ElementaryTypeName","src":"7491:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2097,"initialValue":{"arguments":[{"id":2095,"name":"mappedExtensionDataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"7557:22:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2093,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"7523:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7535:8:19","memberName":"_getData","nodeType":"MemberAccess","referencedDeclaration":228,"src":"7523:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7523:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7491:98:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2098,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"7603:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7620:6:19","memberName":"length","nodeType":"MemberAccess","src":"7603:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3230","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7630:2:19","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"7603:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2102,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"7636:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7653:6:19","memberName":"length","nodeType":"MemberAccess","src":"7636:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7663:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7636:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7603:61:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2111,"nodeType":"IfStatement","src":"7599:127:19","trueBody":{"errorCall":{"arguments":[{"id":2108,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"7709:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2107,"name":"InvalidExtensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"7685:23:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7685:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2110,"nodeType":"RevertStatement","src":"7678:48:19"}},{"expression":{"components":[{"arguments":[{"arguments":[{"id":2116,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"7761:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7753:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":2114,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7753:7:19","typeDescriptions":{}}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7753:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":2113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7745:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"7745:7:19","typeDescriptions":{}}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7745:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":2119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7781:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"id":2120,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7744:42:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"functionReturnParameters":2082,"id":2121,"nodeType":"Return","src":"7737:49:19"}]},"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"6666:371:19","text":" @dev Returns the extension address stored under the following data key:\n - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\n - If no extension is stored, returns the address(0).\n - we do not check that payable bool as in lsp7 standard we will always forward the value to the extension"},"id":2123,"implemented":true,"kind":"function","modifiers":[],"name":"_getExtensionAndForwardValue","nameLocation":"7051:28:19","nodeType":"FunctionDefinition","overrides":{"id":2077,"nodeType":"OverrideSpecifier","overrides":[],"src":"7141:8:19"},"parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"functionSelector","nameLocation":"7096:16:19","nodeType":"VariableDeclaration","scope":2123,"src":"7089:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2074,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7089:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7079:39:19"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2123,"src":"7159:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"7159:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2123,"src":"7168:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2080,"name":"bool","nodeType":"ElementaryTypeName","src":"7168:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7158:15:19"},"scope":2151,"src":"7042:751:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[269,691,3717],"body":{"id":2149,"nodeType":"Block","src":"8030:200:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2135,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"8059:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2136,"name":"_INTERFACEID_LSP7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8074:17:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8059:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2140,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"8131:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2138,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"8107:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_LSP7DigitalAsset_$2151_$","typeString":"type(contract super LSP7DigitalAsset)"}},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8113:17:19","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":691,"src":"8107:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8107:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8059:84:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2145,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"8211:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2143,"name":"LSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"8159:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP17Extendable_$793_$","typeString":"type(contract LSP17Extendable)"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8175:35:19","memberName":"_supportsInterfaceInERC165Extension","nodeType":"MemberAccess","referencedDeclaration":723,"src":"8159:51:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8159:64:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8059:164:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2134,"id":2148,"nodeType":"Return","src":"8040:183:19"}]},"documentation":{"id":2124,"nodeType":"StructuredDocumentation","src":"7799:38:19","text":" @inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":2150,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"7851:17:19","nodeType":"FunctionDefinition","overrides":{"id":2131,"nodeType":"OverrideSpecifier","overrides":[{"id":2128,"name":"IERC165","nameLocations":["7964:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3718,"src":"7964:7:19"},{"id":2129,"name":"ERC725YCore","nameLocations":["7973:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"7973:11:19"},{"id":2130,"name":"LSP17Extendable","nameLocations":["7986:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":793,"src":"7986:15:19"}],"src":"7955:47:19"},"parameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"interfaceId","nameLocation":"7885:11:19","nodeType":"VariableDeclaration","scope":2150,"src":"7878:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2125,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7878:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7868:34:19"},"returnParameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"8020:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2132,"name":"bool","nodeType":"ElementaryTypeName","src":"8020:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8019:6:19"},"scope":2151,"src":"7842:388:19","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2152,"src":"1461:6771:19","usedErrors":[407,412,448,451,454,649,654,659,1724,1727,1730,3242,3253,3256,3259,3262,3267,3272,3275,3278,3281,3286,3291,3300,3309],"usedEvents":[307,468,1756,1767,1778]}],"src":"39:8194:19"},"id":19},"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol","exportedSymbols":{"ERC165Checker":[3706],"EnumerableSet":[4331],"ILSP1":[532],"ILSP7DigitalAsset":[1905],"LSP1Utils":[631],"LSP7AmountExceedsAuthorizedAmount":[3253],"LSP7AmountExceedsBalance":[3242],"LSP7BatchCallFailed":[3291],"LSP7CannotSendWithAddressZero":[3259],"LSP7CannotUseAddressZeroAsOperator":[3256],"LSP7DecreaseAllowanceNotAuthorized":[3309],"LSP7DecreasedAllowanceBelowZero":[3278],"LSP7DigitalAssetCore":[3231],"LSP7InvalidTransferBatch":[3262],"LSP7NotifyTokenReceiverContractMissingLSP1Interface":[3267],"LSP7NotifyTokenReceiverIsEOA":[3272],"LSP7RevokeOperatorNotAuthorized":[3300],"LSP7TokenOwnerCannotBeOperator":[3275],"OperatorAllowanceCannotBeIncreasedFromZero":[3286],"_INTERFACEID_LSP1":[537],"_TYPEID_LSP7_TOKENOPERATOR":[1919],"_TYPEID_LSP7_TOKENSRECIPIENT":[1916],"_TYPEID_LSP7_TOKENSSENDER":[1913]},"id":3232,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":2153,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:20"},{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","file":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","id":2155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":533,"src":"78:113:20","symbolAliases":[{"foreign":{"id":2154,"name":"ILSP1UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"91:22:20","typeDescriptions":{}},"local":"ILSP1","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","file":"./ILSP7DigitalAsset.sol","id":2157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":1906,"src":"192:58:20","symbolAliases":[{"foreign":{"id":2156,"name":"ILSP7DigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"200:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":2159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":4332,"src":"277:92:20","symbolAliases":[{"foreign":{"id":2158,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"290:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":2161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":3707,"src":"370:98:20","symbolAliases":[{"foreign":{"id":2160,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"383:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","file":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","id":2163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":632,"src":"469:72:20","symbolAliases":[{"foreign":{"id":2162,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"477:9:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Errors.sol","file":"./LSP7Errors.sol","id":2177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":3310,"src":"553:522:20","symbolAliases":[{"foreign":{"id":2164,"name":"LSP7AmountExceedsAuthorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"566:33:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2165,"name":"LSP7InvalidTransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"605:24:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2166,"name":"LSP7AmountExceedsBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"635:24:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2167,"name":"LSP7DecreasedAllowanceBelowZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"665:31:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2168,"name":"LSP7CannotUseAddressZeroAsOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"702:34:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2169,"name":"LSP7TokenOwnerCannotBeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"742:30:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2170,"name":"LSP7CannotSendWithAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"778:29:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2171,"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"813:51:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2172,"name":"LSP7NotifyTokenReceiverIsEOA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"870:28:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2173,"name":"OperatorAllowanceCannotBeIncreasedFromZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"904:42:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2174,"name":"LSP7BatchCallFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"952:19:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2175,"name":"LSP7RevokeOperatorNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"977:31:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2176,"name":"LSP7DecreaseAllowanceNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"1014:34:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","file":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","id":2179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":547,"src":"1090:90:20","symbolAliases":[{"foreign":{"id":2178,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1103:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Constants.sol","file":"./LSP7Constants.sol","id":2183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3232,"sourceUnit":1920,"src":"1181:134:20","symbolAliases":[{"foreign":{"id":2180,"name":"_TYPEID_LSP7_TOKENOPERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"1194:26:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2181,"name":"_TYPEID_LSP7_TOKENSSENDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"1226:25:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2182,"name":"_TYPEID_LSP7_TOKENSRECIPIENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"1257:28:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2185,"name":"ILSP7DigitalAsset","nameLocations":["1589:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":1905,"src":"1589:17:20"},"id":2186,"nodeType":"InheritanceSpecifier","src":"1589:17:20"}],"canonicalName":"LSP7DigitalAssetCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"1317:229:20","text":" @title LSP7DigitalAsset contract\n @author Matthew Stevens\n @dev Core Implementation of a LSP7 compliant contract.\n This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface."},"fullyImplemented":false,"id":3231,"linearizedBaseContracts":[3231,1905,505,3718],"name":"LSP7DigitalAssetCore","nameLocation":"1565:20:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2190,"libraryName":{"id":2187,"name":"EnumerableSet","nameLocations":["1619:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":4331,"src":"1619:13:20"},"nodeType":"UsingForDirective","src":"1613:49:20","typeName":{"id":2189,"nodeType":"UserDefinedTypeName","pathNode":{"id":2188,"name":"EnumerableSet.AddressSet","nameLocations":["1637:13:20","1651:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"1637:24:20"},"referencedDeclaration":4044,"src":"1637:24:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":2192,"mutability":"mutable","name":"_isNonDivisible","nameLocation":"1702:15:20","nodeType":"VariableDeclaration","scope":3231,"src":"1688:29:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2191,"name":"bool","nodeType":"ElementaryTypeName","src":"1688:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2194,"mutability":"mutable","name":"_existingTokens","nameLocation":"1741:15:20","nodeType":"VariableDeclaration","scope":3231,"src":"1724:32:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"_tokenOwnerBalances","nameLocation":"1858:19:20","nodeType":"VariableDeclaration","scope":3231,"src":"1821:56:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2197,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2195,"name":"address","nodeType":"ElementaryTypeName","src":"1829:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1821:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2196,"name":"uint256","nodeType":"ElementaryTypeName","src":"1840:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"_operators","nameLocation":"2004:10:20","nodeType":"VariableDeclaration","scope":3231,"src":"1950:64:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$4044_storage_$","typeString":"mapping(address => struct EnumerableSet.AddressSet)"},"typeName":{"id":2202,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2199,"name":"address","nodeType":"ElementaryTypeName","src":"1958:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1950:44:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$4044_storage_$","typeString":"mapping(address => struct EnumerableSet.AddressSet)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2201,"nodeType":"UserDefinedTypeName","pathNode":{"id":2200,"name":"EnumerableSet.AddressSet","nameLocations":["1969:13:20","1983:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"1969:24:20"},"referencedDeclaration":4044,"src":"1969:24:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"_operatorAuthorizedAmount","nameLocation":"2156:25:20","nodeType":"VariableDeclaration","scope":3231,"src":"2091:90:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":2208,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"2099:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2091:47:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2207,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"2118:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2110:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2129:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"baseFunctions":[1784],"body":{"id":2221,"nodeType":"Block","src":"2332:48:20","statements":[{"expression":{"condition":{"id":2216,"name":"_isNonDivisible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"2349:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3138","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2371:2:20","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2349:24:20","trueExpression":{"hexValue":"30","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2367:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":2215,"id":2220,"nodeType":"Return","src":"2342:31:20"}]},"documentation":{"id":2210,"nodeType":"StructuredDocumentation","src":"2214:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"313ce567","id":2222,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"2276:8:20","nodeType":"FunctionDefinition","overrides":{"id":2212,"nodeType":"OverrideSpecifier","overrides":[],"src":"2307:8:20"},"parameters":{"id":2211,"nodeType":"ParameterList","parameters":[],"src":"2284:2:20"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2222,"src":"2325:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2213,"name":"uint8","nodeType":"ElementaryTypeName","src":"2325:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2324:7:20"},"scope":3231,"src":"2267:113:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1790],"body":{"id":2231,"nodeType":"Block","src":"2509:39:20","statements":[{"expression":{"id":2229,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"2526:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2228,"id":2230,"nodeType":"Return","src":"2519:22:20"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"2386:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"18160ddd","id":2232,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2448:11:20","nodeType":"FunctionDefinition","overrides":{"id":2225,"nodeType":"OverrideSpecifier","overrides":[],"src":"2482:8:20"},"parameters":{"id":2224,"nodeType":"ParameterList","parameters":[],"src":"2459:2:20"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2232,"src":"2500:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"2500:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2499:9:20"},"scope":3231,"src":"2439:109:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1798],"body":{"id":2245,"nodeType":"Block","src":"2739:55:20","statements":[{"expression":{"baseExpression":{"id":2241,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2756:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2243,"indexExpression":{"id":2242,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"2776:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2756:31:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2240,"id":2244,"nodeType":"Return","src":"2749:38:20"}]},"documentation":{"id":2233,"nodeType":"StructuredDocumentation","src":"2586:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"70a08231","id":2246,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2648:9:20","nodeType":"FunctionDefinition","overrides":{"id":2237,"nodeType":"OverrideSpecifier","overrides":[],"src":"2712:8:20"},"parameters":{"id":2236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2235,"mutability":"mutable","name":"tokenOwner","nameLocation":"2675:10:20","nodeType":"VariableDeclaration","scope":2246,"src":"2667:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2234,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2657:34:20"},"returnParameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2246,"src":"2730:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2238,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2729:9:20"},"scope":3231,"src":"2639:155:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1904],"body":{"id":2315,"nodeType":"Block","src":"3119:967:20","statements":[{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2257,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"3129:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2261,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"3151:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3156:6:20","memberName":"length","nodeType":"MemberAccess","src":"3151:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3139:11:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":2258,"name":"bytes","nodeType":"ElementaryTypeName","src":"3143:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2259,"nodeType":"ArrayTypeName","src":"3143:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"3129:34:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2265,"nodeType":"ExpressionStatement","src":"3129:34:20"},{"body":{"id":2313,"nodeType":"Block","src":"3208:872:20","statements":[{"assignments":[2274,2276],"declarations":[{"constant":false,"id":2274,"mutability":"mutable","name":"success","nameLocation":"3228:7:20","nodeType":"VariableDeclaration","scope":2313,"src":"3223:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2273,"name":"bool","nodeType":"ElementaryTypeName","src":"3223:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2276,"mutability":"mutable","name":"result","nameLocation":"3250:6:20","nodeType":"VariableDeclaration","scope":2313,"src":"3237:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2275,"name":"bytes","nodeType":"ElementaryTypeName","src":"3237:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2286,"initialValue":{"arguments":[{"baseExpression":{"id":2282,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"3304:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2284,"indexExpression":{"id":2283,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"3309:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3304:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":2279,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3268:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_LSP7DigitalAssetCore_$3231","typeString":"contract LSP7DigitalAssetCore"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LSP7DigitalAssetCore_$3231","typeString":"contract LSP7DigitalAssetCore"}],"id":2278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3260:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"3260:7:20","typeDescriptions":{}}},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3274:12:20","memberName":"delegatecall","nodeType":"MemberAccess","src":"3260:26:20","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3222:103:20"},{"condition":{"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3344:8:20","subExpression":{"id":2287,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"3345:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2302,"nodeType":"IfStatement","src":"3340:636:20","trueBody":{"id":2301,"nodeType":"Block","src":"3354:622:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"3446:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3453:6:20","memberName":"length","nodeType":"MemberAccess","src":"3446:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3463:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3446:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2299,"nodeType":"Block","src":"3879:83:20","statements":[{"errorCall":{"arguments":[{"id":2296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"3940:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2295,"name":"LSP7BatchCallFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"3908:19:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["3929:9:20"],"names":["callIndex"],"nodeType":"FunctionCall","src":"3908:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2298,"nodeType":"RevertStatement","src":"3901:42:20"}]},"id":2300,"nodeType":"IfStatement","src":"3442:520:20","trueBody":{"id":2294,"nodeType":"Block","src":"3466:407:20","statements":[{"AST":{"nodeType":"YulBlock","src":"3706:149:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3732:36:20","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"3761:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3755:5:20"},"nodeType":"YulFunctionCall","src":"3755:13:20"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"3736:15:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3804:2:20","type":"","value":"32"},{"name":"result","nodeType":"YulIdentifier","src":"3808:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3800:3:20"},"nodeType":"YulFunctionCall","src":"3800:15:20"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"3817:15:20"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3793:6:20"},"nodeType":"YulFunctionCall","src":"3793:40:20"},"nodeType":"YulExpressionStatement","src":"3793:40:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2276,"isOffset":false,"isSlot":false,"src":"3761:6:20","valueSize":1},{"declaration":2276,"isOffset":false,"isSlot":false,"src":"3808:6:20","valueSize":1}],"id":2293,"nodeType":"InlineAssembly","src":"3697:158:20"}]}}]}},{"expression":{"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2303,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"3990:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2305,"indexExpression":{"id":2304,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"3998:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3990:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"4003:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3990:19:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2308,"nodeType":"ExpressionStatement","src":"3990:19:20"},{"id":2312,"nodeType":"UncheckedBlock","src":"4024:46:20","statements":[{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4052:3:20","subExpression":{"id":2309,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"4054:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"4052:3:20"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"3189:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2270,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"3193:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3198:6:20","memberName":"length","nodeType":"MemberAccess","src":"3193:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3189:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2314,"initializationExpression":{"assignments":[2267],"declarations":[{"constant":false,"id":2267,"mutability":"mutable","name":"i","nameLocation":"3186:1:20","nodeType":"VariableDeclaration","scope":2314,"src":"3178:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"3178:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2268,"nodeType":"VariableDeclarationStatement","src":"3178:9:20"},"nodeType":"ForStatement","src":"3173:907:20"}]},"documentation":{"id":2247,"nodeType":"StructuredDocumentation","src":"2834:166:20","text":" @inheritdoc ILSP7DigitalAsset\n @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`."},"functionSelector":"6963d438","id":2316,"implemented":true,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"3014:10:20","nodeType":"FunctionDefinition","overrides":{"id":2252,"nodeType":"OverrideSpecifier","overrides":[],"src":"3077:8:20"},"parameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"data","nameLocation":"3051:4:20","nodeType":"VariableDeclaration","scope":2316,"src":"3034:21:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2248,"name":"bytes","nodeType":"ElementaryTypeName","src":"3034:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2249,"nodeType":"ArrayTypeName","src":"3034:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3024:37:20"},"returnParameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"mutability":"mutable","name":"results","nameLocation":"3110:7:20","nodeType":"VariableDeclaration","scope":2316,"src":"3095:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2253,"name":"bytes","nodeType":"ElementaryTypeName","src":"3095:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2254,"nodeType":"ArrayTypeName","src":"3095:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3094:24:20"},"scope":3231,"src":"3005:1081:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1808],"body":{"id":2351,"nodeType":"Block","src":"4712:352:20","statements":[{"expression":{"arguments":[{"expression":{"id":2328,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4751:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4751:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2330,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2319,"src":"4775:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2331,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"4797:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4817:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2333,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"4835:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2327,"name":"_updateOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"4722:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4722:147:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2335,"nodeType":"ExpressionStatement","src":"4722:147:20"},{"assignments":[2337],"declarations":[{"constant":false,"id":2337,"mutability":"mutable","name":"lsp1Data","nameLocation":"4893:8:20","nodeType":"VariableDeclaration","scope":2351,"src":"4880:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2336,"name":"bytes","nodeType":"ElementaryTypeName","src":"4880:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2345,"initialValue":{"arguments":[{"expression":{"id":2340,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4928:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4932:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4928:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2342,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"4952:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2343,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"4972:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2338,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4904:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4908:6:20","memberName":"encode","nodeType":"MemberAccess","src":"4904:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4904:102:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4880:126:20"},{"expression":{"arguments":[{"id":2347,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2319,"src":"5038:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2348,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"5048:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2346,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"5017:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2350,"nodeType":"ExpressionStatement","src":"5017:40:20"}]},"documentation":{"id":2317,"nodeType":"StructuredDocumentation","src":"4127:426:20","text":" @inheritdoc ILSP7DigitalAsset\n @custom:danger To avoid front-running and Allowance Double-Spend Exploit when\n increasing or decreasing the authorized amount of an operator, it is advised to\n use the {increaseAllowance} and {decreaseAllowance} functions.\n For more information, see:\n https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/"},"functionSelector":"b49506fd","id":2352,"implemented":true,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"4567:17:20","nodeType":"FunctionDefinition","overrides":{"id":2325,"nodeType":"OverrideSpecifier","overrides":[],"src":"4703:8:20"},"parameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2319,"mutability":"mutable","name":"operator","nameLocation":"4602:8:20","nodeType":"VariableDeclaration","scope":2352,"src":"4594:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2318,"name":"address","nodeType":"ElementaryTypeName","src":"4594:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2321,"mutability":"mutable","name":"amount","nameLocation":"4628:6:20","nodeType":"VariableDeclaration","scope":2352,"src":"4620:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"4620:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2323,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"4657:24:20","nodeType":"VariableDeclaration","scope":2352,"src":"4644:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2322,"name":"bytes","nodeType":"ElementaryTypeName","src":"4644:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4584:103:20"},"returnParameters":{"id":2326,"nodeType":"ParameterList","parameters":[],"src":"4712:0:20"},"scope":3231,"src":"4558:506:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1820],"body":{"id":2408,"nodeType":"Block","src":"5299:625:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2365,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5313:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5317:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5313:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2367,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5327:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5313:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2369,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5341:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5345:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5341:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2371,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5355:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5341:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5313:50:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2382,"nodeType":"IfStatement","src":"5309:215:20","trueBody":{"id":2381,"nodeType":"Block","src":"5365:159:20","statements":[{"errorCall":{"arguments":[{"expression":{"id":2375,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5435:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5439:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5435:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2377,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5463:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2378,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5491:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2374,"name":"LSP7RevokeOperatorNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"5386:31:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address,address) pure"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5386:127:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2380,"nodeType":"RevertStatement","src":"5379:134:20"}]}},{"expression":{"arguments":[{"id":2384,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5563:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2385,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5587:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5609:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2387,"name":"notify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5624:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2388,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"5644:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2383,"name":"_updateOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"5534:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5534:144:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2390,"nodeType":"ExpressionStatement","src":"5534:144:20"},{"condition":{"id":2391,"name":"notify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5693:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2407,"nodeType":"IfStatement","src":"5689:229:20","trueBody":{"id":2406,"nodeType":"Block","src":"5701:217:20","statements":[{"assignments":[2393],"declarations":[{"constant":false,"id":2393,"mutability":"mutable","name":"lsp1Data","nameLocation":"5728:8:20","nodeType":"VariableDeclaration","scope":2406,"src":"5715:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2392,"name":"bytes","nodeType":"ElementaryTypeName","src":"5715:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2400,"initialValue":{"arguments":[{"id":2396,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5767:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5795:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2398,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"5814:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2394,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5739:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5743:6:20","memberName":"encode","nodeType":"MemberAccess","src":"5739:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5739:113:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5715:137:20"},{"expression":{"arguments":[{"id":2402,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5888:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2403,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"5898:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2401,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"5867:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5867:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2405,"nodeType":"ExpressionStatement","src":"5867:40:20"}]}}]},"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"5070:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"30d0dc37","id":2409,"implemented":true,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"5132:14:20","nodeType":"FunctionDefinition","overrides":{"id":2363,"nodeType":"OverrideSpecifier","overrides":[],"src":"5290:8:20"},"parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"operator","nameLocation":"5164:8:20","nodeType":"VariableDeclaration","scope":2409,"src":"5156:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"5156:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"tokenOwner","nameLocation":"5190:10:20","nodeType":"VariableDeclaration","scope":2409,"src":"5182:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"5182:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"notify","nameLocation":"5215:6:20","nodeType":"VariableDeclaration","scope":2409,"src":"5210:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2358,"name":"bool","nodeType":"ElementaryTypeName","src":"5210:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"5244:24:20","nodeType":"VariableDeclaration","scope":2409,"src":"5231:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2360,"name":"bytes","nodeType":"ElementaryTypeName","src":"5231:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5146:128:20"},"returnParameters":{"id":2364,"nodeType":"ParameterList","parameters":[],"src":"5299:0:20"},"scope":3231,"src":"5123:801:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1852],"body":{"id":2436,"nodeType":"Block","src":"6119:192:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2420,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"6133:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2421,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"6147:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6133:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2434,"nodeType":"Block","src":"6226:79:20","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2428,"name":"_operatorAuthorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"6247:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2430,"indexExpression":{"id":2429,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"6273:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6247:37:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2432,"indexExpression":{"id":2431,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"6285:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6247:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2419,"id":2433,"nodeType":"Return","src":"6240:54:20"}]},"id":2435,"nodeType":"IfStatement","src":"6129:176:20","trueBody":{"id":2427,"nodeType":"Block","src":"6157:63:20","statements":[{"expression":{"baseExpression":{"id":2423,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"6178:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2425,"indexExpression":{"id":2424,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"6198:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6178:31:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2419,"id":2426,"nodeType":"Return","src":"6171:38:20"}]}}]},"documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"5930:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"65aeaa95","id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"authorizedAmountFor","nameLocation":"5992:19:20","nodeType":"FunctionDefinition","overrides":{"id":2416,"nodeType":"OverrideSpecifier","overrides":[],"src":"6092:8:20"},"parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"operator","nameLocation":"6029:8:20","nodeType":"VariableDeclaration","scope":2437,"src":"6021:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2411,"name":"address","nodeType":"ElementaryTypeName","src":"6021:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2414,"mutability":"mutable","name":"tokenOwner","nameLocation":"6055:10:20","nodeType":"VariableDeclaration","scope":2437,"src":"6047:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"6047:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6011:60:20"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2437,"src":"6110:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"6110:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6109:9:20"},"scope":3231,"src":"5983:328:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1861],"body":{"id":2453,"nodeType":"Block","src":"6484:55:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2447,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6501:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$4044_storage_$","typeString":"mapping(address => struct EnumerableSet.AddressSet storage ref)"}},"id":2449,"indexExpression":{"id":2448,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"6512:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6501:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2450,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6524:6:20","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":4197,"src":"6501:29:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4044_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$4044_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (address[] memory)"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6501:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":2446,"id":2452,"nodeType":"Return","src":"6494:38:20"}]},"documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"6317:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"d72fc29a","id":2454,"implemented":true,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"6379:14:20","nodeType":"FunctionDefinition","overrides":{"id":2442,"nodeType":"OverrideSpecifier","overrides":[],"src":"6448:8:20"},"parameters":{"id":2441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2440,"mutability":"mutable","name":"tokenOwner","nameLocation":"6411:10:20","nodeType":"VariableDeclaration","scope":2454,"src":"6403:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"6403:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6393:34:20"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2454,"src":"6466:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2443,"name":"address","nodeType":"ElementaryTypeName","src":"6466:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2444,"nodeType":"ArrayTypeName","src":"6466:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6465:18:20"},"scope":3231,"src":"6370:169:20","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1830],"body":{"id":2511,"nodeType":"Block","src":"6757:603:20","statements":[{"assignments":[2466],"declarations":[{"constant":false,"id":2466,"mutability":"mutable","name":"oldAllowance","nameLocation":"6775:12:20","nodeType":"VariableDeclaration","scope":2511,"src":"6767:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"6767:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2472,"initialValue":{"arguments":[{"id":2468,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6810:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2469,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6820:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6824:6:20","memberName":"sender","nodeType":"MemberAccess","src":"6820:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2467,"name":"authorizedAmountFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6790:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6790:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6767:64:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2473,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"6845:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6861:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6845:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2480,"nodeType":"IfStatement","src":"6841:94:20","trueBody":{"errorCall":{"arguments":[{"id":2477,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6926:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2476,"name":"OperatorAllowanceCannotBeIncreasedFromZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"6883:42:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6883:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2479,"nodeType":"RevertStatement","src":"6876:59:20"}},{"assignments":[2482],"declarations":[{"constant":false,"id":2482,"mutability":"mutable","name":"newAllowance","nameLocation":"6954:12:20","nodeType":"VariableDeclaration","scope":2511,"src":"6946:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"6946:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2486,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2483,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"6969:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2484,"name":"addedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"6984:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6969:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6946:49:20"},{"expression":{"arguments":[{"expression":{"id":2488,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7035:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7039:6:20","memberName":"sender","nodeType":"MemberAccess","src":"7035:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2490,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7059:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2491,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"7081:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7107:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2493,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7125:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2487,"name":"_updateOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"7006:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7006:153:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2495,"nodeType":"ExpressionStatement","src":"7006:153:20"},{"assignments":[2497],"declarations":[{"constant":false,"id":2497,"mutability":"mutable","name":"lsp1Data","nameLocation":"7183:8:20","nodeType":"VariableDeclaration","scope":2511,"src":"7170:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2496,"name":"bytes","nodeType":"ElementaryTypeName","src":"7170:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2505,"initialValue":{"arguments":[{"expression":{"id":2500,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7218:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7222:6:20","memberName":"sender","nodeType":"MemberAccess","src":"7218:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2502,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"7242:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2503,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7268:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2498,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7194:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7198:6:20","memberName":"encode","nodeType":"MemberAccess","src":"7194:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:108:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7170:132:20"},{"expression":{"arguments":[{"id":2507,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7334:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2508,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"7344:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2506,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"7313:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7313:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2510,"nodeType":"ExpressionStatement","src":"7313:40:20"}]},"documentation":{"id":2455,"nodeType":"StructuredDocumentation","src":"6545:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"2bc1da82","id":2512,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6607:17:20","nodeType":"FunctionDefinition","overrides":{"id":2463,"nodeType":"OverrideSpecifier","overrides":[],"src":"6748:8:20"},"parameters":{"id":2462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2457,"mutability":"mutable","name":"operator","nameLocation":"6642:8:20","nodeType":"VariableDeclaration","scope":2512,"src":"6634:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2456,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"addedAmount","nameLocation":"6668:11:20","nodeType":"VariableDeclaration","scope":2512,"src":"6660:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"6660:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"6702:24:20","nodeType":"VariableDeclaration","scope":2512,"src":"6689:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2460,"name":"bytes","nodeType":"ElementaryTypeName","src":"6689:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6624:108:20"},"returnParameters":{"id":2464,"nodeType":"ParameterList","parameters":[],"src":"6757:0:20"},"scope":3231,"src":"6598:762:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1842],"body":{"id":2590,"nodeType":"Block","src":"7611:938:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2525,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7625:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7629:6:20","memberName":"sender","nodeType":"MemberAccess","src":"7625:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2527,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7639:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7625:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2529,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7653:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7657:6:20","memberName":"sender","nodeType":"MemberAccess","src":"7653:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2531,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"7667:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7653:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7625:50:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2542,"nodeType":"IfStatement","src":"7621:218:20","trueBody":{"id":2541,"nodeType":"Block","src":"7677:162:20","statements":[{"errorCall":{"arguments":[{"expression":{"id":2535,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7750:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7754:6:20","memberName":"sender","nodeType":"MemberAccess","src":"7750:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2537,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7778:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2538,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"7806:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2534,"name":"LSP7DecreaseAllowanceNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"7698:34:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address,address) pure"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7698:130:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2540,"nodeType":"RevertStatement","src":"7691:137:20"}]}},{"assignments":[2544],"declarations":[{"constant":false,"id":2544,"mutability":"mutable","name":"currentAllowance","nameLocation":"7857:16:20","nodeType":"VariableDeclaration","scope":2590,"src":"7849:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"7849:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2549,"initialValue":{"arguments":[{"id":2546,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"7896:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2547,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7906:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2545,"name":"authorizedAmountFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"7876:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7876:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7849:68:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2550,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"7931:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2551,"name":"subtractedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"7950:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7931:35:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2557,"nodeType":"IfStatement","src":"7927:106:20","trueBody":{"id":2556,"nodeType":"Block","src":"7968:65:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2553,"name":"LSP7DecreasedAllowanceBelowZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"7989:31:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7989:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2555,"nodeType":"RevertStatement","src":"7982:40:20"}]}},{"assignments":[2559],"declarations":[{"constant":false,"id":2559,"mutability":"mutable","name":"newAllowance","nameLocation":"8051:12:20","nodeType":"VariableDeclaration","scope":2590,"src":"8043:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"8043:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2560,"nodeType":"VariableDeclarationStatement","src":"8043:20:20"},{"id":2575,"nodeType":"UncheckedBlock","src":"8073:276:20","statements":[{"expression":{"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2561,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"8097:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"8112:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2563,"name":"subtractedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"8131:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8112:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:50:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2566,"nodeType":"ExpressionStatement","src":"8097:50:20"},{"expression":{"arguments":[{"id":2568,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"8194:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2569,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"8222:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2570,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"8248:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8278:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2572,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"8300:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2567,"name":"_updateOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"8161:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8161:177:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2574,"nodeType":"ExpressionStatement","src":"8161:177:20"}]},{"assignments":[2577],"declarations":[{"constant":false,"id":2577,"mutability":"mutable","name":"lsp1Data","nameLocation":"8372:8:20","nodeType":"VariableDeclaration","scope":2590,"src":"8359:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2576,"name":"bytes","nodeType":"ElementaryTypeName","src":"8359:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2584,"initialValue":{"arguments":[{"id":2580,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"8407:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2581,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"8431:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2582,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"8457:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2578,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8383:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8387:6:20","memberName":"encode","nodeType":"MemberAccess","src":"8383:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8383:108:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8359:132:20"},{"expression":{"arguments":[{"id":2586,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"8523:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2587,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"8533:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2585,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"8502:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8502:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2589,"nodeType":"ExpressionStatement","src":"8502:40:20"}]},"documentation":{"id":2513,"nodeType":"StructuredDocumentation","src":"7366:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"78381670","id":2591,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"7428:17:20","nodeType":"FunctionDefinition","overrides":{"id":2523,"nodeType":"OverrideSpecifier","overrides":[],"src":"7602:8:20"},"parameters":{"id":2522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"operator","nameLocation":"7463:8:20","nodeType":"VariableDeclaration","scope":2591,"src":"7455:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"7455:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"tokenOwner","nameLocation":"7489:10:20","nodeType":"VariableDeclaration","scope":2591,"src":"7481:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2516,"name":"address","nodeType":"ElementaryTypeName","src":"7481:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"subtractedAmount","nameLocation":"7517:16:20","nodeType":"VariableDeclaration","scope":2591,"src":"7509:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"7509:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"7556:24:20","nodeType":"VariableDeclaration","scope":2591,"src":"7543:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2520,"name":"bytes","nodeType":"ElementaryTypeName","src":"7543:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7445:141:20"},"returnParameters":{"id":2524,"nodeType":"ParameterList","parameters":[],"src":"7611:0:20"},"scope":3231,"src":"7419:1130:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1875],"body":{"id":2627,"nodeType":"Block","src":"8804:258:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2606,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8818:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8822:6:20","memberName":"sender","nodeType":"MemberAccess","src":"8818:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2608,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"8832:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8818:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2618,"nodeType":"IfStatement","src":"8814:191:20","trueBody":{"id":2617,"nodeType":"Block","src":"8838:167:20","statements":[{"expression":{"arguments":[{"expression":{"id":2611,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8896:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8900:6:20","memberName":"sender","nodeType":"MemberAccess","src":"8896:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2613,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"8936:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2614,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"8973:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2610,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"8852:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["8886:8:20","8924:10:20","8958:13:20"],"names":["operator","tokenOwner","amountToSpend"],"nodeType":"FunctionCall","src":"8852:142:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2616,"nodeType":"ExpressionStatement","src":"8852:142:20"}]}},{"expression":{"arguments":[{"id":2620,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"9025:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2621,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"9031:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2622,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"9035:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2623,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"9043:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2624,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"9050:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2619,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"9015:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9015:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2626,"nodeType":"ExpressionStatement","src":"9015:40:20"}]},"documentation":{"id":2592,"nodeType":"StructuredDocumentation","src":"8590:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"760d9bba","id":2628,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"8652:8:20","nodeType":"FunctionDefinition","overrides":{"id":2604,"nodeType":"OverrideSpecifier","overrides":[],"src":"8795:8:20"},"parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2594,"mutability":"mutable","name":"from","nameLocation":"8678:4:20","nodeType":"VariableDeclaration","scope":2628,"src":"8670:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2593,"name":"address","nodeType":"ElementaryTypeName","src":"8670:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2596,"mutability":"mutable","name":"to","nameLocation":"8700:2:20","nodeType":"VariableDeclaration","scope":2628,"src":"8692:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2595,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2598,"mutability":"mutable","name":"amount","nameLocation":"8720:6:20","nodeType":"VariableDeclaration","scope":2628,"src":"8712:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"8712:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2600,"mutability":"mutable","name":"force","nameLocation":"8741:5:20","nodeType":"VariableDeclaration","scope":2628,"src":"8736:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2599,"name":"bool","nodeType":"ElementaryTypeName","src":"8736:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"data","nameLocation":"8769:4:20","nodeType":"VariableDeclaration","scope":2628,"src":"8756:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2601,"name":"bytes","nodeType":"ElementaryTypeName","src":"8756:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8660:119:20"},"returnParameters":{"id":2605,"nodeType":"ParameterList","parameters":[],"src":"8804:0:20"},"scope":3231,"src":"8643:419:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1894],"body":{"id":2707,"nodeType":"Block","src":"9325:575:20","statements":[{"assignments":[2649],"declarations":[{"constant":false,"id":2649,"mutability":"mutable","name":"fromLength","nameLocation":"9343:10:20","nodeType":"VariableDeclaration","scope":2707,"src":"9335:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2648,"name":"uint256","nodeType":"ElementaryTypeName","src":"9335:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2652,"initialValue":{"expression":{"id":2650,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"9356:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9361:6:20","memberName":"length","nodeType":"MemberAccess","src":"9356:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9335:32:20"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2653,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"9394:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2654,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"9408:2:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9411:6:20","memberName":"length","nodeType":"MemberAccess","src":"9408:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9394:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2657,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"9433:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2658,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"9447:6:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9454:6:20","memberName":"length","nodeType":"MemberAccess","src":"9447:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9433:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9394:66:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2662,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"9476:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2663,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"9490:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9496:6:20","memberName":"length","nodeType":"MemberAccess","src":"9490:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9476:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9394:108:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"9518:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2668,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"9532:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9537:6:20","memberName":"length","nodeType":"MemberAccess","src":"9532:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9518:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9394:149:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2676,"nodeType":"IfStatement","src":"9377:235:20","trueBody":{"id":2675,"nodeType":"Block","src":"9554:58:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2672,"name":"LSP7InvalidTransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9575:24:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9575:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2674,"nodeType":"RevertStatement","src":"9568:33:20"}]}},{"body":{"id":2705,"nodeType":"Block","src":"9656:238:20","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2684,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"9778:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2686,"indexExpression":{"id":2685,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9783:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9778:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2687,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"9787:2:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2689,"indexExpression":{"id":2688,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9790:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9787:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2690,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"9794:6:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2692,"indexExpression":{"id":2691,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9801:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9794:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2693,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"9805:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2695,"indexExpression":{"id":2694,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9811:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9805:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"baseExpression":{"id":2696,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"9815:4:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2698,"indexExpression":{"id":2697,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9820:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9815:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2683,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"9769:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9769:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2700,"nodeType":"ExpressionStatement","src":"9769:54:20"},{"id":2704,"nodeType":"UncheckedBlock","src":"9838:46:20","statements":[{"expression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9866:3:20","subExpression":{"id":2701,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9868:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2703,"nodeType":"ExpressionStatement","src":"9866:3:20"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2680,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"9638:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2681,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"9642:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9638:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2706,"initializationExpression":{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"i","nameLocation":"9635:1:20","nodeType":"VariableDeclaration","scope":2706,"src":"9627:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"9627:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2679,"nodeType":"VariableDeclarationStatement","src":"9627:9:20"},"nodeType":"ForStatement","src":"9622:272:20"}]},"documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"9068:48:20","text":" @inheritdoc ILSP7DigitalAsset"},"functionSelector":"2d7667c9","id":2708,"implemented":true,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"9130:13:20","nodeType":"FunctionDefinition","overrides":{"id":2646,"nodeType":"OverrideSpecifier","overrides":[],"src":"9316:8:20"},"parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"from","nameLocation":"9170:4:20","nodeType":"VariableDeclaration","scope":2708,"src":"9153:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"9153:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2631,"nodeType":"ArrayTypeName","src":"9153:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"to","nameLocation":"9201:2:20","nodeType":"VariableDeclaration","scope":2708,"src":"9184:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2633,"name":"address","nodeType":"ElementaryTypeName","src":"9184:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2634,"nodeType":"ArrayTypeName","src":"9184:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2638,"mutability":"mutable","name":"amount","nameLocation":"9230:6:20","nodeType":"VariableDeclaration","scope":2708,"src":"9213:23:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"9213:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2637,"nodeType":"ArrayTypeName","src":"9213:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"force","nameLocation":"9260:5:20","nodeType":"VariableDeclaration","scope":2708,"src":"9246:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2639,"name":"bool","nodeType":"ElementaryTypeName","src":"9246:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2640,"nodeType":"ArrayTypeName","src":"9246:6:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"data","nameLocation":"9290:4:20","nodeType":"VariableDeclaration","scope":2708,"src":"9275:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2642,"name":"bytes","nodeType":"ElementaryTypeName","src":"9275:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2643,"nodeType":"ArrayTypeName","src":"9275:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"9143:157:20"},"returnParameters":{"id":2647,"nodeType":"ParameterList","parameters":[],"src":"9325:0:20"},"scope":3231,"src":"9121:779:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2783,"nodeType":"Block","src":"11323:799:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2722,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11337:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11357:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11349:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"11349:7:20","typeDescriptions":{}}},"id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11349:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11337:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2732,"nodeType":"IfStatement","src":"11333:96:20","trueBody":{"id":2731,"nodeType":"Block","src":"11361:68:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2728,"name":"LSP7CannotUseAddressZeroAsOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"11382:34:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2730,"nodeType":"RevertStatement","src":"11375:43:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2733,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11443:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2734,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"11455:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11443:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2740,"nodeType":"IfStatement","src":"11439:92:20","trueBody":{"id":2739,"nodeType":"Block","src":"11467:64:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2736,"name":"LSP7TokenOwnerCannotBeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"11488:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11488:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"RevertStatement","src":"11481:39:20"}]}},{"expression":{"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2741,"name":"_operatorAuthorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"11541:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2744,"indexExpression":{"id":2742,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"11567:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11541:37:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2745,"indexExpression":{"id":2743,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11579:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11541:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2746,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"11591:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11541:59:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2748,"nodeType":"ExpressionStatement","src":"11541:59:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"11615:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11628:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11615:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2781,"nodeType":"Block","src":"11882:234:20","statements":[{"expression":{"arguments":[{"id":2771,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11926:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":2767,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"11896:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$4044_storage_$","typeString":"mapping(address => struct EnumerableSet.AddressSet storage ref)"}},"id":2769,"indexExpression":{"id":2768,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"11907:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11896:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2770,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11919:6:20","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4098,"src":"11896:29:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4044_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4044_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11896:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2773,"nodeType":"ExpressionStatement","src":"11896:39:20"},{"eventCall":{"arguments":[{"id":2775,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11987:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2776,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"12013:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2777,"name":"notified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"12041:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2778,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"12067:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2774,"name":"OperatorRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"11954:15:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bool,bytes memory)"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11954:151:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2780,"nodeType":"EmitStatement","src":"11949:156:20"}]},"id":2782,"nodeType":"IfStatement","src":"11611:505:20","trueBody":{"id":2766,"nodeType":"Block","src":"11631:245:20","statements":[{"expression":{"arguments":[{"id":2756,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11672:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":2752,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"11645:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$4044_storage_$","typeString":"mapping(address => struct EnumerableSet.AddressSet storage ref)"}},"id":2754,"indexExpression":{"id":2753,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"11656:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11645:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11668:3:20","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4071,"src":"11645:26:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4044_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4044_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11645:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2758,"nodeType":"ExpressionStatement","src":"11645:36:20"},{"eventCall":{"arguments":[{"id":2760,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"11746:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2761,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"11772:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2762,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"11800:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2763,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"11827:24:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2759,"name":"OperatorAuthorizationChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"11700:28:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11700:165:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2765,"nodeType":"EmitStatement","src":"11695:170:20"}]}}]},"documentation":{"id":2709,"nodeType":"StructuredDocumentation","src":"9906:1213:20","text":" @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens.\n If the amount is zero the operator is removed from the list of operators, otherwise he is added to the list of operators.\n If the amount is zero then the operator is being revoked, otherwise the operator amount is being modified.\n @param tokenOwner The address that will give `operator` an allowance for on its balance.\n @param operator The address to grant an allowance to spend.\n @param allowance The maximum amount of token that `operator` can spend from the `tokenOwner`'s balance.\n @param notified Boolean indicating whether the operator has been notified about the change of allowance\n @param operatorNotificationData The data to send to the universalReceiver function of the operator in case of notifying\n @custom:events\n - {OperatorRevoked} event when operator's allowance is set to `0`.\n - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\n @custom:requirements\n - `operator` cannot be the zero address.\n - `operator` cannot be the same address as `tokenOwner`."},"id":2784,"implemented":true,"kind":"function","modifiers":[],"name":"_updateOperator","nameLocation":"11133:15:20","nodeType":"FunctionDefinition","parameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2711,"mutability":"mutable","name":"tokenOwner","nameLocation":"11166:10:20","nodeType":"VariableDeclaration","scope":2784,"src":"11158:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2710,"name":"address","nodeType":"ElementaryTypeName","src":"11158:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2713,"mutability":"mutable","name":"operator","nameLocation":"11194:8:20","nodeType":"VariableDeclaration","scope":2784,"src":"11186:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2712,"name":"address","nodeType":"ElementaryTypeName","src":"11186:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"allowance","nameLocation":"11220:9:20","nodeType":"VariableDeclaration","scope":2784,"src":"11212:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2714,"name":"uint256","nodeType":"ElementaryTypeName","src":"11212:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"notified","nameLocation":"11244:8:20","nodeType":"VariableDeclaration","scope":2784,"src":"11239:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2716,"name":"bool","nodeType":"ElementaryTypeName","src":"11239:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2719,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"11275:24:20","nodeType":"VariableDeclaration","scope":2784,"src":"11262:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2718,"name":"bytes","nodeType":"ElementaryTypeName","src":"11262:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11148:157:20"},"returnParameters":{"id":2721,"nodeType":"ParameterList","parameters":[],"src":"11323:0:20"},"scope":3231,"src":"11124:998:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2871,"nodeType":"Block","src":"13108:739:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2796,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13122:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13136:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13128:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"13128:7:20","typeDescriptions":{}}},"id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13128:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13122:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2806,"nodeType":"IfStatement","src":"13118:85:20","trueBody":{"id":2805,"nodeType":"Block","src":"13140:63:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2802,"name":"LSP7CannotSendWithAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"13161:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13161:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2804,"nodeType":"RevertStatement","src":"13154:38:20"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13242:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13234:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2808,"name":"address","nodeType":"ElementaryTypeName","src":"13234:7:20","typeDescriptions":{}}},"id":2811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13234:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13246:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2813,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13250:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2814,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"13258:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2807,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"13213:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13213:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2816,"nodeType":"ExpressionStatement","src":"13213:50:20"},{"expression":{"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2817,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"13305:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2818,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13324:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13305:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2820,"nodeType":"ExpressionStatement","src":"13305:25:20"},{"expression":{"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2821,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"13341:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2823,"indexExpression":{"id":2822,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13361:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13341:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2824,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13368:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13341:33:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2826,"nodeType":"ExpressionStatement","src":"13341:33:20"},{"eventCall":{"arguments":[{"expression":{"id":2828,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13423:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13427:6:20","memberName":"sender","nodeType":"MemberAccess","src":"13423:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13461:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13453:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"13453:7:20","typeDescriptions":{}}},"id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13453:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2834,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13481:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2835,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13505:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2836,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"13532:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2837,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"13557:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2827,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"13390:8:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bool,bytes memory)"}},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["13413:8:20","13447:4:20","13477:2:20","13497:6:20","13525:5:20","13551:4:20"],"names":["operator","from","to","amount","force","data"],"nodeType":"FunctionCall","src":"13390:182:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2839,"nodeType":"EmitStatement","src":"13385:187:20"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13611:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13603:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2841,"name":"address","nodeType":"ElementaryTypeName","src":"13603:7:20","typeDescriptions":{}}},"id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13603:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2845,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13615:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2846,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13619:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2847,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"13627:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2840,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"13583:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13583:49:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2849,"nodeType":"ExpressionStatement","src":"13583:49:20"},{"assignments":[2851],"declarations":[{"constant":false,"id":2851,"mutability":"mutable","name":"lsp1Data","nameLocation":"13656:8:20","nodeType":"VariableDeclaration","scope":2871,"src":"13643:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2850,"name":"bytes","nodeType":"ElementaryTypeName","src":"13643:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2864,"initialValue":{"arguments":[{"expression":{"id":2854,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13691:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13695:6:20","memberName":"sender","nodeType":"MemberAccess","src":"13691:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13723:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13715:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2856,"name":"address","nodeType":"ElementaryTypeName","src":"13715:7:20","typeDescriptions":{}}},"id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13715:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2860,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13739:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2861,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"13755:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2862,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"13775:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2852,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13667:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13671:6:20","memberName":"encode","nodeType":"MemberAccess","src":"13667:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13667:122:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"13643:146:20"},{"expression":{"arguments":[{"id":2866,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"13820:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2867,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"13824:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2868,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"13831:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2865,"name":"_notifyTokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"13799:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bool,bytes memory)"}},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13799:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2870,"nodeType":"ExpressionStatement","src":"13799:41:20"}]},"documentation":{"id":2785,"nodeType":"StructuredDocumentation","src":"12128:846:20","text":" @dev Mints `amount` of tokens and transfers it to `to`.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances.\n - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the recipient via LSP1**.\n @param to The address to mint tokens for.\n @param amount The amount of tokens to mint.\n @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n @param data Additional data the caller wants included in the emitted {Transfer} event, and sent in the LSP1 hook to the `to` address.\n @custom:requirements\n - `to` cannot be the zero address.\n @custom:events {Transfer} event with `address(0)` as `from`."},"id":2872,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"12988:5:20","nodeType":"FunctionDefinition","parameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2787,"mutability":"mutable","name":"to","nameLocation":"13011:2:20","nodeType":"VariableDeclaration","scope":2872,"src":"13003:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2786,"name":"address","nodeType":"ElementaryTypeName","src":"13003:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"amount","nameLocation":"13031:6:20","nodeType":"VariableDeclaration","scope":2872,"src":"13023:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"13023:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2791,"mutability":"mutable","name":"force","nameLocation":"13052:5:20","nodeType":"VariableDeclaration","scope":2872,"src":"13047:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2790,"name":"bool","nodeType":"ElementaryTypeName","src":"13047:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2793,"mutability":"mutable","name":"data","nameLocation":"13080:4:20","nodeType":"VariableDeclaration","scope":2872,"src":"13067:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2792,"name":"bytes","nodeType":"ElementaryTypeName","src":"13067:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12993:97:20"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"13108:0:20"},"scope":3231,"src":"12979:868:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2973,"nodeType":"Block","src":"15417:906:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2882,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15431:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15447:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15439:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2883,"name":"address","nodeType":"ElementaryTypeName","src":"15439:7:20","typeDescriptions":{}}},"id":2886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15439:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15431:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2892,"nodeType":"IfStatement","src":"15427:87:20","trueBody":{"id":2891,"nodeType":"Block","src":"15451:63:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2888,"name":"LSP7CannotSendWithAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"15472:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15472:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2890,"nodeType":"RevertStatement","src":"15465:38:20"}]}},{"expression":{"arguments":[{"id":2894,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15545:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15559:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15551:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2895,"name":"address","nodeType":"ElementaryTypeName","src":"15551:7:20","typeDescriptions":{}}},"id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15551:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2899,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15563:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2900,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"15571:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2893,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"15524:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15524:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"ExpressionStatement","src":"15524:52:20"},{"assignments":[2904],"declarations":[{"constant":false,"id":2904,"mutability":"mutable","name":"balance","nameLocation":"15595:7:20","nodeType":"VariableDeclaration","scope":2973,"src":"15587:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"15587:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2908,"initialValue":{"baseExpression":{"id":2905,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"15605:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2907,"indexExpression":{"id":2906,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15625:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15605:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15587:43:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2909,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15644:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2910,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"15653:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15644:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2919,"nodeType":"IfStatement","src":"15640:101:20","trueBody":{"id":2918,"nodeType":"Block","src":"15662:79:20","statements":[{"errorCall":{"arguments":[{"id":2913,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"15708:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2914,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15717:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2915,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15723:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2912,"name":"LSP7AmountExceedsBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"15683:24:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256) pure"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15683:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2917,"nodeType":"RevertStatement","src":"15676:54:20"}]}},{"expression":{"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2920,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"15780:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2921,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15799:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15780:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2923,"nodeType":"ExpressionStatement","src":"15780:25:20"},{"expression":{"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2924,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"15816:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2926,"indexExpression":{"id":2925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15836:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15816:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2927,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15845:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15816:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2929,"nodeType":"ExpressionStatement","src":"15816:35:20"},{"eventCall":{"arguments":[{"expression":{"id":2931,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15900:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15904:6:20","memberName":"sender","nodeType":"MemberAccess","src":"15900:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2933,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"15930:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15960:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15952:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2934,"name":"address","nodeType":"ElementaryTypeName","src":"15952:7:20","typeDescriptions":{}}},"id":2937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15952:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2938,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"15984:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16011:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":2940,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"16036:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2930,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"15867:8:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bool,bytes memory)"}},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["15890:8:20","15924:4:20","15948:2:20","15976:6:20","16004:5:20","16030:4:20"],"names":["operator","from","to","amount","force","data"],"nodeType":"FunctionCall","src":"15867:184:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2942,"nodeType":"EmitStatement","src":"15862:189:20"},{"expression":{"arguments":[{"id":2944,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"16082:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16096:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16088:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2945,"name":"address","nodeType":"ElementaryTypeName","src":"16088:7:20","typeDescriptions":{}}},"id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16088:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2949,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"16100:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2950,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"16108:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2943,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"16062:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16062:51:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2952,"nodeType":"ExpressionStatement","src":"16062:51:20"},{"assignments":[2954],"declarations":[{"constant":false,"id":2954,"mutability":"mutable","name":"lsp1Data","nameLocation":"16137:8:20","nodeType":"VariableDeclaration","scope":2973,"src":"16124:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2953,"name":"bytes","nodeType":"ElementaryTypeName","src":"16124:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2967,"initialValue":{"arguments":[{"expression":{"id":2957,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16172:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16176:6:20","memberName":"sender","nodeType":"MemberAccess","src":"16172:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2959,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"16196:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16222:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16214:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2960,"name":"address","nodeType":"ElementaryTypeName","src":"16214:7:20","typeDescriptions":{}}},"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16214:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2964,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"16238:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2965,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"16258:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2955,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"16148:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16152:6:20","memberName":"encode","nodeType":"MemberAccess","src":"16148:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16148:124:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"16124:148:20"},{"expression":{"arguments":[{"id":2969,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"16301:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2970,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"16307:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2968,"name":"_notifyTokenSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"16282:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16282:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2972,"nodeType":"ExpressionStatement","src":"16282:34:20"}]},"documentation":{"id":2873,"nodeType":"StructuredDocumentation","src":"13853:1448:20","text":" @dev Burns (= destroys) `amount` of tokens, decrease the `from` balance. This is done by sending them to the zero address.\n Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\n function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n all the parameters in the calldata packed encoded.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances.\n - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender via LSP1**.\n @param from The address to burn tokens from its balance.\n @param amount The amount of tokens to burn.\n @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\n @custom:hint In dApps, you can know which address is burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\n @custom:requirements\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens.\n - If the caller is not `from`, it must be an operator for `from` with access to at least\n `amount` tokens.\n @custom:events {Transfer} event with `address(0)` as the `to` address"},"id":2974,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"15315:5:20","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"from","nameLocation":"15338:4:20","nodeType":"VariableDeclaration","scope":2974,"src":"15330:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2874,"name":"address","nodeType":"ElementaryTypeName","src":"15330:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"amount","nameLocation":"15360:6:20","nodeType":"VariableDeclaration","scope":2974,"src":"15352:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2876,"name":"uint256","nodeType":"ElementaryTypeName","src":"15352:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"data","nameLocation":"15389:4:20","nodeType":"VariableDeclaration","scope":2974,"src":"15376:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2878,"name":"bytes","nodeType":"ElementaryTypeName","src":"15376:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15320:79:20"},"returnParameters":{"id":2881,"nodeType":"ParameterList","parameters":[],"src":"15417:0:20"},"scope":3231,"src":"15306:1017:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3014,"nodeType":"Block","src":"17320:593:20","statements":[{"assignments":[2985],"declarations":[{"constant":false,"id":2985,"mutability":"mutable","name":"authorizedAmount","nameLocation":"17338:16:20","nodeType":"VariableDeclaration","scope":3014,"src":"17330:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2984,"name":"uint256","nodeType":"ElementaryTypeName","src":"17330:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2991,"initialValue":{"baseExpression":{"baseExpression":{"id":2986,"name":"_operatorAuthorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"17357:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2988,"indexExpression":{"id":2987,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"17383:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17357:37:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2990,"indexExpression":{"id":2989,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"17408:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17357:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17330:96:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2992,"name":"amountToSpend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"17441:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2993,"name":"authorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"17457:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17441:32:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3003,"nodeType":"IfStatement","src":"17437:236:20","trueBody":{"id":3002,"nodeType":"Block","src":"17475:198:20","statements":[{"errorCall":{"arguments":[{"id":2996,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"17547:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2997,"name":"authorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"17575:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2998,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"17609:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2999,"name":"amountToSpend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"17635:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2995,"name":"LSP7AmountExceedsAuthorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"17496:33:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256,address,uint256) pure"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17496:166:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3001,"nodeType":"RevertStatement","src":"17489:173:20"}]}},{"expression":{"arguments":[{"id":3005,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"17725:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3006,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"17759:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3007,"name":"authorizedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"17792:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3008,"name":"amountToSpend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"17811:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17792:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":3010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17848:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17893:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3004,"name":"_updateOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"17683:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bool,bytes memory)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["17713:10:20","17749:8:20","17781:9:20","17838:8:20","17867:24:20"],"names":["tokenOwner","operator","allowance","notified","operatorNotificationData"],"nodeType":"FunctionCall","src":"17683:223:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3013,"nodeType":"ExpressionStatement","src":"17683:223:20"}]},"documentation":{"id":2975,"nodeType":"StructuredDocumentation","src":"16329:853:20","text":" @dev Spend `amountToSpend` from the `operator`'s authorized on behalf of the `tokenOwner`.\n @param operator The address of the operator to decrease the allowance of.\n @param tokenOwner The address that granted an allowance on its balance to `operator`.\n @param amountToSpend The amount of tokens to substract in allowance of `operator`.\n @custom:events\n - {OperatorRevoked} event when operator's allowance is set to `0`.\n - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\n @custom:requirements\n - The `amountToSpend` MUST be at least the allowance granted to `operator` (accessible via {`authorizedAmountFor}`)\n - `operator` cannot be the zero address.\n - `operator` cannot be the same address as `tokenOwner`."},"id":3015,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"17196:15:20","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"operator","nameLocation":"17229:8:20","nodeType":"VariableDeclaration","scope":3015,"src":"17221:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2976,"name":"address","nodeType":"ElementaryTypeName","src":"17221:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2979,"mutability":"mutable","name":"tokenOwner","nameLocation":"17255:10:20","nodeType":"VariableDeclaration","scope":3015,"src":"17247:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2978,"name":"address","nodeType":"ElementaryTypeName","src":"17247:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"amountToSpend","nameLocation":"17283:13:20","nodeType":"VariableDeclaration","scope":3015,"src":"17275:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"17275:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17211:91:20"},"returnParameters":{"id":2983,"nodeType":"ParameterList","parameters":[],"src":"17320:0:20"},"scope":3231,"src":"17187:726:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3123,"nodeType":"Block","src":"19476:854:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3029,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19490:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19506:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19498:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3030,"name":"address","nodeType":"ElementaryTypeName","src":"19498:7:20","typeDescriptions":{}}},"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19498:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19490:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"19512:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19526:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19518:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3036,"name":"address","nodeType":"ElementaryTypeName","src":"19518:7:20","typeDescriptions":{}}},"id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19518:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19512:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19490:38:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3046,"nodeType":"IfStatement","src":"19486:107:20","trueBody":{"id":3045,"nodeType":"Block","src":"19530:63:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3042,"name":"LSP7CannotSendWithAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"19551:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19551:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3044,"nodeType":"RevertStatement","src":"19544:38:20"}]}},{"expression":{"arguments":[{"id":3048,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19624:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3049,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"19630:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3050,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"19634:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3051,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"19642:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3047,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"19603:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19603:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3053,"nodeType":"ExpressionStatement","src":"19603:44:20"},{"assignments":[3055],"declarations":[{"constant":false,"id":3055,"mutability":"mutable","name":"balance","nameLocation":"19666:7:20","nodeType":"VariableDeclaration","scope":3123,"src":"19658:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3054,"name":"uint256","nodeType":"ElementaryTypeName","src":"19658:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3059,"initialValue":{"baseExpression":{"id":3056,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"19676:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3058,"indexExpression":{"id":3057,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19696:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19676:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19658:43:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3060,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"19715:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3061,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"19724:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19715:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3070,"nodeType":"IfStatement","src":"19711:101:20","trueBody":{"id":3069,"nodeType":"Block","src":"19733:79:20","statements":[{"errorCall":{"arguments":[{"id":3064,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"19779:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3065,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19788:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3066,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"19794:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3063,"name":"LSP7AmountExceedsBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"19754:24:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256) pure"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19754:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3068,"nodeType":"RevertStatement","src":"19747:54:20"}]}},{"expression":{"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3071,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"19822:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3073,"indexExpression":{"id":3072,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19842:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19822:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3074,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"19851:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19822:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3076,"nodeType":"ExpressionStatement","src":"19822:35:20"},{"expression":{"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3077,"name":"_tokenOwnerBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"19867:19:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3079,"indexExpression":{"id":3078,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"19887:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19867:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3080,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"19894:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19867:33:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3082,"nodeType":"ExpressionStatement","src":"19867:33:20"},{"eventCall":{"arguments":[{"expression":{"id":3084,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19949:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19953:6:20","memberName":"sender","nodeType":"MemberAccess","src":"19949:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3086,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"19979:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3087,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"20001:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3088,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"20025:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3089,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"20052:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3090,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"20077:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3083,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"19916:8:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bool,bytes memory)"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["19939:8:20","19973:4:20","19997:2:20","20017:6:20","20045:5:20","20071:4:20"],"names":["operator","from","to","amount","force","data"],"nodeType":"FunctionCall","src":"19916:176:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3092,"nodeType":"EmitStatement","src":"19911:181:20"},{"expression":{"arguments":[{"id":3094,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"20123:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3095,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"20129:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3096,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"20133:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3097,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"20141:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3093,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"20103:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20103:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3099,"nodeType":"ExpressionStatement","src":"20103:43:20"},{"assignments":[3101],"declarations":[{"constant":false,"id":3101,"mutability":"mutable","name":"lsp1Data","nameLocation":"20170:8:20","nodeType":"VariableDeclaration","scope":3123,"src":"20157:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3100,"name":"bytes","nodeType":"ElementaryTypeName","src":"20157:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3111,"initialValue":{"arguments":[{"expression":{"id":3104,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20192:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20196:6:20","memberName":"sender","nodeType":"MemberAccess","src":"20192:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3106,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"20204:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"20210:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3108,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"20214:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3109,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"20222:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3102,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20181:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20185:6:20","memberName":"encode","nodeType":"MemberAccess","src":"20181:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20181:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"20157:70:20"},{"expression":{"arguments":[{"id":3113,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"20257:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3114,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"20263:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3112,"name":"_notifyTokenSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"20238:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20238:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3116,"nodeType":"ExpressionStatement","src":"20238:34:20"},{"expression":{"arguments":[{"id":3118,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"20303:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3119,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"20307:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3120,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"20314:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3117,"name":"_notifyTokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"20282:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bool,bytes memory)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20282:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3122,"nodeType":"ExpressionStatement","src":"20282:41:20"}]},"documentation":{"id":3016,"nodeType":"StructuredDocumentation","src":"17919:1397:20","text":" @dev Transfer tokens from `from` to `to` by decreasing the balance of `from` by `-amount` and increasing the balance\n of `to` by `+amount`.\n Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\n function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n all the parameters in the calldata packed encoded.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances.\n - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender/recipient via LSP1**.\n @param from The address to decrease the balance.\n @param to The address to increase the balance.\n @param amount The amount of tokens to transfer from `from` to `to`.\n @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\n @custom:requirements\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have at least `amount` of tokens.\n @custom:events {Transfer} event."},"id":3124,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"19330:9:20","nodeType":"FunctionDefinition","parameters":{"id":3027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"from","nameLocation":"19357:4:20","nodeType":"VariableDeclaration","scope":3124,"src":"19349:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"19349:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3020,"mutability":"mutable","name":"to","nameLocation":"19379:2:20","nodeType":"VariableDeclaration","scope":3124,"src":"19371:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3019,"name":"address","nodeType":"ElementaryTypeName","src":"19371:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3022,"mutability":"mutable","name":"amount","nameLocation":"19399:6:20","nodeType":"VariableDeclaration","scope":3124,"src":"19391:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3021,"name":"uint256","nodeType":"ElementaryTypeName","src":"19391:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3024,"mutability":"mutable","name":"force","nameLocation":"19420:5:20","nodeType":"VariableDeclaration","scope":3124,"src":"19415:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3023,"name":"bool","nodeType":"ElementaryTypeName","src":"19415:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3026,"mutability":"mutable","name":"data","nameLocation":"19448:4:20","nodeType":"VariableDeclaration","scope":3124,"src":"19435:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3025,"name":"bytes","nodeType":"ElementaryTypeName","src":"19435:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19339:119:20"},"returnParameters":{"id":3028,"nodeType":"ParameterList","parameters":[],"src":"19476:0:20"},"scope":3231,"src":"19321:1009:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3136,"nodeType":"Block","src":"20946:2:20","statements":[]},"documentation":{"id":3125,"nodeType":"StructuredDocumentation","src":"20336:414:20","text":" @dev Hook that is called before any token transfer, including minting and burning.\n Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\n @param from The sender address\n @param to The recipient address\n @param amount The amount of token to transfer\n @param data The data sent alongside the transfer"},"id":3137,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"20764:20:20","nodeType":"FunctionDefinition","parameters":{"id":3134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3127,"mutability":"mutable","name":"from","nameLocation":"20802:4:20","nodeType":"VariableDeclaration","scope":3137,"src":"20794:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3126,"name":"address","nodeType":"ElementaryTypeName","src":"20794:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3129,"mutability":"mutable","name":"to","nameLocation":"20824:2:20","nodeType":"VariableDeclaration","scope":3137,"src":"20816:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3128,"name":"address","nodeType":"ElementaryTypeName","src":"20816:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3131,"mutability":"mutable","name":"amount","nameLocation":"20844:6:20","nodeType":"VariableDeclaration","scope":3137,"src":"20836:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3130,"name":"uint256","nodeType":"ElementaryTypeName","src":"20836:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3133,"mutability":"mutable","name":"data","nameLocation":"20873:4:20","nodeType":"VariableDeclaration","scope":3137,"src":"20860:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3132,"name":"bytes","nodeType":"ElementaryTypeName","src":"20860:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20784:144:20"},"returnParameters":{"id":3135,"nodeType":"ParameterList","parameters":[],"src":"20946:0:20"},"scope":3231,"src":"20755:193:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3149,"nodeType":"Block","src":"21573:2:20","statements":[]},"documentation":{"id":3138,"nodeType":"StructuredDocumentation","src":"20954:424:20","text":" @dev Hook that is called after any token transfer, including minting and burning.\n Allows to run custom logic after updating balances, but **before notifiying sender/recipient** by overriding this function.\n @param from The sender address\n @param to The recipient address\n @param amount The amount of token to transfer\n @param data The data sent alongside the transfer"},"id":3150,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"21392:19:20","nodeType":"FunctionDefinition","parameters":{"id":3147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3140,"mutability":"mutable","name":"from","nameLocation":"21429:4:20","nodeType":"VariableDeclaration","scope":3150,"src":"21421:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3139,"name":"address","nodeType":"ElementaryTypeName","src":"21421:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"to","nameLocation":"21451:2:20","nodeType":"VariableDeclaration","scope":3150,"src":"21443:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3141,"name":"address","nodeType":"ElementaryTypeName","src":"21443:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3144,"mutability":"mutable","name":"amount","nameLocation":"21471:6:20","nodeType":"VariableDeclaration","scope":3150,"src":"21463:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"21463:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3146,"mutability":"mutable","name":"data","nameLocation":"21500:4:20","nodeType":"VariableDeclaration","scope":3150,"src":"21487:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3145,"name":"bytes","nodeType":"ElementaryTypeName","src":"21487:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21411:144:20"},"returnParameters":{"id":3148,"nodeType":"ParameterList","parameters":[],"src":"21573:0:20"},"scope":3231,"src":"21383:192:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3166,"nodeType":"Block","src":"22309:144:20","statements":[{"expression":{"arguments":[{"id":3161,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"22366:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3162,"name":"_TYPEID_LSP7_TOKENOPERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"22388:26:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3163,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"22428:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3158,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"22319:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP1Utils_$631_$","typeString":"type(library LSP1Utils)"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22329:23:20","memberName":"notifyUniversalReceiver","nodeType":"MemberAccess","referencedDeclaration":587,"src":"22319:33:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22319:127:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3165,"nodeType":"ExpressionStatement","src":"22319:127:20"}]},"documentation":{"id":3151,"nodeType":"StructuredDocumentation","src":"21581:613:20","text":" @dev Attempt to notify the operator `operator` about the `amount` tokens being authorized with.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\n If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n @param operator The address to call the {universalReceiver} function on.\n @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call."},"id":3167,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenOperator","nameLocation":"22208:20:20","nodeType":"FunctionDefinition","parameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3153,"mutability":"mutable","name":"operator","nameLocation":"22246:8:20","nodeType":"VariableDeclaration","scope":3167,"src":"22238:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3152,"name":"address","nodeType":"ElementaryTypeName","src":"22238:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3155,"mutability":"mutable","name":"lsp1Data","nameLocation":"22277:8:20","nodeType":"VariableDeclaration","scope":3167,"src":"22264:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3154,"name":"bytes","nodeType":"ElementaryTypeName","src":"22264:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22228:63:20"},"returnParameters":{"id":3157,"nodeType":"ParameterList","parameters":[],"src":"22309:0:20"},"scope":3231,"src":"22199:254:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3183,"nodeType":"Block","src":"23163:139:20","statements":[{"expression":{"arguments":[{"id":3178,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"23220:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3179,"name":"_TYPEID_LSP7_TOKENSSENDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"23238:25:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3180,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"23277:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3175,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"23173:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP1Utils_$631_$","typeString":"type(library LSP1Utils)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23183:23:20","memberName":"notifyUniversalReceiver","nodeType":"MemberAccess","referencedDeclaration":587,"src":"23173:33:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory)"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23173:122:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3182,"nodeType":"ExpressionStatement","src":"23173:122:20"}]},"documentation":{"id":3168,"nodeType":"StructuredDocumentation","src":"22459:595:20","text":" @dev Attempt to notify the token sender `from` about the `amount` of tokens being transferred.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\n If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n @param from The address to call the {universalReceiver} function on.\n @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call."},"id":3184,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenSender","nameLocation":"23068:18:20","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"from","nameLocation":"23104:4:20","nodeType":"VariableDeclaration","scope":3184,"src":"23096:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"23096:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"lsp1Data","nameLocation":"23131:8:20","nodeType":"VariableDeclaration","scope":3184,"src":"23118:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3171,"name":"bytes","nodeType":"ElementaryTypeName","src":"23118:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23086:59:20"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"23163:0:20"},"scope":3231,"src":"23059:243:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3229,"nodeType":"Block","src":"24322:491:20","statements":[{"condition":{"arguments":[{"id":3196,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"24413:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3197,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"24433:17:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3194,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"24349:13:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$3706_$","typeString":"type(library ERC165Checker)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24363:32:20","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3705,"src":"24349:46:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24349:115:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24577:6:20","subExpression":{"id":3208,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"24578:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3227,"nodeType":"IfStatement","src":"24573:234:20","trueBody":{"id":3226,"nodeType":"Block","src":"24585:222:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3210,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"24603:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24606:4:20","memberName":"code","nodeType":"MemberAccess","src":"24603:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24611:6:20","memberName":"length","nodeType":"MemberAccess","src":"24603:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24621:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24603:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3224,"nodeType":"Block","src":"24725:72:20","statements":[{"errorCall":{"arguments":[{"id":3221,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"24779:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3220,"name":"LSP7NotifyTokenReceiverIsEOA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"24750:28:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24750:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3223,"nodeType":"RevertStatement","src":"24743:39:20"}]},"id":3225,"nodeType":"IfStatement","src":"24599:198:20","trueBody":{"id":3219,"nodeType":"Block","src":"24624:95:20","statements":[{"errorCall":{"arguments":[{"id":3216,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"24701:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3215,"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"24649:51:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24649:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3218,"nodeType":"RevertStatement","src":"24642:62:20"}]}}]}},"id":3228,"nodeType":"IfStatement","src":"24332:475:20","trueBody":{"id":3207,"nodeType":"Block","src":"24475:92:20","statements":[{"expression":{"arguments":[{"id":3203,"name":"_TYPEID_LSP7_TOKENSRECIPIENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"24517:28:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3204,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"24547:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3200,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"24495:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3199,"name":"ILSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"24489:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILSP1UniversalReceiver_$532_$","typeString":"type(contract ILSP1UniversalReceiver)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24489:9:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILSP1UniversalReceiver_$532","typeString":"contract ILSP1UniversalReceiver"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24499:17:20","memberName":"universalReceiver","nodeType":"MemberAccess","referencedDeclaration":531,"src":"24489:27:20","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes memory) payable external returns (bytes memory)"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24489:67:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3206,"nodeType":"ExpressionStatement","src":"24489:67:20"}]}}]},"documentation":{"id":3185,"nodeType":"StructuredDocumentation","src":"23308:885:20","text":" @dev Attempt to notify the token receiver `to` about the `amount` tokens being received.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\n If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\n - if `force` is set to `true`, nothing will happen and no notification will be sent.\n - if `force` is set to `false, the transaction will revert.\n @param to The address to call the {universalReceiver} function on.\n @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call."},"id":3230,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenReceiver","nameLocation":"24207:20:20","nodeType":"FunctionDefinition","parameters":{"id":3192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3187,"mutability":"mutable","name":"to","nameLocation":"24245:2:20","nodeType":"VariableDeclaration","scope":3230,"src":"24237:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3186,"name":"address","nodeType":"ElementaryTypeName","src":"24237:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3189,"mutability":"mutable","name":"force","nameLocation":"24262:5:20","nodeType":"VariableDeclaration","scope":3230,"src":"24257:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3188,"name":"bool","nodeType":"ElementaryTypeName","src":"24257:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3191,"mutability":"mutable","name":"lsp1Data","nameLocation":"24290:8:20","nodeType":"VariableDeclaration","scope":3230,"src":"24277:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3190,"name":"bytes","nodeType":"ElementaryTypeName","src":"24277:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24227:77:20"},"returnParameters":{"id":3193,"nodeType":"ParameterList","parameters":[],"src":"24322:0:20"},"scope":3231,"src":"24198:615:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3232,"src":"1547:23268:20","usedErrors":[3242,3253,3256,3259,3262,3267,3272,3275,3278,3286,3291,3300,3309],"usedEvents":[468,1756,1767,1778]}],"src":"39:24777:20"},"id":20},"@lukso/lsp7-contracts/contracts/LSP7Errors.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7Errors.sol","exportedSymbols":{"LSP7AmountExceedsAuthorizedAmount":[3253],"LSP7AmountExceedsBalance":[3242],"LSP7BatchCallFailed":[3291],"LSP7CannotSendWithAddressZero":[3259],"LSP7CannotUseAddressZeroAsOperator":[3256],"LSP7DecreaseAllowanceNotAuthorized":[3309],"LSP7DecreasedAllowanceBelowZero":[3278],"LSP7InvalidTransferBatch":[3262],"LSP7NotifyTokenReceiverContractMissingLSP1Interface":[3267],"LSP7NotifyTokenReceiverIsEOA":[3272],"LSP7RevokeOperatorNotAuthorized":[3300],"LSP7TokenContractCannotHoldValue":[3281],"LSP7TokenOwnerCannotBeOperator":[3275],"OperatorAllowanceCannotBeIncreasedFromZero":[3286]},"id":3310,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":3233,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:21"},{"documentation":{"id":3234,"nodeType":"StructuredDocumentation","src":"79:113:21","text":" @dev reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."},"errorSelector":"08d47949","id":3242,"name":"LSP7AmountExceedsBalance","nameLocation":"199:24:21","nodeType":"ErrorDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"balance","nameLocation":"237:7:21","nodeType":"VariableDeclaration","scope":3242,"src":"229:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3235,"name":"uint256","nodeType":"ElementaryTypeName","src":"229:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3238,"mutability":"mutable","name":"tokenOwner","nameLocation":"258:10:21","nodeType":"VariableDeclaration","scope":3242,"src":"250:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3237,"name":"address","nodeType":"ElementaryTypeName","src":"250:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3240,"mutability":"mutable","name":"amount","nameLocation":"282:6:21","nodeType":"VariableDeclaration","scope":3242,"src":"274:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"274:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"223:67:21"},"src":"193:98:21"},{"documentation":{"id":3243,"nodeType":"StructuredDocumentation","src":"293:121:21","text":" @dev reverts when `operator` of `tokenOwner` send an `amount` of tokens\n larger than the `authorizedAmount`."},"errorSelector":"f3a6b691","id":3253,"name":"LSP7AmountExceedsAuthorizedAmount","nameLocation":"421:33:21","nodeType":"ErrorDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3245,"mutability":"mutable","name":"tokenOwner","nameLocation":"468:10:21","nodeType":"VariableDeclaration","scope":3253,"src":"460:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3244,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"authorizedAmount","nameLocation":"492:16:21","nodeType":"VariableDeclaration","scope":3253,"src":"484:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3246,"name":"uint256","nodeType":"ElementaryTypeName","src":"484:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3249,"mutability":"mutable","name":"operator","nameLocation":"522:8:21","nodeType":"VariableDeclaration","scope":3253,"src":"514:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3248,"name":"address","nodeType":"ElementaryTypeName","src":"514:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3251,"mutability":"mutable","name":"amount","nameLocation":"544:6:21","nodeType":"VariableDeclaration","scope":3253,"src":"536:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"536:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:98:21"},"src":"415:138:21"},{"documentation":{"id":3254,"nodeType":"StructuredDocumentation","src":"555:75:21","text":" @dev reverts when trying to set the zero address as an operator."},"errorSelector":"6355e766","id":3256,"name":"LSP7CannotUseAddressZeroAsOperator","nameLocation":"637:34:21","nodeType":"ErrorDefinition","parameters":{"id":3255,"nodeType":"ParameterList","parameters":[],"src":"671:2:21"},"src":"631:43:21"},{"documentation":{"id":3257,"nodeType":"StructuredDocumentation","src":"676:167:21","text":" @dev reverts when trying to:\n - mint tokens to the zero address.\n - burn tokens from the zero address.\n - transfer tokens from or to the zero address."},"errorSelector":"d2d5ec30","id":3259,"name":"LSP7CannotSendWithAddressZero","nameLocation":"850:29:21","nodeType":"ErrorDefinition","parameters":{"id":3258,"nodeType":"ParameterList","parameters":[],"src":"879:2:21"},"src":"844:38:21"},{"documentation":{"id":3260,"nodeType":"StructuredDocumentation","src":"884:97:21","text":" @dev reverts when the array parameters used in {transferBatch} have different lengths."},"errorSelector":"263eee8d","id":3262,"name":"LSP7InvalidTransferBatch","nameLocation":"988:24:21","nodeType":"ErrorDefinition","parameters":{"id":3261,"nodeType":"ParameterList","parameters":[],"src":"1012:2:21"},"src":"982:33:21"},{"documentation":{"id":3263,"nodeType":"StructuredDocumentation","src":"1017:143:21","text":" @dev reverts if the `tokenReceiver` does not implement LSP1\n when minting or transferring tokens with `bool force` set as `false`."},"errorSelector":"a608fbb6","id":3267,"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","nameLocation":"1167:51:21","nodeType":"ErrorDefinition","parameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3265,"mutability":"mutable","name":"tokenReceiver","nameLocation":"1232:13:21","nodeType":"VariableDeclaration","scope":3267,"src":"1224:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3264,"name":"address","nodeType":"ElementaryTypeName","src":"1224:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1218:29:21"},"src":"1161:87:21"},{"documentation":{"id":3268,"nodeType":"StructuredDocumentation","src":"1250:126:21","text":" @dev reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."},"errorSelector":"26c247f4","id":3272,"name":"LSP7NotifyTokenReceiverIsEOA","nameLocation":"1383:28:21","nodeType":"ErrorDefinition","parameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"tokenReceiver","nameLocation":"1420:13:21","nodeType":"VariableDeclaration","scope":3272,"src":"1412:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3269,"name":"address","nodeType":"ElementaryTypeName","src":"1412:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1411:23:21"},"src":"1377:58:21"},{"documentation":{"id":3273,"nodeType":"StructuredDocumentation","src":"1437:92:21","text":" @dev reverts when trying to authorize or revoke the token's owner as an operator."},"errorSelector":"dab75047","id":3275,"name":"LSP7TokenOwnerCannotBeOperator","nameLocation":"1536:30:21","nodeType":"ErrorDefinition","parameters":{"id":3274,"nodeType":"ParameterList","parameters":[],"src":"1566:2:21"},"src":"1530:39:21"},{"documentation":{"id":3276,"nodeType":"StructuredDocumentation","src":"1571:107:21","text":" @dev Reverts when trying to decrease an operator's allowance to more than its current allowance."},"errorSelector":"0ef76c35","id":3278,"name":"LSP7DecreasedAllowanceBelowZero","nameLocation":"1685:31:21","nodeType":"ErrorDefinition","parameters":{"id":3277,"nodeType":"ParameterList","parameters":[],"src":"1716:2:21"},"src":"1679:40:21"},{"documentation":{"id":3279,"nodeType":"StructuredDocumentation","src":"1721:255:21","text":" @dev Error occurs when sending native tokens to the LSP7 contract without sending any data.\n E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\n @notice LSP7 contract cannot receive native tokens."},"errorSelector":"388f5adc","id":3281,"name":"LSP7TokenContractCannotHoldValue","nameLocation":"1983:32:21","nodeType":"ErrorDefinition","parameters":{"id":3280,"nodeType":"ParameterList","parameters":[],"src":"2015:2:21"},"src":"1977:41:21"},{"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"2020:114:21","text":" @dev Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"},"errorSelector":"cba6e977","id":3286,"name":"OperatorAllowanceCannotBeIncreasedFromZero","nameLocation":"2141:42:21","nodeType":"ErrorDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"operator","nameLocation":"2192:8:21","nodeType":"VariableDeclaration","scope":3286,"src":"2184:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3283,"name":"address","nodeType":"ElementaryTypeName","src":"2184:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2183:18:21"},"src":"2135:67:21"},{"documentation":{"id":3287,"nodeType":"StructuredDocumentation","src":"2204:79:21","text":" @dev Reverts when a batch call failed.\n @notice Batch call failed."},"errorSelector":"b774c284","id":3291,"name":"LSP7BatchCallFailed","nameLocation":"2290:19:21","nodeType":"ErrorDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"callIndex","nameLocation":"2318:9:21","nodeType":"VariableDeclaration","scope":3291,"src":"2310:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2309:19:21"},"src":"2284:45:21"},{"documentation":{"id":3292,"nodeType":"StructuredDocumentation","src":"2331:75:21","text":" @dev Reverts when the call to revoke operator is not authorized."},"errorSelector":"1a525b32","id":3300,"name":"LSP7RevokeOperatorNotAuthorized","nameLocation":"2413:31:21","nodeType":"ErrorDefinition","parameters":{"id":3299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"caller","nameLocation":"2458:6:21","nodeType":"VariableDeclaration","scope":3300,"src":"2450:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3293,"name":"address","nodeType":"ElementaryTypeName","src":"2450:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3296,"mutability":"mutable","name":"tokenOwner","nameLocation":"2478:10:21","nodeType":"VariableDeclaration","scope":3300,"src":"2470:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3295,"name":"address","nodeType":"ElementaryTypeName","src":"2470:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3298,"mutability":"mutable","name":"operator","nameLocation":"2502:8:21","nodeType":"VariableDeclaration","scope":3300,"src":"2494:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3297,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2444:68:21"},"src":"2407:106:21"},{"documentation":{"id":3301,"nodeType":"StructuredDocumentation","src":"2515:78:21","text":" @dev Reverts when the call to decrease allowance is not authorized."},"errorSelector":"98ce2945","id":3309,"name":"LSP7DecreaseAllowanceNotAuthorized","nameLocation":"2600:34:21","nodeType":"ErrorDefinition","parameters":{"id":3308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3303,"mutability":"mutable","name":"caller","nameLocation":"2648:6:21","nodeType":"VariableDeclaration","scope":3309,"src":"2640:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3302,"name":"address","nodeType":"ElementaryTypeName","src":"2640:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3305,"mutability":"mutable","name":"tokenOwner","nameLocation":"2668:10:21","nodeType":"VariableDeclaration","scope":3309,"src":"2660:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"2660:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3307,"mutability":"mutable","name":"operator","nameLocation":"2692:8:21","nodeType":"VariableDeclaration","scope":3309,"src":"2684:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3306,"name":"address","nodeType":"ElementaryTypeName","src":"2684:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2634:68:21"},"src":"2594:109:21"}],"src":"39:2665:21"},"id":21},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3487],"Ownable":[3457]},"id":3458,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3311,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3458,"sourceUnit":3488,"src":"128:45:22","symbolAliases":[{"foreign":{"id":3312,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"136:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3315,"name":"Context","nameLocations":["692:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":3487,"src":"692:7:22"},"id":3316,"nodeType":"InheritanceSpecifier","src":"692:7:22"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3314,"nodeType":"StructuredDocumentation","src":"175:487:22","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":3457,"linearizedBaseContracts":[3457,3487],"name":"Ownable","nameLocation":"681:7:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3318,"mutability":"mutable","name":"_owner","nameLocation":"722:6:22","nodeType":"VariableDeclaration","scope":3457,"src":"706:22:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3317,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":3319,"nodeType":"StructuredDocumentation","src":"735:85:22","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":3323,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:22","nodeType":"ErrorDefinition","parameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"account","nameLocation":"866:7:22","nodeType":"VariableDeclaration","scope":3323,"src":"858:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:22"},"src":"825:50:22"},{"documentation":{"id":3324,"nodeType":"StructuredDocumentation","src":"881:82:22","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":3328,"name":"OwnableInvalidOwner","nameLocation":"974:19:22","nodeType":"ErrorDefinition","parameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"owner","nameLocation":"1002:5:22","nodeType":"VariableDeclaration","scope":3328,"src":"994:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3325,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:22"},"src":"968:41:22"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":3334,"name":"OwnershipTransferred","nameLocation":"1021:20:22","nodeType":"EventDefinition","parameters":{"id":3333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3330,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:22","nodeType":"VariableDeclaration","scope":3334,"src":"1042:29:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3329,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3332,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:22","nodeType":"VariableDeclaration","scope":3334,"src":"1073:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3331,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:22"},"src":"1015:84:22"},{"body":{"id":3359,"nodeType":"Block","src":"1259:153:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3340,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"1273:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3341,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:22","typeDescriptions":{}}},"id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3354,"nodeType":"IfStatement","src":"1269:95:22","trueBody":{"id":3353,"nodeType":"Block","src":"1301:63:22","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3347,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:22","typeDescriptions":{}}},"id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3346,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"1322:19:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3352,"nodeType":"RevertStatement","src":"1315:38:22"}]}},{"expression":{"arguments":[{"id":3356,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"1392:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3355,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"1373:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3358,"nodeType":"ExpressionStatement","src":"1373:32:22"}]},"documentation":{"id":3335,"nodeType":"StructuredDocumentation","src":"1105:115:22","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":3360,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3337,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:22","nodeType":"VariableDeclaration","scope":3360,"src":"1237:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3336,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:22"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[],"src":"1259:0:22"},"scope":3457,"src":"1225:187:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3367,"nodeType":"Block","src":"1521:41:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3363,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1531:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3365,"nodeType":"ExpressionStatement","src":"1531:13:22"},{"id":3366,"nodeType":"PlaceholderStatement","src":"1554:1:22"}]},"documentation":{"id":3361,"nodeType":"StructuredDocumentation","src":"1418:77:22","text":" @dev Throws if called by any account other than the owner."},"id":3368,"name":"onlyOwner","nameLocation":"1509:9:22","nodeType":"ModifierDefinition","parameters":{"id":3362,"nodeType":"ParameterList","parameters":[],"src":"1518:2:22"},"src":"1500:62:22","virtual":false,"visibility":"internal"},{"body":{"id":3376,"nodeType":"Block","src":"1693:30:22","statements":[{"expression":{"id":3374,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"1710:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3373,"id":3375,"nodeType":"Return","src":"1703:13:22"}]},"documentation":{"id":3369,"nodeType":"StructuredDocumentation","src":"1568:65:22","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":3377,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:22","nodeType":"FunctionDefinition","parameters":{"id":3370,"nodeType":"ParameterList","parameters":[],"src":"1652:2:22"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3377,"src":"1684:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3371,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:22"},"scope":3457,"src":"1638:85:22","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3393,"nodeType":"Block","src":"1841:117:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3381,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"1855:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3383,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"1866:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3392,"nodeType":"IfStatement","src":"1851:101:22","trueBody":{"id":3391,"nodeType":"Block","src":"1880:72:22","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3387,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"1928:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3386,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"1901:26:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3390,"nodeType":"RevertStatement","src":"1894:47:22"}]}}]},"documentation":{"id":3378,"nodeType":"StructuredDocumentation","src":"1729:62:22","text":" @dev Throws if the sender is not the owner."},"id":3394,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:22","nodeType":"FunctionDefinition","parameters":{"id":3379,"nodeType":"ParameterList","parameters":[],"src":"1816:2:22"},"returnParameters":{"id":3380,"nodeType":"ParameterList","parameters":[],"src":"1841:0:22"},"scope":3457,"src":"1796:162:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3407,"nodeType":"Block","src":"2347:47:22","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3401,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:22","typeDescriptions":{}}},"id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3400,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"2357:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3406,"nodeType":"ExpressionStatement","src":"2357:30:22"}]},"documentation":{"id":3395,"nodeType":"StructuredDocumentation","src":"1964:324:22","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":3408,"implemented":true,"kind":"function","modifiers":[{"id":3398,"kind":"modifierInvocation","modifierName":{"id":3397,"name":"onlyOwner","nameLocations":["2337:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":3368,"src":"2337:9:22"},"nodeType":"ModifierInvocation","src":"2337:9:22"}],"name":"renounceOwnership","nameLocation":"2302:17:22","nodeType":"FunctionDefinition","parameters":{"id":3396,"nodeType":"ParameterList","parameters":[],"src":"2319:2:22"},"returnParameters":{"id":3399,"nodeType":"ParameterList","parameters":[],"src":"2347:0:22"},"scope":3457,"src":"2293:101:22","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3435,"nodeType":"Block","src":"2613:145:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3416,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"2627:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3417,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:22","typeDescriptions":{}}},"id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3430,"nodeType":"IfStatement","src":"2623:91:22","trueBody":{"id":3429,"nodeType":"Block","src":"2651:63:22","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:22","typeDescriptions":{}}},"id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3422,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"2672:19:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3428,"nodeType":"RevertStatement","src":"2665:38:22"}]}},{"expression":{"arguments":[{"id":3432,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"2742:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3431,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"2723:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3434,"nodeType":"ExpressionStatement","src":"2723:28:22"}]},"documentation":{"id":3409,"nodeType":"StructuredDocumentation","src":"2400:138:22","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":3436,"implemented":true,"kind":"function","modifiers":[{"id":3414,"kind":"modifierInvocation","modifierName":{"id":3413,"name":"onlyOwner","nameLocations":["2603:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":3368,"src":"2603:9:22"},"nodeType":"ModifierInvocation","src":"2603:9:22"}],"name":"transferOwnership","nameLocation":"2552:17:22","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3411,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:22","nodeType":"VariableDeclaration","scope":3436,"src":"2570:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3410,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:22"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[],"src":"2613:0:22"},"scope":3457,"src":"2543:215:22","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3455,"nodeType":"Block","src":"2975:124:22","statements":[{"assignments":[3443],"declarations":[{"constant":false,"id":3443,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:22","nodeType":"VariableDeclaration","scope":3455,"src":"2985:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3442,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3445,"initialValue":{"id":3444,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"3004:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:22"},{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3446,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"3020:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3447,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"3029:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3449,"nodeType":"ExpressionStatement","src":"3020:17:22"},{"eventCall":{"arguments":[{"id":3451,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"3073:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3452,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"3083:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3450,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"3052:20:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3454,"nodeType":"EmitStatement","src":"3047:45:22"}]},"documentation":{"id":3437,"nodeType":"StructuredDocumentation","src":"2764:143:22","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":3456,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:22","nodeType":"FunctionDefinition","parameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3439,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:22","nodeType":"VariableDeclaration","scope":3456,"src":"2940:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3438,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:22"},"returnParameters":{"id":3441,"nodeType":"ParameterList","parameters":[],"src":"2975:0:22"},"scope":3457,"src":"2912:187:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3458,"src":"663:2438:22","usedErrors":[3323,3328],"usedEvents":[3334]}],"src":"102:3000:22"},"id":22},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3487]},"id":3488,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3459,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:23"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"127:496:23","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3487,"linearizedBaseContracts":[3487],"name":"Context","nameLocation":"642:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":3468,"nodeType":"Block","src":"718:34:23","statements":[{"expression":{"expression":{"id":3465,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:23","memberName":"sender","nodeType":"MemberAccess","src":"735:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3464,"id":3467,"nodeType":"Return","src":"728:17:23"}]},"id":3469,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:23","nodeType":"FunctionDefinition","parameters":{"id":3461,"nodeType":"ParameterList","parameters":[],"src":"675:2:23"},"returnParameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3469,"src":"709:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3462,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:23"},"scope":3487,"src":"656:96:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3477,"nodeType":"Block","src":"825:32:23","statements":[{"expression":{"expression":{"id":3474,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:23","memberName":"data","nodeType":"MemberAccess","src":"842:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3473,"id":3476,"nodeType":"Return","src":"835:15:23"}]},"id":3478,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:23","nodeType":"FunctionDefinition","parameters":{"id":3470,"nodeType":"ParameterList","parameters":[],"src":"775:2:23"},"returnParameters":{"id":3473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3478,"src":"809:14:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3471,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:23"},"scope":3487,"src":"758:99:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3485,"nodeType":"Block","src":"935:25:23","statements":[{"expression":{"hexValue":"30","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3482,"id":3484,"nodeType":"Return","src":"945:8:23"}]},"id":3486,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:23","nodeType":"FunctionDefinition","parameters":{"id":3479,"nodeType":"ParameterList","parameters":[],"src":"892:2:23"},"returnParameters":{"id":3482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3486,"src":"926:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3480,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:23"},"scope":3487,"src":"863:97:23","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3488,"src":"624:338:23","usedErrors":[],"usedEvents":[]}],"src":"101:862:23"},"id":23},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3511],"IERC165":[3718]},"id":3512,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3489,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:24"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3491,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3512,"sourceUnit":3719,"src":"140:38:24","symbolAliases":[{"foreign":{"id":3490,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"148:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3493,"name":"IERC165","nameLocations":["687:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":3718,"src":"687:7:24"},"id":3494,"nodeType":"InheritanceSpecifier","src":"687:7:24"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3492,"nodeType":"StructuredDocumentation","src":"180:478:24","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":3511,"linearizedBaseContracts":[3511,3718],"name":"ERC165","nameLocation":"677:6:24","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3717],"body":{"id":3509,"nodeType":"Block","src":"844:64:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3502,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"861:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3504,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"881:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3718_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3718_$","typeString":"type(contract IERC165)"}],"id":3503,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3718","typeString":"type(contract IERC165)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:24","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3501,"id":3508,"nodeType":"Return","src":"854:47:24"}]},"documentation":{"id":3495,"nodeType":"StructuredDocumentation","src":"701:56:24","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3510,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:24","nodeType":"FunctionDefinition","parameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:24","nodeType":"VariableDeclaration","scope":3510,"src":"789:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3496,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:24"},"returnParameters":{"id":3501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3510,"src":"838:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3499,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:24"},"scope":3511,"src":"762:146:24","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3512,"src":"659:251:24","usedErrors":[],"usedEvents":[]}],"src":"114:797:24"},"id":24},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","exportedSymbols":{"ERC165Checker":[3706],"IERC165":[3718]},"id":3707,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3513,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"121:24:25"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3515,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3707,"sourceUnit":3719,"src":"147:38:25","symbolAliases":[{"foreign":{"id":3514,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"155:7:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC165Checker","contractDependencies":[],"contractKind":"library","documentation":{"id":3516,"nodeType":"StructuredDocumentation","src":"187:277:25","text":" @dev Library used to query support of an interface declared via {IERC165}.\n Note that these functions return the actual result of the query: they do not\n `revert` if an interface is not supported. It is up to the caller to decide\n what to do in these cases."},"fullyImplemented":true,"id":3706,"linearizedBaseContracts":[3706],"name":"ERC165Checker","nameLocation":"473:13:25","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3519,"mutability":"constant","name":"INTERFACE_ID_INVALID","nameLocation":"591:20:25","nodeType":"VariableDeclaration","scope":3706,"src":"567:57:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3517,"name":"bytes4","nodeType":"ElementaryTypeName","src":"567:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"614:10:25","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"private"},{"body":{"id":3541,"nodeType":"Block","src":"789:356:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3528,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"1023:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3530,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"1037:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3718_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3718_$","typeString":"type(contract IERC165)"}],"id":3529,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1032:4:25","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1032:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3718","typeString":"type(contract IERC165)"}},"id":3532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1046:11:25","memberName":"interfaceId","nodeType":"MemberAccess","src":"1032:25:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3527,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"990:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"990:68:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1074:64:25","subExpression":{"arguments":[{"id":3535,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"1108:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3536,"name":"INTERFACE_ID_INVALID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"1117:20:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3534,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"1075:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1075:63:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"990:148:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3526,"id":3540,"nodeType":"Return","src":"971:167:25"}]},"documentation":{"id":3520,"nodeType":"StructuredDocumentation","src":"631:83:25","text":" @dev Returns true if `account` supports the {IERC165} interface."},"id":3542,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165","nameLocation":"728:14:25","nodeType":"FunctionDefinition","parameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"account","nameLocation":"751:7:25","nodeType":"VariableDeclaration","scope":3542,"src":"743:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3521,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"742:17:25"},"returnParameters":{"id":3526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3542,"src":"783:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3524,"name":"bool","nodeType":"ElementaryTypeName","src":"783:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"782:6:25"},"scope":3706,"src":"719:426:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3561,"nodeType":"Block","src":"1456:189:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3553,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"1572:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3552,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"1557:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1557:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":3556,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"1617:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3557,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"1626:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3555,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"1584:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1557:81:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3551,"id":3560,"nodeType":"Return","src":"1550:88:25"}]},"documentation":{"id":3543,"nodeType":"StructuredDocumentation","src":"1151:207:25","text":" @dev Returns true if `account` supports the interface defined by\n `interfaceId`. Support for {IERC165} itself is queried automatically.\n See {IERC165-supportsInterface}."},"id":3562,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1372:17:25","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3545,"mutability":"mutable","name":"account","nameLocation":"1398:7:25","nodeType":"VariableDeclaration","scope":3562,"src":"1390:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3544,"name":"address","nodeType":"ElementaryTypeName","src":"1390:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"interfaceId","nameLocation":"1414:11:25","nodeType":"VariableDeclaration","scope":3562,"src":"1407:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3546,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1407:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1389:37:25"},"returnParameters":{"id":3551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3562,"src":"1450:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3549,"name":"bool","nodeType":"ElementaryTypeName","src":"1450:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1449:6:25"},"scope":3706,"src":"1363:282:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3617,"nodeType":"Block","src":"2131:560:25","statements":[{"assignments":[3578],"declarations":[{"constant":false,"id":3578,"mutability":"mutable","name":"interfaceIdsSupported","nameLocation":"2254:21:25","nodeType":"VariableDeclaration","scope":3617,"src":"2240:35:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3576,"name":"bool","nodeType":"ElementaryTypeName","src":"2240:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3577,"nodeType":"ArrayTypeName","src":"2240:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"id":3585,"initialValue":{"arguments":[{"expression":{"id":3582,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"2289:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2302:6:25","memberName":"length","nodeType":"MemberAccess","src":"2289:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2278:10:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bool[] memory)"},"typeName":{"baseType":{"id":3579,"name":"bool","nodeType":"ElementaryTypeName","src":"2282:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3580,"nodeType":"ArrayTypeName","src":"2282:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}}},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2278:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2240:69:25"},{"condition":{"arguments":[{"id":3587,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"2381:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3586,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"2366:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2366:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3614,"nodeType":"IfStatement","src":"2362:284:25","trueBody":{"id":3613,"nodeType":"Block","src":"2391:255:25","statements":[{"body":{"id":3611,"nodeType":"Block","src":"2518:118:25","statements":[{"expression":{"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3600,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2536:21:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":3602,"indexExpression":{"id":3601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"2558:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2536:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3604,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"2596:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3605,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"2605:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3607,"indexExpression":{"id":3606,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"2618:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2605:15:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3603,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"2563:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2536:85:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3610,"nodeType":"ExpressionStatement","src":"2536:85:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3593,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"2488:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3594,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"2492:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2505:6:25","memberName":"length","nodeType":"MemberAccess","src":"2492:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2488:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3612,"initializationExpression":{"assignments":[3590],"declarations":[{"constant":false,"id":3590,"mutability":"mutable","name":"i","nameLocation":"2481:1:25","nodeType":"VariableDeclaration","scope":3612,"src":"2473:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3589,"name":"uint256","nodeType":"ElementaryTypeName","src":"2473:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3592,"initialValue":{"hexValue":"30","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2485:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2473:13:25"},"loopExpression":{"expression":{"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2513:3:25","subExpression":{"id":3597,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"2513:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3599,"nodeType":"ExpressionStatement","src":"2513:3:25"},"nodeType":"ForStatement","src":"2468:168:25"}]}},{"expression":{"id":3615,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2663:21:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"functionReturnParameters":3573,"id":3616,"nodeType":"Return","src":"2656:28:25"}]},"documentation":{"id":3563,"nodeType":"StructuredDocumentation","src":"1651:336:25","text":" @dev Returns a boolean array where each value corresponds to the\n interfaces passed in and whether they're supported or not. This allows\n you to batch check interfaces for a contract where your expectation\n is that some interfaces may not be supported.\n See {IERC165-supportsInterface}."},"id":3618,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInterfaces","nameLocation":"2001:22:25","nodeType":"FunctionDefinition","parameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"account","nameLocation":"2041:7:25","nodeType":"VariableDeclaration","scope":3618,"src":"2033:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3564,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"interfaceIds","nameLocation":"2074:12:25","nodeType":"VariableDeclaration","scope":3618,"src":"2058:28:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3566,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2058:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3567,"nodeType":"ArrayTypeName","src":"2058:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"2023:69:25"},"returnParameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3618,"src":"2116:13:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3570,"name":"bool","nodeType":"ElementaryTypeName","src":"2116:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3571,"nodeType":"ArrayTypeName","src":"2116:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"2115:15:25"},"scope":3706,"src":"1992:699:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3663,"nodeType":"Block","src":"3133:436:25","statements":[{"condition":{"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3189:24:25","subExpression":{"arguments":[{"id":3630,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"3205:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3629,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"3190:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3636,"nodeType":"IfStatement","src":"3185:67:25","trueBody":{"id":3635,"nodeType":"Block","src":"3215:37:25","statements":[{"expression":{"hexValue":"66616c7365","id":3633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3236:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3628,"id":3634,"nodeType":"Return","src":"3229:12:25"}]}},{"body":{"id":3659,"nodeType":"Block","src":"3371:134:25","statements":[{"condition":{"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3389:59:25","subExpression":{"arguments":[{"id":3649,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"3423:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3650,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3432:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3652,"indexExpression":{"id":3651,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"3445:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3432:15:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3648,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"3390:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3390:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3658,"nodeType":"IfStatement","src":"3385:110:25","trueBody":{"id":3657,"nodeType":"Block","src":"3450:45:25","statements":[{"expression":{"hexValue":"66616c7365","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3475:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3628,"id":3656,"nodeType":"Return","src":"3468:12:25"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3641,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"3341:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3642,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"3345:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3358:6:25","memberName":"length","nodeType":"MemberAccess","src":"3345:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3341:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3660,"initializationExpression":{"assignments":[3638],"declarations":[{"constant":false,"id":3638,"mutability":"mutable","name":"i","nameLocation":"3334:1:25","nodeType":"VariableDeclaration","scope":3660,"src":"3326:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3637,"name":"uint256","nodeType":"ElementaryTypeName","src":"3326:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3640,"initialValue":{"hexValue":"30","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3338:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3326:13:25"},"loopExpression":{"expression":{"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3366:3:25","subExpression":{"id":3645,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"3366:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3647,"nodeType":"ExpressionStatement","src":"3366:3:25"},"nodeType":"ForStatement","src":"3321:184:25"},{"expression":{"hexValue":"74727565","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3558:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3628,"id":3662,"nodeType":"Return","src":"3551:11:25"}]},"documentation":{"id":3619,"nodeType":"StructuredDocumentation","src":"2697:324:25","text":" @dev Returns true if `account` supports all the interfaces defined in\n `interfaceIds`. Support for {IERC165} itself is queried automatically.\n Batch-querying can lead to gas savings by skipping repeated checks for\n {IERC165} support.\n See {IERC165-supportsInterface}."},"id":3664,"implemented":true,"kind":"function","modifiers":[],"name":"supportsAllInterfaces","nameLocation":"3035:21:25","nodeType":"FunctionDefinition","parameters":{"id":3625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"account","nameLocation":"3065:7:25","nodeType":"VariableDeclaration","scope":3664,"src":"3057:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3620,"name":"address","nodeType":"ElementaryTypeName","src":"3057:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"interfaceIds","nameLocation":"3090:12:25","nodeType":"VariableDeclaration","scope":3664,"src":"3074:28:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3622,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3074:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3623,"nodeType":"ArrayTypeName","src":"3074:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3056:47:25"},"returnParameters":{"id":3628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3664,"src":"3127:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3626,"name":"bool","nodeType":"ElementaryTypeName","src":"3127:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3126:6:25"},"scope":3706,"src":"3026:543:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3704,"nodeType":"Block","src":"4505:524:25","statements":[{"assignments":[3675],"declarations":[{"constant":false,"id":3675,"mutability":"mutable","name":"encodedParams","nameLocation":"4552:13:25","nodeType":"VariableDeclaration","scope":3704,"src":"4539:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3674,"name":"bytes","nodeType":"ElementaryTypeName","src":"4539:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3683,"initialValue":{"arguments":[{"expression":{"id":3678,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"4583:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3718_$","typeString":"type(contract IERC165)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4591:17:25","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3717,"src":"4583:25:25","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"}},{"components":[{"id":3680,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"4611:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"id":3681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4610:13:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3676,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4568:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4572:10:25","memberName":"encodeCall","nodeType":"MemberAccess","src":"4568:14:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4539:85:25"},{"assignments":[3685],"declarations":[{"constant":false,"id":3685,"mutability":"mutable","name":"success","nameLocation":"4671:7:25","nodeType":"VariableDeclaration","scope":3704,"src":"4666:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3684,"name":"bool","nodeType":"ElementaryTypeName","src":"4666:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3686,"nodeType":"VariableDeclarationStatement","src":"4666:12:25"},{"assignments":[3688],"declarations":[{"constant":false,"id":3688,"mutability":"mutable","name":"returnSize","nameLocation":"4696:10:25","nodeType":"VariableDeclaration","scope":3704,"src":"4688:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3687,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3689,"nodeType":"VariableDeclarationStatement","src":"4688:18:25"},{"assignments":[3691],"declarations":[{"constant":false,"id":3691,"mutability":"mutable","name":"returnValue","nameLocation":"4724:11:25","nodeType":"VariableDeclaration","scope":3704,"src":"4716:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"4716:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3692,"nodeType":"VariableDeclarationStatement","src":"4716:19:25"},{"AST":{"nodeType":"YulBlock","src":"4754:203:25","statements":[{"nodeType":"YulAssignment","src":"4768:97:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4790:5:25","type":"","value":"30000"},{"name":"account","nodeType":"YulIdentifier","src":"4797:7:25"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4810:13:25"},{"kind":"number","nodeType":"YulLiteral","src":"4825:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:25"},"nodeType":"YulFunctionCall","src":"4806:24:25"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4838:13:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4832:5:25"},"nodeType":"YulFunctionCall","src":"4832:20:25"},{"kind":"number","nodeType":"YulLiteral","src":"4854:4:25","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"4860:4:25","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"4779:10:25"},"nodeType":"YulFunctionCall","src":"4779:86:25"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"4768:7:25"}]},{"nodeType":"YulAssignment","src":"4878:30:25","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4892:14:25"},"nodeType":"YulFunctionCall","src":"4892:16:25"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"4878:10:25"}]},{"nodeType":"YulAssignment","src":"4921:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4942:4:25","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4936:5:25"},"nodeType":"YulFunctionCall","src":"4936:11:25"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"4921:11:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3667,"isOffset":false,"isSlot":false,"src":"4797:7:25","valueSize":1},{"declaration":3675,"isOffset":false,"isSlot":false,"src":"4810:13:25","valueSize":1},{"declaration":3675,"isOffset":false,"isSlot":false,"src":"4838:13:25","valueSize":1},{"declaration":3688,"isOffset":false,"isSlot":false,"src":"4878:10:25","valueSize":1},{"declaration":3691,"isOffset":false,"isSlot":false,"src":"4921:11:25","valueSize":1},{"declaration":3685,"isOffset":false,"isSlot":false,"src":"4768:7:25","valueSize":1}],"id":3693,"nodeType":"InlineAssembly","src":"4745:212:25"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3694,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"4974:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3695,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"4985:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783230","id":3696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4999:4:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"4985:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4974:29:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3699,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"5007:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5021:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5007:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4974:48:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3673,"id":3703,"nodeType":"Return","src":"4967:55:25"}]},"documentation":{"id":3665,"nodeType":"StructuredDocumentation","src":"3575:817:25","text":" @notice Query if a contract implements an interface, does not check ERC165 support\n @param account The address of the contract to query for support of an interface\n @param interfaceId The interface identifier, as specified in ERC-165\n @return true if the contract at account indicates support of the interface with\n identifier interfaceId, false otherwise\n @dev Assumes that account contains a contract that supports ERC165, otherwise\n the behavior of this method is undefined. This precondition can be checked\n with {supportsERC165}.\n Some precompiled contracts will falsely indicate support for a given interface, so caution\n should be exercised when using this function.\n Interface identification is specified in ERC-165."},"id":3705,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165InterfaceUnchecked","nameLocation":"4406:32:25","nodeType":"FunctionDefinition","parameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3667,"mutability":"mutable","name":"account","nameLocation":"4447:7:25","nodeType":"VariableDeclaration","scope":3705,"src":"4439:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3666,"name":"address","nodeType":"ElementaryTypeName","src":"4439:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"interfaceId","nameLocation":"4463:11:25","nodeType":"VariableDeclaration","scope":3705,"src":"4456:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3668,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4456:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4438:37:25"},"returnParameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3705,"src":"4499:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3671,"name":"bool","nodeType":"ElementaryTypeName","src":"4499:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4498:6:25"},"scope":3706,"src":"4397:632:25","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3707,"src":"465:4566:25","usedErrors":[],"usedEvents":[]}],"src":"121:4911:25"},"id":25},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3718]},"id":3719,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3708,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3709,"nodeType":"StructuredDocumentation","src":"141:279:26","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3718,"linearizedBaseContracts":[3718],"name":"IERC165","nameLocation":"431:7:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3710,"nodeType":"StructuredDocumentation","src":"445:340:26","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3717,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:26","nodeType":"FunctionDefinition","parameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3712,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:26","nodeType":"VariableDeclaration","scope":3717,"src":"817:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3711,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:26"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3717,"src":"860:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3714,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:26"},"scope":3718,"src":"790:76:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3719,"src":"421:447:26","usedErrors":[],"usedEvents":[]}],"src":"115:754:26"},"id":26},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[4331]},"id":4332,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3720,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"205:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":3721,"nodeType":"StructuredDocumentation","src":"231:1098:27","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":4331,"linearizedBaseContracts":[4331],"name":"EnumerableSet","nameLocation":"1338:13:27","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":3729,"members":[{"constant":false,"id":3724,"mutability":"mutable","name":"_values","nameLocation":"1862:7:27","nodeType":"VariableDeclaration","scope":3729,"src":"1852:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1852:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3723,"nodeType":"ArrayTypeName","src":"1852:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3728,"mutability":"mutable","name":"_positions","nameLocation":"2054:10:27","nodeType":"VariableDeclaration","scope":3729,"src":"2020:44:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3727,"keyName":"value","keyNameLocation":"2036:5:27","keyType":{"id":3725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2028:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2020:33:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1805:3:27","nodeType":"StructDefinition","scope":4331,"src":"1798:273:27","visibility":"public"},{"body":{"id":3770,"nodeType":"Block","src":"2310:337:27","statements":[{"condition":{"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2324:22:27","subExpression":{"arguments":[{"id":3741,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"2335:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":3742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"2340:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3740,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"2325:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3768,"nodeType":"Block","src":"2604:37:27","statements":[{"expression":{"hexValue":"66616c7365","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2625:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3739,"id":3767,"nodeType":"Return","src":"2618:12:27"}]},"id":3769,"nodeType":"IfStatement","src":"2320:321:27","trueBody":{"id":3765,"nodeType":"Block","src":"2348:250:27","statements":[{"expression":{"arguments":[{"id":3750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"2379:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3745,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"2362:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2366:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"2362:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:4:27","memberName":"push","nodeType":"MemberAccess","src":"2362:16:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2362:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3752,"nodeType":"ExpressionStatement","src":"2362:23:27"},{"expression":{"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3753,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"2520:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2524:10:27","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3728,"src":"2520:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3757,"indexExpression":{"id":3755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"2535:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2520:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3758,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"2544:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2548:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"2544:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2556:6:27","memberName":"length","nodeType":"MemberAccess","src":"2544:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2520:42:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3762,"nodeType":"ExpressionStatement","src":"2520:42:27"},{"expression":{"hexValue":"74727565","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2583:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3739,"id":3764,"nodeType":"Return","src":"2576:11:27"}]}}]},"documentation":{"id":3730,"nodeType":"StructuredDocumentation","src":"2077:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3771,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2250:4:27","nodeType":"FunctionDefinition","parameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3733,"mutability":"mutable","name":"set","nameLocation":"2267:3:27","nodeType":"VariableDeclaration","scope":3771,"src":"2255:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3732,"nodeType":"UserDefinedTypeName","pathNode":{"id":3731,"name":"Set","nameLocations":["2255:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"2255:3:27"},"referencedDeclaration":3729,"src":"2255:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"value","nameLocation":"2280:5:27","nodeType":"VariableDeclaration","scope":3771,"src":"2272:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2272:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2254:32:27"},"returnParameters":{"id":3739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3771,"src":"2304:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3737,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2303:6:27"},"scope":4331,"src":"2241:406:27","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3854,"nodeType":"Block","src":"2887:1296:27","statements":[{"assignments":[3783],"declarations":[{"constant":false,"id":3783,"mutability":"mutable","name":"position","nameLocation":"2999:8:27","nodeType":"VariableDeclaration","scope":3854,"src":"2991:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3782,"name":"uint256","nodeType":"ElementaryTypeName","src":"2991:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3788,"initialValue":{"baseExpression":{"expression":{"id":3784,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3010:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3014:10:27","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3728,"src":"3010:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3787,"indexExpression":{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"3025:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3010:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2991:40:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3789,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"3046:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3058:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3046:13:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3852,"nodeType":"Block","src":"4140:37:27","statements":[{"expression":{"hexValue":"66616c7365","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4161:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3781,"id":3851,"nodeType":"Return","src":"4154:12:27"}]},"id":3853,"nodeType":"IfStatement","src":"3042:1135:27","trueBody":{"id":3849,"nodeType":"Block","src":"3061:1073:27","statements":[{"assignments":[3793],"declarations":[{"constant":false,"id":3793,"mutability":"mutable","name":"valueIndex","nameLocation":"3421:10:27","nodeType":"VariableDeclaration","scope":3849,"src":"3413:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3792,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3797,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3794,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"3434:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3445:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3434:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3413:33:27"},{"assignments":[3799],"declarations":[{"constant":false,"id":3799,"mutability":"mutable","name":"lastIndex","nameLocation":"3468:9:27","nodeType":"VariableDeclaration","scope":3849,"src":"3460:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3798,"name":"uint256","nodeType":"ElementaryTypeName","src":"3460:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3805,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3800,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3480:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3484:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"3480:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3492:6:27","memberName":"length","nodeType":"MemberAccess","src":"3480:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3501:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3480:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3460:42:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3806,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"3521:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3807,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"3535:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3521:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3833,"nodeType":"IfStatement","src":"3517:378:27","trueBody":{"id":3832,"nodeType":"Block","src":"3546:349:27","statements":[{"assignments":[3810],"declarations":[{"constant":false,"id":3810,"mutability":"mutable","name":"lastValue","nameLocation":"3572:9:27","nodeType":"VariableDeclaration","scope":3832,"src":"3564:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3815,"initialValue":{"baseExpression":{"expression":{"id":3811,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3584:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3588:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"3584:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3814,"indexExpression":{"id":3813,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"3596:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3584:22:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3564:42:27"},{"expression":{"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3816,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3705:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3819,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3709:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"3705:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3820,"indexExpression":{"id":3818,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"3717:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3705:23:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3821,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"3731:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3705:35:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3823,"nodeType":"ExpressionStatement","src":"3705:35:27"},{"expression":{"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3824,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3844:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3848:10:27","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3728,"src":"3844:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3828,"indexExpression":{"id":3826,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"3859:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3844:25:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3829,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"3872:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3844:36:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3831,"nodeType":"ExpressionStatement","src":"3844:36:27"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3834,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"3973:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3977:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"3973:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3985:3:27","memberName":"pop","nodeType":"MemberAccess","src":"3973:15:27","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3973:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3840,"nodeType":"ExpressionStatement","src":"3973:17:27"},{"expression":{"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4069:28:27","subExpression":{"baseExpression":{"expression":{"id":3841,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"4076:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3842,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4080:10:27","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3728,"src":"4076:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3844,"indexExpression":{"id":3843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"4091:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4076:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3846,"nodeType":"ExpressionStatement","src":"4069:28:27"},{"expression":{"hexValue":"74727565","id":3847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4119:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3781,"id":3848,"nodeType":"Return","src":"4112:11:27"}]}}]},"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"2653:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3855,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2824:7:27","nodeType":"FunctionDefinition","parameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"set","nameLocation":"2844:3:27","nodeType":"VariableDeclaration","scope":3855,"src":"2832:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3774,"nodeType":"UserDefinedTypeName","pathNode":{"id":3773,"name":"Set","nameLocations":["2832:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"2832:3:27"},"referencedDeclaration":3729,"src":"2832:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3777,"mutability":"mutable","name":"value","nameLocation":"2857:5:27","nodeType":"VariableDeclaration","scope":3855,"src":"2849:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2849:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2831:32:27"},"returnParameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3855,"src":"2881:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3779,"name":"bool","nodeType":"ElementaryTypeName","src":"2881:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2880:6:27"},"scope":4331,"src":"2815:1368:27","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3873,"nodeType":"Block","src":"4343:50:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":3866,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"4360:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4364:10:27","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3728,"src":"4360:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3869,"indexExpression":{"id":3868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"4375:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4360:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4360:26:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3865,"id":3872,"nodeType":"Return","src":"4353:33:27"}]},"documentation":{"id":3856,"nodeType":"StructuredDocumentation","src":"4189:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":3874,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4273:9:27","nodeType":"FunctionDefinition","parameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"set","nameLocation":"4295:3:27","nodeType":"VariableDeclaration","scope":3874,"src":"4283:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3858,"nodeType":"UserDefinedTypeName","pathNode":{"id":3857,"name":"Set","nameLocations":["4283:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"4283:3:27"},"referencedDeclaration":3729,"src":"4283:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"value","nameLocation":"4308:5:27","nodeType":"VariableDeclaration","scope":3874,"src":"4300:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4300:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4282:32:27"},"returnParameters":{"id":3865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3874,"src":"4337:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3863,"name":"bool","nodeType":"ElementaryTypeName","src":"4337:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4336:6:27"},"scope":4331,"src":"4264:129:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3887,"nodeType":"Block","src":"4539:42:27","statements":[{"expression":{"expression":{"expression":{"id":3883,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"4556:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3884,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"4556:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:27","memberName":"length","nodeType":"MemberAccess","src":"4556:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3882,"id":3886,"nodeType":"Return","src":"4549:25:27"}]},"documentation":{"id":3875,"nodeType":"StructuredDocumentation","src":"4399:70:27","text":" @dev Returns the number of values on the set. O(1)."},"id":3888,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:27","nodeType":"FunctionDefinition","parameters":{"id":3879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3878,"mutability":"mutable","name":"set","nameLocation":"4503:3:27","nodeType":"VariableDeclaration","scope":3888,"src":"4491:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3877,"nodeType":"UserDefinedTypeName","pathNode":{"id":3876,"name":"Set","nameLocations":["4491:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"4491:3:27"},"referencedDeclaration":3729,"src":"4491:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4490:17:27"},"returnParameters":{"id":3882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3888,"src":"4530:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3880,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:27"},"scope":4331,"src":"4474:107:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3904,"nodeType":"Block","src":"4999:42:27","statements":[{"expression":{"baseExpression":{"expression":{"id":3899,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"5016:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"5016:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3902,"indexExpression":{"id":3901,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"5028:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3898,"id":3903,"nodeType":"Return","src":"5009:25:27"}]},"documentation":{"id":3889,"nodeType":"StructuredDocumentation","src":"4587:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3905,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:27","nodeType":"FunctionDefinition","parameters":{"id":3895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"set","nameLocation":"4948:3:27","nodeType":"VariableDeclaration","scope":3905,"src":"4936:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3891,"nodeType":"UserDefinedTypeName","pathNode":{"id":3890,"name":"Set","nameLocations":["4936:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"4936:3:27"},"referencedDeclaration":3729,"src":"4936:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3894,"mutability":"mutable","name":"index","nameLocation":"4961:5:27","nodeType":"VariableDeclaration","scope":3905,"src":"4953:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3893,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:27"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3905,"src":"4990:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:27"},"scope":4331,"src":"4923:118:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3918,"nodeType":"Block","src":"5655:35:27","statements":[{"expression":{"expression":{"id":3915,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3909,"src":"5672:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"5672:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":3914,"id":3917,"nodeType":"Return","src":"5665:18:27"}]},"documentation":{"id":3906,"nodeType":"StructuredDocumentation","src":"5047:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3919,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:27","nodeType":"FunctionDefinition","parameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3909,"mutability":"mutable","name":"set","nameLocation":"5610:3:27","nodeType":"VariableDeclaration","scope":3919,"src":"5598:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3908,"nodeType":"UserDefinedTypeName","pathNode":{"id":3907,"name":"Set","nameLocations":["5598:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"5598:3:27"},"referencedDeclaration":3729,"src":"5598:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5597:17:27"},"returnParameters":{"id":3914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3919,"src":"5637:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3912,"nodeType":"ArrayTypeName","src":"5637:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:27"},"scope":4331,"src":"5581:109:27","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":3923,"members":[{"constant":false,"id":3922,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:27","nodeType":"VariableDeclaration","scope":3923,"src":"5743:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3921,"nodeType":"UserDefinedTypeName","pathNode":{"id":3920,"name":"Set","nameLocations":["5743:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"5743:3:27"},"referencedDeclaration":3729,"src":"5743:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:27","nodeType":"StructDefinition","scope":4331,"src":"5715:45:27","visibility":"public"},{"body":{"id":3940,"nodeType":"Block","src":"6006:47:27","statements":[{"expression":{"arguments":[{"expression":{"id":3935,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6028:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3936,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"6028:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"6040:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3934,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"6023:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3933,"id":3939,"nodeType":"Return","src":"6016:30:27"}]},"documentation":{"id":3924,"nodeType":"StructuredDocumentation","src":"5766:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3941,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:27","nodeType":"FunctionDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"mutability":"mutable","name":"set","nameLocation":"5962:3:27","nodeType":"VariableDeclaration","scope":3941,"src":"5943:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3926,"nodeType":"UserDefinedTypeName","pathNode":{"id":3925,"name":"Bytes32Set","nameLocations":["5943:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"5943:10:27"},"referencedDeclaration":3923,"src":"5943:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3929,"mutability":"mutable","name":"value","nameLocation":"5975:5:27","nodeType":"VariableDeclaration","scope":3941,"src":"5967:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3928,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:27"},"returnParameters":{"id":3933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3941,"src":"6000:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3931,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:27"},"scope":4331,"src":"5930:123:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3958,"nodeType":"Block","src":"6300:50:27","statements":[{"expression":{"arguments":[{"expression":{"id":3953,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"6325:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3954,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"6325:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3955,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"6337:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3952,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"6317:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3951,"id":3957,"nodeType":"Return","src":"6310:33:27"}]},"documentation":{"id":3942,"nodeType":"StructuredDocumentation","src":"6059:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3959,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:27","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3945,"mutability":"mutable","name":"set","nameLocation":"6256:3:27","nodeType":"VariableDeclaration","scope":3959,"src":"6237:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3944,"nodeType":"UserDefinedTypeName","pathNode":{"id":3943,"name":"Bytes32Set","nameLocations":["6237:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"6237:10:27"},"referencedDeclaration":3923,"src":"6237:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"value","nameLocation":"6269:5:27","nodeType":"VariableDeclaration","scope":3959,"src":"6261:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:27"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3959,"src":"6294:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3949,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:27"},"scope":4331,"src":"6221:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3976,"nodeType":"Block","src":"6517:52:27","statements":[{"expression":{"arguments":[{"expression":{"id":3971,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"6544:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"6544:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"6556:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3970,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"6534:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3969,"id":3975,"nodeType":"Return","src":"6527:35:27"}]},"documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"6356:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":3977,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:27","nodeType":"FunctionDefinition","parameters":{"id":3966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"set","nameLocation":"6468:3:27","nodeType":"VariableDeclaration","scope":3977,"src":"6449:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3962,"nodeType":"UserDefinedTypeName","pathNode":{"id":3961,"name":"Bytes32Set","nameLocations":["6449:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"6449:10:27"},"referencedDeclaration":3923,"src":"6449:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3965,"mutability":"mutable","name":"value","nameLocation":"6481:5:27","nodeType":"VariableDeclaration","scope":3977,"src":"6473:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:27"},"returnParameters":{"id":3969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3977,"src":"6511:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3967,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:27"},"scope":4331,"src":"6431:138:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3991,"nodeType":"Block","src":"6722:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":3987,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"6747:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3988,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"6747:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3986,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"6739:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3985,"id":3990,"nodeType":"Return","src":"6732:26:27"}]},"documentation":{"id":3978,"nodeType":"StructuredDocumentation","src":"6575:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":3992,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:27","nodeType":"FunctionDefinition","parameters":{"id":3982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3981,"mutability":"mutable","name":"set","nameLocation":"6685:3:27","nodeType":"VariableDeclaration","scope":3992,"src":"6666:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3980,"nodeType":"UserDefinedTypeName","pathNode":{"id":3979,"name":"Bytes32Set","nameLocations":["6666:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"6666:10:27"},"referencedDeclaration":3923,"src":"6666:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:27"},"returnParameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3992,"src":"6713:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3983,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:27"},"scope":4331,"src":"6650:115:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4009,"nodeType":"Block","src":"7190:46:27","statements":[{"expression":{"arguments":[{"expression":{"id":4004,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"7211:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"7211:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4006,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"7223:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4003,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"7207:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4002,"id":4008,"nodeType":"Return","src":"7200:29:27"}]},"documentation":{"id":3993,"nodeType":"StructuredDocumentation","src":"6771:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4010,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:27","nodeType":"FunctionDefinition","parameters":{"id":3999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3996,"mutability":"mutable","name":"set","nameLocation":"7138:3:27","nodeType":"VariableDeclaration","scope":4010,"src":"7119:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3995,"nodeType":"UserDefinedTypeName","pathNode":{"id":3994,"name":"Bytes32Set","nameLocations":["7119:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"7119:10:27"},"referencedDeclaration":3923,"src":"7119:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3998,"mutability":"mutable","name":"index","nameLocation":"7151:5:27","nodeType":"VariableDeclaration","scope":4010,"src":"7143:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3997,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:27"},"returnParameters":{"id":4002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4010,"src":"7181:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4000,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:27"},"scope":4331,"src":"7107:129:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4039,"nodeType":"Block","src":"7857:219:27","statements":[{"assignments":[4024],"declarations":[{"constant":false,"id":4024,"mutability":"mutable","name":"store","nameLocation":"7884:5:27","nodeType":"VariableDeclaration","scope":4039,"src":"7867:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4023,"nodeType":"ArrayTypeName","src":"7867:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4029,"initialValue":{"arguments":[{"expression":{"id":4026,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"7900:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"7900:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4025,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"7892:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:27"},{"assignments":[4034],"declarations":[{"constant":false,"id":4034,"mutability":"mutable","name":"result","nameLocation":"7938:6:27","nodeType":"VariableDeclaration","scope":4039,"src":"7921:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4033,"nodeType":"ArrayTypeName","src":"7921:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4035,"nodeType":"VariableDeclarationStatement","src":"7921:23:27"},{"AST":{"nodeType":"YulBlock","src":"8007:39:27","statements":[{"nodeType":"YulAssignment","src":"8021:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4034,"isOffset":false,"isSlot":false,"src":"8021:6:27","valueSize":1},{"declaration":4024,"isOffset":false,"isSlot":false,"src":"8031:5:27","valueSize":1}],"id":4036,"nodeType":"InlineAssembly","src":"7998:48:27"},{"expression":{"id":4037,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"8063:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4019,"id":4038,"nodeType":"Return","src":"8056:13:27"}]},"documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"7242:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4040,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:27","nodeType":"FunctionDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"mutability":"mutable","name":"set","nameLocation":"7811:3:27","nodeType":"VariableDeclaration","scope":4040,"src":"7792:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4013,"nodeType":"UserDefinedTypeName","pathNode":{"id":4012,"name":"Bytes32Set","nameLocations":["7792:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":3923,"src":"7792:10:27"},"referencedDeclaration":3923,"src":"7792:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$3923_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:27"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4040,"src":"7839:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4016,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4017,"nodeType":"ArrayTypeName","src":"7839:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:27"},"scope":4331,"src":"7776:300:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":4044,"members":[{"constant":false,"id":4043,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:27","nodeType":"VariableDeclaration","scope":4044,"src":"8129:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4042,"nodeType":"UserDefinedTypeName","pathNode":{"id":4041,"name":"Set","nameLocations":["8129:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"8129:3:27"},"referencedDeclaration":3729,"src":"8129:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:27","nodeType":"StructDefinition","scope":4331,"src":"8101:45:27","visibility":"public"},{"body":{"id":4070,"nodeType":"Block","src":"8392:74:27","statements":[{"expression":{"arguments":[{"expression":{"id":4056,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4048,"src":"8414:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"8414:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"8450:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4062,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:27","typeDescriptions":{}}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4060,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:27","typeDescriptions":{}}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4058,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:27","typeDescriptions":{}}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4055,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"8409:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4054,"id":4069,"nodeType":"Return","src":"8402:57:27"}]},"documentation":{"id":4045,"nodeType":"StructuredDocumentation","src":"8152:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4071,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:27","nodeType":"FunctionDefinition","parameters":{"id":4051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4048,"mutability":"mutable","name":"set","nameLocation":"8348:3:27","nodeType":"VariableDeclaration","scope":4071,"src":"8329:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4047,"nodeType":"UserDefinedTypeName","pathNode":{"id":4046,"name":"AddressSet","nameLocations":["8329:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"8329:10:27"},"referencedDeclaration":4044,"src":"8329:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4050,"mutability":"mutable","name":"value","nameLocation":"8361:5:27","nodeType":"VariableDeclaration","scope":4071,"src":"8353:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4049,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:27"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4071,"src":"8386:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4052,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:27"},"scope":4331,"src":"8316:150:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4097,"nodeType":"Block","src":"8713:77:27","statements":[{"expression":{"arguments":[{"expression":{"id":4083,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"8738:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"8738:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"8774:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4089,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:27","typeDescriptions":{}}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:27","typeDescriptions":{}}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:27","typeDescriptions":{}}},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4082,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"8730:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4081,"id":4096,"nodeType":"Return","src":"8723:60:27"}]},"documentation":{"id":4072,"nodeType":"StructuredDocumentation","src":"8472:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4098,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:27","nodeType":"FunctionDefinition","parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4075,"mutability":"mutable","name":"set","nameLocation":"8669:3:27","nodeType":"VariableDeclaration","scope":4098,"src":"8650:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4074,"nodeType":"UserDefinedTypeName","pathNode":{"id":4073,"name":"AddressSet","nameLocations":["8650:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"8650:10:27"},"referencedDeclaration":4044,"src":"8650:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4077,"mutability":"mutable","name":"value","nameLocation":"8682:5:27","nodeType":"VariableDeclaration","scope":4098,"src":"8674:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:27"},"returnParameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4098,"src":"8707:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4079,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:27"},"scope":4331,"src":"8634:156:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4124,"nodeType":"Block","src":"8957:79:27","statements":[{"expression":{"arguments":[{"expression":{"id":4110,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"8984:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"8984:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"9020:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4116,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:27","typeDescriptions":{}}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4114,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:27","typeDescriptions":{}}},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:27","typeDescriptions":{}}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4109,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"8974:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4108,"id":4123,"nodeType":"Return","src":"8967:62:27"}]},"documentation":{"id":4099,"nodeType":"StructuredDocumentation","src":"8796:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4125,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:27","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"set","nameLocation":"8908:3:27","nodeType":"VariableDeclaration","scope":4125,"src":"8889:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4101,"nodeType":"UserDefinedTypeName","pathNode":{"id":4100,"name":"AddressSet","nameLocations":["8889:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"8889:10:27"},"referencedDeclaration":4044,"src":"8889:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"value","nameLocation":"8921:5:27","nodeType":"VariableDeclaration","scope":4125,"src":"8913:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4103,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:27"},"returnParameters":{"id":4108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4125,"src":"8951:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4106,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:27"},"scope":4331,"src":"8871:165:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4139,"nodeType":"Block","src":"9189:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":4135,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"9214:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"9214:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4134,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"9206:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4133,"id":4138,"nodeType":"Return","src":"9199:26:27"}]},"documentation":{"id":4126,"nodeType":"StructuredDocumentation","src":"9042:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":4140,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:27","nodeType":"FunctionDefinition","parameters":{"id":4130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4129,"mutability":"mutable","name":"set","nameLocation":"9152:3:27","nodeType":"VariableDeclaration","scope":4140,"src":"9133:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4128,"nodeType":"UserDefinedTypeName","pathNode":{"id":4127,"name":"AddressSet","nameLocations":["9133:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"9133:10:27"},"referencedDeclaration":4044,"src":"9133:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9132:24:27"},"returnParameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4140,"src":"9180:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4131,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:27"},"scope":4331,"src":"9117:115:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4166,"nodeType":"Block","src":"9657:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":4158,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9702:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"9702:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4160,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"9714:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4157,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"9698:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4155,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:27","typeDescriptions":{}}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4153,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:27","typeDescriptions":{}}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4151,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:27","typeDescriptions":{}}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4150,"id":4165,"nodeType":"Return","src":"9667:56:27"}]},"documentation":{"id":4141,"nodeType":"StructuredDocumentation","src":"9238:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4167,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:27","nodeType":"FunctionDefinition","parameters":{"id":4147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4144,"mutability":"mutable","name":"set","nameLocation":"9605:3:27","nodeType":"VariableDeclaration","scope":4167,"src":"9586:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4143,"nodeType":"UserDefinedTypeName","pathNode":{"id":4142,"name":"AddressSet","nameLocations":["9586:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"9586:10:27"},"referencedDeclaration":4044,"src":"9586:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4146,"mutability":"mutable","name":"index","nameLocation":"9618:5:27","nodeType":"VariableDeclaration","scope":4167,"src":"9610:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4145,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:27"},"returnParameters":{"id":4150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4167,"src":"9648:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4148,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:27"},"scope":4331,"src":"9574:156:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4196,"nodeType":"Block","src":"10351:219:27","statements":[{"assignments":[4181],"declarations":[{"constant":false,"id":4181,"mutability":"mutable","name":"store","nameLocation":"10378:5:27","nodeType":"VariableDeclaration","scope":4196,"src":"10361:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4180,"nodeType":"ArrayTypeName","src":"10361:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4186,"initialValue":{"arguments":[{"expression":{"id":4183,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"10394:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4184,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4043,"src":"10394:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4182,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"10386:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:27"},{"assignments":[4191],"declarations":[{"constant":false,"id":4191,"mutability":"mutable","name":"result","nameLocation":"10432:6:27","nodeType":"VariableDeclaration","scope":4196,"src":"10415:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4189,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4190,"nodeType":"ArrayTypeName","src":"10415:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4192,"nodeType":"VariableDeclarationStatement","src":"10415:23:27"},{"AST":{"nodeType":"YulBlock","src":"10501:39:27","statements":[{"nodeType":"YulAssignment","src":"10515:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4191,"isOffset":false,"isSlot":false,"src":"10515:6:27","valueSize":1},{"declaration":4181,"isOffset":false,"isSlot":false,"src":"10525:5:27","valueSize":1}],"id":4193,"nodeType":"InlineAssembly","src":"10492:48:27"},{"expression":{"id":4194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"10557:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":4176,"id":4195,"nodeType":"Return","src":"10550:13:27"}]},"documentation":{"id":4168,"nodeType":"StructuredDocumentation","src":"9736:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4197,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:27","nodeType":"FunctionDefinition","parameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"set","nameLocation":"10305:3:27","nodeType":"VariableDeclaration","scope":4197,"src":"10286:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4170,"nodeType":"UserDefinedTypeName","pathNode":{"id":4169,"name":"AddressSet","nameLocations":["10286:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4044,"src":"10286:10:27"},"referencedDeclaration":4044,"src":"10286:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4044_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10285:24:27"},"returnParameters":{"id":4176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4197,"src":"10333:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4173,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4174,"nodeType":"ArrayTypeName","src":"10333:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:27"},"scope":4331,"src":"10270:300:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":4201,"members":[{"constant":false,"id":4200,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:27","nodeType":"VariableDeclaration","scope":4201,"src":"10617:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4199,"nodeType":"UserDefinedTypeName","pathNode":{"id":4198,"name":"Set","nameLocations":["10617:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":3729,"src":"10617:3:27"},"referencedDeclaration":3729,"src":"10617:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:27","nodeType":"StructDefinition","scope":4331,"src":"10592:42:27","visibility":"public"},{"body":{"id":4221,"nodeType":"Block","src":"10877:56:27","statements":[{"expression":{"arguments":[{"expression":{"id":4213,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4205,"src":"10899:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"10899:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"10919:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:27","typeDescriptions":{}}},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4212,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"10894:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4211,"id":4220,"nodeType":"Return","src":"10887:39:27"}]},"documentation":{"id":4202,"nodeType":"StructuredDocumentation","src":"10640:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4222,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:27","nodeType":"FunctionDefinition","parameters":{"id":4208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"mutability":"mutable","name":"set","nameLocation":"10833:3:27","nodeType":"VariableDeclaration","scope":4222,"src":"10817:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4204,"nodeType":"UserDefinedTypeName","pathNode":{"id":4203,"name":"UintSet","nameLocations":["10817:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"10817:7:27"},"referencedDeclaration":4201,"src":"10817:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4207,"mutability":"mutable","name":"value","nameLocation":"10846:5:27","nodeType":"VariableDeclaration","scope":4222,"src":"10838:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4206,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:27"},"returnParameters":{"id":4211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4222,"src":"10871:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4209,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:27"},"scope":4331,"src":"10804:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4242,"nodeType":"Block","src":"11177:59:27","statements":[{"expression":{"arguments":[{"expression":{"id":4234,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"11202:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"11202:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"11222:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:27","typeDescriptions":{}}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4233,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"11194:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4232,"id":4241,"nodeType":"Return","src":"11187:42:27"}]},"documentation":{"id":4223,"nodeType":"StructuredDocumentation","src":"10939:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4243,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:27","nodeType":"FunctionDefinition","parameters":{"id":4229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4226,"mutability":"mutable","name":"set","nameLocation":"11133:3:27","nodeType":"VariableDeclaration","scope":4243,"src":"11117:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4225,"nodeType":"UserDefinedTypeName","pathNode":{"id":4224,"name":"UintSet","nameLocations":["11117:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"11117:7:27"},"referencedDeclaration":4201,"src":"11117:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4228,"mutability":"mutable","name":"value","nameLocation":"11146:5:27","nodeType":"VariableDeclaration","scope":4243,"src":"11138:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4227,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:27"},"returnParameters":{"id":4232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4243,"src":"11171:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4230,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:27"},"scope":4331,"src":"11101:135:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4263,"nodeType":"Block","src":"11400:61:27","statements":[{"expression":{"arguments":[{"expression":{"id":4255,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"11427:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"11427:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4249,"src":"11447:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:27","typeDescriptions":{}}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4254,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"11417:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4253,"id":4262,"nodeType":"Return","src":"11410:44:27"}]},"documentation":{"id":4244,"nodeType":"StructuredDocumentation","src":"11242:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4264,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:27","nodeType":"FunctionDefinition","parameters":{"id":4250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4247,"mutability":"mutable","name":"set","nameLocation":"11351:3:27","nodeType":"VariableDeclaration","scope":4264,"src":"11335:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4246,"nodeType":"UserDefinedTypeName","pathNode":{"id":4245,"name":"UintSet","nameLocations":["11335:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"11335:7:27"},"referencedDeclaration":4201,"src":"11335:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4249,"mutability":"mutable","name":"value","nameLocation":"11364:5:27","nodeType":"VariableDeclaration","scope":4264,"src":"11356:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4248,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:27"},"returnParameters":{"id":4253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4264,"src":"11394:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4251,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:27"},"scope":4331,"src":"11317:144:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4278,"nodeType":"Block","src":"11611:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":4274,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"11636:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"11636:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4273,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"11628:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4272,"id":4277,"nodeType":"Return","src":"11621:26:27"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"11467:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":4279,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:27","nodeType":"FunctionDefinition","parameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"set","nameLocation":"11574:3:27","nodeType":"VariableDeclaration","scope":4279,"src":"11558:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4267,"nodeType":"UserDefinedTypeName","pathNode":{"id":4266,"name":"UintSet","nameLocations":["11558:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"11558:7:27"},"referencedDeclaration":4201,"src":"11558:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11557:21:27"},"returnParameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4279,"src":"11602:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4270,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:27"},"scope":4331,"src":"11542:112:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4299,"nodeType":"Block","src":"12076:55:27","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4293,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"12105:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"12105:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4295,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"12117:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4292,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"12101:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4290,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:27","typeDescriptions":{}}},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4289,"id":4298,"nodeType":"Return","src":"12086:38:27"}]},"documentation":{"id":4280,"nodeType":"StructuredDocumentation","src":"11660:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4300,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:27","nodeType":"FunctionDefinition","parameters":{"id":4286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4283,"mutability":"mutable","name":"set","nameLocation":"12024:3:27","nodeType":"VariableDeclaration","scope":4300,"src":"12008:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4282,"nodeType":"UserDefinedTypeName","pathNode":{"id":4281,"name":"UintSet","nameLocations":["12008:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"12008:7:27"},"referencedDeclaration":4201,"src":"12008:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4285,"mutability":"mutable","name":"index","nameLocation":"12037:5:27","nodeType":"VariableDeclaration","scope":4300,"src":"12029:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4284,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:27"},"returnParameters":{"id":4289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4300,"src":"12067:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4287,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:27"},"scope":4331,"src":"11996:135:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4329,"nodeType":"Block","src":"12749:219:27","statements":[{"assignments":[4314],"declarations":[{"constant":false,"id":4314,"mutability":"mutable","name":"store","nameLocation":"12776:5:27","nodeType":"VariableDeclaration","scope":4329,"src":"12759:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4313,"nodeType":"ArrayTypeName","src":"12759:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4319,"initialValue":{"arguments":[{"expression":{"id":4316,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"12792:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4317,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4200,"src":"12792:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3729_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4315,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"12784:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3729_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:27"},{"assignments":[4324],"declarations":[{"constant":false,"id":4324,"mutability":"mutable","name":"result","nameLocation":"12830:6:27","nodeType":"VariableDeclaration","scope":4329,"src":"12813:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4322,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4323,"nodeType":"ArrayTypeName","src":"12813:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4325,"nodeType":"VariableDeclarationStatement","src":"12813:23:27"},{"AST":{"nodeType":"YulBlock","src":"12899:39:27","statements":[{"nodeType":"YulAssignment","src":"12913:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4324,"isOffset":false,"isSlot":false,"src":"12913:6:27","valueSize":1},{"declaration":4314,"isOffset":false,"isSlot":false,"src":"12923:5:27","valueSize":1}],"id":4326,"nodeType":"InlineAssembly","src":"12890:48:27"},{"expression":{"id":4327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"12955:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4309,"id":4328,"nodeType":"Return","src":"12948:13:27"}]},"documentation":{"id":4301,"nodeType":"StructuredDocumentation","src":"12137:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4330,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:27","nodeType":"FunctionDefinition","parameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"set","nameLocation":"12703:3:27","nodeType":"VariableDeclaration","scope":4330,"src":"12687:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4303,"nodeType":"UserDefinedTypeName","pathNode":{"id":4302,"name":"UintSet","nameLocations":["12687:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4201,"src":"12687:7:27"},"referencedDeclaration":4201,"src":"12687:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4201_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12686:21:27"},"returnParameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4330,"src":"12731:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4307,"nodeType":"ArrayTypeName","src":"12731:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:27"},"scope":4331,"src":"12671:297:27","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4332,"src":"1330:11640:27","usedErrors":[],"usedEvents":[]}],"src":"205:12766:27"},"id":27},"contracts/EurocupLegends.sol":{"ast":{"absolutePath":"contracts/EurocupLegends.sol","exportedSymbols":{"AlreadyClaimedPrize":[4959],"EurocupLegends":[4770],"FeeTransferFailed":[4973],"IEurocupLegends":[4794],"ITickets":[4814],"InvalidMintPrice":[4955],"MintClosed":[4977],"MintLimitExceeded":[4953],"NoPrizeForThisTicket":[4957],"NoTickets":[4961],"NoWinnersYet":[4975],"Ownable":[3457],"TransferFailed":[4967],"ZeroAddress":[4963],"ZeroAmount":[4965]},"id":4771,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4333,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4771,"sourceUnit":3458,"src":"57:67:28","symbolAliases":[{"foreign":{"id":4334,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"65:7:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","file":"./interfaces/IEurocupLegends.sol","id":4337,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4771,"sourceUnit":4795,"src":"125:65:28","symbolAliases":[{"foreign":{"id":4336,"name":"IEurocupLegends","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"133:15:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ITickets.sol","file":"./interfaces/ITickets.sol","id":4339,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4771,"sourceUnit":4815,"src":"191:51:28","symbolAliases":[{"foreign":{"id":4338,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"199:8:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"./utils/Errors.sol","id":4340,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4771,"sourceUnit":4978,"src":"243:28:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4341,"name":"IEurocupLegends","nameLocations":["300:15:28"],"nodeType":"IdentifierPath","referencedDeclaration":4794,"src":"300:15:28"},"id":4342,"nodeType":"InheritanceSpecifier","src":"300:15:28"},{"baseName":{"id":4343,"name":"Ownable","nameLocations":["317:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":3457,"src":"317:7:28"},"id":4344,"nodeType":"InheritanceSpecifier","src":"317:7:28"}],"canonicalName":"EurocupLegends","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4770,"linearizedBaseContracts":[4770,3457,3487,4794],"name":"EurocupLegends","nameLocation":"282:14:28","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"000b46f8","id":4347,"mutability":"constant","name":"FEE_PERCENTAGE","nameLocation":"355:14:28","nodeType":"VariableDeclaration","scope":4770,"src":"331:43:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4345,"name":"uint256","nodeType":"ElementaryTypeName","src":"331:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"372:2:28","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"5fc5e020","id":4350,"mutability":"constant","name":"SHARE_PRECISION","nameLocation":"404:15:28","nodeType":"VariableDeclaration","scope":4770,"src":"380:45:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4348,"name":"uint256","nodeType":"ElementaryTypeName","src":"380:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:3:28","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"29a62a76","id":4353,"mutability":"constant","name":"MAX_WINNERS","nameLocation":"455:11:28","nodeType":"VariableDeclaration","scope":4770,"src":"431:39:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4351,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"469:1:28","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"id":4357,"mutability":"mutable","name":"s_creators","nameLocation":"495:10:28","nodeType":"VariableDeclaration","scope":4770,"src":"477:28:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":4355,"nodeType":"UserDefinedTypeName","pathNode":{"id":4354,"name":"Creator","nameLocations":["477:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":4777,"src":"477:7:28"},"referencedDeclaration":4777,"src":"477:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":4356,"nodeType":"ArrayTypeName","src":"477:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"private"},{"constant":false,"id":4361,"mutability":"mutable","name":"s_winners","nameLocation":"530:9:28","nodeType":"VariableDeclaration","scope":4770,"src":"511:28:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3]"},"typeName":{"baseType":{"id":4358,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4360,"length":{"hexValue":"33","id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"519:1:28","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"511:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"private"},{"constant":false,"id":4364,"mutability":"mutable","name":"s_isMintOpen","nameLocation":"559:12:28","nodeType":"VariableDeclaration","scope":4770,"src":"546:32:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4362,"name":"bool","nodeType":"ElementaryTypeName","src":"546:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":4363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"574:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"private"},{"constant":false,"id":4368,"mutability":"mutable","name":"s_prizes","nameLocation":"634:8:28","nodeType":"VariableDeclaration","scope":4770,"src":"585:57:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4367,"keyName":"ticket","keyNameLocation":"601:6:28","keyType":{"id":4365,"name":"address","nodeType":"ElementaryTypeName","src":"593:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"585:40:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"prize","valueNameLocation":"619:5:28","valueType":{"id":4366,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":4374,"mutability":"mutable","name":"s_isClaimed","nameLocation":"723:11:28","nodeType":"VariableDeclaration","scope":4770,"src":"648:86:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":4373,"keyName":"user","keyNameLocation":"664:4:28","keyType":{"id":4369,"name":"address","nodeType":"ElementaryTypeName","src":"656:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"648:66:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4372,"keyName":"ticket","keyNameLocation":"688:6:28","keyType":{"id":4370,"name":"address","nodeType":"ElementaryTypeName","src":"680:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"672:41:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"isClaimed","valueNameLocation":"703:9:28","valueType":{"id":4371,"name":"bool","nodeType":"ElementaryTypeName","src":"698:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":4406,"nodeType":"Block","src":"813:112:28","statements":[{"body":{"id":4404,"nodeType":"Block","src":"865:54:28","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4399,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"895:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":4401,"indexExpression":{"id":4400,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"905:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"895:12:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}],"expression":{"id":4396,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"879:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"890:4:28","memberName":"push","nodeType":"MemberAccess","src":"879:15:28","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Creator_$4777_storage_$dyn_storage_ptr_$_t_struct$_Creator_$4777_storage_$returns$__$attached_to$_t_array$_t_struct$_Creator_$4777_storage_$dyn_storage_ptr_$","typeString":"function (struct IEurocupLegends.Creator storage ref[] storage pointer,struct IEurocupLegends.Creator storage ref)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"879:29:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4403,"nodeType":"ExpressionStatement","src":"879:29:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4389,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"838:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4390,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"842:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"852:6:28","memberName":"length","nodeType":"MemberAccess","src":"842:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"838:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4405,"initializationExpression":{"assignments":[4387],"declarations":[{"constant":false,"id":4387,"mutability":"mutable","name":"i","nameLocation":"835:1:28","nodeType":"VariableDeclaration","scope":4405,"src":"827:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4386,"name":"uint256","nodeType":"ElementaryTypeName","src":"827:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4388,"nodeType":"VariableDeclarationStatement","src":"827:9:28"},"loopExpression":{"expression":{"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"860:3:28","subExpression":{"id":4393,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"860:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4395,"nodeType":"ExpressionStatement","src":"860:3:28"},"nodeType":"ForStatement","src":"823:96:28"}]},"id":4407,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4383,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"805:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4384,"kind":"baseConstructorSpecifier","modifierName":{"id":4382,"name":"Ownable","nameLocations":["797:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":3457,"src":"797:7:28"},"nodeType":"ModifierInvocation","src":"797:15:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4378,"mutability":"mutable","name":"_creators","nameLocation":"770:9:28","nodeType":"VariableDeclaration","scope":4407,"src":"753:26:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":4376,"nodeType":"UserDefinedTypeName","pathNode":{"id":4375,"name":"Creator","nameLocations":["753:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":4777,"src":"753:7:28"},"referencedDeclaration":4777,"src":"753:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":4377,"nodeType":"ArrayTypeName","src":"753:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"},{"constant":false,"id":4380,"mutability":"mutable","name":"_owner","nameLocation":"789:6:28","nodeType":"VariableDeclaration","scope":4407,"src":"781:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4379,"name":"address","nodeType":"ElementaryTypeName","src":"781:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:44:28"},"returnParameters":{"id":4385,"nodeType":"ParameterList","parameters":[],"src":"813:0:28"},"scope":4770,"src":"741:184:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4416,"nodeType":"Block","src":"953:65:28","statements":[{"condition":{"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"966:13:28","subExpression":{"id":4409,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"967:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4414,"nodeType":"IfStatement","src":"963:37:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4411,"name":"MintClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"988:10:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"988:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4413,"nodeType":"RevertStatement","src":"981:19:28"}},{"id":4415,"nodeType":"PlaceholderStatement","src":"1010:1:28"}]},"id":4417,"name":"isMintOpen","nameLocation":"940:10:28","nodeType":"ModifierDefinition","parameters":{"id":4408,"nodeType":"ParameterList","parameters":[],"src":"950:2:28"},"src":"931:87:28","virtual":false,"visibility":"internal"},{"body":{"id":4432,"nodeType":"Block","src":"1084:81:28","statements":[{"expression":{"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4424,"name":"s_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"1094:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4425,"name":"_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"1109:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1094:26:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4427,"nodeType":"ExpressionStatement","src":"1094:26:28"},{"eventCall":{"arguments":[{"id":4429,"name":"_isMintOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"1146:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4428,"name":"MintStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"1135:10:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4431,"nodeType":"EmitStatement","src":"1130:28:28"}]},"functionSelector":"1f85e3ca","id":4433,"implemented":true,"kind":"function","modifiers":[{"id":4422,"kind":"modifierInvocation","modifierName":{"id":4421,"name":"onlyOwner","nameLocations":["1074:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":3368,"src":"1074:9:28"},"nodeType":"ModifierInvocation","src":"1074:9:28"}],"name":"setMintStatus","nameLocation":"1033:13:28","nodeType":"FunctionDefinition","parameters":{"id":4420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4419,"mutability":"mutable","name":"_isMintOpen","nameLocation":"1052:11:28","nodeType":"VariableDeclaration","scope":4433,"src":"1047:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4418,"name":"bool","nodeType":"ElementaryTypeName","src":"1047:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1046:18:28"},"returnParameters":{"id":4423,"nodeType":"ParameterList","parameters":[],"src":"1084:0:28"},"scope":4770,"src":"1024:141:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4494,"nodeType":"Block","src":"1289:300:28","statements":[{"body":{"id":4488,"nodeType":"Block","src":"1336:211:28","statements":[{"assignments":[4456],"declarations":[{"constant":false,"id":4456,"mutability":"mutable","name":"winner","nameLocation":"1358:6:28","nodeType":"VariableDeclaration","scope":4488,"src":"1350:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4455,"name":"address","nodeType":"ElementaryTypeName","src":"1350:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4460,"initialValue":{"baseExpression":{"id":4457,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"1367:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}},"id":4459,"indexExpression":{"id":4458,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"1376:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1367:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1350:28:28"},{"assignments":[4462],"declarations":[{"constant":false,"id":4462,"mutability":"mutable","name":"prize","nameLocation":"1400:5:28","nodeType":"VariableDeclaration","scope":4488,"src":"1392:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4461,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4475,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4465,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1417:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_EurocupLegends_$4770","typeString":"contract EurocupLegends"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EurocupLegends_$4770","typeString":"contract EurocupLegends"}],"id":4464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1409:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4463,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:28","typeDescriptions":{}}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1409:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1423:7:28","memberName":"balance","nodeType":"MemberAccess","src":"1409:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"baseExpression":{"id":4468,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"1433:7:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3] calldata"}},"id":4470,"indexExpression":{"id":4469,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"1441:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1433:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1409:34:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4472,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1408:36:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4473,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"1447:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1408:54:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1392:70:28"},{"expression":{"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4476,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"1477:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":4478,"indexExpression":{"id":4477,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"1487:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1477:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4479,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"1492:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1477:21:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4481,"nodeType":"ExpressionStatement","src":"1477:21:28"},{"expression":{"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4482,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"1512:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4484,"indexExpression":{"id":4483,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"1521:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1512:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4485,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"1531:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1512:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4487,"nodeType":"ExpressionStatement","src":"1512:24:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4449,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"1314:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4450,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"1318:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1314:15:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4489,"initializationExpression":{"assignments":[4447],"declarations":[{"constant":false,"id":4447,"mutability":"mutable","name":"i","nameLocation":"1311:1:28","nodeType":"VariableDeclaration","scope":4489,"src":"1303:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4446,"name":"uint256","nodeType":"ElementaryTypeName","src":"1303:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4448,"nodeType":"VariableDeclarationStatement","src":"1303:9:28"},"loopExpression":{"expression":{"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1331:3:28","subExpression":{"id":4452,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"1331:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4454,"nodeType":"ExpressionStatement","src":"1331:3:28"},"nodeType":"ForStatement","src":"1299:248:28"},{"eventCall":{"arguments":[{"id":4491,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"1573:8:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}],"id":4490,"name":"WinnersSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"1562:10:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_address_$3_memory_ptr_$returns$__$","typeString":"function (address[3] memory)"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1562:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4493,"nodeType":"EmitStatement","src":"1557:25:28"}]},"functionSelector":"76602f2f","id":4495,"implemented":true,"kind":"function","modifiers":[{"id":4444,"kind":"modifierInvocation","modifierName":{"id":4443,"name":"onlyOwner","nameLocations":["1279:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":3368,"src":"1279:9:28"},"nodeType":"ModifierInvocation","src":"1279:9:28"}],"name":"setWinners","nameLocation":"1180:10:28","nodeType":"FunctionDefinition","parameters":{"id":4442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4437,"mutability":"mutable","name":"_winners","nameLocation":"1221:8:28","nodeType":"VariableDeclaration","scope":4495,"src":"1191:38:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":4434,"name":"address","nodeType":"ElementaryTypeName","src":"1191:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4436,"length":{"id":4435,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"1199:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"1191:20:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"},{"constant":false,"id":4441,"mutability":"mutable","name":"_shares","nameLocation":"1261:7:28","nodeType":"VariableDeclaration","scope":4495,"src":"1231:37:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":4438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4440,"length":{"id":4439,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"1239:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"1231:20:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"1190:79:28"},"returnParameters":{"id":4445,"nodeType":"ParameterList","parameters":[],"src":"1289:0:28"},"scope":4770,"src":"1171:418:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4586,"nodeType":"Block","src":"1641:588:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4500,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"1654:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1664:6:28","memberName":"length","nodeType":"MemberAccess","src":"1654:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4502,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"1674:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1654:31:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4507,"nodeType":"IfStatement","src":"1651:57:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4504,"name":"NoWinnersYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"1694:12:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4506,"nodeType":"RevertStatement","src":"1687:21:28"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4508,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1721:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1740:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1732:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4509,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:28","typeDescriptions":{}}},"id":4512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1732:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1721:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4517,"nodeType":"IfStatement","src":"1718:46:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4514,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"1751:11:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1751:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4516,"nodeType":"RevertStatement","src":"1744:20:28"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4518,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"1777:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4520,"indexExpression":{"id":4519,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1786:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1777:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1798:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1777:22:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4526,"nodeType":"IfStatement","src":"1774:56:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4523,"name":"NoPrizeForThisTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"1808:20:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4525,"nodeType":"RevertStatement","src":"1801:29:28"}},{"condition":{"baseExpression":{"baseExpression":{"id":4527,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"1843:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4530,"indexExpression":{"expression":{"id":4528,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1855:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1859:6:28","memberName":"sender","nodeType":"MemberAccess","src":"1855:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1843:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4532,"indexExpression":{"id":4531,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1867:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1843:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4536,"nodeType":"IfStatement","src":"1840:65:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4533,"name":"AlreadyClaimedPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"1884:19:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1884:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4535,"nodeType":"RevertStatement","src":"1877:28:28"}},{"assignments":[4538],"declarations":[{"constant":false,"id":4538,"mutability":"mutable","name":"prize","nameLocation":"1924:5:28","nodeType":"VariableDeclaration","scope":4586,"src":"1916:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4537,"name":"uint256","nodeType":"ElementaryTypeName","src":"1916:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4544,"initialValue":{"arguments":[{"expression":{"id":4540,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1941:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1945:6:28","memberName":"sender","nodeType":"MemberAccess","src":"1941:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4542,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1953:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4539,"name":"getPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1932:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1932:29:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1916:45:28"},{"expression":{"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4545,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"1972:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4547,"indexExpression":{"id":4546,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1981:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1972:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4548,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"1992:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4550,"indexExpression":{"id":4549,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"2001:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1992:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4551,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"2012:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1992:25:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1972:45:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4554,"nodeType":"ExpressionStatement","src":"1972:45:28"},{"expression":{"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4555,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"2027:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4559,"indexExpression":{"expression":{"id":4556,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2039:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2043:6:28","memberName":"sender","nodeType":"MemberAccess","src":"2039:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2027:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4560,"indexExpression":{"id":4558,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"2051:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2027:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2062:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2027:39:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4563,"nodeType":"ExpressionStatement","src":"2027:39:28"},{"assignments":[4565,null],"declarations":[{"constant":false,"id":4565,"mutability":"mutable","name":"success","nameLocation":"2083:7:28","nodeType":"VariableDeclaration","scope":4586,"src":"2078:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4564,"name":"bool","nodeType":"ElementaryTypeName","src":"2078:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4573,"initialValue":{"arguments":[{"hexValue":"","id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2126:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":4566,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2096:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2100:6:28","memberName":"sender","nodeType":"MemberAccess","src":"2096:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2107:4:28","memberName":"call","nodeType":"MemberAccess","src":"2096:15:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4569,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"2119:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2096:29:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2077:52:28"},{"condition":{"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2142:8:28","subExpression":{"id":4574,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"2143:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4579,"nodeType":"IfStatement","src":"2139:36:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4576,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"2159:14:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4578,"nodeType":"RevertStatement","src":"2152:23:28"}},{"eventCall":{"arguments":[{"expression":{"id":4581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2204:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2208:6:28","memberName":"sender","nodeType":"MemberAccess","src":"2204:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4583,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"2216:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4580,"name":"PrizeClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"2191:12:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2191:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4585,"nodeType":"EmitStatement","src":"2186:36:28"}]},"functionSelector":"e5e9b661","id":4587,"implemented":true,"kind":"function","modifiers":[],"name":"claimPrize","nameLocation":"1604:10:28","nodeType":"FunctionDefinition","parameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"_ticket","nameLocation":"1623:7:28","nodeType":"VariableDeclaration","scope":4587,"src":"1615:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4496,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1614:17:28"},"returnParameters":{"id":4499,"nodeType":"ParameterList","parameters":[],"src":"1641:0:28"},"scope":4770,"src":"1595:634:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4602,"nodeType":"Block","src":"2315:51:28","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4596,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"2332:11:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4598,"indexExpression":{"id":4597,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"2344:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2332:18:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4600,"indexExpression":{"id":4599,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"2351:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2332:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4595,"id":4601,"nodeType":"Return","src":"2325:34:28"}]},"functionSelector":"a4df0758","id":4603,"implemented":true,"kind":"function","modifiers":[],"name":"isClaimed","nameLocation":"2244:9:28","nodeType":"FunctionDefinition","parameters":{"id":4592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4589,"mutability":"mutable","name":"_user","nameLocation":"2262:5:28","nodeType":"VariableDeclaration","scope":4603,"src":"2254:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4588,"name":"address","nodeType":"ElementaryTypeName","src":"2254:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4591,"mutability":"mutable","name":"_ticket","nameLocation":"2277:7:28","nodeType":"VariableDeclaration","scope":4603,"src":"2269:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4590,"name":"address","nodeType":"ElementaryTypeName","src":"2269:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2253:32:28"},"returnParameters":{"id":4595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4603,"src":"2309:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4593,"name":"bool","nodeType":"ElementaryTypeName","src":"2309:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2308:6:28"},"scope":4770,"src":"2235:131:28","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4612,"nodeType":"Block","src":"2436:34:28","statements":[{"expression":{"id":4610,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"2453:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"functionReturnParameters":4609,"id":4611,"nodeType":"Return","src":"2446:17:28"}]},"functionSelector":"e6adc1ee","id":4613,"implemented":true,"kind":"function","modifiers":[],"name":"getCreators","nameLocation":"2381:11:28","nodeType":"FunctionDefinition","parameters":{"id":4604,"nodeType":"ParameterList","parameters":[],"src":"2392:2:28"},"returnParameters":{"id":4609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4613,"src":"2418:16:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":4606,"nodeType":"UserDefinedTypeName","pathNode":{"id":4605,"name":"Creator","nameLocations":["2418:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":4777,"src":"2418:7:28"},"referencedDeclaration":4777,"src":"2418:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":4607,"nodeType":"ArrayTypeName","src":"2418:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"}],"src":"2417:18:28"},"scope":4770,"src":"2372:98:28","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4622,"nodeType":"Block","src":"2540:33:28","statements":[{"expression":{"id":4620,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2557:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"functionReturnParameters":4619,"id":4621,"nodeType":"Return","src":"2550:16:28"}]},"functionSelector":"df15c37e","id":4623,"implemented":true,"kind":"function","modifiers":[],"name":"getWinners","nameLocation":"2485:10:28","nodeType":"FunctionDefinition","parameters":{"id":4614,"nodeType":"ParameterList","parameters":[],"src":"2495:2:28"},"returnParameters":{"id":4619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4623,"src":"2521:17:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":4615,"name":"address","nodeType":"ElementaryTypeName","src":"2521:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4617,"length":{"hexValue":"33","id":4616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2529:1:28","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2521:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"2520:19:28"},"scope":4770,"src":"2476:97:28","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4669,"nodeType":"Block","src":"2659:296:28","statements":[{"assignments":[4633],"declarations":[{"constant":false,"id":4633,"mutability":"mutable","name":"ticketPrize","nameLocation":"2677:11:28","nodeType":"VariableDeclaration","scope":4669,"src":"2669:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4632,"name":"uint256","nodeType":"ElementaryTypeName","src":"2669:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4637,"initialValue":{"baseExpression":{"id":4634,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"2691:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4636,"indexExpression":{"id":4635,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"2700:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2691:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2669:39:28"},{"assignments":[4639],"declarations":[{"constant":false,"id":4639,"mutability":"mutable","name":"userTickets","nameLocation":"2726:11:28","nodeType":"VariableDeclaration","scope":4669,"src":"2718:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2718:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4646,"initialValue":{"arguments":[{"id":4644,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"2768:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":4641,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"2749:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4640,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"2740:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITickets_$4814_$","typeString":"type(contract ITickets)"}},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITickets_$4814","typeString":"contract ITickets"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2758:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1798,"src":"2740:27:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2718:56:28"},{"assignments":[4648],"declarations":[{"constant":false,"id":4648,"mutability":"mutable","name":"totalTickets","nameLocation":"2792:12:28","nodeType":"VariableDeclaration","scope":4669,"src":"2784:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4647,"name":"uint256","nodeType":"ElementaryTypeName","src":"2784:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4654,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4650,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"2816:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4649,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"2807:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITickets_$4814_$","typeString":"type(contract ITickets)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2807:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITickets_$4814","typeString":"contract ITickets"}},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2825:11:28","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":1790,"src":"2807:29:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2807:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2784:54:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4655,"name":"userTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"2852:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2867:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2852:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4661,"nodeType":"IfStatement","src":"2849:39:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4658,"name":"NoTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"2877:9:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4660,"nodeType":"RevertStatement","src":"2870:18:28"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4662,"name":"userTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"2907:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4663,"name":"ticketPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"2921:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2907:25:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4665,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2906:27:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4666,"name":"totalTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"2936:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2906:42:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4631,"id":4668,"nodeType":"Return","src":"2899:49:28"}]},"functionSelector":"7eef2509","id":4670,"implemented":true,"kind":"function","modifiers":[],"name":"getPrize","nameLocation":"2588:8:28","nodeType":"FunctionDefinition","parameters":{"id":4628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4625,"mutability":"mutable","name":"_user","nameLocation":"2605:5:28","nodeType":"VariableDeclaration","scope":4670,"src":"2597:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4624,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4627,"mutability":"mutable","name":"_ticket","nameLocation":"2620:7:28","nodeType":"VariableDeclaration","scope":4670,"src":"2612:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4626,"name":"address","nodeType":"ElementaryTypeName","src":"2612:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2596:32:28"},"returnParameters":{"id":4631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4670,"src":"2650:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4629,"name":"uint256","nodeType":"ElementaryTypeName","src":"2650:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2649:9:28"},"scope":4770,"src":"2579:376:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4681,"nodeType":"Block","src":"3032:41:28","statements":[{"expression":{"baseExpression":{"id":4677,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"3049:8:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4679,"indexExpression":{"id":4678,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"3058:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3049:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4676,"id":4680,"nodeType":"Return","src":"3042:24:28"}]},"functionSelector":"9966db94","id":4682,"implemented":true,"kind":"function","modifiers":[],"name":"getTicketPrize","nameLocation":"2970:14:28","nodeType":"FunctionDefinition","parameters":{"id":4673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4672,"mutability":"mutable","name":"_ticket","nameLocation":"2993:7:28","nodeType":"VariableDeclaration","scope":4682,"src":"2985:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4671,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2984:17:28"},"returnParameters":{"id":4676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4682,"src":"3023:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4674,"name":"uint256","nodeType":"ElementaryTypeName","src":"3023:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3022:9:28"},"scope":4770,"src":"2961:112:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4750,"nodeType":"Block","src":"3139:525:28","statements":[{"assignments":[4690],"declarations":[{"constant":false,"id":4690,"mutability":"mutable","name":"fees","nameLocation":"3184:4:28","nodeType":"VariableDeclaration","scope":4750,"src":"3176:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4689,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4697,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4691,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"3192:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4692,"name":"FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"3202:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3192:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4694,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3191:26:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4695,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"3220:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3191:44:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3176:59:28"},{"assignments":[4699],"declarations":[{"constant":false,"id":4699,"mutability":"mutable","name":"creatorsLength","nameLocation":"3254:14:28","nodeType":"VariableDeclaration","scope":4750,"src":"3246:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4698,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4702,"initialValue":{"expression":{"id":4700,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"3271:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3282:6:28","memberName":"length","nodeType":"MemberAccess","src":"3271:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3246:42:28"},{"body":{"id":4748,"nodeType":"Block","src":"3375:283:28","statements":[{"assignments":[4714],"declarations":[{"constant":false,"id":4714,"mutability":"mutable","name":"creator","nameLocation":"3404:7:28","nodeType":"VariableDeclaration","scope":4748,"src":"3389:22:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator"},"typeName":{"id":4713,"nodeType":"UserDefinedTypeName","pathNode":{"id":4712,"name":"Creator","nameLocations":["3389:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":4777,"src":"3389:7:28"},"referencedDeclaration":4777,"src":"3389:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"visibility":"internal"}],"id":4718,"initialValue":{"baseExpression":{"id":4715,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"3414:10:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$4777_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":4717,"indexExpression":{"id":4716,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"3425:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3414:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_storage","typeString":"struct IEurocupLegends.Creator storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3389:38:28"},{"assignments":[4720],"declarations":[{"constant":false,"id":4720,"mutability":"mutable","name":"feeCut","nameLocation":"3450:6:28","nodeType":"VariableDeclaration","scope":4748,"src":"3442:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4719,"name":"uint256","nodeType":"ElementaryTypeName","src":"3442:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4728,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4721,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"3460:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4722,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"3467:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":4723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3475:5:28","memberName":"share","nodeType":"MemberAccess","referencedDeclaration":4776,"src":"3467:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3460:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4725,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3459:22:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4726,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"3484:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3459:40:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3442:57:28"},{"assignments":[4730,null],"declarations":[{"constant":false,"id":4730,"mutability":"mutable","name":"success","nameLocation":"3520:7:28","nodeType":"VariableDeclaration","scope":4748,"src":"3515:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4729,"name":"bool","nodeType":"ElementaryTypeName","src":"3515:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4738,"initialValue":{"arguments":[{"hexValue":"","id":4736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3568:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":4731,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"3532:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":4732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3540:7:28","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":4774,"src":"3532:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3548:4:28","memberName":"call","nodeType":"MemberAccess","src":"3532:20:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4734,"name":"feeCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"3560:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3532:35:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3532:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3514:57:28"},{"condition":{"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3588:8:28","subExpression":{"id":4739,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"3589:7:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4747,"nodeType":"IfStatement","src":"3585:62:28","trueBody":{"errorCall":{"arguments":[{"expression":{"id":4742,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"3623:7:28","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$4777_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":4743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3631:7:28","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":4774,"src":"3623:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4744,"name":"feeCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"3640:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4741,"name":"FeeTransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"3605:17:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3605:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4746,"nodeType":"RevertStatement","src":"3598:49:28"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4706,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"3350:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4707,"name":"creatorsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4699,"src":"3354:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3350:18:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4749,"initializationExpression":{"assignments":[4704],"declarations":[{"constant":false,"id":4704,"mutability":"mutable","name":"i","nameLocation":"3347:1:28","nodeType":"VariableDeclaration","scope":4749,"src":"3339:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4703,"name":"uint256","nodeType":"ElementaryTypeName","src":"3339:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4705,"nodeType":"VariableDeclarationStatement","src":"3339:9:28"},"loopExpression":{"expression":{"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3370:3:28","subExpression":{"id":4709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"3370:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4711,"nodeType":"ExpressionStatement","src":"3370:3:28"},"nodeType":"ForStatement","src":"3335:323:28"}]},"id":4751,"implemented":true,"kind":"function","modifiers":[{"id":4687,"kind":"modifierInvocation","modifierName":{"id":4686,"name":"isMintOpen","nameLocations":["3128:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":4417,"src":"3128:10:28"},"nodeType":"ModifierInvocation","src":"3128:10:28"}],"name":"_handleDeposit","nameLocation":"3088:14:28","nodeType":"FunctionDefinition","parameters":{"id":4685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"_amount","nameLocation":"3111:7:28","nodeType":"VariableDeclaration","scope":4751,"src":"3103:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4683,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3102:17:28"},"returnParameters":{"id":4688,"nodeType":"ParameterList","parameters":[],"src":"3139:0:28"},"scope":4770,"src":"3079:585:28","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4759,"nodeType":"Block","src":"3697:42:28","statements":[{"expression":{"arguments":[{"expression":{"id":4755,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3722:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3726:5:28","memberName":"value","nodeType":"MemberAccess","src":"3722:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4754,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"3707:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3707:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4758,"nodeType":"ExpressionStatement","src":"3707:25:28"}]},"id":4760,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4752,"nodeType":"ParameterList","parameters":[],"src":"3677:2:28"},"returnParameters":{"id":4753,"nodeType":"ParameterList","parameters":[],"src":"3697:0:28"},"scope":4770,"src":"3670:69:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4768,"nodeType":"Block","src":"3773:42:28","statements":[{"expression":{"arguments":[{"expression":{"id":4764,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3798:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3802:5:28","memberName":"value","nodeType":"MemberAccess","src":"3798:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4763,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"3783:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3783:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4767,"nodeType":"ExpressionStatement","src":"3783:25:28"}]},"id":4769,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4761,"nodeType":"ParameterList","parameters":[],"src":"3753:2:28"},"returnParameters":{"id":4762,"nodeType":"ParameterList","parameters":[],"src":"3773:0:28"},"scope":4770,"src":"3745:70:28","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4771,"src":"273:3544:28","usedErrors":[3323,3328,4957,4959,4961,4963,4967,4973,4975,4977],"usedEvents":[3334,4783,4789,4793]}],"src":"32:3785:28"},"id":28},"contracts/interfaces/IEurocupLegends.sol":{"ast":{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","exportedSymbols":{"IEurocupLegends":[4794]},"id":4795,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4772,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IEurocupLegends","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":4794,"linearizedBaseContracts":[4794],"name":"IEurocupLegends","nameLocation":"67:15:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IEurocupLegends.Creator","id":4777,"members":[{"constant":false,"id":4774,"mutability":"mutable","name":"creator","nameLocation":"122:7:29","nodeType":"VariableDeclaration","scope":4777,"src":"114:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4773,"name":"address","nodeType":"ElementaryTypeName","src":"114:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4776,"mutability":"mutable","name":"share","nameLocation":"147:5:29","nodeType":"VariableDeclaration","scope":4777,"src":"139:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"139:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Creator","nameLocation":"96:7:29","nodeType":"StructDefinition","scope":4794,"src":"89:70:29","visibility":"public"},{"anonymous":false,"eventSelector":"60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea","id":4783,"name":"WinnersSet","nameLocation":"171:10:29","nodeType":"EventDefinition","parameters":{"id":4782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4781,"indexed":false,"mutability":"mutable","name":"winners","nameLocation":"193:7:29","nodeType":"VariableDeclaration","scope":4783,"src":"182:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":4778,"name":"address","nodeType":"ElementaryTypeName","src":"182:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4780,"length":{"hexValue":"33","id":4779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"190:1:29","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"182:10:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"181:20:29"},"src":"165:37:29"},{"anonymous":false,"eventSelector":"95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770","id":4789,"name":"PrizeClaimed","nameLocation":"213:12:29","nodeType":"EventDefinition","parameters":{"id":4788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4785,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"234:5:29","nodeType":"VariableDeclaration","scope":4789,"src":"226:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4784,"name":"address","nodeType":"ElementaryTypeName","src":"226:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4787,"indexed":false,"mutability":"mutable","name":"prize","nameLocation":"249:5:29","nodeType":"VariableDeclaration","scope":4789,"src":"241:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4786,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"225:30:29"},"src":"207:49:29"},{"anonymous":false,"eventSelector":"aff50328f57c9ced983a9e3c360c67ee11633d860350531f0c11fc435751448c","id":4793,"name":"MintStatus","nameLocation":"267:10:29","nodeType":"EventDefinition","parameters":{"id":4792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4791,"indexed":false,"mutability":"mutable","name":"isMintOpen","nameLocation":"283:10:29","nodeType":"VariableDeclaration","scope":4793,"src":"278:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4790,"name":"bool","nodeType":"ElementaryTypeName","src":"278:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"277:17:29"},"src":"261:34:29"}],"scope":4795,"src":"57:240:29","usedErrors":[],"usedEvents":[4783,4789,4793]}],"src":"32:265:29"},"id":29},"contracts/interfaces/ITickets.sol":{"ast":{"absolutePath":"contracts/interfaces/ITickets.sol","exportedSymbols":{"ILSP7DigitalAsset":[1905],"ITickets":[4814]},"id":4815,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4796,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","file":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","id":4798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4815,"sourceUnit":1906,"src":"57:88:30","symbolAliases":[{"foreign":{"id":4797,"name":"ILSP7DigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"65:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4799,"name":"ILSP7DigitalAsset","nameLocations":["168:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":1905,"src":"168:17:30"},"id":4800,"nodeType":"InheritanceSpecifier","src":"168:17:30"}],"canonicalName":"ITickets","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4814,"linearizedBaseContracts":[4814,1905,505,3718],"name":"ITickets","nameLocation":"156:8:30","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"64f70b72cc0e9e53852e2481e43068b546390216d3d062dbe11d9ecf7580835f","id":4806,"name":"TicketsMinted","nameLocation":"198:13:30","nodeType":"EventDefinition","parameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4802,"indexed":false,"mutability":"mutable","name":"_recipient","nameLocation":"220:10:30","nodeType":"VariableDeclaration","scope":4806,"src":"212:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4801,"name":"address","nodeType":"ElementaryTypeName","src":"212:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4804,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"240:7:30","nodeType":"VariableDeclaration","scope":4806,"src":"232:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4803,"name":"uint256","nodeType":"ElementaryTypeName","src":"232:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"211:37:30"},"src":"192:57:30"},{"functionSelector":"40c10f19","id":4813,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"264:4:30","nodeType":"FunctionDefinition","parameters":{"id":4811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4808,"mutability":"mutable","name":"_recipient","nameLocation":"286:10:30","nodeType":"VariableDeclaration","scope":4813,"src":"278:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4807,"name":"address","nodeType":"ElementaryTypeName","src":"278:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"_amount","nameLocation":"314:7:30","nodeType":"VariableDeclaration","scope":4813,"src":"306:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4809,"name":"uint256","nodeType":"ElementaryTypeName","src":"306:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"268:59:30"},"returnParameters":{"id":4812,"nodeType":"ParameterList","parameters":[],"src":"344:0:30"},"scope":4814,"src":"255:90:30","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4815,"src":"146:201:30","usedErrors":[],"usedEvents":[468,1756,1767,1778,4806]}],"src":"32:315:30"},"id":30},"contracts/tokens/Tickets.sol":{"ast":{"absolutePath":"contracts/tokens/Tickets.sol","exportedSymbols":{"AlreadyClaimedPrize":[4959],"FeeTransferFailed":[4973],"ITickets":[4814],"InvalidMintPrice":[4955],"LSP7DigitalAsset":[2151],"MintClosed":[4977],"MintLimitExceeded":[4953],"NoPrizeForThisTicket":[4957],"NoTickets":[4961],"NoWinnersYet":[4975],"Tickets":[4949],"TransferFailed":[4967],"ZeroAddress":[4963],"ZeroAmount":[4965],"_LSP4_TOKEN_TYPE_NFT":[1538]},"id":4950,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4816,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol","file":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol","id":4818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4950,"sourceUnit":2152,"src":"57:86:31","symbolAliases":[{"foreign":{"id":4817,"name":"LSP7DigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"65:16:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","id":4820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4950,"sourceUnit":1566,"src":"144:87:31","symbolAliases":[{"foreign":{"id":4819,"name":"_LSP4_TOKEN_TYPE_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"152:20:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ITickets.sol","file":"../interfaces/ITickets.sol","id":4822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4950,"sourceUnit":4815,"src":"232:52:31","symbolAliases":[{"foreign":{"id":4821,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"240:8:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"../utils/Errors.sol","id":4823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4950,"sourceUnit":4978,"src":"285:29:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4824,"name":"ITickets","nameLocations":["336:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":4814,"src":"336:8:31"},"id":4825,"nodeType":"InheritanceSpecifier","src":"336:8:31"},{"baseName":{"id":4826,"name":"LSP7DigitalAsset","nameLocations":["346:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":2151,"src":"346:16:31"},"id":4827,"nodeType":"InheritanceSpecifier","src":"346:16:31"}],"canonicalName":"Tickets","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4949,"internalFunctionIDs":{"3510":1},"linearizedBaseContracts":[4949,2151,793,3231,4814,1905,1657,1719,35,270,505,3511,3718,402],"name":"Tickets","nameLocation":"325:7:31","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"32cb6b0c","id":4830,"mutability":"constant","name":"MAX_SUPPLY","nameLocation":"393:10:31","nodeType":"VariableDeclaration","scope":4949,"src":"369:40:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4828,"name":"uint256","nodeType":"ElementaryTypeName","src":"369:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":4829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"406:3:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"f0292a03","id":4833,"mutability":"constant","name":"MAX_MINT","nameLocation":"439:8:31","nodeType":"VariableDeclaration","scope":4949,"src":"415:36:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4831,"name":"uint256","nodeType":"ElementaryTypeName","src":"415:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":4832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"450:1:31","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":false,"id":4835,"mutability":"immutable","name":"i_prizePool","nameLocation":"483:11:31","nodeType":"VariableDeclaration","scope":4949,"src":"457:37:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4834,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":4837,"mutability":"immutable","name":"i_price","nameLocation":"526:7:31","nodeType":"VariableDeclaration","scope":4949,"src":"500:33:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4836,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":4865,"nodeType":"Block","src":"763:67:31","statements":[{"expression":{"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4857,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"773:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4858,"name":"_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"787:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"773:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4860,"nodeType":"ExpressionStatement","src":"773:24:31"},{"expression":{"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4861,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"807:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4862,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"817:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"807:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4864,"nodeType":"ExpressionStatement","src":"807:16:31"}]},"id":4866,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4850,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"711:5:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4851,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4841,"src":"718:7:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4852,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"727:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4853,"name":"_LSP4_TOKEN_TYPE_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"735:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":4854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"757:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"id":4855,"kind":"baseConstructorSpecifier","modifierName":{"id":4849,"name":"LSP7DigitalAsset","nameLocations":["694:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":2151,"src":"694:16:31"},"nodeType":"ModifierInvocation","src":"694:68:31"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"_name","nameLocation":"575:5:31","nodeType":"VariableDeclaration","scope":4866,"src":"561:19:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4838,"name":"string","nodeType":"ElementaryTypeName","src":"561:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4841,"mutability":"mutable","name":"_symbol","nameLocation":"604:7:31","nodeType":"VariableDeclaration","scope":4866,"src":"590:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4840,"name":"string","nodeType":"ElementaryTypeName","src":"590:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4843,"mutability":"mutable","name":"_owner","nameLocation":"629:6:31","nodeType":"VariableDeclaration","scope":4866,"src":"621:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4842,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"_prizePool","nameLocation":"653:10:31","nodeType":"VariableDeclaration","scope":4866,"src":"645:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4844,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4847,"mutability":"mutable","name":"_price","nameLocation":"681:6:31","nodeType":"VariableDeclaration","scope":4866,"src":"673:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4846,"name":"uint256","nodeType":"ElementaryTypeName","src":"673:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"551:142:31"},"returnParameters":{"id":4856,"nodeType":"ParameterList","parameters":[],"src":"763:0:31"},"scope":4949,"src":"540:290:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4813],"body":{"id":4931,"nodeType":"Block","src":"926:450:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4873,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"939:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4874,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"957:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"939:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4876,"name":"MAX_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"967:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"939:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4881,"nodeType":"IfStatement","src":"936:69:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4878,"name":"MintLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4953,"src":"986:17:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4880,"nodeType":"RevertStatement","src":"979:26:31"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4883,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"1028:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4882,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"1018:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1018:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4885,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1042:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1018:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4887,"name":"MAX_MINT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"1052:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1018:42:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4892,"nodeType":"IfStatement","src":"1015:73:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4889,"name":"MintLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4953,"src":"1069:17:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1069:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4891,"nodeType":"RevertStatement","src":"1062:26:31"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4893,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1101:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1105:5:31","memberName":"value","nodeType":"MemberAccess","src":"1101:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4895,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"1114:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4896,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1124:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1114:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1101:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4902,"nodeType":"IfStatement","src":"1098:60:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4899,"name":"InvalidMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4955,"src":"1140:16:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1140:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4901,"nodeType":"RevertStatement","src":"1133:25:31"}},{"expression":{"arguments":[{"id":4904,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"1175:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4905,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1187:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1196:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"","id":4907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1203:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4903,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"1169:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bool,bytes memory)"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1169:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4909,"nodeType":"ExpressionStatement","src":"1169:37:31"},{"assignments":[4911,null],"declarations":[{"constant":false,"id":4911,"mutability":"mutable","name":"success","nameLocation":"1223:7:31","nodeType":"VariableDeclaration","scope":4931,"src":"1218:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4910,"name":"bool","nodeType":"ElementaryTypeName","src":"1218:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4919,"initialValue":{"arguments":[{"hexValue":"","id":4917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1270:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4912,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"1235:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1247:4:31","memberName":"call","nodeType":"MemberAccess","src":"1235:16:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":4914,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1259:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1263:5:31","memberName":"value","nodeType":"MemberAccess","src":"1259:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1235:34:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1235:38:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1217:56:31"},{"condition":{"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1286:8:31","subExpression":{"id":4920,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"1287:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4925,"nodeType":"IfStatement","src":"1283:36:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4922,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"1303:14:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1303:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4924,"nodeType":"RevertStatement","src":"1296:23:31"}},{"eventCall":{"arguments":[{"id":4927,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"1349:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4928,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"1361:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4926,"name":"TicketsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"1335:13:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1335:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4930,"nodeType":"EmitStatement","src":"1330:39:31"}]},"functionSelector":"40c10f19","id":4932,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"845:4:31","nodeType":"FunctionDefinition","parameters":{"id":4871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4868,"mutability":"mutable","name":"_recipient","nameLocation":"867:10:31","nodeType":"VariableDeclaration","scope":4932,"src":"859:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4867,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4870,"mutability":"mutable","name":"_amount","nameLocation":"895:7:31","nodeType":"VariableDeclaration","scope":4932,"src":"887:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4869,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"849:59:31"},"returnParameters":{"id":4872,"nodeType":"ParameterList","parameters":[],"src":"926:0:31"},"scope":4949,"src":"836:540:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4939,"nodeType":"Block","src":"1438:35:31","statements":[{"expression":{"id":4937,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"1455:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4936,"id":4938,"nodeType":"Return","src":"1448:18:31"}]},"functionSelector":"884bf67c","id":4940,"implemented":true,"kind":"function","modifiers":[],"name":"getPrizePool","nameLocation":"1391:12:31","nodeType":"FunctionDefinition","parameters":{"id":4933,"nodeType":"ParameterList","parameters":[],"src":"1403:2:31"},"returnParameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4940,"src":"1429:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4934,"name":"address","nodeType":"ElementaryTypeName","src":"1429:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1428:9:31"},"scope":4949,"src":"1382:91:31","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4947,"nodeType":"Block","src":"1531:31:31","statements":[{"expression":{"id":4945,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"1548:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4944,"id":4946,"nodeType":"Return","src":"1541:14:31"}]},"functionSelector":"98d5fdca","id":4948,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"1488:8:31","nodeType":"FunctionDefinition","parameters":{"id":4941,"nodeType":"ParameterList","parameters":[],"src":"1496:2:31"},"returnParameters":{"id":4944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4948,"src":"1522:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1522:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1521:9:31"},"scope":4949,"src":"1479:83:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4950,"src":"316:1248:31","usedErrors":[407,412,448,451,454,649,654,659,1724,1727,1730,3242,3253,3256,3259,3262,3267,3272,3275,3278,3281,3286,3291,3300,3309,4953,4955,4967],"usedEvents":[307,468,1756,1767,1778,4806]}],"src":"32:1532:31"},"id":31},"contracts/utils/Errors.sol":{"ast":{"absolutePath":"contracts/utils/Errors.sol","exportedSymbols":{"AlreadyClaimedPrize":[4959],"FeeTransferFailed":[4973],"InvalidMintPrice":[4955],"MintClosed":[4977],"MintLimitExceeded":[4953],"NoPrizeForThisTicket":[4957],"NoTickets":[4961],"NoWinnersYet":[4975],"TransferFailed":[4967],"ZeroAddress":[4963],"ZeroAmount":[4965]},"id":4978,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4951,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:32"},{"errorSelector":"b643bfa6","id":4953,"name":"MintLimitExceeded","nameLocation":"63:17:32","nodeType":"ErrorDefinition","parameters":{"id":4952,"nodeType":"ParameterList","parameters":[],"src":"80:2:32"},"src":"57:26:32"},{"errorSelector":"0416bc16","id":4955,"name":"InvalidMintPrice","nameLocation":"91:16:32","nodeType":"ErrorDefinition","parameters":{"id":4954,"nodeType":"ParameterList","parameters":[],"src":"107:2:32"},"src":"85:25:32"},{"errorSelector":"d937573f","id":4957,"name":"NoPrizeForThisTicket","nameLocation":"118:20:32","nodeType":"ErrorDefinition","parameters":{"id":4956,"nodeType":"ParameterList","parameters":[],"src":"138:2:32"},"src":"112:29:32"},{"errorSelector":"48798a90","id":4959,"name":"AlreadyClaimedPrize","nameLocation":"149:19:32","nodeType":"ErrorDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[],"src":"168:2:32"},"src":"143:28:32"},{"errorSelector":"66f3ef9b","id":4961,"name":"NoTickets","nameLocation":"179:9:32","nodeType":"ErrorDefinition","parameters":{"id":4960,"nodeType":"ParameterList","parameters":[],"src":"188:2:32"},"src":"173:18:32"},{"errorSelector":"d92e233d","id":4963,"name":"ZeroAddress","nameLocation":"199:11:32","nodeType":"ErrorDefinition","parameters":{"id":4962,"nodeType":"ParameterList","parameters":[],"src":"210:2:32"},"src":"193:20:32"},{"errorSelector":"1f2a2005","id":4965,"name":"ZeroAmount","nameLocation":"221:10:32","nodeType":"ErrorDefinition","parameters":{"id":4964,"nodeType":"ParameterList","parameters":[],"src":"231:2:32"},"src":"215:19:32"},{"errorSelector":"90b8ec18","id":4967,"name":"TransferFailed","nameLocation":"242:14:32","nodeType":"ErrorDefinition","parameters":{"id":4966,"nodeType":"ParameterList","parameters":[],"src":"256:2:32"},"src":"236:23:32"},{"errorSelector":"6e74fa86","id":4973,"name":"FeeTransferFailed","nameLocation":"267:17:32","nodeType":"ErrorDefinition","parameters":{"id":4972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4969,"mutability":"mutable","name":"_creators","nameLocation":"293:9:32","nodeType":"VariableDeclaration","scope":4973,"src":"285:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4968,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4971,"mutability":"mutable","name":"_amount","nameLocation":"312:7:32","nodeType":"VariableDeclaration","scope":4973,"src":"304:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4970,"name":"uint256","nodeType":"ElementaryTypeName","src":"304:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"284:36:32"},"src":"261:60:32"},{"errorSelector":"1bb8ccd6","id":4975,"name":"NoWinnersYet","nameLocation":"329:12:32","nodeType":"ErrorDefinition","parameters":{"id":4974,"nodeType":"ParameterList","parameters":[],"src":"341:2:32"},"src":"323:21:32"},{"errorSelector":"589ed34b","id":4977,"name":"MintClosed","nameLocation":"352:10:32","nodeType":"ErrorDefinition","parameters":{"id":4976,"nodeType":"ParameterList","parameters":[],"src":"362:2:32"},"src":"346:19:32"}],"src":"32:333:32"},"id":32}},"contracts":{"@erc725/smart-contracts/contracts/ERC725Y.sol":{"ERC725Y":{"abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Fabian Vogelsteller <fabian@lukso.network>","details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"constructor":{"custom:requirements":"- `initialOwner` CANNOT be the zero address.","details":"Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.","params":{"initialOwner":"the owner of the contract."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{"@_34":{"entryPoint":null,"id":34,"parameterSlots":1,"returnSlots":0},"@_setOwner_401":{"entryPoint":88,"id":401,"parameterSlots":1,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":197,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:33","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:33"},"nodeType":"YulFunctionCall","src":"143:12:33"},"nodeType":"YulExpressionStatement","src":"143:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:33"},"nodeType":"YulFunctionCall","src":"112:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:33"},"nodeType":"YulFunctionCall","src":"108:32:33"},"nodeType":"YulIf","src":"105:52:33"},{"nodeType":"YulVariableDeclaration","src":"166:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:33"},"nodeType":"YulFunctionCall","src":"179:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:33"},"nodeType":"YulFunctionCall","src":"260:12:33"},"nodeType":"YulExpressionStatement","src":"260:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:33"},"nodeType":"YulFunctionCall","src":"239:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:33"},"nodeType":"YulFunctionCall","src":"235:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:33"},"nodeType":"YulFunctionCall","src":"224:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:33"},"nodeType":"YulFunctionCall","src":"214:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:33"},"nodeType":"YulFunctionCall","src":"207:50:33"},"nodeType":"YulIf","src":"204:70:33"},{"nodeType":"YulAssignment","src":"283:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:33"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:33","type":""}],"src":"14:290:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052604051610bc9380380610bc9833981016040819052610022916100c5565b6001600160a01b038116610049576040516306b620db60e21b815260040160405180910390fd5b61005281610058565b506100f5565b6000546001600160a01b038281169116146100c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0383161790555b50565b6000602082840312156100d757600080fd5b81516001600160a01b03811681146100ee57600080fd5b9392505050565b610ac5806101046000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461010c5780639790242114610134578063dedff9c614610147578063f2fde38b1461017457600080fd5b806301ffc9a71461008057806354f6127f146100b5578063715018a6146100e25780637f23690c146100f9575b600080fd5b34801561008c57600080fd5b506100a061009b36600461056a565b610194565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461059b565b6101cb565b6040516100ac91906105fa565b3480156100ee57600080fd5b506100f76101d6565b005b6100f76101073660046106c4565b6101ea565b34801561011857600080fd5b506000546040516001600160a01b0390911681526020016100ac565b6100f761014236600461079a565b61021f565b34801561015357600080fd5b5061016761016236600461086f565b6102df565b6040516100ac91906108ac565b34801561018057600080fd5b506100f761018f36600461090e565b61038a565b60006001600160e01b031982166318a6a9a560e21b14806101c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606101c5826103c5565b6101de610467565b6101e860006104a7565b565b6101f2610467565b34156102115760405163f36ba73760e01b815260040160405180910390fd5b61021b8282610515565b5050565b610227610467565b34156102465760405163f36ba73760e01b815260040160405180910390fd5b805182511461026857604051633bcc897960e01b815260040160405180910390fd5b815160000361028a576040516397da5f9560e01b815260040160405180910390fd5b60005b82518110156102da576102d28382815181106102ab576102ab610937565b60200260200101518383815181106102c5576102c5610937565b6020026020010151610515565b60010161028d565b505050565b6060815167ffffffffffffffff8111156102fb576102fb61060d565b60405190808252806020026020018201604052801561032e57816020015b60608152602001906001900390816103195790505b50905060005b82518110156103845761035f83828151811061035257610352610937565b60200260200101516103c5565b82828151811061037157610371610937565b6020908102919091010152600101610334565b50919050565b610392610467565b6001600160a01b0381166103b9576040516306b620db60e21b815260040160405180910390fd5b6103c2816104a7565b50565b60008181526001602052604090208054606091906103e29061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461040e9061094d565b801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b50505050509050919050565b3361047a6000546001600160a01b031690565b6001600160a01b0316146101e85760405163bf1169c560e01b815233600482015260240160405180910390fd5b6000546001600160a01b038281169116146103c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b600082815260016020526040902061052d82826109cf565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161055e91906105fa565b60405180910390a25050565b60006020828403121561057c57600080fd5b81356001600160e01b03198116811461059457600080fd5b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b6000815180845260005b818110156105da576020818501810151868301820152016105be565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061059460208301846105b4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064c5761064c61060d565b604052919050565b600082601f83011261066557600080fd5b813567ffffffffffffffff81111561067f5761067f61060d565b610692601f8201601f1916602001610623565b8181528460208386010111156106a757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156106d757600080fd5b82359150602083013567ffffffffffffffff8111156106f557600080fd5b61070185828601610654565b9150509250929050565b600067ffffffffffffffff8211156107255761072561060d565b5060051b60200190565b600082601f83011261074057600080fd5b813560206107556107508361070b565b610623565b82815260059290921b8401810191818101908684111561077457600080fd5b8286015b8481101561078f5780358352918301918301610778565b509695505050505050565b600080604083850312156107ad57600080fd5b823567ffffffffffffffff808211156107c557600080fd5b6107d18683870161072f565b93506020915081850135818111156107e857600080fd5b8501601f810187136107f957600080fd5b80356108076107508261070b565b81815260059190911b8201840190848101908983111561082657600080fd5b8584015b8381101561085e578035868111156108425760008081fd5b6108508c8983890101610654565b84525091860191860161082a565b508096505050505050509250929050565b60006020828403121561088157600080fd5b813567ffffffffffffffff81111561089857600080fd5b6108a48482850161072f565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561090157603f198886030184526108ef8583516105b4565b945092850192908501906001016108d3565b5092979650505050505050565b60006020828403121561092057600080fd5b81356001600160a01b038116811461059457600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061096157607f821691505b60208210810361038457634e487b7160e01b600052602260045260246000fd5b601f8211156102da57600081815260208120601f850160051c810160208610156109a85750805b601f850160051c820191505b818110156109c7578281556001016109b4565b505050505050565b815167ffffffffffffffff8111156109e9576109e961060d565b6109fd816109f7845461094d565b84610981565b602080601f831160018114610a325760008415610a1a5750858301515b600019600386901b1c1916600185901b1785556109c7565b600085815260208120601f198616915b82811015610a6157888601518255948401946001909101908401610a42565b5085821015610a7f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d3480b52e272571da9c53056302564ddf6b57499f51eba25a844439f5d05283f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xBC9 CODESIZE SUB DUP1 PUSH2 0xBC9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x49 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52 DUP2 PUSH2 0x58 JUMP JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xAC5 DUP1 PUSH2 0x104 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x59B JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x8AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1C5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C5 DUP3 PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x0 PUSH2 0x4A7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x515 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x227 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2D2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI PUSH2 0x2AB PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x515 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x28D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FB JUMPI PUSH2 0x2FB PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x319 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x35F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x334 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x392 PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C2 DUP2 PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x3E2 SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40E SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x45B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x430 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x45B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x47A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x52D DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5BE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x594 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH2 0x67F PUSH2 0x60D JUMP JUMPDEST PUSH2 0x692 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x623 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x701 DUP6 DUP3 DUP7 ADD PUSH2 0x654 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0x60D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x755 PUSH2 0x750 DUP4 PUSH2 0x70B JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x78F JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D1 DUP7 DUP4 DUP8 ADD PUSH2 0x72F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x807 PUSH2 0x750 DUP3 PUSH2 0x70B JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x826 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x85E JUMPI DUP1 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x850 DUP13 DUP10 DUP4 DUP10 ADD ADD PUSH2 0x654 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x82A JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A4 DUP5 DUP3 DUP6 ADD PUSH2 0x72F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x901 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x8EF DUP6 DUP4 MLOAD PUSH2 0x5B4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8D3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x961 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x9A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9C7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x9FD DUP2 PUSH2 0x9F7 DUP5 SLOAD PUSH2 0x94D JUMP JUMPDEST DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xA1A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA61 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xA42 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xA7F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 BASEFEE SIGNEXTEND MSTORE 0xE2 PUSH19 0x571DA9C53056302564DDF6B57499F51EBA25A8 PREVRANDAO NUMBER SWAP16 0x5D SDIV 0x28 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"649:610:0:-:0;;;1053:204;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1109:26:0;;1105:100;;1158:36;;-1:-1:-1;;;1158:36:0;;;;;;;;;;;1105:100;1214:36;1237:12;1214:22;:36::i;:::-;1053:204;649:610;;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;;2293:17:3;-1:-1:-1;;;;;2293:17:3;;;;;2197:124;2133:194;:::o;14:290:33:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:33;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:33:o;:::-;649:610:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_379":{"entryPoint":1127,"id":379,"parameterSlots":0,"returnSlots":0},"@_getData_228":{"entryPoint":965,"id":228,"parameterSlots":1,"returnSlots":1},"@_setData_248":{"entryPoint":1301,"id":248,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":1191,"id":401,"parameterSlots":1,"returnSlots":0},"@getDataBatch_126":{"entryPoint":735,"id":126,"parameterSlots":1,"returnSlots":1},"@getData_79":{"entryPoint":459,"id":79,"parameterSlots":1,"returnSlots":1},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_338":{"entryPoint":470,"id":338,"parameterSlots":0,"returnSlots":0},"@setDataBatch_215":{"entryPoint":543,"id":215,"parameterSlots":2,"returnSlots":0},"@setData_151":{"entryPoint":490,"id":151,"parameterSlots":2,"returnSlots":0},"@supportsInterface_269":{"entryPoint":404,"id":269,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3510":{"entryPoint":null,"id":3510,"parameterSlots":1,"returnSlots":1},"@transferOwnership_362":{"entryPoint":906,"id":362,"parameterSlots":1,"returnSlots":0},"abi_decode_array_bytes32_dyn":{"entryPoint":1839,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":1620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2318,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":2159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":1946,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":1435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":1732,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":1386,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":1460,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1530,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1571,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":1803,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":2433,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":2511,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2381,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":2359,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1549,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9257:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:33","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:33"},"nodeType":"YulFunctionCall","src":"131:12:33"},"nodeType":"YulExpressionStatement","src":"131:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:33"},"nodeType":"YulFunctionCall","src":"100:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:33"},"nodeType":"YulFunctionCall","src":"96:32:33"},"nodeType":"YulIf","src":"93:52:33"},{"nodeType":"YulVariableDeclaration","src":"154:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:33"},"nodeType":"YulFunctionCall","src":"167:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:33"},"nodeType":"YulFunctionCall","src":"256:12:33"},"nodeType":"YulExpressionStatement","src":"256:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:33"},"nodeType":"YulFunctionCall","src":"230:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:33"},"nodeType":"YulFunctionCall","src":"219:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:33"},"nodeType":"YulFunctionCall","src":"209:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:33"},"nodeType":"YulFunctionCall","src":"202:51:33"},"nodeType":"YulIf","src":"199:71:33"},{"nodeType":"YulAssignment","src":"279:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:33","type":""}],"src":"14:286:33"},{"body":{"nodeType":"YulBlock","src":"400:92:33","statements":[{"nodeType":"YulAssignment","src":"410:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:33"},"nodeType":"YulFunctionCall","src":"418:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:33"},"nodeType":"YulFunctionCall","src":"470:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:33"},"nodeType":"YulFunctionCall","src":"463:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:33"},"nodeType":"YulFunctionCall","src":"445:41:33"},"nodeType":"YulExpressionStatement","src":"445:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:33","type":""}],"src":"305:187:33"},{"body":{"nodeType":"YulBlock","src":"567:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"613:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"625:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"615:6:33"},"nodeType":"YulFunctionCall","src":"615:12:33"},"nodeType":"YulExpressionStatement","src":"615:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"588:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"584:3:33"},"nodeType":"YulFunctionCall","src":"584:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"609:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"580:3:33"},"nodeType":"YulFunctionCall","src":"580:32:33"},"nodeType":"YulIf","src":"577:52:33"},{"nodeType":"YulAssignment","src":"638:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:33"},"nodeType":"YulFunctionCall","src":"648:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"638:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"533:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"544:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"556:6:33","type":""}],"src":"497:180:33"},{"body":{"nodeType":"YulBlock","src":"731:373:33","statements":[{"nodeType":"YulVariableDeclaration","src":"741:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"761:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"755:5:33"},"nodeType":"YulFunctionCall","src":"755:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"745:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"783:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"788:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"776:6:33"},"nodeType":"YulFunctionCall","src":"776:19:33"},"nodeType":"YulExpressionStatement","src":"776:19:33"},{"nodeType":"YulVariableDeclaration","src":"804:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"813:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"808:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"875:110:33","statements":[{"nodeType":"YulVariableDeclaration","src":"889:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"899:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"893:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"931:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"936:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"927:3:33"},"nodeType":"YulFunctionCall","src":"927:11:33"},{"name":"_1","nodeType":"YulIdentifier","src":"940:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"923:3:33"},"nodeType":"YulFunctionCall","src":"923:20:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"959:5:33"},{"name":"i","nodeType":"YulIdentifier","src":"966:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:33"},"nodeType":"YulFunctionCall","src":"955:13:33"},{"name":"_1","nodeType":"YulIdentifier","src":"970:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"951:3:33"},"nodeType":"YulFunctionCall","src":"951:22:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"945:5:33"},"nodeType":"YulFunctionCall","src":"945:29:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"916:6:33"},"nodeType":"YulFunctionCall","src":"916:59:33"},"nodeType":"YulExpressionStatement","src":"916:59:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"834:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"837:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"831:2:33"},"nodeType":"YulFunctionCall","src":"831:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"845:21:33","statements":[{"nodeType":"YulAssignment","src":"847:17:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"856:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"859:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"852:3:33"},"nodeType":"YulFunctionCall","src":"852:12:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"847:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"827:3:33","statements":[]},"src":"823:162:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1009:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1014:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:33"},"nodeType":"YulFunctionCall","src":"1005:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"1023:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1001:3:33"},"nodeType":"YulFunctionCall","src":"1001:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"1030:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"994:6:33"},"nodeType":"YulFunctionCall","src":"994:38:33"},"nodeType":"YulExpressionStatement","src":"994:38:33"},{"nodeType":"YulAssignment","src":"1041:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1056:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1069:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1077:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1065:3:33"},"nodeType":"YulFunctionCall","src":"1065:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1086:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1082:3:33"},"nodeType":"YulFunctionCall","src":"1082:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1061:3:33"},"nodeType":"YulFunctionCall","src":"1061:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1052:3:33"},"nodeType":"YulFunctionCall","src":"1052:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"1093:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1048:3:33"},"nodeType":"YulFunctionCall","src":"1048:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1041:3:33"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"708:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"715:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"723:3:33","type":""}],"src":"682:422:33"},{"body":{"nodeType":"YulBlock","src":"1228:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1256:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1238:6:33"},"nodeType":"YulFunctionCall","src":"1238:21:33"},"nodeType":"YulExpressionStatement","src":"1238:21:33"},{"nodeType":"YulAssignment","src":"1268:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1293:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1305:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1316:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1301:3:33"},"nodeType":"YulFunctionCall","src":"1301:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"1276:16:33"},"nodeType":"YulFunctionCall","src":"1276:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1268:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1197:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1208:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1219:4:33","type":""}],"src":"1109:217:33"},{"body":{"nodeType":"YulBlock","src":"1363:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1380:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1387:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1392:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1383:3:33"},"nodeType":"YulFunctionCall","src":"1383:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1373:6:33"},"nodeType":"YulFunctionCall","src":"1373:31:33"},"nodeType":"YulExpressionStatement","src":"1373:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1420:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1423:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1413:6:33"},"nodeType":"YulFunctionCall","src":"1413:15:33"},"nodeType":"YulExpressionStatement","src":"1413:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1444:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1447:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1437:6:33"},"nodeType":"YulFunctionCall","src":"1437:15:33"},"nodeType":"YulExpressionStatement","src":"1437:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1331:127:33"},{"body":{"nodeType":"YulBlock","src":"1508:230:33","statements":[{"nodeType":"YulAssignment","src":"1518:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1534:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1528:5:33"},"nodeType":"YulFunctionCall","src":"1528:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1518:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1546:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1568:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1584:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1590:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1580:3:33"},"nodeType":"YulFunctionCall","src":"1580:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1599:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1595:3:33"},"nodeType":"YulFunctionCall","src":"1595:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1576:3:33"},"nodeType":"YulFunctionCall","src":"1576:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1564:3:33"},"nodeType":"YulFunctionCall","src":"1564:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1550:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1679:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1681:16:33"},"nodeType":"YulFunctionCall","src":"1681:18:33"},"nodeType":"YulExpressionStatement","src":"1681:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1622:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1634:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1619:2:33"},"nodeType":"YulFunctionCall","src":"1619:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1658:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1670:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1655:2:33"},"nodeType":"YulFunctionCall","src":"1655:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1616:2:33"},"nodeType":"YulFunctionCall","src":"1616:62:33"},"nodeType":"YulIf","src":"1613:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1721:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1710:6:33"},"nodeType":"YulFunctionCall","src":"1710:22:33"},"nodeType":"YulExpressionStatement","src":"1710:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1488:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1497:6:33","type":""}],"src":"1463:275:33"},{"body":{"nodeType":"YulBlock","src":"1795:478:33","statements":[{"body":{"nodeType":"YulBlock","src":"1844:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1856:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1846:6:33"},"nodeType":"YulFunctionCall","src":"1846:12:33"},"nodeType":"YulExpressionStatement","src":"1846:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1823:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1831:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:33"},"nodeType":"YulFunctionCall","src":"1819:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"1838:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1815:3:33"},"nodeType":"YulFunctionCall","src":"1815:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1808:6:33"},"nodeType":"YulFunctionCall","src":"1808:35:33"},"nodeType":"YulIf","src":"1805:55:33"},{"nodeType":"YulVariableDeclaration","src":"1869:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1892:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1879:12:33"},"nodeType":"YulFunctionCall","src":"1879:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1873:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1938:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1940:16:33"},"nodeType":"YulFunctionCall","src":"1940:18:33"},"nodeType":"YulExpressionStatement","src":"1940:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1914:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"1918:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1911:2:33"},"nodeType":"YulFunctionCall","src":"1911:26:33"},"nodeType":"YulIf","src":"1908:52:33"},{"nodeType":"YulVariableDeclaration","src":"1969:70:33","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2012:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2016:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2008:3:33"},"nodeType":"YulFunctionCall","src":"2008:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2027:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2023:3:33"},"nodeType":"YulFunctionCall","src":"2023:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2004:3:33"},"nodeType":"YulFunctionCall","src":"2004:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"2033:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2000:3:33"},"nodeType":"YulFunctionCall","src":"2000:38:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1984:15:33"},"nodeType":"YulFunctionCall","src":"1984:55:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"1973:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2055:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2064:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2048:6:33"},"nodeType":"YulFunctionCall","src":"2048:19:33"},"nodeType":"YulExpressionStatement","src":"2048:19:33"},{"body":{"nodeType":"YulBlock","src":"2115:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2124:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2117:6:33"},"nodeType":"YulFunctionCall","src":"2117:12:33"},"nodeType":"YulExpressionStatement","src":"2117:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2090:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2098:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2086:3:33"},"nodeType":"YulFunctionCall","src":"2086:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2082:3:33"},"nodeType":"YulFunctionCall","src":"2082:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"2110:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2079:2:33"},"nodeType":"YulFunctionCall","src":"2079:35:33"},"nodeType":"YulIf","src":"2076:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2157:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"2166:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:33"},"nodeType":"YulFunctionCall","src":"2153:18:33"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2177:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2185:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2173:3:33"},"nodeType":"YulFunctionCall","src":"2173:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2192:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2140:12:33"},"nodeType":"YulFunctionCall","src":"2140:55:33"},"nodeType":"YulExpressionStatement","src":"2140:55:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2219:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2215:3:33"},"nodeType":"YulFunctionCall","src":"2215:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"2233:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2211:3:33"},"nodeType":"YulFunctionCall","src":"2211:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"2240:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2204:6:33"},"nodeType":"YulFunctionCall","src":"2204:38:33"},"nodeType":"YulExpressionStatement","src":"2204:38:33"},{"nodeType":"YulAssignment","src":"2251:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2260:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2251:5:33"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"1777:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1785:5:33","type":""}],"src":"1743:530:33"},{"body":{"nodeType":"YulBlock","src":"2374:292:33","statements":[{"body":{"nodeType":"YulBlock","src":"2420:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2429:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2432:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2422:6:33"},"nodeType":"YulFunctionCall","src":"2422:12:33"},"nodeType":"YulExpressionStatement","src":"2422:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2395:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:33"},"nodeType":"YulFunctionCall","src":"2391:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2416:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2387:3:33"},"nodeType":"YulFunctionCall","src":"2387:32:33"},"nodeType":"YulIf","src":"2384:52:33"},{"nodeType":"YulAssignment","src":"2445:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2468:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2455:12:33"},"nodeType":"YulFunctionCall","src":"2455:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2445:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2487:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2518:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2529:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2514:3:33"},"nodeType":"YulFunctionCall","src":"2514:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2501:12:33"},"nodeType":"YulFunctionCall","src":"2501:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2491:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2576:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2585:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2588:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2578:6:33"},"nodeType":"YulFunctionCall","src":"2578:12:33"},"nodeType":"YulExpressionStatement","src":"2578:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2548:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2556:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2545:2:33"},"nodeType":"YulFunctionCall","src":"2545:30:33"},"nodeType":"YulIf","src":"2542:50:33"},{"nodeType":"YulAssignment","src":"2601:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"2643:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:33"},"nodeType":"YulFunctionCall","src":"2628:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2611:16:33"},"nodeType":"YulFunctionCall","src":"2611:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2601:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2332:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2343:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2355:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2363:6:33","type":""}],"src":"2278:388:33"},{"body":{"nodeType":"YulBlock","src":"2772:102:33","statements":[{"nodeType":"YulAssignment","src":"2782:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2794:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2805:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2790:3:33"},"nodeType":"YulFunctionCall","src":"2790:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2782:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2824:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2839:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2855:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2860:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2851:3:33"},"nodeType":"YulFunctionCall","src":"2851:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2864:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2847:3:33"},"nodeType":"YulFunctionCall","src":"2847:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2835:3:33"},"nodeType":"YulFunctionCall","src":"2835:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2817:6:33"},"nodeType":"YulFunctionCall","src":"2817:51:33"},"nodeType":"YulExpressionStatement","src":"2817:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2741:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2752:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2763:4:33","type":""}],"src":"2671:203:33"},{"body":{"nodeType":"YulBlock","src":"2948:114:33","statements":[{"body":{"nodeType":"YulBlock","src":"2992:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2994:16:33"},"nodeType":"YulFunctionCall","src":"2994:18:33"},"nodeType":"YulExpressionStatement","src":"2994:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2964:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2972:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2961:2:33"},"nodeType":"YulFunctionCall","src":"2961:30:33"},"nodeType":"YulIf","src":"2958:56:33"},{"nodeType":"YulAssignment","src":"3023:33:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3039:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3042:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3035:3:33"},"nodeType":"YulFunctionCall","src":"3035:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"3051:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3031:3:33"},"nodeType":"YulFunctionCall","src":"3031:25:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3023:4:33"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2928:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2939:4:33","type":""}],"src":"2879:183:33"},{"body":{"nodeType":"YulBlock","src":"3131:598:33","statements":[{"body":{"nodeType":"YulBlock","src":"3180:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:33"},"nodeType":"YulFunctionCall","src":"3182:12:33"},"nodeType":"YulExpressionStatement","src":"3182:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3159:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3167:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3155:3:33"},"nodeType":"YulFunctionCall","src":"3155:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3174:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3151:3:33"},"nodeType":"YulFunctionCall","src":"3151:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:33"},"nodeType":"YulFunctionCall","src":"3144:35:33"},"nodeType":"YulIf","src":"3141:55:33"},{"nodeType":"YulVariableDeclaration","src":"3205:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3228:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3215:12:33"},"nodeType":"YulFunctionCall","src":"3215:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3209:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3244:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3254:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3248:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3267:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3334:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"3294:39:33"},"nodeType":"YulFunctionCall","src":"3294:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3278:15:33"},"nodeType":"YulFunctionCall","src":"3278:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3271:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3347:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"3360:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3351:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3379:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3384:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3372:6:33"},"nodeType":"YulFunctionCall","src":"3372:15:33"},"nodeType":"YulExpressionStatement","src":"3372:15:33"},{"nodeType":"YulAssignment","src":"3396:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3407:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3412:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3403:3:33"},"nodeType":"YulFunctionCall","src":"3403:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3396:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3424:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3446:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3458:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3461:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3454:3:33"},"nodeType":"YulFunctionCall","src":"3454:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3442:3:33"},"nodeType":"YulFunctionCall","src":"3442:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3467:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3438:3:33"},"nodeType":"YulFunctionCall","src":"3438:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3428:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3498:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3507:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3510:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3500:6:33"},"nodeType":"YulFunctionCall","src":"3500:12:33"},"nodeType":"YulExpressionStatement","src":"3500:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3485:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3493:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3482:2:33"},"nodeType":"YulFunctionCall","src":"3482:15:33"},"nodeType":"YulIf","src":"3479:35:33"},{"nodeType":"YulVariableDeclaration","src":"3523:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3538:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3546:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3534:3:33"},"nodeType":"YulFunctionCall","src":"3534:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3527:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3614:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3635:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3653:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3640:12:33"},"nodeType":"YulFunctionCall","src":"3640:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3628:6:33"},"nodeType":"YulFunctionCall","src":"3628:30:33"},"nodeType":"YulExpressionStatement","src":"3628:30:33"},{"nodeType":"YulAssignment","src":"3671:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3682:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3687:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3678:3:33"},"nodeType":"YulFunctionCall","src":"3678:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3671:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3569:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3574:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3566:2:33"},"nodeType":"YulFunctionCall","src":"3566:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3582:23:33","statements":[{"nodeType":"YulAssignment","src":"3584:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3595:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3600:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3591:3:33"},"nodeType":"YulFunctionCall","src":"3591:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3584:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3562:3:33","statements":[]},"src":"3558:142:33"},{"nodeType":"YulAssignment","src":"3709:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3718:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3709:5:33"}]}]},"name":"abi_decode_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3105:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3113:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3121:5:33","type":""}],"src":"3067:662:33"},{"body":{"nodeType":"YulBlock","src":"3880:1211:33","statements":[{"body":{"nodeType":"YulBlock","src":"3926:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3935:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3938:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3928:6:33"},"nodeType":"YulFunctionCall","src":"3928:12:33"},"nodeType":"YulExpressionStatement","src":"3928:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3901:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3910:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3897:3:33"},"nodeType":"YulFunctionCall","src":"3897:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3922:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3893:3:33"},"nodeType":"YulFunctionCall","src":"3893:32:33"},"nodeType":"YulIf","src":"3890:52:33"},{"nodeType":"YulVariableDeclaration","src":"3951:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3978:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3965:12:33"},"nodeType":"YulFunctionCall","src":"3965:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3955:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3997:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4007:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4001:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4052:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4061:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4064:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4054:6:33"},"nodeType":"YulFunctionCall","src":"4054:12:33"},"nodeType":"YulExpressionStatement","src":"4054:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4040:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4048:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4037:2:33"},"nodeType":"YulFunctionCall","src":"4037:14:33"},"nodeType":"YulIf","src":"4034:34:33"},{"nodeType":"YulAssignment","src":"4077:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4120:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4131:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4116:3:33"},"nodeType":"YulFunctionCall","src":"4116:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4140:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4087:28:33"},"nodeType":"YulFunctionCall","src":"4087:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4077:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"4157:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4167:2:33","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4161:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4178:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4222:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:33"},"nodeType":"YulFunctionCall","src":"4207:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4194:12:33"},"nodeType":"YulFunctionCall","src":"4194:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4182:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4255:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4264:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4267:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4257:6:33"},"nodeType":"YulFunctionCall","src":"4257:12:33"},"nodeType":"YulExpressionStatement","src":"4257:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4241:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4251:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4238:2:33"},"nodeType":"YulFunctionCall","src":"4238:16:33"},"nodeType":"YulIf","src":"4235:36:33"},{"nodeType":"YulVariableDeclaration","src":"4280:34:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4294:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4305:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4290:3:33"},"nodeType":"YulFunctionCall","src":"4290:24:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4284:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4362:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4371:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4374:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4364:6:33"},"nodeType":"YulFunctionCall","src":"4364:12:33"},"nodeType":"YulExpressionStatement","src":"4364:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4345:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4337:3:33"},"nodeType":"YulFunctionCall","src":"4337:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4352:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4333:3:33"},"nodeType":"YulFunctionCall","src":"4333:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4326:6:33"},"nodeType":"YulFunctionCall","src":"4326:35:33"},"nodeType":"YulIf","src":"4323:55:33"},{"nodeType":"YulVariableDeclaration","src":"4387:26:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4410:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4397:12:33"},"nodeType":"YulFunctionCall","src":"4397:16:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4391:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4422:71:33","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4489:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4449:39:33"},"nodeType":"YulFunctionCall","src":"4449:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4433:15:33"},"nodeType":"YulFunctionCall","src":"4433:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4426:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4502:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"4515:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4506:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4534:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4539:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4527:6:33"},"nodeType":"YulFunctionCall","src":"4527:15:33"},"nodeType":"YulExpressionStatement","src":"4527:15:33"},{"nodeType":"YulAssignment","src":"4551:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4562:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4567:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4558:3:33"},"nodeType":"YulFunctionCall","src":"4558:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4551:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"4579:42:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4601:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4609:1:33","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"4612:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4605:3:33"},"nodeType":"YulFunctionCall","src":"4605:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4597:3:33"},"nodeType":"YulFunctionCall","src":"4597:19:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4618:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4593:3:33"},"nodeType":"YulFunctionCall","src":"4593:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4583:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4653:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4662:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4665:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4655:6:33"},"nodeType":"YulFunctionCall","src":"4655:12:33"},"nodeType":"YulExpressionStatement","src":"4655:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4636:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4644:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4633:2:33"},"nodeType":"YulFunctionCall","src":"4633:19:33"},"nodeType":"YulIf","src":"4630:39:33"},{"nodeType":"YulVariableDeclaration","src":"4678:22:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4693:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4697:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4689:3:33"},"nodeType":"YulFunctionCall","src":"4689:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4682:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4765:296:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4779:36:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4811:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4798:12:33"},"nodeType":"YulFunctionCall","src":"4798:17:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"4783:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4863:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4881:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4891:1:33","type":"","value":"0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"4885:2:33","type":""}]},{"expression":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4916:2:33"},{"name":"_5","nodeType":"YulIdentifier","src":"4920:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4909:6:33"},"nodeType":"YulFunctionCall","src":"4909:14:33"},"nodeType":"YulExpressionStatement","src":"4909:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"4834:11:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4847:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4831:2:33"},"nodeType":"YulFunctionCall","src":"4831:19:33"},"nodeType":"YulIf","src":"4828:109:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4957:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4987:2:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"4991:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4983:3:33"},"nodeType":"YulFunctionCall","src":"4983:20:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5005:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4979:3:33"},"nodeType":"YulFunctionCall","src":"4979:29:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5010:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4962:16:33"},"nodeType":"YulFunctionCall","src":"4962:56:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4950:6:33"},"nodeType":"YulFunctionCall","src":"4950:69:33"},"nodeType":"YulExpressionStatement","src":"4950:69:33"},{"nodeType":"YulAssignment","src":"5032:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5043:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5048:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5039:3:33"},"nodeType":"YulFunctionCall","src":"5039:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5032:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4720:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4725:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4717:2:33"},"nodeType":"YulFunctionCall","src":"4717:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4733:23:33","statements":[{"nodeType":"YulAssignment","src":"4735:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4746:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4751:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4742:3:33"},"nodeType":"YulFunctionCall","src":"4742:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4735:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4713:3:33","statements":[]},"src":"4709:352:33"},{"nodeType":"YulAssignment","src":"5070:15:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5080:5:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5070:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3838:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3849:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3861:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3869:6:33","type":""}],"src":"3734:1357:33"},{"body":{"nodeType":"YulBlock","src":"5191:253:33","statements":[{"body":{"nodeType":"YulBlock","src":"5237:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5246:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5249:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5239:6:33"},"nodeType":"YulFunctionCall","src":"5239:12:33"},"nodeType":"YulExpressionStatement","src":"5239:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5212:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5221:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5208:3:33"},"nodeType":"YulFunctionCall","src":"5208:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5233:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5204:3:33"},"nodeType":"YulFunctionCall","src":"5204:32:33"},"nodeType":"YulIf","src":"5201:52:33"},{"nodeType":"YulVariableDeclaration","src":"5262:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5289:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5276:12:33"},"nodeType":"YulFunctionCall","src":"5276:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5266:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5342:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5351:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5354:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5344:6:33"},"nodeType":"YulFunctionCall","src":"5344:12:33"},"nodeType":"YulExpressionStatement","src":"5344:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5314:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5322:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5311:2:33"},"nodeType":"YulFunctionCall","src":"5311:30:33"},"nodeType":"YulIf","src":"5308:50:33"},{"nodeType":"YulAssignment","src":"5367:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5410:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"5421:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5406:3:33"},"nodeType":"YulFunctionCall","src":"5406:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5430:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"5377:28:33"},"nodeType":"YulFunctionCall","src":"5377:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5367:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5157:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5168:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5180:6:33","type":""}],"src":"5096:348:33"},{"body":{"nodeType":"YulBlock","src":"5618:631:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5628:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5638:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5632:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5649:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5667:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5678:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5663:3:33"},"nodeType":"YulFunctionCall","src":"5663:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5653:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5697:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5708:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5690:6:33"},"nodeType":"YulFunctionCall","src":"5690:21:33"},"nodeType":"YulExpressionStatement","src":"5690:21:33"},{"nodeType":"YulVariableDeclaration","src":"5720:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5731:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"5724:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5746:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5766:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5760:5:33"},"nodeType":"YulFunctionCall","src":"5760:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5750:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5789:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"5797:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:33"},"nodeType":"YulFunctionCall","src":"5782:22:33"},"nodeType":"YulExpressionStatement","src":"5782:22:33"},{"nodeType":"YulAssignment","src":"5813:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5824:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5835:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5820:3:33"},"nodeType":"YulFunctionCall","src":"5820:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5813:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"5847:53:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5869:9:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5884:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"5887:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5880:3:33"},"nodeType":"YulFunctionCall","src":"5880:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5865:3:33"},"nodeType":"YulFunctionCall","src":"5865:30:33"},{"kind":"number","nodeType":"YulLiteral","src":"5897:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5861:3:33"},"nodeType":"YulFunctionCall","src":"5861:39:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5851:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5909:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5927:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5935:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5923:3:33"},"nodeType":"YulFunctionCall","src":"5923:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5913:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5947:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5956:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5951:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6015:205:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6036:3:33"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6049:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6057:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6045:3:33"},"nodeType":"YulFunctionCall","src":"6045:22:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6073:2:33","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6069:3:33"},"nodeType":"YulFunctionCall","src":"6069:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6041:3:33"},"nodeType":"YulFunctionCall","src":"6041:36:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6029:6:33"},"nodeType":"YulFunctionCall","src":"6029:49:33"},"nodeType":"YulExpressionStatement","src":"6029:49:33"},{"nodeType":"YulAssignment","src":"6091:49:33","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6124:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6118:5:33"},"nodeType":"YulFunctionCall","src":"6118:13:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"6133:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6101:16:33"},"nodeType":"YulFunctionCall","src":"6101:39:33"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6091:6:33"}]},{"nodeType":"YulAssignment","src":"6153:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6167:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6175:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6163:3:33"},"nodeType":"YulFunctionCall","src":"6163:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6153:6:33"}]},{"nodeType":"YulAssignment","src":"6191:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6202:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6207:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6198:3:33"},"nodeType":"YulFunctionCall","src":"6198:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6191:3:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5977:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"5980:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5974:2:33"},"nodeType":"YulFunctionCall","src":"5974:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5988:18:33","statements":[{"nodeType":"YulAssignment","src":"5990:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5999:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"6002:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5995:3:33"},"nodeType":"YulFunctionCall","src":"5995:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5990:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"5970:3:33","statements":[]},"src":"5966:254:33"},{"nodeType":"YulAssignment","src":"6229:14:33","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"6237:6:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6229:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5587:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5598:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5609:4:33","type":""}],"src":"5449:800:33"},{"body":{"nodeType":"YulBlock","src":"6324:216:33","statements":[{"body":{"nodeType":"YulBlock","src":"6370:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6379:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6382:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6372:6:33"},"nodeType":"YulFunctionCall","src":"6372:12:33"},"nodeType":"YulExpressionStatement","src":"6372:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6345:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6354:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6341:3:33"},"nodeType":"YulFunctionCall","src":"6341:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6366:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6337:3:33"},"nodeType":"YulFunctionCall","src":"6337:32:33"},"nodeType":"YulIf","src":"6334:52:33"},{"nodeType":"YulVariableDeclaration","src":"6395:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6421:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6408:12:33"},"nodeType":"YulFunctionCall","src":"6408:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6399:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6494:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6503:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6506:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6496:6:33"},"nodeType":"YulFunctionCall","src":"6496:12:33"},"nodeType":"YulExpressionStatement","src":"6496:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6453:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6464:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6479:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6484:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6475:3:33"},"nodeType":"YulFunctionCall","src":"6475:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"6488:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6471:3:33"},"nodeType":"YulFunctionCall","src":"6471:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6460:3:33"},"nodeType":"YulFunctionCall","src":"6460:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6450:2:33"},"nodeType":"YulFunctionCall","src":"6450:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6443:6:33"},"nodeType":"YulFunctionCall","src":"6443:50:33"},"nodeType":"YulIf","src":"6440:70:33"},{"nodeType":"YulAssignment","src":"6519:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"6529:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6519:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6290:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6301:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6313:6:33","type":""}],"src":"6254:286:33"},{"body":{"nodeType":"YulBlock","src":"6577:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6594:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6601:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6606:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6597:3:33"},"nodeType":"YulFunctionCall","src":"6597:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6587:6:33"},"nodeType":"YulFunctionCall","src":"6587:31:33"},"nodeType":"YulExpressionStatement","src":"6587:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6634:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6637:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6627:6:33"},"nodeType":"YulFunctionCall","src":"6627:15:33"},"nodeType":"YulExpressionStatement","src":"6627:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6658:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6661:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6651:6:33"},"nodeType":"YulFunctionCall","src":"6651:15:33"},"nodeType":"YulExpressionStatement","src":"6651:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6545:127:33"},{"body":{"nodeType":"YulBlock","src":"6732:325:33","statements":[{"nodeType":"YulAssignment","src":"6742:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6756:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6759:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6752:3:33"},"nodeType":"YulFunctionCall","src":"6752:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6742:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"6773:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6803:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"6809:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6799:3:33"},"nodeType":"YulFunctionCall","src":"6799:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6777:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6850:31:33","statements":[{"nodeType":"YulAssignment","src":"6852:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6866:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6874:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6862:3:33"},"nodeType":"YulFunctionCall","src":"6862:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6852:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6830:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6823:6:33"},"nodeType":"YulFunctionCall","src":"6823:26:33"},"nodeType":"YulIf","src":"6820:61:33"},{"body":{"nodeType":"YulBlock","src":"6940:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6961:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6968:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6973:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6964:3:33"},"nodeType":"YulFunctionCall","src":"6964:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6954:6:33"},"nodeType":"YulFunctionCall","src":"6954:31:33"},"nodeType":"YulExpressionStatement","src":"6954:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7005:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7008:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6998:6:33"},"nodeType":"YulFunctionCall","src":"6998:15:33"},"nodeType":"YulExpressionStatement","src":"6998:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7033:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7036:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7026:6:33"},"nodeType":"YulFunctionCall","src":"7026:15:33"},"nodeType":"YulExpressionStatement","src":"7026:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6896:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6919:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6927:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6916:2:33"},"nodeType":"YulFunctionCall","src":"6916:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6893:2:33"},"nodeType":"YulFunctionCall","src":"6893:38:33"},"nodeType":"YulIf","src":"6890:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6712:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6721:6:33","type":""}],"src":"6677:380:33"},{"body":{"nodeType":"YulBlock","src":"7117:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7134:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"7137:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7127:6:33"},"nodeType":"YulFunctionCall","src":"7127:14:33"},"nodeType":"YulExpressionStatement","src":"7127:14:33"},{"nodeType":"YulAssignment","src":"7150:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7168:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7171:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7158:9:33"},"nodeType":"YulFunctionCall","src":"7158:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7150:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"7100:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"7108:4:33","type":""}],"src":"7062:120:33"},{"body":{"nodeType":"YulBlock","src":"7267:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"7300:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7314:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"7324:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7318:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7345:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"7349:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7338:6:33"},"nodeType":"YulFunctionCall","src":"7338:17:33"},"nodeType":"YulExpressionStatement","src":"7338:17:33"},{"nodeType":"YulVariableDeclaration","src":"7368:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7390:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"7394:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7380:9:33"},"nodeType":"YulFunctionCall","src":"7380:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"7372:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7412:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7435:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7445:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7452:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"7464:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7448:3:33"},"nodeType":"YulFunctionCall","src":"7448:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7441:3:33"},"nodeType":"YulFunctionCall","src":"7441:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7431:3:33"},"nodeType":"YulFunctionCall","src":"7431:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"7416:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7506:23:33","statements":[{"nodeType":"YulAssignment","src":"7508:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"7523:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"7508:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7488:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"7500:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7485:2:33"},"nodeType":"YulFunctionCall","src":"7485:20:33"},"nodeType":"YulIf","src":"7482:47:33"},{"nodeType":"YulVariableDeclaration","src":"7542:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7556:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7566:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7573:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7578:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7569:3:33"},"nodeType":"YulFunctionCall","src":"7569:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7562:3:33"},"nodeType":"YulFunctionCall","src":"7562:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7552:3:33"},"nodeType":"YulFunctionCall","src":"7552:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7546:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7596:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"7609:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"7600:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7694:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7703:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7710:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7696:6:33"},"nodeType":"YulFunctionCall","src":"7696:17:33"},"nodeType":"YulExpressionStatement","src":"7696:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7644:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"7651:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7641:2:33"},"nodeType":"YulFunctionCall","src":"7641:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7655:26:33","statements":[{"nodeType":"YulAssignment","src":"7657:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7670:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"7677:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7666:3:33"},"nodeType":"YulFunctionCall","src":"7666:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"7657:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"7637:3:33","statements":[]},"src":"7633:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7283:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7288:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7280:2:33"},"nodeType":"YulFunctionCall","src":"7280:11:33"},"nodeType":"YulIf","src":"7277:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"7239:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"7246:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"7251:10:33","type":""}],"src":"7187:544:33"},{"body":{"nodeType":"YulBlock","src":"7821:81:33","statements":[{"nodeType":"YulAssignment","src":"7831:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7846:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7864:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"7867:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7860:3:33"},"nodeType":"YulFunctionCall","src":"7860:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7877:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7873:3:33"},"nodeType":"YulFunctionCall","src":"7873:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7856:3:33"},"nodeType":"YulFunctionCall","src":"7856:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7852:3:33"},"nodeType":"YulFunctionCall","src":"7852:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7842:3:33"},"nodeType":"YulFunctionCall","src":"7842:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7888:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"7891:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7884:3:33"},"nodeType":"YulFunctionCall","src":"7884:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7839:2:33"},"nodeType":"YulFunctionCall","src":"7839:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7831:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7798:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"7804:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"7812:4:33","type":""}],"src":"7736:166:33"},{"body":{"nodeType":"YulBlock","src":"8001:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8011:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8031:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8025:5:33"},"nodeType":"YulFunctionCall","src":"8025:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"8015:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8078:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8080:16:33"},"nodeType":"YulFunctionCall","src":"8080:18:33"},"nodeType":"YulExpressionStatement","src":"8080:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8050:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8058:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8047:2:33"},"nodeType":"YulFunctionCall","src":"8047:30:33"},"nodeType":"YulIf","src":"8044:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8152:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8190:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8184:5:33"},"nodeType":"YulFunctionCall","src":"8184:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"8158:25:33"},"nodeType":"YulFunctionCall","src":"8158:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"8198:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"8109:42:33"},"nodeType":"YulFunctionCall","src":"8109:96:33"},"nodeType":"YulExpressionStatement","src":"8109:96:33"},{"nodeType":"YulVariableDeclaration","src":"8214:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8231:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"8218:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8241:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8260:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"8245:11:33","type":""}]},{"nodeType":"YulAssignment","src":"8273:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8286:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8273:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"8343:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8376:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8388:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8384:3:33"},"nodeType":"YulFunctionCall","src":"8384:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8372:3:33"},"nodeType":"YulFunctionCall","src":"8372:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"8361:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8405:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8448:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"8419:28:33"},"nodeType":"YulFunctionCall","src":"8419:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"8409:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8466:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8475:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8470:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8553:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8578:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8596:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8601:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8592:3:33"},"nodeType":"YulFunctionCall","src":"8592:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8586:5:33"},"nodeType":"YulFunctionCall","src":"8586:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8571:6:33"},"nodeType":"YulFunctionCall","src":"8571:42:33"},"nodeType":"YulExpressionStatement","src":"8571:42:33"},{"nodeType":"YulAssignment","src":"8630:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8644:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8652:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8640:3:33"},"nodeType":"YulFunctionCall","src":"8640:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8630:6:33"}]},{"nodeType":"YulAssignment","src":"8671:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8688:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8699:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8684:3:33"},"nodeType":"YulFunctionCall","src":"8684:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8671:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8500:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"8503:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8497:2:33"},"nodeType":"YulFunctionCall","src":"8497:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8512:28:33","statements":[{"nodeType":"YulAssignment","src":"8514:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8523:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8526:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8519:3:33"},"nodeType":"YulFunctionCall","src":"8519:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8514:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"8493:3:33","statements":[]},"src":"8489:236:33"},{"body":{"nodeType":"YulBlock","src":"8773:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8791:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8818:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8823:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8814:3:33"},"nodeType":"YulFunctionCall","src":"8814:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8808:5:33"},"nodeType":"YulFunctionCall","src":"8808:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8795:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8858:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8870:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8897:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"8900:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8893:3:33"},"nodeType":"YulFunctionCall","src":"8893:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"8909:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8889:3:33"},"nodeType":"YulFunctionCall","src":"8889:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8919:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8915:3:33"},"nodeType":"YulFunctionCall","src":"8915:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8885:3:33"},"nodeType":"YulFunctionCall","src":"8885:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8881:3:33"},"nodeType":"YulFunctionCall","src":"8881:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8866:3:33"},"nodeType":"YulFunctionCall","src":"8866:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8851:6:33"},"nodeType":"YulFunctionCall","src":"8851:74:33"},"nodeType":"YulExpressionStatement","src":"8851:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8744:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"8753:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8741:2:33"},"nodeType":"YulFunctionCall","src":"8741:19:33"},"nodeType":"YulIf","src":"8738:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8959:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8973:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"8976:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8969:3:33"},"nodeType":"YulFunctionCall","src":"8969:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"8985:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8965:3:33"},"nodeType":"YulFunctionCall","src":"8965:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8952:6:33"},"nodeType":"YulFunctionCall","src":"8952:36:33"},"nodeType":"YulExpressionStatement","src":"8952:36:33"}]},"nodeType":"YulCase","src":"8336:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8341:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"9015:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9029:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"9042:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9033:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9078:67:33","statements":[{"nodeType":"YulAssignment","src":"9096:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9115:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9120:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9111:3:33"},"nodeType":"YulFunctionCall","src":"9111:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9105:5:33"},"nodeType":"YulFunctionCall","src":"9105:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9096:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"9059:6:33"},"nodeType":"YulIf","src":"9056:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9165:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9224:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"9231:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"9171:52:33"},"nodeType":"YulFunctionCall","src":"9171:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9158:6:33"},"nodeType":"YulFunctionCall","src":"9158:81:33"},"nodeType":"YulExpressionStatement","src":"9158:81:33"}]},"nodeType":"YulCase","src":"9007:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8316:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8324:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8313:2:33"},"nodeType":"YulFunctionCall","src":"8313:14:33"},"nodeType":"YulSwitch","src":"8306:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7986:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"7992:3:33","type":""}],"src":"7907:1348:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_bytes32_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let _2 := 32\n        let offset_1 := calldataload(add(headStart, _2))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_3, shl(5, _4)), _2)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _1)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            mstore(dst, abi_decode_bytes(add(add(_3, innerOffset), _2), dataEnd))\n            dst := add(dst, _2)\n        }\n        value1 := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461010c5780639790242114610134578063dedff9c614610147578063f2fde38b1461017457600080fd5b806301ffc9a71461008057806354f6127f146100b5578063715018a6146100e25780637f23690c146100f9575b600080fd5b34801561008c57600080fd5b506100a061009b36600461056a565b610194565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461059b565b6101cb565b6040516100ac91906105fa565b3480156100ee57600080fd5b506100f76101d6565b005b6100f76101073660046106c4565b6101ea565b34801561011857600080fd5b506000546040516001600160a01b0390911681526020016100ac565b6100f761014236600461079a565b61021f565b34801561015357600080fd5b5061016761016236600461086f565b6102df565b6040516100ac91906108ac565b34801561018057600080fd5b506100f761018f36600461090e565b61038a565b60006001600160e01b031982166318a6a9a560e21b14806101c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606101c5826103c5565b6101de610467565b6101e860006104a7565b565b6101f2610467565b34156102115760405163f36ba73760e01b815260040160405180910390fd5b61021b8282610515565b5050565b610227610467565b34156102465760405163f36ba73760e01b815260040160405180910390fd5b805182511461026857604051633bcc897960e01b815260040160405180910390fd5b815160000361028a576040516397da5f9560e01b815260040160405180910390fd5b60005b82518110156102da576102d28382815181106102ab576102ab610937565b60200260200101518383815181106102c5576102c5610937565b6020026020010151610515565b60010161028d565b505050565b6060815167ffffffffffffffff8111156102fb576102fb61060d565b60405190808252806020026020018201604052801561032e57816020015b60608152602001906001900390816103195790505b50905060005b82518110156103845761035f83828151811061035257610352610937565b60200260200101516103c5565b82828151811061037157610371610937565b6020908102919091010152600101610334565b50919050565b610392610467565b6001600160a01b0381166103b9576040516306b620db60e21b815260040160405180910390fd5b6103c2816104a7565b50565b60008181526001602052604090208054606091906103e29061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461040e9061094d565b801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b50505050509050919050565b3361047a6000546001600160a01b031690565b6001600160a01b0316146101e85760405163bf1169c560e01b815233600482015260240160405180910390fd5b6000546001600160a01b038281169116146103c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b600082815260016020526040902061052d82826109cf565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161055e91906105fa565b60405180910390a25050565b60006020828403121561057c57600080fd5b81356001600160e01b03198116811461059457600080fd5b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b6000815180845260005b818110156105da576020818501810151868301820152016105be565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061059460208301846105b4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064c5761064c61060d565b604052919050565b600082601f83011261066557600080fd5b813567ffffffffffffffff81111561067f5761067f61060d565b610692601f8201601f1916602001610623565b8181528460208386010111156106a757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156106d757600080fd5b82359150602083013567ffffffffffffffff8111156106f557600080fd5b61070185828601610654565b9150509250929050565b600067ffffffffffffffff8211156107255761072561060d565b5060051b60200190565b600082601f83011261074057600080fd5b813560206107556107508361070b565b610623565b82815260059290921b8401810191818101908684111561077457600080fd5b8286015b8481101561078f5780358352918301918301610778565b509695505050505050565b600080604083850312156107ad57600080fd5b823567ffffffffffffffff808211156107c557600080fd5b6107d18683870161072f565b93506020915081850135818111156107e857600080fd5b8501601f810187136107f957600080fd5b80356108076107508261070b565b81815260059190911b8201840190848101908983111561082657600080fd5b8584015b8381101561085e578035868111156108425760008081fd5b6108508c8983890101610654565b84525091860191860161082a565b508096505050505050509250929050565b60006020828403121561088157600080fd5b813567ffffffffffffffff81111561089857600080fd5b6108a48482850161072f565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561090157603f198886030184526108ef8583516105b4565b945092850192908501906001016108d3565b5092979650505050505050565b60006020828403121561092057600080fd5b81356001600160a01b038116811461059457600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061096157607f821691505b60208210810361038457634e487b7160e01b600052602260045260246000fd5b601f8211156102da57600081815260208120601f850160051c810160208610156109a85750805b601f850160051c820191505b818110156109c7578281556001016109b4565b505050505050565b815167ffffffffffffffff8111156109e9576109e961060d565b6109fd816109f7845461094d565b84610981565b602080601f831160018114610a325760008415610a1a5750858301515b600019600386901b1c1916600185901b1785556109c7565b600085815260208120601f198616915b82811015610a6157888601518255948401946001909101908401610a42565b5085821015610a7f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d3480b52e272571da9c53056302564ddf6b57499f51eba25a844439f5d05283f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x59B JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x8AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1C5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C5 DUP3 PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x0 PUSH2 0x4A7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x515 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x227 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2D2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI PUSH2 0x2AB PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x515 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x28D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FB JUMPI PUSH2 0x2FB PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x319 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x35F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x334 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x392 PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C2 DUP2 PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x3E2 SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40E SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x45B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x430 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x45B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x47A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x52D DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5BE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x594 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH2 0x67F PUSH2 0x60D JUMP JUMPDEST PUSH2 0x692 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x623 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x701 DUP6 DUP3 DUP7 ADD PUSH2 0x654 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0x60D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x755 PUSH2 0x750 DUP4 PUSH2 0x70B JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x78F JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D1 DUP7 DUP4 DUP8 ADD PUSH2 0x72F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x807 PUSH2 0x750 DUP3 PUSH2 0x70B JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x826 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x85E JUMPI DUP1 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x850 DUP13 DUP10 DUP4 DUP10 ADD ADD PUSH2 0x654 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x82A JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A4 DUP5 DUP3 DUP6 ADD PUSH2 0x72F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x901 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x8EF DUP6 DUP4 MLOAD PUSH2 0x5B4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8D3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x961 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x9A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9C7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x9FD DUP2 PUSH2 0x9F7 DUP5 SLOAD PUSH2 0x94D JUMP JUMPDEST DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xA1A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA61 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xA42 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xA7F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 BASEFEE SIGNEXTEND MSTORE 0xE2 PUSH19 0x571DA9C53056302564DDF6B57499F51EBA25A8 PREVRANDAO NUMBER SWAP16 0x5D SDIV 0x28 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"649:610:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5268:245:1;;;;;;;;;;-1:-1:-1;5268:245:1;;;;;:::i;:::-;;:::i;:::-;;;470:14:33;;463:22;445:41;;433:2;418:18;5268:245:1;;;;;;;;1197:156;;;;;;;;;;-1:-1:-1;1197:156:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1313:92:3:-;;;;;;;;;;;;;:::i;:::-;;2326:232:1;;;;;;:::i;:::-;;:::i;736:85:3:-;;;;;;;;;;-1:-1:-1;782:7:3;808:6;736:85;;-1:-1:-1;;;;;808:6:3;;;2817:51:33;;2805:2;2790:18;736:85:3;2671:203:33;3076:763:1;;;;;;:::i;:::-;;:::i;1403:458::-;;;;;;;;;;-1:-1:-1;1403:458:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1554:211:3:-;;;;;;;;;;-1:-1:-1;1554:211:3;;;;;:::i;:::-;;:::i;5268:245:1:-;5384:4;-1:-1:-1;;;;;;5419:35:1;;-1:-1:-1;;;5419:35:1;;:87;;-1:-1:-1;;;;;;;;;;861:40:24;;;5470:36:1;5400:106;5268:245;-1:-1:-1;;5268:245:1:o;1197:156::-;1283:22;1329:17;1338:7;1329:8;:17::i;1313:92:3:-;940:13;:11;:13::i;:::-;1377:21:::1;1395:1;1377:9;:21::i;:::-;1313:92::o:0;2326:232:1:-;940:13:3;:11;:13::i;:::-;2462:9:1::1;:14:::0;2458:55:::1;;2485:28;;-1:-1:-1::0;;;2485:28:1::1;;;;;;;;;;;2458:55;2523:28;2532:7;2541:9;2523:8;:28::i;:::-;2326:232:::0;;:::o;3076:763::-;940:13:3;:11;:13::i;:::-;3314:9:1::1;:14:::0;3310:55:::1;;3337:28;;-1:-1:-1::0;;;3337:28:1::1;;;;;;;;;;;3310:55;3399:10;:17;3380:8;:15;:36;3376:112;;3439:38;;-1:-1:-1::0;;;3439:38:1::1;;;;;;;;;;;3376:112;3502:8;:15;3521:1;3502:20:::0;3498:92:::1;;3545:34;;-1:-1:-1::0;;;3545:34:1::1;;;;;;;;;;;3498:92;3605:9;3600:233;3624:8;:15;3620:1;:19;3600:233;;;3657:36;3666:8;3675:1;3666:11;;;;;;;;:::i;:::-;;;;;;;3679:10;3690:1;3679:13;;;;;;;;:::i;:::-;;;;;;;3657:8;:36::i;:::-;3805:3;;3600:233;;;;3076:763:::0;;:::o;1403:458::-;1504:25;1566:8;:15;1554:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1541:41;;1598:9;1593:234;1617:8;:15;1613:1;:19;1593:234;;;1666:21;1675:8;1684:1;1675:11;;;;;;;;:::i;:::-;;;;;;;1666:8;:21::i;:::-;1650:10;1661:1;1650:13;;;;;;;;:::i;:::-;;;;;;;;;;:37;1799:3;;1593:234;;;;1403:458;;;:::o;1554:211:3:-;940:13;:11;:13::i;:::-;-1:-1:-1;;;;;1638:22:3;::::1;1634:96;;1683:36;;-1:-1:-1::0;;;1683:36:3::1;;;;;;;;;;;1634:96;1739:19;1749:8;1739:9;:19::i;:::-;1554:211:::0;:::o;4335:143:1:-;4456:15;;;;:6;:15;;;;;4449:22;;4415;;4456:15;4449:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4335:143;;;:::o;1838:156:3:-;1908:10;1897:7;782;808:6;-1:-1:-1;;;;;808:6:3;;736:85;1897:7;-1:-1:-1;;;;;1897:21:3;;1893:95;;1941:36;;-1:-1:-1;;;1941:36:3;;1966:10;1941:36;;;2817:51:33;2790:18;;1941:36:3;;;;;;;2133:194;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;2293:17:3;;-1:-1:-1;;;;;;2293:17:3;;;;;;2133:194;:::o;5032:188:1:-;5140:15;;;;:6;:15;;;;;:27;5158:9;5140:15;:27;:::i;:::-;;5194:7;5182:31;5203:9;5182:31;;;;;;:::i;:::-;;;;;;;;5032:188;;:::o;14:286:33:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:33;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:33:o;497:180::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:33;;497:180;-1:-1:-1;497:180:33:o;682:422::-;723:3;761:5;755:12;788:6;783:3;776:19;813:1;823:162;837:6;834:1;831:13;823:162;;;899:4;955:13;;;951:22;;945:29;927:11;;;923:20;;916:59;852:12;823:162;;;827:3;1030:1;1023:4;1014:6;1009:3;1005:16;1001:27;994:38;1093:4;1086:2;1082:7;1077:2;1069:6;1065:15;1061:29;1056:3;1052:39;1048:50;1041:57;;;682:422;;;;:::o;1109:217::-;1256:2;1245:9;1238:21;1219:4;1276:44;1316:2;1305:9;1301:18;1293:6;1276:44;:::i;1331:127::-;1392:10;1387:3;1383:20;1380:1;1373:31;1423:4;1420:1;1413:15;1447:4;1444:1;1437:15;1463:275;1534:2;1528:9;1599:2;1580:13;;-1:-1:-1;;1576:27:33;1564:40;;1634:18;1619:34;;1655:22;;;1616:62;1613:88;;;1681:18;;:::i;:::-;1717:2;1710:22;1463:275;;-1:-1:-1;1463:275:33:o;1743:530::-;1785:5;1838:3;1831:4;1823:6;1819:17;1815:27;1805:55;;1856:1;1853;1846:12;1805:55;1892:6;1879:20;1918:18;1914:2;1911:26;1908:52;;;1940:18;;:::i;:::-;1984:55;2027:2;2008:13;;-1:-1:-1;;2004:27:33;2033:4;2000:38;1984:55;:::i;:::-;2064:2;2055:7;2048:19;2110:3;2103:4;2098:2;2090:6;2086:15;2082:26;2079:35;2076:55;;;2127:1;2124;2117:12;2076:55;2192:2;2185:4;2177:6;2173:17;2166:4;2157:7;2153:18;2140:55;2240:1;2215:16;;;2233:4;2211:27;2204:38;;;;2219:7;1743:530;-1:-1:-1;;;1743:530:33:o;2278:388::-;2355:6;2363;2416:2;2404:9;2395:7;2391:23;2387:32;2384:52;;;2432:1;2429;2422:12;2384:52;2468:9;2455:23;2445:33;;2529:2;2518:9;2514:18;2501:32;2556:18;2548:6;2545:30;2542:50;;;2588:1;2585;2578:12;2542:50;2611:49;2652:7;2643:6;2632:9;2628:22;2611:49;:::i;:::-;2601:59;;;2278:388;;;;;:::o;2879:183::-;2939:4;2972:18;2964:6;2961:30;2958:56;;;2994:18;;:::i;:::-;-1:-1:-1;3039:1:33;3035:14;3051:4;3031:25;;2879:183::o;3067:662::-;3121:5;3174:3;3167:4;3159:6;3155:17;3151:27;3141:55;;3192:1;3189;3182:12;3141:55;3228:6;3215:20;3254:4;3278:60;3294:43;3334:2;3294:43;:::i;:::-;3278:60;:::i;:::-;3372:15;;;3458:1;3454:10;;;;3442:23;;3438:32;;;3403:12;;;;3482:15;;;3479:35;;;3510:1;3507;3500:12;3479:35;3546:2;3538:6;3534:15;3558:142;3574:6;3569:3;3566:15;3558:142;;;3640:17;;3628:30;;3678:12;;;;3591;;3558:142;;;-1:-1:-1;3718:5:33;3067:662;-1:-1:-1;;;;;;3067:662:33:o;3734:1357::-;3861:6;3869;3922:2;3910:9;3901:7;3897:23;3893:32;3890:52;;;3938:1;3935;3928:12;3890:52;3978:9;3965:23;4007:18;4048:2;4040:6;4037:14;4034:34;;;4064:1;4061;4054:12;4034:34;4087:61;4140:7;4131:6;4120:9;4116:22;4087:61;:::i;:::-;4077:71;;4167:2;4157:12;;4222:2;4211:9;4207:18;4194:32;4251:2;4241:8;4238:16;4235:36;;;4267:1;4264;4257:12;4235:36;4290:24;;4345:4;4337:13;;4333:27;-1:-1:-1;4323:55:33;;4374:1;4371;4364:12;4323:55;4410:2;4397:16;4433:60;4449:43;4489:2;4449:43;:::i;4433:60::-;4527:15;;;4609:1;4605:10;;;;4597:19;;4593:28;;;4558:12;;;;4633:19;;;4630:39;;;4665:1;4662;4655:12;4630:39;4697:2;4693;4689:11;4709:352;4725:6;4720:3;4717:15;4709:352;;;4811:3;4798:17;4847:2;4834:11;4831:19;4828:109;;;4891:1;4920:2;4916;4909:14;4828:109;4962:56;5010:7;5005:2;4991:11;4987:2;4983:20;4979:29;4962:56;:::i;:::-;4950:69;;-1:-1:-1;5039:12:33;;;;4742;;4709:352;;;4713:3;5080:5;5070:15;;;;;;;;3734:1357;;;;;:::o;5096:348::-;5180:6;5233:2;5221:9;5212:7;5208:23;5204:32;5201:52;;;5249:1;5246;5239:12;5201:52;5289:9;5276:23;5322:18;5314:6;5311:30;5308:50;;;5354:1;5351;5344:12;5308:50;5377:61;5430:7;5421:6;5410:9;5406:22;5377:61;:::i;:::-;5367:71;5096:348;-1:-1:-1;;;;5096:348:33:o;5449:800::-;5609:4;5638:2;5678;5667:9;5663:18;5708:2;5697:9;5690:21;5731:6;5766;5760:13;5797:6;5789;5782:22;5835:2;5824:9;5820:18;5813:25;;5897:2;5887:6;5884:1;5880:14;5869:9;5865:30;5861:39;5847:53;;5935:2;5927:6;5923:15;5956:1;5966:254;5980:6;5977:1;5974:13;5966:254;;;6073:2;6069:7;6057:9;6049:6;6045:22;6041:36;6036:3;6029:49;6101:39;6133:6;6124;6118:13;6101:39;:::i;:::-;6091:49;-1:-1:-1;6198:12:33;;;;6163:15;;;;6002:1;5995:9;5966:254;;;-1:-1:-1;6237:6:33;;5449:800;-1:-1:-1;;;;;;;5449:800:33:o;6254:286::-;6313:6;6366:2;6354:9;6345:7;6341:23;6337:32;6334:52;;;6382:1;6379;6372:12;6334:52;6408:23;;-1:-1:-1;;;;;6460:31:33;;6450:42;;6440:70;;6506:1;6503;6496:12;6545:127;6606:10;6601:3;6597:20;6594:1;6587:31;6637:4;6634:1;6627:15;6661:4;6658:1;6651:15;6677:380;6756:1;6752:12;;;;6799;;;6820:61;;6874:4;6866:6;6862:17;6852:27;;6820:61;6927:2;6919:6;6916:14;6896:18;6893:38;6890:161;;6973:10;6968:3;6964:20;6961:1;6954:31;7008:4;7005:1;6998:15;7036:4;7033:1;7026:15;7187:544;7288:2;7283:3;7280:11;7277:448;;;7324:1;7349:5;7345:2;7338:17;7394:4;7390:2;7380:19;7464:2;7452:10;7448:19;7445:1;7441:27;7435:4;7431:38;7500:4;7488:10;7485:20;7482:47;;;-1:-1:-1;7523:4:33;7482:47;7578:2;7573:3;7569:12;7566:1;7562:20;7556:4;7552:31;7542:41;;7633:82;7651:2;7644:5;7641:13;7633:82;;;7696:17;;;7677:1;7666:13;7633:82;;;7637:3;;;7187:544;;;:::o;7907:1348::-;8031:3;8025:10;8058:18;8050:6;8047:30;8044:56;;;8080:18;;:::i;:::-;8109:96;8198:6;8158:38;8190:4;8184:11;8158:38;:::i;:::-;8152:4;8109:96;:::i;:::-;8260:4;;8324:2;8313:14;;8341:1;8336:662;;;;9042:1;9059:6;9056:89;;;-1:-1:-1;9111:19:33;;;9105:26;9056:89;-1:-1:-1;;7864:1:33;7860:11;;;7856:24;7852:29;7842:40;7888:1;7884:11;;;7839:57;9158:81;;8306:943;;8336:662;7134:1;7127:14;;;7171:4;7158:18;;-1:-1:-1;;8372:20:33;;;8489:236;8503:7;8500:1;8497:14;8489:236;;;8592:19;;;8586:26;8571:42;;8684:27;;;;8652:1;8640:14;;;;8519:19;;8489:236;;;8493:3;8753:6;8744:7;8741:19;8738:201;;;8814:19;;;8808:26;-1:-1:-1;;8897:1:33;8893:14;;;8909:3;8889:24;8885:37;8881:42;8866:58;8851:74;;8738:201;-1:-1:-1;;;;;8985:1:33;8969:14;;;8965:22;8952:36;;-1:-1:-1;7907:1348:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"551400","executionCost":"infinite","totalCost":"infinite"},"external":{"getData(bytes32)":"infinite","getDataBatch(bytes32[])":"infinite","owner()":"2301","renounceOwnership()":"infinite","setData(bytes32,bytes)":"infinite","setDataBatch(bytes32[],bytes[])":"infinite","supportsInterface(bytes4)":"427","transferOwnership(address)":"32659"}},"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <fabian@lukso.network>\",\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:requirements\":\"- `initialOwner` CANNOT be the zero address.\",\"details\":\"Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\",\"params\":{\"initialOwner\":\"the owner of the contract.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":\"ERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/ERC725Y.sol:ERC725Y","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@erc725/smart-contracts/contracts/ERC725Y.sol:ERC725Y","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"constructor":{"notice":"Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"ERC725YCore":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Fabian Vogelsteller <fabian@lukso.network>","details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"_store":{"details":"Map `bytes32` data keys to their `bytes` data values."}},"title":"Core implementation of ERC725Y sub-standard, a general data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <fabian@lukso.network>\",\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_store\":{\"details\":\"Map `bytes32` data keys to their `bytes` data values.\"}},\"title\":\"Core implementation of ERC725Y sub-standard, a general data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":\"ERC725YCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/ERC725YCore.sol:ERC725YCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@erc725/smart-contracts/contracts/ERC725YCore.sol:ERC725YCore","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"OwnableUnset":{"abi":[{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"modified version of OpenZeppelin implementation, where: - _setOwner(address) function is internal, so this function can be used in constructor of contracts implementation (instead of using transferOwnership(address) - the contract does not inherit from Context contract","errors":{"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OwnableUnset","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"modified version of OpenZeppelin implementation, where: - _setOwner(address) function is internal, so this function can be used in constructor of contracts implementation (instead of using transferOwnership(address) - the contract does not inherit from Context contract\",\"errors\":{\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OwnableUnset\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":\"OwnableUnset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol:OwnableUnset","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"IERC725Y":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"The interface for ERC725Y sub-standard, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725Y sub-standard, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":\"IERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ILSP1UniversalReceiver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"typeId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"receivedData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"returnedValue","type":"bytes"}],"name":"UniversalReceiver","type":"event"},{"inputs":[{"internalType":"bytes32","name":"typeId","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"universalReceiver","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.","events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"details":"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`","params":{"from":"The address of the EOA or smart contract that called the {universalReceiver(...)} function.","receivedData":"Any arbitrary data that was sent to the {universalReceiver(...)} function.","returnedValue":"The value returned by the {universalReceiver(...)} function.","typeId":"A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.","value":"The amount sent to the {universalReceiver(...)} function."}}},"kind":"dev","methods":{"universalReceiver(bytes32,bytes)":{"custom:events":"{UniversalReceiver} event.","details":"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.","params":{"data":"The arbitrary data received with the call.","typeId":"The hash of a specific standard or a hook."}}},"title":"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"universalReceiver(bytes32,bytes)":"6bb56a14"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedValue\",\"type\":\"bytes\"}],\"name\":\"UniversalReceiver\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"universalReceiver\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\",\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"details\":\"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\",\"params\":{\"from\":\"The address of the EOA or smart contract that called the {universalReceiver(...)} function.\",\"receivedData\":\"Any arbitrary data that was sent to the {universalReceiver(...)} function.\",\"returnedValue\":\"The value returned by the {universalReceiver(...)} function.\",\"typeId\":\"A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\",\"value\":\"The amount sent to the {universalReceiver(...)} function.\"}}},\"kind\":\"dev\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"custom:events\":\"{UniversalReceiver} event.\",\"details\":\"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\",\"params\":{\"data\":\"The arbitrary data received with the call.\",\"typeId\":\"The hash of a specific standard or a hook.\"}}},\"title\":\"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\",\"version\":1},\"userdoc\":{\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\"}},\"kind\":\"user\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"notice\":\"Reacted on received notification with `typeId` & `data`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":\"ILSP1UniversalReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"notice":"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`."}},"kind":"user","methods":{"universalReceiver(bytes32,bytes)":{"notice":"Reacted on received notification with `typeId` & `data`."}},"version":1}}},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"LSP1Utils":{"abi":[],"devdoc":{"author":"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>","details":"LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract that implements LSP1 and retrieve informations related to LSP1 `typeId`. Based on LSP1 Universal Receiver standard.","kind":"dev","methods":{},"title":"LSP1 Utility library.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2d28865ce76f9d55246515a16de3856430804e9070abeeb1e16682f1ecb5bc964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xD2 DUP9 PUSH6 0xCE76F9D55246 MLOAD GAS AND 0xDE CODESIZE JUMP NUMBER ADDMOD DIV 0xE9 SMOD EXP 0xBE 0xEB 0x1E AND PUSH9 0x2F1ECB5BC964736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"877:2519:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;877:2519:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2d28865ce76f9d55246515a16de3856430804e9070abeeb1e16682f1ecb5bc964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xD2 DUP9 PUSH6 0xCE76F9D55246 MLOAD GAS AND 0xDE CODESIZE JUMP NUMBER ADDMOD DIV 0xE9 SMOD EXP 0xBE 0xEB 0x1E AND PUSH9 0x2F1ECB5BC964736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"877:2519:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getLSP1DelegateValue(mapping(bytes32 => bytes storage ref))":"infinite","getLSP1DelegateValueForTypeId(mapping(bytes32 => bytes storage ref),bytes32)":"infinite","notifyUniversalReceiver(address,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\",\"details\":\"LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract that implements LSP1 and retrieve informations related to LSP1 `typeId`. Based on LSP1 Universal Receiver standard.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LSP1 Utility library.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":\"LSP1Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"LSP17Extendable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard. This module can be inherited to extend the functionality of the parent contract when calling a function that doesn't exist on the parent contract via forwarding the call to an extension mapped to the function selector being called, set originally by the parent contract","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"title":"Module to add more functionalities to a contract using extensions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard. This module can be inherited to extend the functionality of the parent contract when calling a function that doesn't exist on the parent contract via forwarding the call to an extension mapped to the function selector being called, set originally by the parent contract\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Module to add more functionalities to a contract using extensions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":\"LSP17Extendable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"LSP2Utils":{"abi":[],"devdoc":{"author":"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>","details":"LSP2Utils is a library of utility functions that can be used to encode data key of different key type defined on the LSP2 standard. Based on LSP2 ERC725Y JSON Schema standard.","kind":"dev","methods":{},"title":"LSP2 Utility library.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220669e34abaa23b9a6cddc6574bc8c9f89bb9042ed96575795553393175f14f1ec64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x9E34ABAA23B9A6 0xCD 0xDC PUSH6 0x74BC8C9F89BB SWAP1 TIMESTAMP 0xED SWAP7 JUMPI JUMPI SWAP6 SSTORE CALLER SWAP4 OR PUSH0 EQ CALL 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"482:15762:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:15762:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220669e34abaa23b9a6cddc6574bc8c9f89bb9042ed96575795553393175f14f1ec64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x9E34ABAA23B9A6 0xCD 0xDC PUSH6 0x74BC8C9F89BB SWAP1 TIMESTAMP 0xED SWAP7 JUMPI JUMPI SWAP6 SSTORE CALLER SWAP4 OR PUSH0 EQ CALL 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"482:15762:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"generateASSETURLValue(string memory,string memory,string memory)":"infinite","generateArrayElementKeyAtIndex(bytes32,uint128)":"infinite","generateArrayKey(string memory)":"infinite","generateJSONURLValue(string memory,string memory,string memory)":"infinite","generateMappingKey(bytes10,bytes20)":"infinite","generateMappingKey(string memory,address)":"infinite","generateMappingKey(string memory,string memory)":"infinite","generateMappingWithGroupingKey(bytes10,bytes20)":"infinite","generateMappingWithGroupingKey(bytes6,bytes4,bytes20)":"infinite","generateMappingWithGroupingKey(string memory,string memory,address)":"infinite","generateSingletonKey(string memory)":"infinite","isCompactBytesArray(bytes memory)":"infinite","isValidLSP2ArrayLengthValue(bytes memory)":"infinite","removeElementFromArrayAndMap(contract IERC725Y,bytes32,uint128,bytes32,uint128,bytes32)":"infinite","removeLastElementFromArrayAndMap(bytes32,uint128,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\",\"details\":\"LSP2Utils is a library of utility functions that can be used to encode data key of different key type defined on the LSP2 standard. Based on LSP2 ERC725Y JSON Schema standard.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LSP2 Utility library.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":\"LSP2Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"LSP4DigitalAssetMetadata":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Standard Implementation of the LSP4 standard.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"constructor":{"params":{"initialOwner_":"The owner of the token contract.","lsp4TokenType_":"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).","name_":"The name of the token.","symbol_":"The symbol of the token."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Standard Implementation of the LSP4 standard.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"initialOwner_\":\"The owner of the token contract.\",\"lsp4TokenType_\":\"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\",\"name_\":\"The name of the token.\",\"symbol_\":\"The symbol of the token.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploying a digital asset `name_` with the `symbol_` symbol.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":\"LSP4DigitalAssetMetadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol:LSP4DigitalAssetMetadata","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol:LSP4DigitalAssetMetadata","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"constructor":{"notice":"Deploying a digital asset `name_` with the `symbol_` symbol."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"LSP4DigitalAssetMetadataCore":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Standard Implementation of the LSP4 standard.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Standard Implementation of the LSP4 standard.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":\"LSP4DigitalAssetMetadataCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol:LSP4DigitalAssetMetadataCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol:LSP4DigitalAssetMetadataCore","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"ILSP7DigitalAsset":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.","custom:requirements":"- `operator` cannot be the zero address.","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"custom:info":"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).","details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"custom:notice":"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.","details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"custom:events":"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.","details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} indicating the updated allowance","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.","details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"revokeOperator(address,address,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).","custom:requirements":"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.","details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"custom:events":"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"custom:events":"{Transfer} event **for each token transfer**.","custom:info":"If any transfer in the batch fail or revert, the whole call will revert.","custom:requirements":"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.","details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}}},"title":"Interface of the LSP7 - Digital Asset standard, a fungible digital asset.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.\",\"custom:requirements\":\"- `operator` cannot be the zero address.\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"custom:info\":\"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).\",\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"custom:notice\":\"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"custom:events\":\"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.\",\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} indicating the updated allowance\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"revokeOperator(address,address,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\",\"custom:requirements\":\"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.\",\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"custom:events\":\"{Transfer} event **for each token transfer**.\",\"custom:info\":\"If any transfer in the batch fail or revert, the whole call will revert.\",\"custom:requirements\":\"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\",\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}}},\"title\":\"Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":\"ILSP7DigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol":{"LSP7DigitalAsset":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"bytes","name":"storedData","type":"bytes"}],"name":"InvalidExtensionAddress","type":"error"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"InvalidFunctionSelector","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"authorizedAmount","type":"uint256"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsAuthorizedAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP7BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP7CannotSendWithAddressZero","type":"error"},{"inputs":[],"name":"LSP7CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7DecreaseAllowanceNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7DecreasedAllowanceBelowZero","type":"error"},{"inputs":[],"name":"LSP7InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7TokenContractCannotHoldValue","type":"error"},{"inputs":[],"name":"LSP7TokenOwnerCannotBeOperator","type":"error"},{"inputs":[{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"NoExtensionFoundForFunctionSelector","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"OperatorAllowanceCannotBeIncreasedFromZero","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Matthew Stevens","details":"Minting and transferring are supplied with a `uint256` amount. This implementation is agnostic to the way tokens are created. A supply mechanism has to be added in a derived contract using {_mint} For a generic mechanism, see {LSP7Mintable}.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"InvalidExtensionAddress(bytes)":[{"details":"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"}],"InvalidFunctionSelector(bytes)":[{"details":"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)":[{"details":"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."}],"LSP7AmountExceedsBalance(uint256,address,uint256)":[{"details":"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."}],"LSP7BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP7CannotSendWithAddressZero()":[{"details":"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address."}],"LSP7CannotUseAddressZeroAsOperator()":[{"details":"reverts when trying to set the zero address as an operator."}],"LSP7DecreaseAllowanceNotAuthorized(address,address,address)":[{"details":"Reverts when the call to decrease allowance is not authorized."}],"LSP7DecreasedAllowanceBelowZero()":[{"details":"Reverts when trying to decrease an operator's allowance to more than its current allowance."}],"LSP7InvalidTransferBatch()":[{"details":"reverts when the array parameters used in {transferBatch} have different lengths."}],"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP7NotifyTokenReceiverIsEOA(address)":[{"details":"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP7RevokeOperatorNotAuthorized(address,address,address)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP7TokenContractCannotHoldValue()":[{"details":"Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."}],"LSP7TokenOwnerCannotBeOperator()":[{"details":"reverts when trying to authorize or revoke the token's owner as an operator."}],"NoExtensionFoundForFunctionSelector(bytes4)":[{"details":"reverts when there is no extension for the function selector being called with"}],"OperatorAllowanceCannotBeIncreasedFromZero(address)":[{"details":"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:danger":"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"constructor":{"params":{"isNonDivisible_":"Specify if the LSP7 token is a fungible or non-fungible token.","lsp4TokenType_":"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).","name_":"The name of the token.","newOwner_":"The owner of the the token-Metadata.","symbol_":"The symbol of the token."}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeOperator(address,address,bool,bytes)":{"details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"storedData\",\"type\":\"bytes\"}],\"name\":\"InvalidExtensionAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsAuthorizedAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP7BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotSendWithAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7DecreaseAllowanceNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7TokenContractCannotHoldValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"NoExtensionFoundForFunctionSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAllowanceCannotBeIncreasedFromZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Minting and transferring are supplied with a `uint256` amount. This implementation is agnostic to the way tokens are created. A supply mechanism has to be added in a derived contract using {_mint} For a generic mechanism, see {LSP7Mintable}.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"InvalidExtensionAddress(bytes)\":[{\"details\":\"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\"}],\"InvalidFunctionSelector(bytes)\":[{\"details\":\"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)\":[{\"details\":\"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`.\"}],\"LSP7AmountExceedsBalance(uint256,address,uint256)\":[{\"details\":\"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\"}],\"LSP7BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP7CannotSendWithAddressZero()\":[{\"details\":\"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address.\"}],\"LSP7CannotUseAddressZeroAsOperator()\":[{\"details\":\"reverts when trying to set the zero address as an operator.\"}],\"LSP7DecreaseAllowanceNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to decrease allowance is not authorized.\"}],\"LSP7DecreasedAllowanceBelowZero()\":[{\"details\":\"Reverts when trying to decrease an operator's allowance to more than its current allowance.\"}],\"LSP7InvalidTransferBatch()\":[{\"details\":\"reverts when the array parameters used in {transferBatch} have different lengths.\"}],\"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7RevokeOperatorNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP7TokenContractCannotHoldValue()\":[{\"details\":\"Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\"}],\"LSP7TokenOwnerCannotBeOperator()\":[{\"details\":\"reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"NoExtensionFoundForFunctionSelector(bytes4)\":[{\"details\":\"reverts when there is no extension for the function selector being called with\"}],\"OperatorAllowanceCannotBeIncreasedFromZero(address)\":[{\"details\":\"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:danger\":\"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"constructor\":{\"params\":{\"isNonDivisible_\":\"Specify if the LSP7 token is a fungible or non-fungible token.\",\"lsp4TokenType_\":\"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\",\"name_\":\"The name of the token.\",\"newOwner_\":\"The owner of the the token-Metadata.\",\"symbol_\":\"The symbol of the token.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,address,bool,bytes)\":{\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.\",\"version\":1},\"userdoc\":{\"errors\":{\"LSP7BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}],\"LSP7TokenContractCannotHoldValue()\":[{\"notice\":\"LSP7 contract cannot receive native tokens.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"constructor\":{\"notice\":\"Sets the token-Metadata\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol\":\"LSP7DigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP7 = 0xc52d6008;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP7Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea;\\n\\n// keccak256('LSP7Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c;\\n\\n// keccak256('LSP7Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENOPERATOR = 0x386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc;\\n\",\"keccak256\":\"0x9c7d7749a5f8de103f791b42684fb5bc99e23c2f85aa408a87e96f592394ad2a\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {\\n    LSP4DigitalAssetMetadata\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\nimport {LSP7DigitalAssetCore} from \\\"./LSP7DigitalAssetCore.sol\\\";\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP7} from \\\"./LSP7Constants.sol\\\";\\nimport {LSP7TokenContractCannotHoldValue} from \\\"./LSP7Errors.sol\\\";\\n\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\n\\n// errors\\n\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Minting and transferring are supplied with a `uint256` amount.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP7DigitalAsset is\\n    LSP4DigitalAssetMetadata,\\n    LSP7DigitalAssetCore,\\n    LSP17Extendable\\n{\\n    /**\\n     * @notice Sets the token-Metadata\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param newOwner_ The owner of the the token-Metadata.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param isNonDivisible_ Specify if the LSP7 token is a fungible or non-fungible token.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        bool isNonDivisible_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        _isNonDivisible = isNonDivisible_;\\n    }\\n\\n    // fallback function\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP7 contract.\\n     * @notice LSP7 contract cannot receive native tokens.\\n     */\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP7TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP7 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            /// @solidity memory-safe-assembly\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     * - we do not check that payable bool as in lsp7 standard we will always forward the value to the extension\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = ERC725YCore._getData(\\n            mappedExtensionDataKey\\n        );\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore, LSP17Extendable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP7 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe5e7cd4ddb4d5ac232e8ba70fb202254d9616e95836f617f74b2f75d92c5a1aa\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {ILSP7DigitalAsset} from \\\"./ILSP7DigitalAsset.sol\\\";\\n\\n// modules\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP7AmountExceedsAuthorizedAmount,\\n    LSP7InvalidTransferBatch,\\n    LSP7AmountExceedsBalance,\\n    LSP7DecreasedAllowanceBelowZero,\\n    LSP7CannotUseAddressZeroAsOperator,\\n    LSP7TokenOwnerCannotBeOperator,\\n    LSP7CannotSendWithAddressZero,\\n    LSP7NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP7NotifyTokenReceiverIsEOA,\\n    OperatorAllowanceCannotBeIncreasedFromZero,\\n    LSP7BatchCallFailed,\\n    LSP7RevokeOperatorNotAuthorized,\\n    LSP7DecreaseAllowanceNotAuthorized\\n} from \\\"./LSP7Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP7_TOKENOPERATOR,\\n    _TYPEID_LSP7_TOKENSSENDER,\\n    _TYPEID_LSP7_TOKENSRECIPIENT\\n} from \\\"./LSP7Constants.sol\\\";\\n\\n/**\\n * @title LSP7DigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP7 compliant contract.\\n *\\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\\n */\\nabstract contract LSP7DigitalAssetCore is ILSP7DigitalAsset {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- Storage\\n\\n    bool internal _isNonDivisible;\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenOwner` to an `amount` of tokens\\n    mapping(address => uint256) internal _tokenOwnerBalances;\\n\\n    // Mapping an `address` to its authorized operator addresses.\\n    mapping(address => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\\n    mapping(address => mapping(address => uint256))\\n        internal _operatorAuthorizedAmount;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _isNonDivisible ? 0 : 18;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _tokenOwnerBalances[tokenOwner];\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP7BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:danger To avoid front-running and Allowance Double-Spend Exploit when\\n     * increasing or decreasing the authorized amount of an operator, it is advised to\\n     * use the {increaseAllowance} and {decreaseAllowance} functions.\\n     *\\n     * For more information, see:\\n     * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            amount,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            amount,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7RevokeOperatorNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        _updateOperator(\\n            tokenOwner,\\n            operator,\\n            0,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                0,\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        if (tokenOwner == operator) {\\n            return _tokenOwnerBalances[tokenOwner];\\n        } else {\\n            return _operatorAuthorizedAmount[tokenOwner][operator];\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (address[] memory) {\\n        return _operators[tokenOwner].values();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        uint256 oldAllowance = authorizedAmountFor(operator, msg.sender);\\n        if (oldAllowance == 0)\\n            revert OperatorAllowanceCannotBeIncreasedFromZero(operator);\\n\\n        uint256 newAllowance = oldAllowance + addedAmount;\\n\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            newAllowance,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7DecreaseAllowanceNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        uint256 currentAllowance = authorizedAmountFor(operator, tokenOwner);\\n        if (currentAllowance < subtractedAmount) {\\n            revert LSP7DecreasedAllowanceBelowZero();\\n        }\\n\\n        uint256 newAllowance;\\n        unchecked {\\n            newAllowance = currentAllowance - subtractedAmount;\\n            _updateOperator(\\n                tokenOwner,\\n                operator,\\n                newAllowance,\\n                true,\\n                operatorNotificationData\\n            );\\n        }\\n\\n        bytes memory lsp1Data = abi.encode(\\n            tokenOwner,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (msg.sender != from) {\\n            _spendAllowance({\\n                operator: msg.sender,\\n                tokenOwner: from,\\n                amountToSpend: amount\\n            });\\n        }\\n\\n        _transfer(from, to, amount, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != amount.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP7InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            // using the public transfer function to handle updates to operator authorized amounts\\n            transfer(from[i], to[i], amount[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens.\\n     * If the amount is zero the operator is removed from the list of operators, otherwise he is added to the list of operators.\\n     * If the amount is zero then the operator is being revoked, otherwise the operator amount is being modified.\\n     *\\n     * @param tokenOwner The address that will give `operator` an allowance for on its balance.\\n     * @param operator The address to grant an allowance to spend.\\n     * @param allowance The maximum amount of token that `operator` can spend from the `tokenOwner`'s balance.\\n     * @param notified Boolean indicating whether the operator has been notified about the change of allowance\\n     * @param operatorNotificationData The data to send to the universalReceiver function of the operator in case of notifying\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _updateOperator(\\n        address tokenOwner,\\n        address operator,\\n        uint256 allowance,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        if (operator == address(0)) {\\n            revert LSP7CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (operator == tokenOwner) {\\n            revert LSP7TokenOwnerCannotBeOperator();\\n        }\\n\\n        _operatorAuthorizedAmount[tokenOwner][operator] = allowance;\\n\\n        if (allowance != 0) {\\n            _operators[tokenOwner].add(operator);\\n            emit OperatorAuthorizationChanged(\\n                operator,\\n                tokenOwner,\\n                allowance,\\n                operatorNotificationData\\n            );\\n        } else {\\n            _operators[tokenOwner].remove(operator);\\n            emit OperatorRevoked(\\n                operator,\\n                tokenOwner,\\n                notified,\\n                operatorNotificationData\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `amount` of tokens and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address to mint tokens for.\\n     * @param amount The amount of tokens to mint.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted {Transfer} event, and sent in the LSP1 hook to the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as `from`.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, amount, data);\\n\\n        // tokens being minted\\n        _existingTokens += amount;\\n\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: address(0),\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(address(0), to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            amount,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burns (= destroys) `amount` of tokens, decrease the `from` balance. This is done by sending them to the zero address.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender via LSP1**.\\n     *\\n     * @param from The address to burn tokens from its balance.\\n     * @param amount The amount of tokens to burn.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:hint In dApps, you can know which address is burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, address(0), amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n        // tokens being burnt\\n        _existingTokens -= amount;\\n\\n        _tokenOwnerBalances[from] -= amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: address(0),\\n            amount: amount,\\n            force: false,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, address(0), amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            from,\\n            address(0),\\n            amount,\\n            data\\n        );\\n        _notifyTokenSender(from, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Spend `amountToSpend` from the `operator`'s authorized on behalf of the `tokenOwner`.\\n     *\\n     * @param operator The address of the operator to decrease the allowance of.\\n     * @param tokenOwner The address that granted an allowance on its balance to `operator`.\\n     * @param amountToSpend The amount of tokens to substract in allowance of `operator`.\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - The `amountToSpend` MUST be at least the allowance granted to `operator` (accessible via {`authorizedAmountFor}`)\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _spendAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 amountToSpend\\n    ) internal virtual {\\n        uint256 authorizedAmount = _operatorAuthorizedAmount[tokenOwner][\\n            operator\\n        ];\\n\\n        if (amountToSpend > authorizedAmount) {\\n            revert LSP7AmountExceedsAuthorizedAmount(\\n                tokenOwner,\\n                authorizedAmount,\\n                operator,\\n                amountToSpend\\n            );\\n        }\\n\\n        _updateOperator({\\n            tokenOwner: tokenOwner,\\n            operator: operator,\\n            allowance: authorizedAmount - amountToSpend,\\n            notified: false,\\n            operatorNotificationData: \\\"\\\"\\n        });\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from `from` to `to` by decreasing the balance of `from` by `-amount` and increasing the balance\\n     * of `to` by `+amount`.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The address to decrease the balance.\\n     * @param to The address to increase the balance.\\n     * @param amount The amount of tokens to transfer from `from` to `to`.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have at least `amount` of tokens.\\n     *\\n     * @custom:events {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0) || to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n\\n        _tokenOwnerBalances[from] -= amount;\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, amount, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `amount` tokens being authorized with.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP7_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `amount` of tokens being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP7_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `amount` tokens being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP7NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b31fd7419e25bc6696d2a11257d18a2ac7bf9741d142fff227729ce9a71d01e\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\\n */\\nerror LSP7AmountExceedsBalance(\\n    uint256 balance,\\n    address tokenOwner,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when `operator` of `tokenOwner` send an `amount` of tokens\\n * larger than the `authorizedAmount`.\\n */\\nerror LSP7AmountExceedsAuthorizedAmount(\\n    address tokenOwner,\\n    uint256 authorizedAmount,\\n    address operator,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when trying to set the zero address as an operator.\\n */\\nerror LSP7CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev reverts when trying to:\\n * - mint tokens to the zero address.\\n * - burn tokens from the zero address.\\n * - transfer tokens from or to the zero address.\\n */\\nerror LSP7CannotSendWithAddressZero();\\n\\n/**\\n * @dev reverts when the array parameters used in {transferBatch} have different lengths.\\n */\\nerror LSP7InvalidTransferBatch();\\n\\n/**\\n * @dev reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP7TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Reverts when trying to decrease an operator's allowance to more than its current allowance.\\n */\\nerror LSP7DecreasedAllowanceBelowZero();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP7 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP7 contract cannot receive native tokens.\\n */\\nerror LSP7TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\\n */\\nerror OperatorAllowanceCannotBeIncreasedFromZero(address operator);\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP7BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP7RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\\n/**\\n * @dev Reverts when the call to decrease allowance is not authorized.\\n */\\nerror LSP7DecreaseAllowanceNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\",\"keccak256\":\"0x5bd6d23f61d45a390041b788c5e341bd0e1972b4112c7700af1addcfa284e821\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":2192,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_isNonDivisible","offset":0,"slot":"2","type":"t_bool"},{"astId":2194,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_existingTokens","offset":0,"slot":"3","type":"t_uint256"},{"astId":2198,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_tokenOwnerBalances","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":2203,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_operators","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(AddressSet)4044_storage)"},{"astId":2209,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_operatorAuthorizedAmount","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(AddressSet)4044_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4044_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4044_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4043,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3729_storage"}],"numberOfBytes":"64"},"t_struct(Set)3729_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3724,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3728,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol:LSP7DigitalAsset","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP7BatchCallFailed(uint256)":[{"notice":"Batch call failed."}],"LSP7TokenContractCannotHoldValue()":[{"notice":"LSP7 contract cannot receive native tokens."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"constructor":{"notice":"Sets the token-Metadata"},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol":{"LSP7DigitalAssetCore":{"abi":[{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"authorizedAmount","type":"uint256"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsAuthorizedAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP7BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP7CannotSendWithAddressZero","type":"error"},{"inputs":[],"name":"LSP7CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7DecreaseAllowanceNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7DecreasedAllowanceBelowZero","type":"error"},{"inputs":[],"name":"LSP7InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7TokenOwnerCannotBeOperator","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"OperatorAllowanceCannotBeIncreasedFromZero","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Core Implementation of a LSP7 compliant contract. This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.","errors":{"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)":[{"details":"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."}],"LSP7AmountExceedsBalance(uint256,address,uint256)":[{"details":"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."}],"LSP7BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP7CannotSendWithAddressZero()":[{"details":"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address."}],"LSP7CannotUseAddressZeroAsOperator()":[{"details":"reverts when trying to set the zero address as an operator."}],"LSP7DecreaseAllowanceNotAuthorized(address,address,address)":[{"details":"Reverts when the call to decrease allowance is not authorized."}],"LSP7DecreasedAllowanceBelowZero()":[{"details":"Reverts when trying to decrease an operator's allowance to more than its current allowance."}],"LSP7InvalidTransferBatch()":[{"details":"reverts when the array parameters used in {transferBatch} have different lengths."}],"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP7NotifyTokenReceiverIsEOA(address)":[{"details":"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP7RevokeOperatorNotAuthorized(address,address,address)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP7TokenOwnerCannotBeOperator()":[{"details":"reverts when trying to authorize or revoke the token's owner as an operator."}],"OperatorAllowanceCannotBeIncreasedFromZero(address)":[{"details":"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:danger":"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"revokeOperator(address,address,bool,bytes)":{"details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}}},"title":"LSP7DigitalAsset contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsAuthorizedAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP7BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotSendWithAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7DecreaseAllowanceNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAllowanceCannotBeIncreasedFromZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Core Implementation of a LSP7 compliant contract. This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\",\"errors\":{\"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)\":[{\"details\":\"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`.\"}],\"LSP7AmountExceedsBalance(uint256,address,uint256)\":[{\"details\":\"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\"}],\"LSP7BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP7CannotSendWithAddressZero()\":[{\"details\":\"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address.\"}],\"LSP7CannotUseAddressZeroAsOperator()\":[{\"details\":\"reverts when trying to set the zero address as an operator.\"}],\"LSP7DecreaseAllowanceNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to decrease allowance is not authorized.\"}],\"LSP7DecreasedAllowanceBelowZero()\":[{\"details\":\"Reverts when trying to decrease an operator's allowance to more than its current allowance.\"}],\"LSP7InvalidTransferBatch()\":[{\"details\":\"reverts when the array parameters used in {transferBatch} have different lengths.\"}],\"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7RevokeOperatorNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP7TokenOwnerCannotBeOperator()\":[{\"details\":\"reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"OperatorAllowanceCannotBeIncreasedFromZero(address)\":[{\"details\":\"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:danger\":\"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"revokeOperator(address,address,bool,bytes)\":{\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}}},\"title\":\"LSP7DigitalAsset contract\",\"version\":1},\"userdoc\":{\"errors\":{\"LSP7BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol\":\"LSP7DigitalAssetCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP7 = 0xc52d6008;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP7Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea;\\n\\n// keccak256('LSP7Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c;\\n\\n// keccak256('LSP7Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENOPERATOR = 0x386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc;\\n\",\"keccak256\":\"0x9c7d7749a5f8de103f791b42684fb5bc99e23c2f85aa408a87e96f592394ad2a\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {ILSP7DigitalAsset} from \\\"./ILSP7DigitalAsset.sol\\\";\\n\\n// modules\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP7AmountExceedsAuthorizedAmount,\\n    LSP7InvalidTransferBatch,\\n    LSP7AmountExceedsBalance,\\n    LSP7DecreasedAllowanceBelowZero,\\n    LSP7CannotUseAddressZeroAsOperator,\\n    LSP7TokenOwnerCannotBeOperator,\\n    LSP7CannotSendWithAddressZero,\\n    LSP7NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP7NotifyTokenReceiverIsEOA,\\n    OperatorAllowanceCannotBeIncreasedFromZero,\\n    LSP7BatchCallFailed,\\n    LSP7RevokeOperatorNotAuthorized,\\n    LSP7DecreaseAllowanceNotAuthorized\\n} from \\\"./LSP7Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP7_TOKENOPERATOR,\\n    _TYPEID_LSP7_TOKENSSENDER,\\n    _TYPEID_LSP7_TOKENSRECIPIENT\\n} from \\\"./LSP7Constants.sol\\\";\\n\\n/**\\n * @title LSP7DigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP7 compliant contract.\\n *\\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\\n */\\nabstract contract LSP7DigitalAssetCore is ILSP7DigitalAsset {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- Storage\\n\\n    bool internal _isNonDivisible;\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenOwner` to an `amount` of tokens\\n    mapping(address => uint256) internal _tokenOwnerBalances;\\n\\n    // Mapping an `address` to its authorized operator addresses.\\n    mapping(address => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\\n    mapping(address => mapping(address => uint256))\\n        internal _operatorAuthorizedAmount;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _isNonDivisible ? 0 : 18;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _tokenOwnerBalances[tokenOwner];\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP7BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:danger To avoid front-running and Allowance Double-Spend Exploit when\\n     * increasing or decreasing the authorized amount of an operator, it is advised to\\n     * use the {increaseAllowance} and {decreaseAllowance} functions.\\n     *\\n     * For more information, see:\\n     * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            amount,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            amount,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7RevokeOperatorNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        _updateOperator(\\n            tokenOwner,\\n            operator,\\n            0,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                0,\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        if (tokenOwner == operator) {\\n            return _tokenOwnerBalances[tokenOwner];\\n        } else {\\n            return _operatorAuthorizedAmount[tokenOwner][operator];\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (address[] memory) {\\n        return _operators[tokenOwner].values();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        uint256 oldAllowance = authorizedAmountFor(operator, msg.sender);\\n        if (oldAllowance == 0)\\n            revert OperatorAllowanceCannotBeIncreasedFromZero(operator);\\n\\n        uint256 newAllowance = oldAllowance + addedAmount;\\n\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            newAllowance,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7DecreaseAllowanceNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        uint256 currentAllowance = authorizedAmountFor(operator, tokenOwner);\\n        if (currentAllowance < subtractedAmount) {\\n            revert LSP7DecreasedAllowanceBelowZero();\\n        }\\n\\n        uint256 newAllowance;\\n        unchecked {\\n            newAllowance = currentAllowance - subtractedAmount;\\n            _updateOperator(\\n                tokenOwner,\\n                operator,\\n                newAllowance,\\n                true,\\n                operatorNotificationData\\n            );\\n        }\\n\\n        bytes memory lsp1Data = abi.encode(\\n            tokenOwner,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (msg.sender != from) {\\n            _spendAllowance({\\n                operator: msg.sender,\\n                tokenOwner: from,\\n                amountToSpend: amount\\n            });\\n        }\\n\\n        _transfer(from, to, amount, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != amount.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP7InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            // using the public transfer function to handle updates to operator authorized amounts\\n            transfer(from[i], to[i], amount[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens.\\n     * If the amount is zero the operator is removed from the list of operators, otherwise he is added to the list of operators.\\n     * If the amount is zero then the operator is being revoked, otherwise the operator amount is being modified.\\n     *\\n     * @param tokenOwner The address that will give `operator` an allowance for on its balance.\\n     * @param operator The address to grant an allowance to spend.\\n     * @param allowance The maximum amount of token that `operator` can spend from the `tokenOwner`'s balance.\\n     * @param notified Boolean indicating whether the operator has been notified about the change of allowance\\n     * @param operatorNotificationData The data to send to the universalReceiver function of the operator in case of notifying\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _updateOperator(\\n        address tokenOwner,\\n        address operator,\\n        uint256 allowance,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        if (operator == address(0)) {\\n            revert LSP7CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (operator == tokenOwner) {\\n            revert LSP7TokenOwnerCannotBeOperator();\\n        }\\n\\n        _operatorAuthorizedAmount[tokenOwner][operator] = allowance;\\n\\n        if (allowance != 0) {\\n            _operators[tokenOwner].add(operator);\\n            emit OperatorAuthorizationChanged(\\n                operator,\\n                tokenOwner,\\n                allowance,\\n                operatorNotificationData\\n            );\\n        } else {\\n            _operators[tokenOwner].remove(operator);\\n            emit OperatorRevoked(\\n                operator,\\n                tokenOwner,\\n                notified,\\n                operatorNotificationData\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `amount` of tokens and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address to mint tokens for.\\n     * @param amount The amount of tokens to mint.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted {Transfer} event, and sent in the LSP1 hook to the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as `from`.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, amount, data);\\n\\n        // tokens being minted\\n        _existingTokens += amount;\\n\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: address(0),\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(address(0), to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            amount,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burns (= destroys) `amount` of tokens, decrease the `from` balance. This is done by sending them to the zero address.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender via LSP1**.\\n     *\\n     * @param from The address to burn tokens from its balance.\\n     * @param amount The amount of tokens to burn.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:hint In dApps, you can know which address is burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, address(0), amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n        // tokens being burnt\\n        _existingTokens -= amount;\\n\\n        _tokenOwnerBalances[from] -= amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: address(0),\\n            amount: amount,\\n            force: false,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, address(0), amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            from,\\n            address(0),\\n            amount,\\n            data\\n        );\\n        _notifyTokenSender(from, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Spend `amountToSpend` from the `operator`'s authorized on behalf of the `tokenOwner`.\\n     *\\n     * @param operator The address of the operator to decrease the allowance of.\\n     * @param tokenOwner The address that granted an allowance on its balance to `operator`.\\n     * @param amountToSpend The amount of tokens to substract in allowance of `operator`.\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - The `amountToSpend` MUST be at least the allowance granted to `operator` (accessible via {`authorizedAmountFor}`)\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _spendAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 amountToSpend\\n    ) internal virtual {\\n        uint256 authorizedAmount = _operatorAuthorizedAmount[tokenOwner][\\n            operator\\n        ];\\n\\n        if (amountToSpend > authorizedAmount) {\\n            revert LSP7AmountExceedsAuthorizedAmount(\\n                tokenOwner,\\n                authorizedAmount,\\n                operator,\\n                amountToSpend\\n            );\\n        }\\n\\n        _updateOperator({\\n            tokenOwner: tokenOwner,\\n            operator: operator,\\n            allowance: authorizedAmount - amountToSpend,\\n            notified: false,\\n            operatorNotificationData: \\\"\\\"\\n        });\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from `from` to `to` by decreasing the balance of `from` by `-amount` and increasing the balance\\n     * of `to` by `+amount`.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The address to decrease the balance.\\n     * @param to The address to increase the balance.\\n     * @param amount The amount of tokens to transfer from `from` to `to`.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have at least `amount` of tokens.\\n     *\\n     * @custom:events {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0) || to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n\\n        _tokenOwnerBalances[from] -= amount;\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, amount, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `amount` tokens being authorized with.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP7_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `amount` of tokens being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP7_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `amount` tokens being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP7NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b31fd7419e25bc6696d2a11257d18a2ac7bf9741d142fff227729ce9a71d01e\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\\n */\\nerror LSP7AmountExceedsBalance(\\n    uint256 balance,\\n    address tokenOwner,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when `operator` of `tokenOwner` send an `amount` of tokens\\n * larger than the `authorizedAmount`.\\n */\\nerror LSP7AmountExceedsAuthorizedAmount(\\n    address tokenOwner,\\n    uint256 authorizedAmount,\\n    address operator,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when trying to set the zero address as an operator.\\n */\\nerror LSP7CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev reverts when trying to:\\n * - mint tokens to the zero address.\\n * - burn tokens from the zero address.\\n * - transfer tokens from or to the zero address.\\n */\\nerror LSP7CannotSendWithAddressZero();\\n\\n/**\\n * @dev reverts when the array parameters used in {transferBatch} have different lengths.\\n */\\nerror LSP7InvalidTransferBatch();\\n\\n/**\\n * @dev reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP7TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Reverts when trying to decrease an operator's allowance to more than its current allowance.\\n */\\nerror LSP7DecreasedAllowanceBelowZero();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP7 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP7 contract cannot receive native tokens.\\n */\\nerror LSP7TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\\n */\\nerror OperatorAllowanceCannotBeIncreasedFromZero(address operator);\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP7BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP7RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\\n/**\\n * @dev Reverts when the call to decrease allowance is not authorized.\\n */\\nerror LSP7DecreaseAllowanceNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\",\"keccak256\":\"0x5bd6d23f61d45a390041b788c5e341bd0e1972b4112c7700af1addcfa284e821\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2192,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_isNonDivisible","offset":0,"slot":"0","type":"t_bool"},{"astId":2194,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_existingTokens","offset":0,"slot":"1","type":"t_uint256"},{"astId":2198,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_tokenOwnerBalances","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":2203,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_operators","offset":0,"slot":"3","type":"t_mapping(t_address,t_struct(AddressSet)4044_storage)"},{"astId":2209,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_operatorAuthorizedAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(AddressSet)4044_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4044_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4044_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4043,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3729_storage"}],"numberOfBytes":"64"},"t_struct(Set)3729_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3724,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3728,"contract":"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol:LSP7DigitalAssetCore","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP7BatchCallFailed(uint256)":[{"notice":"Batch call failed."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3318,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ERC165Checker":{"abi":[],"devdoc":{"details":"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b21516727cce7562d08cee7865d5404fec3c3f7aa42f576da8eb2e75e39815bf64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 ISZERO AND PUSH19 0x7CCE7562D08CEE7865D5404FEC3C3F7AA42F57 PUSH14 0xA8EB2E75E39815BF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"465:4566:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;465:4566:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b21516727cce7562d08cee7865d5404fec3c3f7aa42f576da8eb2e75e39815bf64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 ISZERO AND PUSH19 0x7CCE7562D08CEE7865D5404FEC3C3F7AA42F57 PUSH14 0xA8EB2E75E39815BF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"465:4566:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getSupportedInterfaces(address,bytes4[] memory)":"infinite","supportsAllInterfaces(address,bytes4[] memory)":"infinite","supportsERC165(address)":"infinite","supportsERC165InterfaceUnchecked(address,bytes4)":"infinite","supportsInterface(address,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":\"ERC165Checker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1330:11640:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/EurocupLegends.sol":{"EurocupLegends":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"_creators","type":"tuple[]"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyClaimedPrize","type":"error"},{"inputs":[{"internalType":"address","name":"_creators","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"FeeTransferFailed","type":"error"},{"inputs":[],"name":"MintClosed","type":"error"},{"inputs":[],"name":"NoPrizeForThisTicket","type":"error"},{"inputs":[],"name":"NoTickets","type":"error"},{"inputs":[],"name":"NoWinnersYet","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isMintOpen","type":"bool"}],"name":"MintStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WINNERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHARE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_ticket","type":"address"}],"name":"claimPrize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCreators","outputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_ticket","type":"address"}],"name":"getPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_ticket","type":"address"}],"name":"getTicketPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWinners","outputs":[{"internalType":"address[3]","name":"","type":"address[3]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_ticket","type":"address"}],"name":"isClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isMintOpen","type":"bool"}],"name":"setMintStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[3]","name":"_winners","type":"address[3]"},{"internalType":"uint256[3]","name":"_shares","type":"uint256[3]"}],"name":"setWinners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3360":{"entryPoint":null,"id":3360,"parameterSlots":1,"returnSlots":0},"@_4407":{"entryPoint":null,"id":4407,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_3456":{"entryPoint":264,"id":3456,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":460,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptrt_address_fromMemory":{"entryPoint":489,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":409,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_575":{"entryPoint":366,"id":null,"parameterSlots":0,"returnSlots":1},"increment_t_uint256":{"entryPoint":756,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":734,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":344,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2787:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:33"},"nodeType":"YulFunctionCall","src":"66:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:31:33"},"nodeType":"YulExpressionStatement","src":"56:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:33"},"nodeType":"YulFunctionCall","src":"96:15:33"},"nodeType":"YulExpressionStatement","src":"96:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:33"},"nodeType":"YulFunctionCall","src":"120:15:33"},"nodeType":"YulExpressionStatement","src":"120:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:33"},{"body":{"nodeType":"YulBlock","src":"191:205:33","statements":[{"nodeType":"YulAssignment","src":"201:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:33"},"nodeType":"YulFunctionCall","src":"211:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"229:33:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"259:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:33"},"nodeType":"YulFunctionCall","src":"247:15:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"337:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"339:16:33"},"nodeType":"YulFunctionCall","src":"339:18:33"},"nodeType":"YulExpressionStatement","src":"339:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"280:10:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"304:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"296:3:33"},"nodeType":"YulFunctionCall","src":"296:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"308:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"292:3:33"},"nodeType":"YulFunctionCall","src":"292:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"277:2:33"},"nodeType":"YulFunctionCall","src":"277:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"316:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"328:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"313:2:33"},"nodeType":"YulFunctionCall","src":"313:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"274:2:33"},"nodeType":"YulFunctionCall","src":"274:62:33"},"nodeType":"YulIf","src":"271:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"375:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"379:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"368:6:33"},"nodeType":"YulFunctionCall","src":"368:22:33"},"nodeType":"YulExpressionStatement","src":"368:22:33"}]},"name":"allocate_memory_575","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:33","type":""}],"src":"146:250:33"},{"body":{"nodeType":"YulBlock","src":"446:230:33","statements":[{"nodeType":"YulAssignment","src":"456:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"472:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"466:5:33"},"nodeType":"YulFunctionCall","src":"466:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"456:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"484:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"506:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"522:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"518:3:33"},"nodeType":"YulFunctionCall","src":"518:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"533:3:33"},"nodeType":"YulFunctionCall","src":"533:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"514:3:33"},"nodeType":"YulFunctionCall","src":"514:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:33"},"nodeType":"YulFunctionCall","src":"502:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"488:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"617:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"619:16:33"},"nodeType":"YulFunctionCall","src":"619:18:33"},"nodeType":"YulExpressionStatement","src":"619:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"560:10:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"580:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"584:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"576:3:33"},"nodeType":"YulFunctionCall","src":"576:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"588:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"572:3:33"},"nodeType":"YulFunctionCall","src":"572:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"557:2:33"},"nodeType":"YulFunctionCall","src":"557:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"596:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"608:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"593:2:33"},"nodeType":"YulFunctionCall","src":"593:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"554:2:33"},"nodeType":"YulFunctionCall","src":"554:62:33"},"nodeType":"YulIf","src":"551:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"655:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"659:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:33"},"nodeType":"YulFunctionCall","src":"648:22:33"},"nodeType":"YulExpressionStatement","src":"648:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"426:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"435:6:33","type":""}],"src":"401:275:33"},{"body":{"nodeType":"YulBlock","src":"741:117:33","statements":[{"nodeType":"YulAssignment","src":"751:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"766:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"760:5:33"},"nodeType":"YulFunctionCall","src":"760:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"751:5:33"}]},{"body":{"nodeType":"YulBlock","src":"836:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"845:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"848:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"838:6:33"},"nodeType":"YulFunctionCall","src":"838:12:33"},"nodeType":"YulExpressionStatement","src":"838:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"795:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"806:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"821:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"826:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"817:3:33"},"nodeType":"YulFunctionCall","src":"817:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"830:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"813:3:33"},"nodeType":"YulFunctionCall","src":"813:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"802:3:33"},"nodeType":"YulFunctionCall","src":"802:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"792:2:33"},"nodeType":"YulFunctionCall","src":"792:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"785:6:33"},"nodeType":"YulFunctionCall","src":"785:50:33"},"nodeType":"YulIf","src":"782:70:33"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"720:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"731:5:33","type":""}],"src":"681:177:33"},{"body":{"nodeType":"YulBlock","src":"1011:1197:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1021:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1031:2:33","type":"","value":"64"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1025:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1078:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:33"},"nodeType":"YulFunctionCall","src":"1080:12:33"},"nodeType":"YulExpressionStatement","src":"1080:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1053:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1062:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1049:3:33"},"nodeType":"YulFunctionCall","src":"1049:23:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1074:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1045:3:33"},"nodeType":"YulFunctionCall","src":"1045:32:33"},"nodeType":"YulIf","src":"1042:52:33"},{"nodeType":"YulVariableDeclaration","src":"1103:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1123:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1117:5:33"},"nodeType":"YulFunctionCall","src":"1117:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1107:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1142:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1160:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1164:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1156:3:33"},"nodeType":"YulFunctionCall","src":"1156:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1168:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1152:3:33"},"nodeType":"YulFunctionCall","src":"1152:18:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1146:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1197:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1206:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1209:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1199:6:33"},"nodeType":"YulFunctionCall","src":"1199:12:33"},"nodeType":"YulExpressionStatement","src":"1199:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1185:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"1193:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1182:2:33"},"nodeType":"YulFunctionCall","src":"1182:14:33"},"nodeType":"YulIf","src":"1179:34:33"},{"nodeType":"YulVariableDeclaration","src":"1222:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1236:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"1247:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1232:3:33"},"nodeType":"YulFunctionCall","src":"1232:22:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1226:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1302:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1311:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1314:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1304:6:33"},"nodeType":"YulFunctionCall","src":"1304:12:33"},"nodeType":"YulExpressionStatement","src":"1304:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1281:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"1285:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1277:3:33"},"nodeType":"YulFunctionCall","src":"1277:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1292:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1273:3:33"},"nodeType":"YulFunctionCall","src":"1273:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1266:6:33"},"nodeType":"YulFunctionCall","src":"1266:35:33"},"nodeType":"YulIf","src":"1263:55:33"},{"nodeType":"YulVariableDeclaration","src":"1327:19:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1343:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1337:5:33"},"nodeType":"YulFunctionCall","src":"1337:9:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1331:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1355:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1365:4:33","type":"","value":"0x20"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1359:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1392:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1394:16:33"},"nodeType":"YulFunctionCall","src":"1394:18:33"},"nodeType":"YulExpressionStatement","src":"1394:18:33"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1384:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"1388:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1381:2:33"},"nodeType":"YulFunctionCall","src":"1381:10:33"},"nodeType":"YulIf","src":"1378:36:33"},{"nodeType":"YulVariableDeclaration","src":"1423:47:33","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:33","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1461:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1454:3:33"},"nodeType":"YulFunctionCall","src":"1454:10:33"},{"name":"_5","nodeType":"YulIdentifier","src":"1466:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1450:3:33"},"nodeType":"YulFunctionCall","src":"1450:19:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1434:15:33"},"nodeType":"YulFunctionCall","src":"1434:36:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1427:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1479:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"1492:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1483:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1511:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"1516:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1504:6:33"},"nodeType":"YulFunctionCall","src":"1504:15:33"},"nodeType":"YulExpressionStatement","src":"1504:15:33"},{"nodeType":"YulAssignment","src":"1528:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1539:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"1544:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1535:3:33"},"nodeType":"YulFunctionCall","src":"1535:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1528:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"1556:42:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1578:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1586:1:33","type":"","value":"6"},{"name":"_4","nodeType":"YulIdentifier","src":"1589:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1582:3:33"},"nodeType":"YulFunctionCall","src":"1582:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1574:3:33"},"nodeType":"YulFunctionCall","src":"1574:19:33"},{"name":"_5","nodeType":"YulIdentifier","src":"1595:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1570:3:33"},"nodeType":"YulFunctionCall","src":"1570:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1560:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1630:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1639:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1642:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1632:6:33"},"nodeType":"YulFunctionCall","src":"1632:12:33"},"nodeType":"YulExpressionStatement","src":"1632:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1613:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1621:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1610:2:33"},"nodeType":"YulFunctionCall","src":"1610:19:33"},"nodeType":"YulIf","src":"1607:39:33"},{"nodeType":"YulVariableDeclaration","src":"1655:22:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1670:2:33"},{"name":"_5","nodeType":"YulIdentifier","src":"1674:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1666:3:33"},"nodeType":"YulFunctionCall","src":"1666:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1659:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1742:368:33","statements":[{"body":{"nodeType":"YulBlock","src":"1798:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1816:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1826:1:33","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"1820:2:33","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"1851:2:33"},{"name":"_6","nodeType":"YulIdentifier","src":"1855:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1844:6:33"},"nodeType":"YulFunctionCall","src":"1844:14:33"},"nodeType":"YulExpressionStatement","src":"1844:14:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1767:7:33"},{"name":"src","nodeType":"YulIdentifier","src":"1776:3:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1763:3:33"},"nodeType":"YulFunctionCall","src":"1763:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1782:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1759:3:33"},"nodeType":"YulFunctionCall","src":"1759:26:33"},"nodeType":"YulIf","src":"1756:116:33"},{"nodeType":"YulVariableDeclaration","src":"1885:34:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_575","nodeType":"YulIdentifier","src":"1898:19:33"},"nodeType":"YulFunctionCall","src":"1898:21:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1889:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1939:5:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1976:3:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1946:29:33"},"nodeType":"YulFunctionCall","src":"1946:34:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1932:6:33"},"nodeType":"YulFunctionCall","src":"1932:49:33"},"nodeType":"YulExpressionStatement","src":"1932:49:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2005:5:33"},{"name":"_5","nodeType":"YulIdentifier","src":"2012:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2001:3:33"},"nodeType":"YulFunctionCall","src":"2001:14:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2027:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"2032:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2023:3:33"},"nodeType":"YulFunctionCall","src":"2023:12:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2017:5:33"},"nodeType":"YulFunctionCall","src":"2017:19:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1994:6:33"},"nodeType":"YulFunctionCall","src":"1994:43:33"},"nodeType":"YulExpressionStatement","src":"1994:43:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2057:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"2062:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2050:6:33"},"nodeType":"YulFunctionCall","src":"2050:18:33"},"nodeType":"YulExpressionStatement","src":"2050:18:33"},{"nodeType":"YulAssignment","src":"2081:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2092:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"2097:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2088:3:33"},"nodeType":"YulFunctionCall","src":"2088:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2081:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1697:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1702:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1694:2:33"},"nodeType":"YulFunctionCall","src":"1694:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:23:33","statements":[{"nodeType":"YulAssignment","src":"1712:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1723:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1728:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:33"},"nodeType":"YulFunctionCall","src":"1719:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1712:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"1690:3:33","statements":[]},"src":"1686:424:33"},{"nodeType":"YulAssignment","src":"2119:15:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2129:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2119:6:33"}]},{"nodeType":"YulAssignment","src":"2143:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2187:9:33"},{"name":"_5","nodeType":"YulIdentifier","src":"2198:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:33"},"nodeType":"YulFunctionCall","src":"2183:18:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2153:29:33"},"nodeType":"YulFunctionCall","src":"2153:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2143:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptrt_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"969:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"980:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"992:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1000:6:33","type":""}],"src":"863:1345:33"},{"body":{"nodeType":"YulBlock","src":"2314:102:33","statements":[{"nodeType":"YulAssignment","src":"2324:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2336:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:33"},"nodeType":"YulFunctionCall","src":"2332:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2324:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2366:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2381:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2397:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2402:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2393:3:33"},"nodeType":"YulFunctionCall","src":"2393:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2406:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2389:3:33"},"nodeType":"YulFunctionCall","src":"2389:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2377:3:33"},"nodeType":"YulFunctionCall","src":"2377:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2359:6:33"},"nodeType":"YulFunctionCall","src":"2359:51:33"},"nodeType":"YulExpressionStatement","src":"2359:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2283:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2294:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2305:4:33","type":""}],"src":"2213:203:33"},{"body":{"nodeType":"YulBlock","src":"2453:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2470:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2477:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2482:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2473:3:33"},"nodeType":"YulFunctionCall","src":"2473:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2463:6:33"},"nodeType":"YulFunctionCall","src":"2463:31:33"},"nodeType":"YulExpressionStatement","src":"2463:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2513:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2503:6:33"},"nodeType":"YulFunctionCall","src":"2503:15:33"},"nodeType":"YulExpressionStatement","src":"2503:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2534:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2537:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2527:6:33"},"nodeType":"YulFunctionCall","src":"2527:15:33"},"nodeType":"YulExpressionStatement","src":"2527:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2421:127:33"},{"body":{"nodeType":"YulBlock","src":"2600:185:33","statements":[{"body":{"nodeType":"YulBlock","src":"2639:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2660:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2667:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2672:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2663:3:33"},"nodeType":"YulFunctionCall","src":"2663:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2653:6:33"},"nodeType":"YulFunctionCall","src":"2653:31:33"},"nodeType":"YulExpressionStatement","src":"2653:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2704:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2707:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2697:6:33"},"nodeType":"YulFunctionCall","src":"2697:15:33"},"nodeType":"YulExpressionStatement","src":"2697:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2732:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2735:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2725:6:33"},"nodeType":"YulFunctionCall","src":"2725:15:33"},"nodeType":"YulExpressionStatement","src":"2725:15:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2616:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2627:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2623:3:33"},"nodeType":"YulFunctionCall","src":"2623:6:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2613:2:33"},"nodeType":"YulFunctionCall","src":"2613:17:33"},"nodeType":"YulIf","src":"2610:140:33"},{"nodeType":"YulAssignment","src":"2759:20:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2770:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2777:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2766:3:33"},"nodeType":"YulFunctionCall","src":"2766:13:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2759:3:33"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2582:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2592:3:33","type":""}],"src":"2553:232:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_575() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := 64\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        let _5 := 0x20\n        if gt(_4, _2) { panic_error_0x41() }\n        let dst := allocate_memory(add(shl(5, _4), _5))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _5)\n        let srcEnd := add(add(_3, shl(6, _4)), _5)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _5)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            if slt(sub(dataEnd, src), _1)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            let value := allocate_memory_575()\n            mstore(value, abi_decode_address_fromMemory(src))\n            mstore(add(value, _5), mload(add(src, _5)))\n            mstore(dst, value)\n            dst := add(dst, _5)\n        }\n        value0 := dst_1\n        value1 := abi_decode_address_fromMemory(add(headStart, _5))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526005805460ff191660011790553480156200001e57600080fd5b5060405162000fd338038062000fd38339810160408190526200004191620001e9565b806001600160a01b0381166200007157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007c8162000108565b5060005b8251811015620000ff576001838281518110620000a157620000a1620002de565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117815591015191015580620000f681620002f4565b91505062000080565b5050506200031c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000193576200019362000158565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620001c457620001c462000158565b604052919050565b80516001600160a01b0381168114620001e457600080fd5b919050565b6000806040808486031215620001fe57600080fd5b83516001600160401b03808211156200021657600080fd5b818601915086601f8301126200022b57600080fd5b815160208282111562000242576200024262000158565b62000252818360051b0162000199565b828152818101935060069290921b8401810191898311156200027357600080fd5b938101935b82851015620002c15785858b031215620002925760008081fd5b6200029c6200016e565b620002a786620001cc565b815285830151838201528452938501939281019262000278565b9650620002d0888201620001cc565b955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200031557634e487b7160e01b600052601160045260246000fd5b5060010190565b610ca7806200032c6000396000f3fe6080604052600436106100e05760003560e01c80638da5cb5b1161007f578063df15c37e11610059578063df15c37e14610277578063e5e9b66114610299578063e6adc1ee146102b9578063f2fde38b146102db576100f0565b80638da5cb5b146101c05780639966db94146101e8578063a4df07581461021e576100f0565b80635fc5e020116100bb5780635fc5e02014610156578063715018a61461016b57806376602f2f146101805780637eef2509146101a0576100f0565b80620b46f8146100f95780631f85e3ca1461012157806329a62a7614610141576100f0565b366100f0576100ee346102fb565b005b6100ee346102fb565b34801561010557600080fd5b5061010e601981565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b506100ee61013c366004610a2c565b610458565b34801561014d57600080fd5b5061010e600381565b34801561016257600080fd5b5061010e606481565b34801561017757600080fd5b506100ee6104a7565b34801561018c57600080fd5b506100ee61019b366004610a66565b6104bb565b3480156101ac57600080fd5b5061010e6101bb366004610ab7565b6105ba565b3480156101cc57600080fd5b506000546040516001600160a01b039091168152602001610118565b3480156101f457600080fd5b5061010e610203366004610ae1565b6001600160a01b031660009081526006602052604090205490565b34801561022a57600080fd5b50610267610239366004610ab7565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6040519015158152602001610118565b34801561028357600080fd5b5061028c6106e3565b6040516101189190610afc565b3480156102a557600080fd5b506100ee6102b4366004610ae1565b610728565b3480156102c557600080fd5b506102ce6108de565b6040516101189190610b36565b3480156102e757600080fd5b506100ee6102f6366004610ae1565b610953565b60055460ff1661031e5760405163589ed34b60e01b815260040160405180910390fd5b6000606461032d601984610ba4565b6103379190610bbb565b60015490915060005b818110156104525760006001828154811061035d5761035d610bdd565b600091825260208083206040805180820190915260029093020180546001600160a01b031683526001015490820181905290925060649061039e9087610ba4565b6103a89190610bbb565b9050600082600001516001600160a01b03168260405160006040518083038185875af1925050503d80600081146103fb576040519150601f19603f3d011682016040523d82523d6000602084013e610400565b606091505b505090508061043c57825160405163373a7d4360e11b81526001600160a01b039091166004820152602481018390526044015b60405180910390fd5b505050808061044a90610bf3565b915050610340565b50505050565b610460610991565b6005805460ff19168215159081179091556040519081527faff50328f57c9ced983a9e3c360c67ee11633d860350531f0c11fc435751448c9060200160405180910390a150565b6104af610991565b6104b960006109be565b565b6104c3610991565b60005b600381101561057e5760008382600381106104e3576104e3610bdd565b6020020160208101906104f69190610ae1565b90506000606484846003811061050e5761050e610bdd565b60200201354761051e9190610ba4565b6105289190610bbb565b9050816002846003811061053e5761053e610bdd565b0180546001600160a01b0319166001600160a01b03928316179055919091166000908152600660205260409020558061057681610bf3565b9150506104c6565b507f60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea826040516105ae9190610c0c565b60405180910390a15050565b6001600160a01b038181166000818152600660205260408082205490516370a0823160e01b815293861660048501529092909183916370a0823190602401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610c45565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190610c45565b9050816000036106c2576040516366f3ef9b60e01b815260040160405180910390fd5b806106cd8484610ba4565b6106d79190610bbb565b93505050505b92915050565b6106eb610a0e565b6040805160608101918290529060029060039082845b81546001600160a01b03168152600190910190602001808311610701575050505050905090565b6001600160a01b03811661074f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526006602052604081205490036107875760405163d937573f60e01b815260040160405180910390fd5b3360009081526007602090815260408083206001600160a01b038516845290915290205460ff16156107cc5760405163048798a960e41b815260040160405180910390fd5b60006107d833836105ba565b6001600160a01b0383166000908152600660205260409020549091506107ff908290610c5e565b6001600160a01b0383166000818152600660209081526040808320949094553380835260078252848320938352929052828120805460ff19166001179055915183908381818185875af1925050503d8060008114610879576040519150601f19603f3d011682016040523d82523d6000602084013e61087e565b606091505b50509050806108a0576040516312171d8360e31b815260040160405180910390fd5b60408051338152602081018490527f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770910160405180910390a1505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561094a576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610902565b50505050905090565b61095b610991565b6001600160a01b03811661098557604051631e4fbdf760e01b815260006004820152602401610433565b61098e816109be565b50565b6000546001600160a01b031633146104b95760405163118cdaa760e01b8152336004820152602401610433565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610a3e57600080fd5b81358015158114610a4e57600080fd5b9392505050565b80606081018310156106dd57600080fd5b60008060c08385031215610a7957600080fd5b610a838484610a55565b9150610a928460608501610a55565b90509250929050565b80356001600160a01b0381168114610ab257600080fd5b919050565b60008060408385031215610aca57600080fd5b610ad383610a9b565b9150610a9260208401610a9b565b600060208284031215610af357600080fd5b610a4e82610a9b565b60608101818360005b6003811015610b2d5781516001600160a01b0316835260209283019290910190600101610b05565b50505092915050565b602080825282518282018190526000919060409081850190868401855b82811015610b8157815180516001600160a01b03168552860151868501529284019290850190600101610b53565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106dd576106dd610b8e565b600082610bd857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610c0557610c05610b8e565b5060010190565b60608101818360005b6003811015610b2d576001600160a01b03610c2f83610a9b565b1683526020928301929190910190600101610c15565b600060208284031215610c5757600080fd5b5051919050565b818103818111156106dd576106dd610b8e56fea2646970667358221220811ebc6cf3b57995ea9095503f3f29ece166794a73a377bfc3291874d4f55ecf64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFD3 CODESIZE SUB DUP1 PUSH3 0xFD3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x41 SWAP2 PUSH3 0x1E9 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x7C DUP2 PUSH3 0x108 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0xFF JUMPI PUSH1 0x1 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xA1 JUMPI PUSH3 0xA1 PUSH3 0x2DE JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE SWAP4 DUP4 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x2 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP2 ADD MLOAD SWAP2 ADD SSTORE DUP1 PUSH3 0xF6 DUP2 PUSH3 0x2F4 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x80 JUMP JUMPDEST POP POP POP PUSH3 0x31C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x193 JUMPI PUSH3 0x193 PUSH3 0x158 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1C4 JUMPI PUSH3 0x1C4 PUSH3 0x158 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP1 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x242 JUMPI PUSH3 0x242 PUSH3 0x158 JUMP JUMPDEST PUSH3 0x252 DUP2 DUP4 PUSH1 0x5 SHL ADD PUSH3 0x199 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP4 POP PUSH1 0x6 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH3 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x2C1 JUMPI DUP6 DUP6 DUP12 SUB SLT ISZERO PUSH3 0x292 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH3 0x29C PUSH3 0x16E JUMP JUMPDEST PUSH3 0x2A7 DUP7 PUSH3 0x1CC JUMP JUMPDEST DUP2 MSTORE DUP6 DUP4 ADD MLOAD DUP4 DUP3 ADD MSTORE DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH3 0x278 JUMP JUMPDEST SWAP7 POP PUSH3 0x2D0 DUP9 DUP3 ADD PUSH3 0x1CC JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x315 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xCA7 DUP1 PUSH3 0x32C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xE5E9B661 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x9966DB94 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0xA4DF0758 EQ PUSH2 0x21E JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH4 0x5FC5E020 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x1A0 JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x1F85E3CA EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x141 JUMPI PUSH2 0xF0 JUMP JUMPDEST CALLDATASIZE PUSH2 0xF0 JUMPI PUSH2 0xEE CALLVALUE PUSH2 0x2FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEE CALLVALUE PUSH2 0x2FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x4A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xA66 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x267 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x6E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x728 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xB36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x953 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x31E JUMPI PUSH1 0x40 MLOAD PUSH4 0x589ED34B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x32D PUSH1 0x19 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x337 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x35D JUMPI PUSH2 0x35D PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x39E SWAP1 DUP8 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x400 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x43C JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x44A SWAP1 PUSH2 0xBF3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x340 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x460 PUSH2 0x991 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xAFF50328F57C9CED983A9E3C360C67EE11633D860350531F0C11FC435751448C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4AF PUSH2 0x991 JUMP JUMPDEST PUSH2 0x4B9 PUSH1 0x0 PUSH2 0x9BE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4C3 PUSH2 0x991 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x4E3 JUMPI PUSH2 0x4E3 PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4F6 SWAP2 SWAP1 PUSH2 0xAE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x50E JUMPI PUSH2 0x50E PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD SELFBALANCE PUSH2 0x51E SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x528 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x2 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x53E JUMPI PUSH2 0x53E PUSH2 0xBDD JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x576 DUP2 PUSH2 0xBF3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4C6 JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP3 PUSH1 0x40 MLOAD PUSH2 0x5AE SWAP2 SWAP1 PUSH2 0xC0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP7 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP1 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x615 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69F SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F3EF9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x6CD DUP5 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x6D7 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6EB PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x3 SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x701 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD937573F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7D8 CALLER DUP4 PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x7FF SWAP1 DUP3 SWAP1 PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE CALLER DUP1 DUP4 MSTORE PUSH1 0x7 DUP3 MSTORE DUP5 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP3 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 MLOAD DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x87E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x94A JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x902 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x95B PUSH2 0x991 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x433 JUMP JUMPDEST PUSH2 0x98E DUP2 PUSH2 0x9BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x433 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA83 DUP5 DUP5 PUSH2 0xA55 JUMP JUMPDEST SWAP2 POP PUSH2 0xA92 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xA55 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD3 DUP4 PUSH2 0xA9B JUMP JUMPDEST SWAP2 POP PUSH2 0xA92 PUSH1 0x20 DUP5 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA4E DUP3 PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xB2D JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB05 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB81 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB53 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6DD JUMPI PUSH2 0x6DD PUSH2 0xB8E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0xB8E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xB2D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC2F DUP4 PUSH2 0xA9B JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6DD JUMPI PUSH2 0x6DD PUSH2 0xB8E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0x1E 0xBC PUSH13 0xF3B57995EA9095503F3F29ECE1 PUSH7 0x794A73A377BFC3 0x29 XOR PUSH21 0xD4F55ECF64736F6C63430008140033000000000000 ","sourceMap":"273:3544:28:-:0;;;546:32;;;-1:-1:-1;;546:32:28;574:4;546:32;;;741:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;805:6;-1:-1:-1;;;;;1273:26:22;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:22;;1350:1;1322:31;;;2359:51:33;2332:18;;1322:31:22;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;827:9:28::1;823:96;842:9;:16;838:1;:20;823:96;;;879:10;895:9;905:1;895:12;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;879:29;;::::1;::::0;;::::1;::::0;;-1:-1:-1;879:29:28;;;;;;;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;;;;;;879:29:28::1;-1:-1:-1::0;;;;;879:29:28;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;860:3;::::1;::::0;::::1;:::i;:::-;;;;823:96;;;;741:184:::0;;273:3544;;2912:187:22;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:22;;;-1:-1:-1;;;;;;3020:17:22;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:127:33:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;217:2;211:9;;;247:15;;-1:-1:-1;;;;;277:34:33;;313:22;;;274:62;271:88;;;339:18;;:::i;:::-;375:2;368:22;146:250;:::o;401:275::-;472:2;466:9;537:2;518:13;;-1:-1:-1;;514:27:33;502:40;;-1:-1:-1;;;;;557:34:33;;593:22;;;554:62;551:88;;;619:18;;:::i;:::-;655:2;648:22;401:275;;-1:-1:-1;401:275:33:o;681:177::-;760:13;;-1:-1:-1;;;;;802:31:33;;792:42;;782:70;;848:1;845;838:12;782:70;681:177;;;:::o;863:1345::-;992:6;1000;1031:2;1074;1062:9;1053:7;1049:23;1045:32;1042:52;;;1090:1;1087;1080:12;1042:52;1117:16;;-1:-1:-1;;;;;1182:14:33;;;1179:34;;;1209:1;1206;1199:12;1179:34;1247:6;1236:9;1232:22;1222:32;;1292:7;1285:4;1281:2;1277:13;1273:27;1263:55;;1314:1;1311;1304:12;1263:55;1343:2;1337:9;1365:4;1388:2;1384;1381:10;1378:36;;;1394:18;;:::i;:::-;1434:36;1466:2;1461;1458:1;1454:10;1450:19;1434:36;:::i;:::-;1504:15;;;1535:12;;;;-1:-1:-1;1586:1:33;1582:10;;;;1574:19;;1570:28;;;1610:19;;;1607:39;;;1642:1;1639;1632:12;1607:39;1666:11;;;;1686:424;1702:6;1697:3;1694:15;1686:424;;;1782:2;1776:3;1767:7;1763:17;1759:26;1756:116;;;1826:1;1855:2;1851;1844:14;1756:116;1898:21;;:::i;:::-;1946:34;1976:3;1946:34;:::i;:::-;1932:49;;2023:12;;;2017:19;2001:14;;;1994:43;2050:18;;1719:12;;;;2088;;;;1686:424;;;2129:5;-1:-1:-1;2153:49:33;2183:18;;;2153:49;:::i;:::-;2143:59;;;;;;;863:1345;;;;;:::o;2421:127::-;2482:10;2477:3;2473:20;2470:1;2463:31;2513:4;2510:1;2503:15;2537:4;2534:1;2527:15;2553:232;2592:3;2613:17;;;2610:140;;2672:10;2667:3;2663:20;2660:1;2653:31;2707:4;2704:1;2697:15;2735:4;2732:1;2725:15;2610:140;-1:-1:-1;2777:1:33;2766:13;;2553:232::o;:::-;273:3544:28;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_PERCENTAGE_4347":{"entryPoint":null,"id":4347,"parameterSlots":0,"returnSlots":0},"@MAX_WINNERS_4353":{"entryPoint":null,"id":4353,"parameterSlots":0,"returnSlots":0},"@SHARE_PRECISION_4350":{"entryPoint":null,"id":4350,"parameterSlots":0,"returnSlots":0},"@_4760":{"entryPoint":null,"id":4760,"parameterSlots":0,"returnSlots":0},"@_4769":{"entryPoint":null,"id":4769,"parameterSlots":0,"returnSlots":0},"@_checkOwner_3394":{"entryPoint":2449,"id":3394,"parameterSlots":0,"returnSlots":0},"@_handleDeposit_4751":{"entryPoint":763,"id":4751,"parameterSlots":1,"returnSlots":0},"@_msgSender_3469":{"entryPoint":null,"id":3469,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_3456":{"entryPoint":2494,"id":3456,"parameterSlots":1,"returnSlots":0},"@claimPrize_4587":{"entryPoint":1832,"id":4587,"parameterSlots":1,"returnSlots":0},"@getCreators_4613":{"entryPoint":2270,"id":4613,"parameterSlots":0,"returnSlots":1},"@getPrize_4670":{"entryPoint":1466,"id":4670,"parameterSlots":2,"returnSlots":1},"@getTicketPrize_4682":{"entryPoint":null,"id":4682,"parameterSlots":1,"returnSlots":1},"@getWinners_4623":{"entryPoint":1763,"id":4623,"parameterSlots":0,"returnSlots":1},"@isClaimed_4603":{"entryPoint":null,"id":4603,"parameterSlots":2,"returnSlots":1},"@owner_3377":{"entryPoint":null,"id":3377,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_3408":{"entryPoint":1191,"id":3408,"parameterSlots":0,"returnSlots":0},"@setMintStatus_4433":{"entryPoint":1112,"id":4433,"parameterSlots":1,"returnSlots":0},"@setWinners_4495":{"entryPoint":1211,"id":4495,"parameterSlots":2,"returnSlots":0},"@transferOwnership_3436":{"entryPoint":2387,"id":3436,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2715,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_calldata":{"entryPoint":2645,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2785,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2743,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr":{"entryPoint":2662,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":2604,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3141,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":3084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":2812,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2870,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3003,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2980,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3166,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3059,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2958,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3037,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5527:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:33","statements":[{"nodeType":"YulAssignment","src":"125:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:33"},"nodeType":"YulFunctionCall","src":"133:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:33"},"nodeType":"YulFunctionCall","src":"160:25:33"},"nodeType":"YulExpressionStatement","src":"160:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:33","type":""}],"src":"14:177:33"},{"body":{"nodeType":"YulBlock","src":"263:206:33","statements":[{"body":{"nodeType":"YulBlock","src":"309:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"318:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"321:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"311:6:33"},"nodeType":"YulFunctionCall","src":"311:12:33"},"nodeType":"YulExpressionStatement","src":"311:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"284:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"293:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"280:3:33"},"nodeType":"YulFunctionCall","src":"280:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"305:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"276:3:33"},"nodeType":"YulFunctionCall","src":"276:32:33"},"nodeType":"YulIf","src":"273:52:33"},{"nodeType":"YulVariableDeclaration","src":"334:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"360:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"347:12:33"},"nodeType":"YulFunctionCall","src":"347:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"338:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"423:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"432:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"435:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"425:6:33"},"nodeType":"YulFunctionCall","src":"425:12:33"},"nodeType":"YulExpressionStatement","src":"425:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"392:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"413:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"406:6:33"},"nodeType":"YulFunctionCall","src":"406:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"399:6:33"},"nodeType":"YulFunctionCall","src":"399:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"389:2:33"},"nodeType":"YulFunctionCall","src":"389:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"382:6:33"},"nodeType":"YulFunctionCall","src":"382:40:33"},"nodeType":"YulIf","src":"379:60:33"},{"nodeType":"YulAssignment","src":"448:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"458:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"448:6:33"}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"229:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"240:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"252:6:33","type":""}],"src":"196:273:33"},{"body":{"nodeType":"YulBlock","src":"546:87:33","statements":[{"nodeType":"YulAssignment","src":"556:18:33","value":{"name":"offset","nodeType":"YulIdentifier","src":"568:6:33"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"556:8:33"}]},{"body":{"nodeType":"YulBlock","src":"611:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"620:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"623:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"613:6:33"},"nodeType":"YulFunctionCall","src":"613:12:33"},"nodeType":"YulExpressionStatement","src":"613:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"593:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"601:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:33"},"nodeType":"YulFunctionCall","src":"589:15:33"},{"name":"end","nodeType":"YulIdentifier","src":"606:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"586:2:33"},"nodeType":"YulFunctionCall","src":"586:24:33"},"nodeType":"YulIf","src":"583:44:33"}]},"name":"abi_decode_array_address_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"517:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"525:3:33","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"533:8:33","type":""}],"src":"474:159:33"},{"body":{"nodeType":"YulBlock","src":"775:222:33","statements":[{"body":{"nodeType":"YulBlock","src":"822:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"831:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"824:6:33"},"nodeType":"YulFunctionCall","src":"824:12:33"},"nodeType":"YulExpressionStatement","src":"824:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"796:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"792:3:33"},"nodeType":"YulFunctionCall","src":"792:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"817:3:33","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"788:3:33"},"nodeType":"YulFunctionCall","src":"788:33:33"},"nodeType":"YulIf","src":"785:53:33"},{"nodeType":"YulAssignment","src":"847:63:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"891:9:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"902:7:33"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"857:33:33"},"nodeType":"YulFunctionCall","src":"857:53:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"847:6:33"}]},{"nodeType":"YulAssignment","src":"919:72:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"967:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"978:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:33"},"nodeType":"YulFunctionCall","src":"963:18:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"983:7:33"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"929:33:33"},"nodeType":"YulFunctionCall","src":"929:62:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"919:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"733:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"744:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"756:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"764:6:33","type":""}],"src":"638:359:33"},{"body":{"nodeType":"YulBlock","src":"1051:124:33","statements":[{"nodeType":"YulAssignment","src":"1061:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1083:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1070:12:33"},"nodeType":"YulFunctionCall","src":"1070:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1061:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1153:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1162:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1165:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1155:6:33"},"nodeType":"YulFunctionCall","src":"1155:12:33"},"nodeType":"YulExpressionStatement","src":"1155:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1112:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1123:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1138:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1143:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1134:3:33"},"nodeType":"YulFunctionCall","src":"1134:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1147:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1130:3:33"},"nodeType":"YulFunctionCall","src":"1130:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1119:3:33"},"nodeType":"YulFunctionCall","src":"1119:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1109:2:33"},"nodeType":"YulFunctionCall","src":"1109:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1102:6:33"},"nodeType":"YulFunctionCall","src":"1102:50:33"},"nodeType":"YulIf","src":"1099:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1030:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1041:5:33","type":""}],"src":"1002:173:33"},{"body":{"nodeType":"YulBlock","src":"1267:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"1313:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1322:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1325:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1315:6:33"},"nodeType":"YulFunctionCall","src":"1315:12:33"},"nodeType":"YulExpressionStatement","src":"1315:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1288:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1297:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1284:3:33"},"nodeType":"YulFunctionCall","src":"1284:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1309:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1280:3:33"},"nodeType":"YulFunctionCall","src":"1280:32:33"},"nodeType":"YulIf","src":"1277:52:33"},{"nodeType":"YulAssignment","src":"1338:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1367:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1348:18:33"},"nodeType":"YulFunctionCall","src":"1348:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1338:6:33"}]},{"nodeType":"YulAssignment","src":"1386:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1419:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1430:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1415:3:33"},"nodeType":"YulFunctionCall","src":"1415:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1396:18:33"},"nodeType":"YulFunctionCall","src":"1396:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1386:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1225:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1236:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1248:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1256:6:33","type":""}],"src":"1180:260:33"},{"body":{"nodeType":"YulBlock","src":"1546:102:33","statements":[{"nodeType":"YulAssignment","src":"1556:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1568:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1579:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1564:3:33"},"nodeType":"YulFunctionCall","src":"1564:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1556:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1598:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1613:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1629:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1634:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1625:3:33"},"nodeType":"YulFunctionCall","src":"1625:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1638:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1621:3:33"},"nodeType":"YulFunctionCall","src":"1621:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1609:3:33"},"nodeType":"YulFunctionCall","src":"1609:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1591:6:33"},"nodeType":"YulFunctionCall","src":"1591:51:33"},"nodeType":"YulExpressionStatement","src":"1591:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1515:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1526:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1537:4:33","type":""}],"src":"1445:203:33"},{"body":{"nodeType":"YulBlock","src":"1723:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"1769:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1778:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1781:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1771:6:33"},"nodeType":"YulFunctionCall","src":"1771:12:33"},"nodeType":"YulExpressionStatement","src":"1771:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1744:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1753:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1740:3:33"},"nodeType":"YulFunctionCall","src":"1740:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1765:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1736:3:33"},"nodeType":"YulFunctionCall","src":"1736:32:33"},"nodeType":"YulIf","src":"1733:52:33"},{"nodeType":"YulAssignment","src":"1794:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1823:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1804:18:33"},"nodeType":"YulFunctionCall","src":"1804:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1794:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1689:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1700:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1712:6:33","type":""}],"src":"1653:186:33"},{"body":{"nodeType":"YulBlock","src":"1939:92:33","statements":[{"nodeType":"YulAssignment","src":"1949:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1961:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1972:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1957:3:33"},"nodeType":"YulFunctionCall","src":"1957:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1949:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1991:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2016:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2009:6:33"},"nodeType":"YulFunctionCall","src":"2009:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2002:6:33"},"nodeType":"YulFunctionCall","src":"2002:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1984:6:33"},"nodeType":"YulFunctionCall","src":"1984:41:33"},"nodeType":"YulExpressionStatement","src":"1984:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1908:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1919:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1930:4:33","type":""}],"src":"1844:187:33"},{"body":{"nodeType":"YulBlock","src":"2183:373:33","statements":[{"nodeType":"YulAssignment","src":"2193:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2205:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2216:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2201:3:33"},"nodeType":"YulFunctionCall","src":"2201:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2193:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"2228:20:33","value":{"name":"headStart","nodeType":"YulIdentifier","src":"2239:9:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2232:3:33","type":""}]},{"nodeType":"YulAssignment","src":"2257:16:33","value":{"name":"headStart","nodeType":"YulIdentifier","src":"2264:9:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2257:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"2282:20:33","value":{"name":"value0","nodeType":"YulIdentifier","src":"2296:6:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2286:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2311:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2320:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2315:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2377:173:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2398:3:33"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2413:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2407:5:33"},"nodeType":"YulFunctionCall","src":"2407:13:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2430:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2435:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2426:3:33"},"nodeType":"YulFunctionCall","src":"2426:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2439:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2422:3:33"},"nodeType":"YulFunctionCall","src":"2422:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2403:3:33"},"nodeType":"YulFunctionCall","src":"2403:39:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2391:6:33"},"nodeType":"YulFunctionCall","src":"2391:52:33"},"nodeType":"YulExpressionStatement","src":"2391:52:33"},{"nodeType":"YulVariableDeclaration","src":"2456:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2466:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2460:2:33","type":""}]},{"nodeType":"YulAssignment","src":"2483:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2499:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:33"},"nodeType":"YulFunctionCall","src":"2490:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2483:3:33"}]},{"nodeType":"YulAssignment","src":"2515:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2529:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2537:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2525:3:33"},"nodeType":"YulFunctionCall","src":"2525:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2515:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2341:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"2344:4:33","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2338:2:33"},"nodeType":"YulFunctionCall","src":"2338:11:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2350:18:33","statements":[{"nodeType":"YulAssignment","src":"2352:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2361:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2357:3:33"},"nodeType":"YulFunctionCall","src":"2357:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2352:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2334:3:33","statements":[]},"src":"2330:220:33"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2152:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2163:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2174:4:33","type":""}],"src":"2036:520:33"},{"body":{"nodeType":"YulBlock","src":"2762:613:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2772:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2782:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2776:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2793:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2811:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2822:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2807:3:33"},"nodeType":"YulFunctionCall","src":"2807:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2797:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2841:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2852:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2834:6:33"},"nodeType":"YulFunctionCall","src":"2834:21:33"},"nodeType":"YulExpressionStatement","src":"2834:21:33"},{"nodeType":"YulVariableDeclaration","src":"2864:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2875:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2868:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2890:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2910:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2904:5:33"},"nodeType":"YulFunctionCall","src":"2904:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2894:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2933:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"2941:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2926:6:33"},"nodeType":"YulFunctionCall","src":"2926:22:33"},"nodeType":"YulExpressionStatement","src":"2926:22:33"},{"nodeType":"YulVariableDeclaration","src":"2957:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2967:2:33","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2961:2:33","type":""}]},{"nodeType":"YulAssignment","src":"2978:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2989:9:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3000:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2985:3:33"},"nodeType":"YulFunctionCall","src":"2985:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2978:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3012:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3030:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3038:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3026:3:33"},"nodeType":"YulFunctionCall","src":"3026:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3016:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3050:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3059:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3054:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3118:231:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3132:23:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3148:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3142:5:33"},"nodeType":"YulFunctionCall","src":"3142:13:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3136:2:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3175:3:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3190:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3184:5:33"},"nodeType":"YulFunctionCall","src":"3184:9:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3203:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3208:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3199:3:33"},"nodeType":"YulFunctionCall","src":"3199:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"3212:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3195:3:33"},"nodeType":"YulFunctionCall","src":"3195:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3180:3:33"},"nodeType":"YulFunctionCall","src":"3180:35:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3168:6:33"},"nodeType":"YulFunctionCall","src":"3168:48:33"},"nodeType":"YulExpressionStatement","src":"3168:48:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3240:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3245:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3236:3:33"},"nodeType":"YulFunctionCall","src":"3236:12:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3260:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3264:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3256:3:33"},"nodeType":"YulFunctionCall","src":"3256:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3250:5:33"},"nodeType":"YulFunctionCall","src":"3250:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3229:6:33"},"nodeType":"YulFunctionCall","src":"3229:40:33"},"nodeType":"YulExpressionStatement","src":"3229:40:33"},{"nodeType":"YulAssignment","src":"3282:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3293:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3298:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3289:3:33"},"nodeType":"YulFunctionCall","src":"3289:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3282:3:33"}]},{"nodeType":"YulAssignment","src":"3314:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3328:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3336:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3324:3:33"},"nodeType":"YulFunctionCall","src":"3324:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3314:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3080:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"3083:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3077:2:33"},"nodeType":"YulFunctionCall","src":"3077:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3091:18:33","statements":[{"nodeType":"YulAssignment","src":"3093:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3102:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"3105:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3098:3:33"},"nodeType":"YulFunctionCall","src":"3098:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3093:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3073:3:33","statements":[]},"src":"3069:280:33"},{"nodeType":"YulAssignment","src":"3358:11:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"3366:3:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3358:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2731:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2742:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2753:4:33","type":""}],"src":"2561:814:33"},{"body":{"nodeType":"YulBlock","src":"3412:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3429:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3436:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3441:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3432:3:33"},"nodeType":"YulFunctionCall","src":"3432:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3422:6:33"},"nodeType":"YulFunctionCall","src":"3422:31:33"},"nodeType":"YulExpressionStatement","src":"3422:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3472:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3462:6:33"},"nodeType":"YulFunctionCall","src":"3462:15:33"},"nodeType":"YulExpressionStatement","src":"3462:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3493:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3496:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3486:6:33"},"nodeType":"YulFunctionCall","src":"3486:15:33"},"nodeType":"YulExpressionStatement","src":"3486:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3380:127:33"},{"body":{"nodeType":"YulBlock","src":"3564:116:33","statements":[{"nodeType":"YulAssignment","src":"3574:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3589:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3592:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3585:3:33"},"nodeType":"YulFunctionCall","src":"3585:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3574:7:33"}]},{"body":{"nodeType":"YulBlock","src":"3652:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3654:16:33"},"nodeType":"YulFunctionCall","src":"3654:18:33"},"nodeType":"YulExpressionStatement","src":"3654:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3623:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3616:6:33"},"nodeType":"YulFunctionCall","src":"3616:9:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3630:1:33"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3637:7:33"},{"name":"x","nodeType":"YulIdentifier","src":"3646:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3633:3:33"},"nodeType":"YulFunctionCall","src":"3633:15:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3627:2:33"},"nodeType":"YulFunctionCall","src":"3627:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3613:2:33"},"nodeType":"YulFunctionCall","src":"3613:37:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3606:6:33"},"nodeType":"YulFunctionCall","src":"3606:45:33"},"nodeType":"YulIf","src":"3603:71:33"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3543:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"3546:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3552:7:33","type":""}],"src":"3512:168:33"},{"body":{"nodeType":"YulBlock","src":"3731:171:33","statements":[{"body":{"nodeType":"YulBlock","src":"3762:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3790:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3795:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3786:3:33"},"nodeType":"YulFunctionCall","src":"3786:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:33"},"nodeType":"YulFunctionCall","src":"3776:31:33"},"nodeType":"YulExpressionStatement","src":"3776:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3827:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3830:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3820:6:33"},"nodeType":"YulFunctionCall","src":"3820:15:33"},"nodeType":"YulExpressionStatement","src":"3820:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3855:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3858:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3848:6:33"},"nodeType":"YulFunctionCall","src":"3848:15:33"},"nodeType":"YulExpressionStatement","src":"3848:15:33"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3751:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3744:6:33"},"nodeType":"YulFunctionCall","src":"3744:9:33"},"nodeType":"YulIf","src":"3741:132:33"},{"nodeType":"YulAssignment","src":"3882:14:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3891:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3894:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3887:3:33"},"nodeType":"YulFunctionCall","src":"3887:9:33"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3882:1:33"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3716:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"3719:1:33","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"3725:1:33","type":""}],"src":"3685:217:33"},{"body":{"nodeType":"YulBlock","src":"3939:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3956:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3963:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3968:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3959:3:33"},"nodeType":"YulFunctionCall","src":"3959:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3949:6:33"},"nodeType":"YulFunctionCall","src":"3949:31:33"},"nodeType":"YulExpressionStatement","src":"3949:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3996:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3999:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:33"},"nodeType":"YulFunctionCall","src":"3989:15:33"},"nodeType":"YulExpressionStatement","src":"3989:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4020:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4023:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4013:6:33"},"nodeType":"YulFunctionCall","src":"4013:15:33"},"nodeType":"YulExpressionStatement","src":"4013:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3907:127:33"},{"body":{"nodeType":"YulBlock","src":"4230:14:33","statements":[{"nodeType":"YulAssignment","src":"4232:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"4239:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4232:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4214:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4222:3:33","type":""}],"src":"4039:205:33"},{"body":{"nodeType":"YulBlock","src":"4378:145:33","statements":[{"nodeType":"YulAssignment","src":"4388:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4400:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4411:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4396:3:33"},"nodeType":"YulFunctionCall","src":"4396:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4388:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4430:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4445:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4461:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4466:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4457:3:33"},"nodeType":"YulFunctionCall","src":"4457:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"4470:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4453:3:33"},"nodeType":"YulFunctionCall","src":"4453:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4441:3:33"},"nodeType":"YulFunctionCall","src":"4441:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4423:6:33"},"nodeType":"YulFunctionCall","src":"4423:51:33"},"nodeType":"YulExpressionStatement","src":"4423:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4494:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4505:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4490:3:33"},"nodeType":"YulFunctionCall","src":"4490:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"4510:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4483:6:33"},"nodeType":"YulFunctionCall","src":"4483:34:33"},"nodeType":"YulExpressionStatement","src":"4483:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4339:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4350:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4358:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4369:4:33","type":""}],"src":"4249:274:33"},{"body":{"nodeType":"YulBlock","src":"4575:88:33","statements":[{"body":{"nodeType":"YulBlock","src":"4606:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4608:16:33"},"nodeType":"YulFunctionCall","src":"4608:18:33"},"nodeType":"YulExpressionStatement","src":"4608:18:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4591:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4602:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4598:3:33"},"nodeType":"YulFunctionCall","src":"4598:6:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4588:2:33"},"nodeType":"YulFunctionCall","src":"4588:17:33"},"nodeType":"YulIf","src":"4585:43:33"},{"nodeType":"YulAssignment","src":"4637:20:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4648:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"4655:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4644:3:33"},"nodeType":"YulFunctionCall","src":"4644:13:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4637:3:33"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4557:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4567:3:33","type":""}],"src":"4528:135:33"},{"body":{"nodeType":"YulBlock","src":"4817:386:33","statements":[{"nodeType":"YulAssignment","src":"4827:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4850:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:33"},"nodeType":"YulFunctionCall","src":"4835:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4827:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"4862:20:33","value":{"name":"headStart","nodeType":"YulIdentifier","src":"4873:9:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4866:3:33","type":""}]},{"nodeType":"YulAssignment","src":"4891:16:33","value":{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4891:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"4916:20:33","value":{"name":"value0","nodeType":"YulIdentifier","src":"4930:6:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4920:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4945:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4954:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4949:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5011:186:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5032:3:33"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5060:6:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5041:18:33"},"nodeType":"YulFunctionCall","src":"5041:26:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5077:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5082:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5073:3:33"},"nodeType":"YulFunctionCall","src":"5073:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"5086:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5069:3:33"},"nodeType":"YulFunctionCall","src":"5069:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5037:3:33"},"nodeType":"YulFunctionCall","src":"5037:52:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5025:6:33"},"nodeType":"YulFunctionCall","src":"5025:65:33"},"nodeType":"YulExpressionStatement","src":"5025:65:33"},{"nodeType":"YulVariableDeclaration","src":"5103:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5113:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5107:2:33","type":""}]},{"nodeType":"YulAssignment","src":"5130:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5141:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5146:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5137:3:33"},"nodeType":"YulFunctionCall","src":"5137:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5130:3:33"}]},{"nodeType":"YulAssignment","src":"5162:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5176:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5184:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:33"},"nodeType":"YulFunctionCall","src":"5172:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5162:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4975:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"4978:4:33","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4972:2:33"},"nodeType":"YulFunctionCall","src":"4972:11:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4984:18:33","statements":[{"nodeType":"YulAssignment","src":"4986:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4995:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"4998:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4991:3:33"},"nodeType":"YulFunctionCall","src":"4991:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4986:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4968:3:33","statements":[]},"src":"4964:233:33"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4786:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4797:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4808:4:33","type":""}],"src":"4668:535:33"},{"body":{"nodeType":"YulBlock","src":"5289:103:33","statements":[{"body":{"nodeType":"YulBlock","src":"5335:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5344:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5347:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5337:6:33"},"nodeType":"YulFunctionCall","src":"5337:12:33"},"nodeType":"YulExpressionStatement","src":"5337:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5310:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5319:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5306:3:33"},"nodeType":"YulFunctionCall","src":"5306:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5331:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5302:3:33"},"nodeType":"YulFunctionCall","src":"5302:32:33"},"nodeType":"YulIf","src":"5299:52:33"},{"nodeType":"YulAssignment","src":"5360:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5376:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5370:5:33"},"nodeType":"YulFunctionCall","src":"5370:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5360:6:33"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5255:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5266:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5278:6:33","type":""}],"src":"5208:184:33"},{"body":{"nodeType":"YulBlock","src":"5446:79:33","statements":[{"nodeType":"YulAssignment","src":"5456:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5468:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"5471:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5464:3:33"},"nodeType":"YulFunctionCall","src":"5464:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5456:4:33"}]},{"body":{"nodeType":"YulBlock","src":"5497:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5499:16:33"},"nodeType":"YulFunctionCall","src":"5499:18:33"},"nodeType":"YulExpressionStatement","src":"5499:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5488:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"5494:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5485:2:33"},"nodeType":"YulFunctionCall","src":"5485:11:33"},"nodeType":"YulIf","src":"5482:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5428:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"5431:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5437:4:33","type":""}],"src":"5397:128:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_array_address_calldata(offset, end) -> arrayPos\n    {\n        arrayPos := offset\n        if gt(add(offset, 96), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_array_address_calldata(headStart, dataEnd)\n        value1 := abi_decode_array_address_calldata(add(headStart, 96), dataEnd)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$4777_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, and(mload(_3), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100e05760003560e01c80638da5cb5b1161007f578063df15c37e11610059578063df15c37e14610277578063e5e9b66114610299578063e6adc1ee146102b9578063f2fde38b146102db576100f0565b80638da5cb5b146101c05780639966db94146101e8578063a4df07581461021e576100f0565b80635fc5e020116100bb5780635fc5e02014610156578063715018a61461016b57806376602f2f146101805780637eef2509146101a0576100f0565b80620b46f8146100f95780631f85e3ca1461012157806329a62a7614610141576100f0565b366100f0576100ee346102fb565b005b6100ee346102fb565b34801561010557600080fd5b5061010e601981565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b506100ee61013c366004610a2c565b610458565b34801561014d57600080fd5b5061010e600381565b34801561016257600080fd5b5061010e606481565b34801561017757600080fd5b506100ee6104a7565b34801561018c57600080fd5b506100ee61019b366004610a66565b6104bb565b3480156101ac57600080fd5b5061010e6101bb366004610ab7565b6105ba565b3480156101cc57600080fd5b506000546040516001600160a01b039091168152602001610118565b3480156101f457600080fd5b5061010e610203366004610ae1565b6001600160a01b031660009081526006602052604090205490565b34801561022a57600080fd5b50610267610239366004610ab7565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6040519015158152602001610118565b34801561028357600080fd5b5061028c6106e3565b6040516101189190610afc565b3480156102a557600080fd5b506100ee6102b4366004610ae1565b610728565b3480156102c557600080fd5b506102ce6108de565b6040516101189190610b36565b3480156102e757600080fd5b506100ee6102f6366004610ae1565b610953565b60055460ff1661031e5760405163589ed34b60e01b815260040160405180910390fd5b6000606461032d601984610ba4565b6103379190610bbb565b60015490915060005b818110156104525760006001828154811061035d5761035d610bdd565b600091825260208083206040805180820190915260029093020180546001600160a01b031683526001015490820181905290925060649061039e9087610ba4565b6103a89190610bbb565b9050600082600001516001600160a01b03168260405160006040518083038185875af1925050503d80600081146103fb576040519150601f19603f3d011682016040523d82523d6000602084013e610400565b606091505b505090508061043c57825160405163373a7d4360e11b81526001600160a01b039091166004820152602481018390526044015b60405180910390fd5b505050808061044a90610bf3565b915050610340565b50505050565b610460610991565b6005805460ff19168215159081179091556040519081527faff50328f57c9ced983a9e3c360c67ee11633d860350531f0c11fc435751448c9060200160405180910390a150565b6104af610991565b6104b960006109be565b565b6104c3610991565b60005b600381101561057e5760008382600381106104e3576104e3610bdd565b6020020160208101906104f69190610ae1565b90506000606484846003811061050e5761050e610bdd565b60200201354761051e9190610ba4565b6105289190610bbb565b9050816002846003811061053e5761053e610bdd565b0180546001600160a01b0319166001600160a01b03928316179055919091166000908152600660205260409020558061057681610bf3565b9150506104c6565b507f60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea826040516105ae9190610c0c565b60405180910390a15050565b6001600160a01b038181166000818152600660205260408082205490516370a0823160e01b815293861660048501529092909183916370a0823190602401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610c45565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190610c45565b9050816000036106c2576040516366f3ef9b60e01b815260040160405180910390fd5b806106cd8484610ba4565b6106d79190610bbb565b93505050505b92915050565b6106eb610a0e565b6040805160608101918290529060029060039082845b81546001600160a01b03168152600190910190602001808311610701575050505050905090565b6001600160a01b03811661074f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526006602052604081205490036107875760405163d937573f60e01b815260040160405180910390fd5b3360009081526007602090815260408083206001600160a01b038516845290915290205460ff16156107cc5760405163048798a960e41b815260040160405180910390fd5b60006107d833836105ba565b6001600160a01b0383166000908152600660205260409020549091506107ff908290610c5e565b6001600160a01b0383166000818152600660209081526040808320949094553380835260078252848320938352929052828120805460ff19166001179055915183908381818185875af1925050503d8060008114610879576040519150601f19603f3d011682016040523d82523d6000602084013e61087e565b606091505b50509050806108a0576040516312171d8360e31b815260040160405180910390fd5b60408051338152602081018490527f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770910160405180910390a1505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561094a576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610902565b50505050905090565b61095b610991565b6001600160a01b03811661098557604051631e4fbdf760e01b815260006004820152602401610433565b61098e816109be565b50565b6000546001600160a01b031633146104b95760405163118cdaa760e01b8152336004820152602401610433565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610a3e57600080fd5b81358015158114610a4e57600080fd5b9392505050565b80606081018310156106dd57600080fd5b60008060c08385031215610a7957600080fd5b610a838484610a55565b9150610a928460608501610a55565b90509250929050565b80356001600160a01b0381168114610ab257600080fd5b919050565b60008060408385031215610aca57600080fd5b610ad383610a9b565b9150610a9260208401610a9b565b600060208284031215610af357600080fd5b610a4e82610a9b565b60608101818360005b6003811015610b2d5781516001600160a01b0316835260209283019290910190600101610b05565b50505092915050565b602080825282518282018190526000919060409081850190868401855b82811015610b8157815180516001600160a01b03168552860151868501529284019290850190600101610b53565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106dd576106dd610b8e565b600082610bd857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610c0557610c05610b8e565b5060010190565b60608101818360005b6003811015610b2d576001600160a01b03610c2f83610a9b565b1683526020928301929190910190600101610c15565b600060208284031215610c5757600080fd5b5051919050565b818103818111156106dd576106dd610b8e56fea2646970667358221220811ebc6cf3b57995ea9095503f3f29ece166794a73a377bfc3291874d4f55ecf64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xE5E9B661 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x9966DB94 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0xA4DF0758 EQ PUSH2 0x21E JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH4 0x5FC5E020 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x1A0 JUMPI PUSH2 0xF0 JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x1F85E3CA EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x141 JUMPI PUSH2 0xF0 JUMP JUMPDEST CALLDATASIZE PUSH2 0xF0 JUMPI PUSH2 0xEE CALLVALUE PUSH2 0x2FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEE CALLVALUE PUSH2 0x2FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x4A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xA66 JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x267 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x118 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x6E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xAFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x728 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xB36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEE PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x953 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x31E JUMPI PUSH1 0x40 MLOAD PUSH4 0x589ED34B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x32D PUSH1 0x19 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x337 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x35D JUMPI PUSH2 0x35D PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x39E SWAP1 DUP8 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x400 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x43C JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x44A SWAP1 PUSH2 0xBF3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x340 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x460 PUSH2 0x991 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xAFF50328F57C9CED983A9E3C360C67EE11633D860350531F0C11FC435751448C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4AF PUSH2 0x991 JUMP JUMPDEST PUSH2 0x4B9 PUSH1 0x0 PUSH2 0x9BE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4C3 PUSH2 0x991 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x4E3 JUMPI PUSH2 0x4E3 PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4F6 SWAP2 SWAP1 PUSH2 0xAE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x50E JUMPI PUSH2 0x50E PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD SELFBALANCE PUSH2 0x51E SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x528 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x2 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x53E JUMPI PUSH2 0x53E PUSH2 0xBDD JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x576 DUP2 PUSH2 0xBF3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4C6 JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP3 PUSH1 0x40 MLOAD PUSH2 0x5AE SWAP2 SWAP1 PUSH2 0xC0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP7 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP1 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x615 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69F SWAP2 SWAP1 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F3EF9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x6CD DUP5 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x6D7 SWAP2 SWAP1 PUSH2 0xBBB JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6EB PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x3 SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x701 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD937573F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7D8 CALLER DUP4 PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x7FF SWAP1 DUP3 SWAP1 PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE CALLER DUP1 DUP4 MSTORE PUSH1 0x7 DUP3 MSTORE DUP5 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP3 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 MLOAD DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x87E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x94A JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x902 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x95B PUSH2 0x991 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x433 JUMP JUMPDEST PUSH2 0x98E DUP2 PUSH2 0x9BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x433 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA83 DUP5 DUP5 PUSH2 0xA55 JUMP JUMPDEST SWAP2 POP PUSH2 0xA92 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xA55 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD3 DUP4 PUSH2 0xA9B JUMP JUMPDEST SWAP2 POP PUSH2 0xA92 PUSH1 0x20 DUP5 ADD PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA4E DUP3 PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xB2D JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB05 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB81 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB53 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6DD JUMPI PUSH2 0x6DD PUSH2 0xB8E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0xB8E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xB2D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC2F DUP4 PUSH2 0xA9B JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6DD JUMPI PUSH2 0x6DD PUSH2 0xB8E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0x1E 0xBC PUSH13 0xF3B57995EA9095503F3F29ECE1 PUSH7 0x794A73A377BFC3 0x29 XOR PUSH21 0xD4F55ECF64736F6C63430008140033000000000000 ","sourceMap":"273:3544:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3707:25;3722:9;3707:14;:25::i;:::-;273:3544;;3783:25;3798:9;3783:14;:25::i;331:43::-;;;;;;;;;;;;372:2;331:43;;;;;160:25:33;;;148:2;133:18;331:43:28;;;;;;;;1024:141;;;;;;;;;;-1:-1:-1;1024:141:28;;;;;:::i;:::-;;:::i;431:39::-;;;;;;;;;;;;469:1;431:39;;380:45;;;;;;;;;;;;422:3;380:45;;2293:101:22;;;;;;;;;;;;;:::i;1171:418:28:-;;;;;;;;;;-1:-1:-1;1171:418:28;;;;;:::i;:::-;;:::i;2579:376::-;;;;;;;;;;-1:-1:-1;2579:376:28;;;;;:::i;:::-;;:::i;1638:85:22:-;;;;;;;;;;-1:-1:-1;1684:7:22;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:22;;;1591:51:33;;1579:2;1564:18;1638:85:22;1445:203:33;2961:112:28;;;;;;;;;;-1:-1:-1;2961:112:28;;;;;:::i;:::-;-1:-1:-1;;;;;3049:17:28;3023:7;3049:17;;;:8;:17;;;;;;;2961:112;2235:131;;;;;;;;;;-1:-1:-1;2235:131:28;;;;;:::i;:::-;-1:-1:-1;;;;;2332:18:28;;;2309:4;2332:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;;2235:131;;;;2009:14:33;;2002:22;1984:41;;1972:2;1957:18;2235:131:28;1844:187:33;2476:97:28;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1595:634::-;;;;;;;;;;-1:-1:-1;1595:634:28;;;;;:::i;:::-;;:::i;2372:98::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2543:215:22:-;;;;;;;;;;-1:-1:-1;2543:215:22;;;;;:::i;:::-;;:::i;3079:585:28:-;967:12;;;;963:37;;988:12;;-1:-1:-1;;;988:12:28;;;;;;;;;;;963:37;3176:12:::1;422:3;3192:24;372:2;3192:7:::0;:24:::1;:::i;:::-;3191:44;;;;:::i;:::-;3271:10;:17:::0;3176:59;;-1:-1:-1;3246:22:28::1;3335:323;3354:14;3350:1;:18;3335:323;;;3389:22;3414:10;3425:1;3414:13;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;3389:38:::1;::::0;;;;::::1;::::0;;;3414:13:::1;::::0;;::::1;;3389:38:::0;;-1:-1:-1;;;;;3389:38:28::1;::::0;;;::::1;::::0;;;::::1;::::0;;;;;-1:-1:-1;422:3:28::1;::::0;3460:20:::1;::::0;:4;:20:::1;:::i;:::-;3459:40;;;;:::i;:::-;3442:57;;3515:12;3532:7;:15;;;-1:-1:-1::0;;;;;3532:20:28::1;3560:6;3532:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3514:57;;;3589:7;3585:62;;3623:15:::0;;3605:42:::1;::::0;-1:-1:-1;;;3605:42:28;;-1:-1:-1;;;;;4441:32:33;;;3605:42:28::1;::::0;::::1;4423:51:33::0;4490:18;;;4483:34;;;4396:18;;3605:42:28::1;;;;;;;;3585:62;3375:283;;;3370:3;;;;;:::i;:::-;;;;3335:323;;;;3139:525;;3079:585:::0;:::o;1024:141::-;1531:13:22;:11;:13::i;:::-;1094:12:28::1;:26:::0;;-1:-1:-1;;1094:26:28::1;::::0;::::1;;::::0;;::::1;::::0;;;1135:23:::1;::::0;1984:41:33;;;1135:23:28::1;::::0;1972:2:33;1957:18;1135:23:28::1;;;;;;;1024:141:::0;:::o;2293:101:22:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1171:418:28:-;1531:13:22;:11;:13::i;:::-;1303:9:28::1;1299:248;469:1;1314;:15;1299:248;;;1350:14;1367:8;1376:1;1367:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1350:28;;1392:13;422:3;1433:7;1441:1;1433:10;;;;;;;:::i;:::-;;;;;1409:21;:34;;;;:::i;:::-;1408:54;;;;:::i;:::-;1392:70;;1492:6;1477:9;1487:1;1477:12;;;;;;;:::i;:::-;;:21:::0;;-1:-1:-1;;;;;;1477:21:28::1;-1:-1:-1::0;;;;;1477:21:28;;::::1;;::::0;;1512:16;;;::::1;-1:-1:-1::0;1512:16:28;;;:8:::1;:16;::::0;;;;:24;1331:3;::::1;::::0;::::1;:::i;:::-;;;;1299:248;;;;1562:20;1573:8;1562:20;;;;;;:::i;:::-;;;;;;;;1171:418:::0;;:::o;2579:376::-;-1:-1:-1;;;;;2691:17:28;;;2650:7;2691:17;;;:8;:17;;;;;;;2740:34;;-1:-1:-1;;;2740:34:28;;1609:32:33;;;2740:34:28;;;1591:51:33;2650:7:28;;2691:17;;2650:7;;2740:27;;1564:18:33;;2740:34:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2718:56;;2784:20;2816:7;-1:-1:-1;;;;;2807:29:28;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2784:54;;2852:11;2867:1;2852:16;2849:39;;2877:11;;-1:-1:-1;;;2877:11:28;;;;;;;;;;;2849:39;2936:12;2907:25;2921:11;2907;:25;:::i;:::-;2906:42;;;;:::i;:::-;2899:49;;;;;2579:376;;;;;:::o;2476:97::-;2521:17;;:::i;:::-;2550:16;;;;;;;;;;;2557:9;;2550:16;;2557:9;2550:16;;;;-1:-1:-1;;;;;2550:16:28;;;;;;;;;;;;;;;;;;;;;;2476:97;:::o;1595:634::-;-1:-1:-1;;;;;1721:21:28;;1718:46;;1751:13;;-1:-1:-1;;;1751:13:28;;;;;;;;;;;1718:46;-1:-1:-1;;;;;1777:17:28;;;;;;:8;:17;;;;;;:22;;1774:56;;1808:22;;-1:-1:-1;;;1808:22:28;;;;;;;;;;;1774:56;1855:10;1843:23;;;;:11;:23;;;;;;;;-1:-1:-1;;;;;1843:32:28;;;;;;;;;;;;1840:65;;;1884:21;;-1:-1:-1;;;1884:21:28;;;;;;;;;;;1840:65;1916:13;1932:29;1941:10;1953:7;1932:8;:29::i;:::-;-1:-1:-1;;;;;1992:17:28;;;;;;:8;:17;;;;;;1916:45;;-1:-1:-1;1992:25:28;;1916:45;;1992:25;:::i;:::-;-1:-1:-1;;;;;1972:17:28;;;;;;:8;:17;;;;;;;;:45;;;;2039:10;2027:23;;;:11;:23;;;;;:32;;;;;;;;;:39;;-1:-1:-1;;2027:39:28;2062:4;2027:39;;;2096:33;;2119:5;;1972:17;2096:33;1972:17;2096:33;2119:5;2039:10;2096:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2077:52;;;2143:7;2139:36;;2159:16;;-1:-1:-1;;;2159:16:28;;;;;;;;;;;2139:36;2191:31;;;2204:10;4423:51:33;;4505:2;4490:18;;4483:34;;;2191:31:28;;4396:18:33;2191:31:28;;;;;;;1641:588;;1595:634;:::o;2372:98::-;2418:16;2453:10;2446:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2446:17:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2372:98;:::o;2543:215:22:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:22;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:22;;2700:1:::1;2672:31;::::0;::::1;1591:51:33::0;1564:18;;2672:31:22::1;1445:203:33::0;2623:91:22::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:22;735:10:23;1855:23:22;1851:101;;1901:40;;-1:-1:-1;;;1901:40:22;;735:10:23;1901:40:22;;;1591:51:33;1564:18;;1901:40:22;1445:203:33;2912:187:22;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:22;;;-1:-1:-1;;;;;;3020:17:22;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;196:273:33:-;252:6;305:2;293:9;284:7;280:23;276:32;273:52;;;321:1;318;311:12;273:52;360:9;347:23;413:5;406:13;399:21;392:5;389:32;379:60;;435:1;432;425:12;379:60;458:5;196:273;-1:-1:-1;;;196:273:33:o;474:159::-;568:6;601:2;589:15;;586:24;-1:-1:-1;583:44:33;;;623:1;620;613:12;638:359;756:6;764;817:3;805:9;796:7;792:23;788:33;785:53;;;834:1;831;824:12;785:53;857;902:7;891:9;857:53;:::i;:::-;847:63;;929:62;983:7;978:2;967:9;963:18;929:62;:::i;:::-;919:72;;638:359;;;;;:::o;1002:173::-;1070:20;;-1:-1:-1;;;;;1119:31:33;;1109:42;;1099:70;;1165:1;1162;1155:12;1099:70;1002:173;;;:::o;1180:260::-;1248:6;1256;1309:2;1297:9;1288:7;1284:23;1280:32;1277:52;;;1325:1;1322;1315:12;1277:52;1348:29;1367:9;1348:29;:::i;:::-;1338:39;;1396:38;1430:2;1419:9;1415:18;1396:38;:::i;1653:186::-;1712:6;1765:2;1753:9;1744:7;1740:23;1736:32;1733:52;;;1781:1;1778;1771:12;1733:52;1804:29;1823:9;1804:29;:::i;2036:520::-;2216:2;2201:18;;2205:9;2296:6;2174:4;2330:220;2344:4;2341:1;2338:11;2330:220;;;2407:13;;-1:-1:-1;;;;;2403:39:33;2391:52;;2466:4;2490:12;;;;2525:15;;;;2439:1;2357:9;2330:220;;;2334:3;;;2036:520;;;;:::o;2561:814::-;2782:2;2834:21;;;2904:13;;2807:18;;;2926:22;;;2753:4;;2782:2;2967;;2985:18;;;;3026:15;;;2753:4;3069:280;3083:6;3080:1;3077:13;3069:280;;;3142:13;;3184:9;;-1:-1:-1;;;;;3180:35:33;3168:48;;3256:11;;3250:18;3236:12;;;3229:40;3289:12;;;;3324:15;;;;3212:1;3098:9;3069:280;;;-1:-1:-1;3366:3:33;;2561:814;-1:-1:-1;;;;;;;2561:814:33:o;3380:127::-;3441:10;3436:3;3432:20;3429:1;3422:31;3472:4;3469:1;3462:15;3496:4;3493:1;3486:15;3512:168;3585:9;;;3616;;3633:15;;;3627:22;;3613:37;3603:71;;3654:18;;:::i;3685:217::-;3725:1;3751;3741:132;;3795:10;3790:3;3786:20;3783:1;3776:31;3830:4;3827:1;3820:15;3858:4;3855:1;3848:15;3741:132;-1:-1:-1;3887:9:33;;3685:217::o;3907:127::-;3968:10;3963:3;3959:20;3956:1;3949:31;3999:4;3996:1;3989:15;4023:4;4020:1;4013:15;4528:135;4567:3;4588:17;;;4585:43;;4608:18;;:::i;:::-;-1:-1:-1;4655:1:33;4644:13;;4528:135::o;4668:535::-;4850:2;4835:18;;4839:9;4930:6;4808:4;4964:233;4978:4;4975:1;4972:11;4964:233;;;-1:-1:-1;;;;;5041:26:33;5060:6;5041:26;:::i;:::-;5037:52;5025:65;;5113:4;5137:12;;;;5172:15;;;;;4998:1;4991:9;4964:233;;5208:184;5278:6;5331:2;5319:9;5310:7;5306:23;5302:32;5299:52;;;5347:1;5344;5337:12;5299:52;-1:-1:-1;5370:16:33;;5208:184;-1:-1:-1;5208:184:33:o;5397:128::-;5464:9;;;5485:11;;;5482:37;;;5499:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"647800","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","FEE_PERCENTAGE()":"208","MAX_WINNERS()":"252","SHARE_PRECISION()":"207","claimPrize(address)":"infinite","getCreators()":"infinite","getPrize(address,address)":"infinite","getTicketPrize(address)":"2571","getWinners()":"infinite","isClaimed(address,address)":"infinite","owner()":"2324","renounceOwnership()":"infinite","setMintStatus(bool)":"27763","setWinners(address[3],uint256[3])":"infinite","transferOwnership(address)":"28421"},"internal":{"_handleDeposit(uint256)":"infinite"}},"methodIdentifiers":{"FEE_PERCENTAGE()":"000b46f8","MAX_WINNERS()":"29a62a76","SHARE_PRECISION()":"5fc5e020","claimPrize(address)":"e5e9b661","getCreators()":"e6adc1ee","getPrize(address,address)":"7eef2509","getTicketPrize(address)":"9966db94","getWinners()":"df15c37e","isClaimed(address,address)":"a4df0758","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMintStatus(bool)":"1f85e3ca","setWinners(address[3],uint256[3])":"76602f2f","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"_creators\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimedPrize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creators\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrizeForThisTicket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTickets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWinnersYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintOpen\",\"type\":\"bool\"}],\"name\":\"MintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"getTicketPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMintOpen\",\"type\":\"bool\"}],\"name\":\"setMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_winners\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_shares\",\"type\":\"uint256[3]\"}],\"name\":\"setWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EurocupLegends.sol\":\"EurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/EurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IEurocupLegends} from \\\"./interfaces/IEurocupLegends.sol\\\";\\nimport {ITickets} from \\\"./interfaces/ITickets.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract EurocupLegends is IEurocupLegends, Ownable {\\n    uint256 public constant FEE_PERCENTAGE = 25;\\n    uint256 public constant SHARE_PRECISION = 100;\\n    uint256 public constant MAX_WINNERS = 3;\\n\\n    Creator[] private s_creators;\\n    address[3] private s_winners;\\n\\n    bool private s_isMintOpen = true;\\n\\n    mapping(address ticket => uint256 prize) private s_prizes;\\n    mapping(address user => mapping(address ticket => bool isClaimed)) private s_isClaimed;\\n\\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\\n        for(uint256 i; i < _creators.length; i++) {\\n            s_creators.push(_creators[i]);\\n        }\\n    }\\n\\n    modifier isMintOpen() {\\n        if(!s_isMintOpen) revert MintClosed();\\n        _;\\n    }\\n\\n    function setMintStatus(bool _isMintOpen) external onlyOwner {\\n        s_isMintOpen = _isMintOpen;\\n        emit MintStatus(_isMintOpen);\\n    }\\n\\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _shares) external onlyOwner {\\n        for(uint256 i; i < MAX_WINNERS; i++) {\\n            address winner = _winners[i];\\n            uint256 prize = (address(this).balance * _shares[i]) / SHARE_PRECISION;\\n\\n            s_winners[i] = winner;\\n            s_prizes[winner] = prize;\\n        }\\n\\n        emit WinnersSet(_winners);\\n    }\\n\\n    function claimPrize(address _ticket) external {\\n        if(s_winners.length != MAX_WINNERS) revert NoWinnersYet();\\n        if(_ticket == address(0)) revert ZeroAddress();\\n        if(s_prizes[_ticket] == 0) revert NoPrizeForThisTicket();\\n        if(s_isClaimed[msg.sender][_ticket]) revert AlreadyClaimedPrize();\\n\\n        uint256 prize = getPrize(msg.sender, _ticket);\\n\\n        s_prizes[_ticket] = s_prizes[_ticket] - prize;\\n        s_isClaimed[msg.sender][_ticket] = true;\\n\\n        (bool success, ) = msg.sender.call{value: prize}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit PrizeClaimed(msg.sender, prize);\\n    }\\n\\n    function isClaimed(address _user, address _ticket) external view returns (bool) {\\n        return s_isClaimed[_user][_ticket];\\n    }\\n\\n    function getCreators() external view returns (Creator[] memory) {\\n        return s_creators;\\n    }\\n\\n    function getWinners() external view returns (address[3] memory) {\\n        return s_winners;\\n    }\\n\\n    function getPrize(address _user, address _ticket) public view returns (uint256) {\\n        uint256 ticketPrize = s_prizes[_ticket];\\n        uint256 userTickets = ITickets(_ticket).balanceOf(_user);\\n        uint256 totalTickets = ITickets(_ticket).totalSupply();\\n\\n        if(userTickets == 0) revert NoTickets();\\n\\n        return (userTickets * ticketPrize) / totalTickets;\\n    }\\n\\n    function getTicketPrize(address _ticket) public view returns (uint256) {\\n        return s_prizes[_ticket];\\n    }\\n\\n    function _handleDeposit(uint256 _amount) private isMintOpen {\\n        // 25% of deposits\\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\\n\\n        uint256 creatorsLength = s_creators.length;\\n\\n        // transfer fee to creators\\n        for(uint256 i; i < creatorsLength; i++) {\\n            Creator memory creator = s_creators[i];\\n\\n            uint256 feeCut = (fees * creator.share) / SHARE_PRECISION;\\n\\n            (bool success,) = creator.creator.call{value: feeCut}(\\\"\\\");\\n            if(!success) revert FeeTransferFailed(creator.creator, feeCut);\\n        }\\n    }\\n\\n    receive() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n\\n    fallback() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n}\",\"keccak256\":\"0x1d2bac4ad0b57751e7f0181c00bc537cde0d2398c008e413ba0718ab30813027\",\"license\":\"MIT\"},\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n    event MintStatus(bool isMintOpen);\\n}\",\"keccak256\":\"0xf092ff60d3cab71a68a59838f3a0c2f4a3460af2326844f130ecfd8f45c7c1af\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP7DigitalAsset} from \\\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\\\";\\ninterface ITickets is ILSP7DigitalAsset {\\n    event TicketsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n}\",\"keccak256\":\"0x24e407930a7c7fba4ee021520bbdec17e27f1fa4d24b94700440a742de6a43f4\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisTicket();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoTickets();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\\n\\nerror MintClosed();\",\"keccak256\":\"0xca7fe76b15de655ab37149643a2d706aa305b8a4a2becb0b878b42bd246d964e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3318,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":4357,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_creators","offset":0,"slot":"1","type":"t_array(t_struct(Creator)4777_storage)dyn_storage"},{"astId":4361,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_winners","offset":0,"slot":"2","type":"t_array(t_address)3_storage"},{"astId":4364,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_isMintOpen","offset":0,"slot":"5","type":"t_bool"},{"astId":4368,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_prizes","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":4374,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_isClaimed","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)3_storage":{"base":"t_address","encoding":"inplace","label":"address[3]","numberOfBytes":"96"},"t_array(t_struct(Creator)4777_storage)dyn_storage":{"base":"t_struct(Creator)4777_storage","encoding":"dynamic_array","label":"struct IEurocupLegends.Creator[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Creator)4777_storage":{"encoding":"inplace","label":"struct IEurocupLegends.Creator","members":[{"astId":4774,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"creator","offset":0,"slot":"0","type":"t_address"},{"astId":4776,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"share","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IEurocupLegends.sol":{"IEurocupLegends":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isMintOpen","type":"bool"}],"name":"MintStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintOpen\",\"type\":\"bool\"}],\"name\":\"MintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IEurocupLegends.sol\":\"IEurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n    event MintStatus(bool isMintOpen);\\n}\",\"keccak256\":\"0xf092ff60d3cab71a68a59838f3a0c2f4a3460af2326844f130ecfd8f45c7c1af\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ITickets.sol":{"ITickets":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"TicketsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.","custom:requirements":"- `operator` cannot be the zero address.","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"custom:info":"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).","details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"custom:notice":"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.","details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"custom:events":"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.","details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} indicating the updated allowance","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.","details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"revokeOperator(address,address,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).","custom:requirements":"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.","details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"custom:events":"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"custom:events":"{Transfer} event **for each token transfer**.","custom:info":"If any transfer in the batch fail or revert, the whole call will revert.","custom:requirements":"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.","details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","mint(address,uint256)":"40c10f19","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TicketsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.\",\"custom:requirements\":\"- `operator` cannot be the zero address.\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"custom:info\":\"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).\",\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"custom:notice\":\"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"custom:events\":\"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.\",\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} indicating the updated allowance\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"revokeOperator(address,address,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\",\"custom:requirements\":\"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.\",\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"custom:events\":\"{Transfer} event **for each token transfer**.\",\"custom:info\":\"If any transfer in the batch fail or revert, the whole call will revert.\",\"custom:requirements\":\"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\",\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ITickets.sol\":\"ITickets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP7DigitalAsset} from \\\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\\\";\\ninterface ITickets is ILSP7DigitalAsset {\\n    event TicketsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n}\",\"keccak256\":\"0x24e407930a7c7fba4ee021520bbdec17e27f1fa4d24b94700440a742de6a43f4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"contracts/tokens/Tickets.sol":{"Tickets":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_prizePool","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"bytes","name":"storedData","type":"bytes"}],"name":"InvalidExtensionAddress","type":"error"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"InvalidFunctionSelector","type":"error"},{"inputs":[],"name":"InvalidMintPrice","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"authorizedAmount","type":"uint256"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsAuthorizedAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LSP7AmountExceedsBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP7BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP7CannotSendWithAddressZero","type":"error"},{"inputs":[],"name":"LSP7CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7DecreaseAllowanceNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7DecreasedAllowanceBelowZero","type":"error"},{"inputs":[],"name":"LSP7InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP7NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"LSP7RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP7TokenContractCannotHoldValue","type":"error"},{"inputs":[],"name":"LSP7TokenOwnerCannotBeOperator","type":"error"},{"inputs":[],"name":"MintLimitExceeded","type":"error"},{"inputs":[{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"NoExtensionFoundForFunctionSelector","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"OperatorAllowanceCannotBeIncreasedFromZero","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"TicketsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"MAX_MINT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrizePool","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"InvalidExtensionAddress(bytes)":[{"details":"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"}],"InvalidFunctionSelector(bytes)":[{"details":"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)":[{"details":"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."}],"LSP7AmountExceedsBalance(uint256,address,uint256)":[{"details":"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."}],"LSP7BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP7CannotSendWithAddressZero()":[{"details":"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address."}],"LSP7CannotUseAddressZeroAsOperator()":[{"details":"reverts when trying to set the zero address as an operator."}],"LSP7DecreaseAllowanceNotAuthorized(address,address,address)":[{"details":"Reverts when the call to decrease allowance is not authorized."}],"LSP7DecreasedAllowanceBelowZero()":[{"details":"Reverts when trying to decrease an operator's allowance to more than its current allowance."}],"LSP7InvalidTransferBatch()":[{"details":"reverts when the array parameters used in {transferBatch} have different lengths."}],"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP7NotifyTokenReceiverIsEOA(address)":[{"details":"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP7RevokeOperatorNotAuthorized(address,address,address)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP7TokenContractCannotHoldValue()":[{"details":"Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."}],"LSP7TokenOwnerCannotBeOperator()":[{"details":"reverts when trying to authorize or revoke the token's owner as an operator."}],"NoExtensionFoundForFunctionSelector(bytes4)":[{"details":"reverts when there is no extension for the function selector being called with"}],"OperatorAllowanceCannotBeIncreasedFromZero(address)":[{"details":"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:danger":"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeOperator(address,address,bool,bytes)":{"details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1637":{"entryPoint":null,"id":1637,"parameterSlots":4,"returnSlots":0},"@_1975":{"entryPoint":null,"id":1975,"parameterSlots":5,"returnSlots":0},"@_34":{"entryPoint":null,"id":34,"parameterSlots":1,"returnSlots":0},"@_4866":{"entryPoint":null,"id":4866,"parameterSlots":5,"returnSlots":0},"@_setData_248":{"entryPoint":512,"id":248,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":402,"id":401,"parameterSlots":1,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":806,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":661,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory":{"entryPoint":835,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":1048,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":1131,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":623,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":988,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":601,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5248:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:33"},"nodeType":"YulFunctionCall","src":"66:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:31:33"},"nodeType":"YulExpressionStatement","src":"56:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:33"},"nodeType":"YulFunctionCall","src":"96:15:33"},"nodeType":"YulExpressionStatement","src":"96:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:33"},"nodeType":"YulFunctionCall","src":"120:15:33"},"nodeType":"YulExpressionStatement","src":"120:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:33"},{"body":{"nodeType":"YulBlock","src":"212:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"222:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"231:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"226:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"316:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"321:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"312:3:33"},"nodeType":"YulFunctionCall","src":"312:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"335:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"340:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"331:3:33"},"nodeType":"YulFunctionCall","src":"331:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"325:5:33"},"nodeType":"YulFunctionCall","src":"325:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"305:6:33"},"nodeType":"YulFunctionCall","src":"305:39:33"},"nodeType":"YulExpressionStatement","src":"305:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"252:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"255:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"249:2:33"},"nodeType":"YulFunctionCall","src":"249:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"263:19:33","statements":[{"nodeType":"YulAssignment","src":"265:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"274:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"277:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"270:3:33"},"nodeType":"YulFunctionCall","src":"270:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"265:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"245:3:33","statements":[]},"src":"241:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"374:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"370:3:33"},"nodeType":"YulFunctionCall","src":"370:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"388:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"363:6:33"},"nodeType":"YulFunctionCall","src":"363:27:33"},"nodeType":"YulExpressionStatement","src":"363:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"190:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"195:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"200:6:33","type":""}],"src":"146:250:33"},{"body":{"nodeType":"YulBlock","src":"465:635:33","statements":[{"body":{"nodeType":"YulBlock","src":"514:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"523:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"526:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"516:6:33"},"nodeType":"YulFunctionCall","src":"516:12:33"},"nodeType":"YulExpressionStatement","src":"516:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"493:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"501:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:33"},"nodeType":"YulFunctionCall","src":"489:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"508:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"485:3:33"},"nodeType":"YulFunctionCall","src":"485:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"478:6:33"},"nodeType":"YulFunctionCall","src":"478:35:33"},"nodeType":"YulIf","src":"475:55:33"},{"nodeType":"YulVariableDeclaration","src":"539:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"555:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"549:5:33"},"nodeType":"YulFunctionCall","src":"549:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"543:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"571:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"589:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"593:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"585:3:33"},"nodeType":"YulFunctionCall","src":"585:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"597:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"581:3:33"},"nodeType":"YulFunctionCall","src":"581:18:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"575:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"622:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"624:16:33"},"nodeType":"YulFunctionCall","src":"624:18:33"},"nodeType":"YulExpressionStatement","src":"624:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"614:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"618:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"611:2:33"},"nodeType":"YulFunctionCall","src":"611:10:33"},"nodeType":"YulIf","src":"608:36:33"},{"nodeType":"YulVariableDeclaration","src":"653:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"667:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"663:3:33"},"nodeType":"YulFunctionCall","src":"663:7:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"657:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"679:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"699:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"693:5:33"},"nodeType":"YulFunctionCall","src":"693:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"683:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"711:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"733:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"757:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"761:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"753:3:33"},"nodeType":"YulFunctionCall","src":"753:13:33"},{"name":"_3","nodeType":"YulIdentifier","src":"768:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"749:3:33"},"nodeType":"YulFunctionCall","src":"749:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"773:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:33"},"nodeType":"YulFunctionCall","src":"745:31:33"},{"name":"_3","nodeType":"YulIdentifier","src":"778:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"741:3:33"},"nodeType":"YulFunctionCall","src":"741:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"729:3:33"},"nodeType":"YulFunctionCall","src":"729:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"715:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"841:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"843:16:33"},"nodeType":"YulFunctionCall","src":"843:18:33"},"nodeType":"YulExpressionStatement","src":"843:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"800:10:33"},{"name":"_2","nodeType":"YulIdentifier","src":"812:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"797:2:33"},"nodeType":"YulFunctionCall","src":"797:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"820:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"832:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"817:2:33"},"nodeType":"YulFunctionCall","src":"817:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"794:2:33"},"nodeType":"YulFunctionCall","src":"794:46:33"},"nodeType":"YulIf","src":"791:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"879:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"883:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"872:6:33"},"nodeType":"YulFunctionCall","src":"872:22:33"},"nodeType":"YulExpressionStatement","src":"872:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"910:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"918:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"903:6:33"},"nodeType":"YulFunctionCall","src":"903:18:33"},"nodeType":"YulExpressionStatement","src":"903:18:33"},{"body":{"nodeType":"YulBlock","src":"969:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"978:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"981:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"971:6:33"},"nodeType":"YulFunctionCall","src":"971:12:33"},"nodeType":"YulExpressionStatement","src":"971:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"944:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"952:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"940:3:33"},"nodeType":"YulFunctionCall","src":"940:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"957:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"936:3:33"},"nodeType":"YulFunctionCall","src":"936:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"964:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"933:2:33"},"nodeType":"YulFunctionCall","src":"933:35:33"},"nodeType":"YulIf","src":"930:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1033:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1041:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1029:3:33"},"nodeType":"YulFunctionCall","src":"1029:17:33"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1052:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1060:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1048:3:33"},"nodeType":"YulFunctionCall","src":"1048:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1067:2:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"994:34:33"},"nodeType":"YulFunctionCall","src":"994:76:33"},"nodeType":"YulExpressionStatement","src":"994:76:33"},{"nodeType":"YulAssignment","src":"1079:15:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1088:6:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1079:5:33"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"439:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"447:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"455:5:33","type":""}],"src":"401:699:33"},{"body":{"nodeType":"YulBlock","src":"1165:117:33","statements":[{"nodeType":"YulAssignment","src":"1175:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1190:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1184:5:33"},"nodeType":"YulFunctionCall","src":"1184:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1175:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1260:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1269:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1272:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1262:6:33"},"nodeType":"YulFunctionCall","src":"1262:12:33"},"nodeType":"YulExpressionStatement","src":"1262:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1219:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1230:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1245:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1250:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1241:3:33"},"nodeType":"YulFunctionCall","src":"1241:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1237:3:33"},"nodeType":"YulFunctionCall","src":"1237:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1226:3:33"},"nodeType":"YulFunctionCall","src":"1226:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1216:2:33"},"nodeType":"YulFunctionCall","src":"1216:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1209:6:33"},"nodeType":"YulFunctionCall","src":"1209:50:33"},"nodeType":"YulIf","src":"1206:70:33"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1144:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1155:5:33","type":""}],"src":"1105:177:33"},{"body":{"nodeType":"YulBlock","src":"1456:626:33","statements":[{"body":{"nodeType":"YulBlock","src":"1503:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1512:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1515:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1505:6:33"},"nodeType":"YulFunctionCall","src":"1505:12:33"},"nodeType":"YulExpressionStatement","src":"1505:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1477:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1486:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1473:3:33"},"nodeType":"YulFunctionCall","src":"1473:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1498:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1469:3:33"},"nodeType":"YulFunctionCall","src":"1469:33:33"},"nodeType":"YulIf","src":"1466:53:33"},{"nodeType":"YulVariableDeclaration","src":"1528:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1548:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1542:5:33"},"nodeType":"YulFunctionCall","src":"1542:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1532:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1567:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1585:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1589:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1581:3:33"},"nodeType":"YulFunctionCall","src":"1581:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1593:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1577:3:33"},"nodeType":"YulFunctionCall","src":"1577:18:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1571:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1622:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1631:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1634:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1624:6:33"},"nodeType":"YulFunctionCall","src":"1624:12:33"},"nodeType":"YulExpressionStatement","src":"1624:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1610:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1618:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1607:2:33"},"nodeType":"YulFunctionCall","src":"1607:14:33"},"nodeType":"YulIf","src":"1604:34:33"},{"nodeType":"YulAssignment","src":"1647:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1690:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"1701:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1686:3:33"},"nodeType":"YulFunctionCall","src":"1686:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1710:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1657:28:33"},"nodeType":"YulFunctionCall","src":"1657:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1647:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1727:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1753:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1764:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1749:3:33"},"nodeType":"YulFunctionCall","src":"1749:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1743:5:33"},"nodeType":"YulFunctionCall","src":"1743:25:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1731:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1797:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1806:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1809:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1799:6:33"},"nodeType":"YulFunctionCall","src":"1799:12:33"},"nodeType":"YulExpressionStatement","src":"1799:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1783:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1793:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1780:2:33"},"nodeType":"YulFunctionCall","src":"1780:16:33"},"nodeType":"YulIf","src":"1777:36:33"},{"nodeType":"YulAssignment","src":"1822:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1865:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1876:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1861:3:33"},"nodeType":"YulFunctionCall","src":"1861:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1887:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1832:28:33"},"nodeType":"YulFunctionCall","src":"1832:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1822:6:33"}]},{"nodeType":"YulAssignment","src":"1904:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1948:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1959:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1944:3:33"},"nodeType":"YulFunctionCall","src":"1944:18:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1914:29:33"},"nodeType":"YulFunctionCall","src":"1914:49:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1904:6:33"}]},{"nodeType":"YulAssignment","src":"1972:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2016:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2027:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2012:3:33"},"nodeType":"YulFunctionCall","src":"2012:18:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1982:29:33"},"nodeType":"YulFunctionCall","src":"1982:49:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1972:6:33"}]},{"nodeType":"YulAssignment","src":"2040:36:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2060:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2071:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2056:3:33"},"nodeType":"YulFunctionCall","src":"2056:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2050:5:33"},"nodeType":"YulFunctionCall","src":"2050:26:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2040:6:33"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1390:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1401:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1413:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1421:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1429:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1437:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1445:6:33","type":""}],"src":"1287:795:33"},{"body":{"nodeType":"YulBlock","src":"2188:76:33","statements":[{"nodeType":"YulAssignment","src":"2198:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2210:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2221:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2206:3:33"},"nodeType":"YulFunctionCall","src":"2206:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2198:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2240:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"2251:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2233:6:33"},"nodeType":"YulFunctionCall","src":"2233:25:33"},"nodeType":"YulExpressionStatement","src":"2233:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2157:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2168:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2179:4:33","type":""}],"src":"2087:177:33"},{"body":{"nodeType":"YulBlock","src":"2324:325:33","statements":[{"nodeType":"YulAssignment","src":"2334:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2348:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2351:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2344:3:33"},"nodeType":"YulFunctionCall","src":"2344:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2334:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2365:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2395:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2401:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2391:3:33"},"nodeType":"YulFunctionCall","src":"2391:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2369:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2442:31:33","statements":[{"nodeType":"YulAssignment","src":"2444:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2458:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2466:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2454:3:33"},"nodeType":"YulFunctionCall","src":"2454:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2422:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2415:6:33"},"nodeType":"YulFunctionCall","src":"2415:26:33"},"nodeType":"YulIf","src":"2412:61:33"},{"body":{"nodeType":"YulBlock","src":"2532:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2553:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2560:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2565:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2556:3:33"},"nodeType":"YulFunctionCall","src":"2556:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2546:6:33"},"nodeType":"YulFunctionCall","src":"2546:31:33"},"nodeType":"YulExpressionStatement","src":"2546:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2597:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2600:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2590:6:33"},"nodeType":"YulFunctionCall","src":"2590:15:33"},"nodeType":"YulExpressionStatement","src":"2590:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2625:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2628:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2618:6:33"},"nodeType":"YulFunctionCall","src":"2618:15:33"},"nodeType":"YulExpressionStatement","src":"2618:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2488:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2511:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2519:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2508:2:33"},"nodeType":"YulFunctionCall","src":"2508:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2485:2:33"},"nodeType":"YulFunctionCall","src":"2485:38:33"},"nodeType":"YulIf","src":"2482:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2304:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2313:6:33","type":""}],"src":"2269:380:33"},{"body":{"nodeType":"YulBlock","src":"2709:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2726:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2729:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2719:6:33"},"nodeType":"YulFunctionCall","src":"2719:14:33"},"nodeType":"YulExpressionStatement","src":"2719:14:33"},{"nodeType":"YulAssignment","src":"2742:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2763:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2750:9:33"},"nodeType":"YulFunctionCall","src":"2750:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2742:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2692:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2700:4:33","type":""}],"src":"2654:120:33"},{"body":{"nodeType":"YulBlock","src":"2859:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"2892:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2906:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2916:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2910:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2937:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"2941:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2930:6:33"},"nodeType":"YulFunctionCall","src":"2930:17:33"},"nodeType":"YulExpressionStatement","src":"2930:17:33"},{"nodeType":"YulVariableDeclaration","src":"2960:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2982:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2986:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2972:9:33"},"nodeType":"YulFunctionCall","src":"2972:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2964:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3004:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3027:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3037:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3044:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3056:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3040:3:33"},"nodeType":"YulFunctionCall","src":"3040:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3033:3:33"},"nodeType":"YulFunctionCall","src":"3033:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3023:3:33"},"nodeType":"YulFunctionCall","src":"3023:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"3008:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3098:23:33","statements":[{"nodeType":"YulAssignment","src":"3100:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"3115:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3100:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3080:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3092:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3077:2:33"},"nodeType":"YulFunctionCall","src":"3077:20:33"},"nodeType":"YulIf","src":"3074:47:33"},{"nodeType":"YulVariableDeclaration","src":"3134:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3148:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3158:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3165:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"3170:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3161:3:33"},"nodeType":"YulFunctionCall","src":"3161:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3154:3:33"},"nodeType":"YulFunctionCall","src":"3154:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3144:3:33"},"nodeType":"YulFunctionCall","src":"3144:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3138:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3188:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3201:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3192:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3286:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3295:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3302:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3288:6:33"},"nodeType":"YulFunctionCall","src":"3288:17:33"},"nodeType":"YulExpressionStatement","src":"3288:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3236:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3243:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3233:2:33"},"nodeType":"YulFunctionCall","src":"3233:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3247:26:33","statements":[{"nodeType":"YulAssignment","src":"3249:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3262:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"3269:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3258:3:33"},"nodeType":"YulFunctionCall","src":"3258:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3249:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3229:3:33","statements":[]},"src":"3225:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2875:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2880:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2872:2:33"},"nodeType":"YulFunctionCall","src":"2872:11:33"},"nodeType":"YulIf","src":"2869:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2831:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"2838:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2843:10:33","type":""}],"src":"2779:544:33"},{"body":{"nodeType":"YulBlock","src":"3413:81:33","statements":[{"nodeType":"YulAssignment","src":"3423:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3438:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3456:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"3459:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3452:3:33"},"nodeType":"YulFunctionCall","src":"3452:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3465:3:33"},"nodeType":"YulFunctionCall","src":"3465:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3448:3:33"},"nodeType":"YulFunctionCall","src":"3448:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3444:3:33"},"nodeType":"YulFunctionCall","src":"3444:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3434:3:33"},"nodeType":"YulFunctionCall","src":"3434:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3480:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"3483:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3476:3:33"},"nodeType":"YulFunctionCall","src":"3476:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3431:2:33"},"nodeType":"YulFunctionCall","src":"3431:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3423:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3390:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"3396:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3404:4:33","type":""}],"src":"3328:166:33"},{"body":{"nodeType":"YulBlock","src":"3593:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3623:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3617:5:33"},"nodeType":"YulFunctionCall","src":"3617:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3607:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3670:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3672:16:33"},"nodeType":"YulFunctionCall","src":"3672:18:33"},"nodeType":"YulExpressionStatement","src":"3672:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3642:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3658:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3662:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3654:3:33"},"nodeType":"YulFunctionCall","src":"3654:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3666:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3650:3:33"},"nodeType":"YulFunctionCall","src":"3650:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3639:2:33"},"nodeType":"YulFunctionCall","src":"3639:30:33"},"nodeType":"YulIf","src":"3636:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3744:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3782:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3776:5:33"},"nodeType":"YulFunctionCall","src":"3776:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3750:25:33"},"nodeType":"YulFunctionCall","src":"3750:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"3790:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"3701:42:33"},"nodeType":"YulFunctionCall","src":"3701:96:33"},"nodeType":"YulExpressionStatement","src":"3701:96:33"},{"nodeType":"YulVariableDeclaration","src":"3806:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3823:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3810:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3833:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3852:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3837:11:33","type":""}]},{"nodeType":"YulAssignment","src":"3865:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3878:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3865:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3935:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3949:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3968:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3980:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3976:3:33"},"nodeType":"YulFunctionCall","src":"3976:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3964:3:33"},"nodeType":"YulFunctionCall","src":"3964:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3953:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3997:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4040:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"4011:28:33"},"nodeType":"YulFunctionCall","src":"4011:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4001:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4058:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4067:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4062:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4145:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4170:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4188:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4193:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:33"},"nodeType":"YulFunctionCall","src":"4184:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4178:5:33"},"nodeType":"YulFunctionCall","src":"4178:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4163:6:33"},"nodeType":"YulFunctionCall","src":"4163:42:33"},"nodeType":"YulExpressionStatement","src":"4163:42:33"},{"nodeType":"YulAssignment","src":"4222:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4236:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4244:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4232:3:33"},"nodeType":"YulFunctionCall","src":"4232:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4222:6:33"}]},{"nodeType":"YulAssignment","src":"4263:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4280:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4291:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4276:3:33"},"nodeType":"YulFunctionCall","src":"4276:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4263:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4092:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4095:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4089:2:33"},"nodeType":"YulFunctionCall","src":"4089:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4104:28:33","statements":[{"nodeType":"YulAssignment","src":"4106:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4115:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4118:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4111:3:33"},"nodeType":"YulFunctionCall","src":"4111:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4106:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4085:3:33","statements":[]},"src":"4081:236:33"},{"body":{"nodeType":"YulBlock","src":"4365:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4383:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4410:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4415:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4406:3:33"},"nodeType":"YulFunctionCall","src":"4406:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4400:5:33"},"nodeType":"YulFunctionCall","src":"4400:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4387:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4450:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4462:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4489:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4492:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4485:3:33"},"nodeType":"YulFunctionCall","src":"4485:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"4501:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4481:3:33"},"nodeType":"YulFunctionCall","src":"4481:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4511:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4507:3:33"},"nodeType":"YulFunctionCall","src":"4507:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4477:3:33"},"nodeType":"YulFunctionCall","src":"4477:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4473:3:33"},"nodeType":"YulFunctionCall","src":"4473:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4458:3:33"},"nodeType":"YulFunctionCall","src":"4458:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4443:6:33"},"nodeType":"YulFunctionCall","src":"4443:74:33"},"nodeType":"YulExpressionStatement","src":"4443:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4336:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4333:2:33"},"nodeType":"YulFunctionCall","src":"4333:19:33"},"nodeType":"YulIf","src":"4330:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4551:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4565:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4568:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4561:3:33"},"nodeType":"YulFunctionCall","src":"4561:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"4577:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4557:3:33"},"nodeType":"YulFunctionCall","src":"4557:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4544:6:33"},"nodeType":"YulFunctionCall","src":"4544:36:33"},"nodeType":"YulExpressionStatement","src":"4544:36:33"}]},"nodeType":"YulCase","src":"3928:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3933:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4607:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4621:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4634:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4625:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4670:67:33","statements":[{"nodeType":"YulAssignment","src":"4688:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4707:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4712:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4703:3:33"},"nodeType":"YulFunctionCall","src":"4703:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4697:5:33"},"nodeType":"YulFunctionCall","src":"4697:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4688:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4651:6:33"},"nodeType":"YulIf","src":"4648:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4757:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4816:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"4823:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4763:52:33"},"nodeType":"YulFunctionCall","src":"4763:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4750:6:33"},"nodeType":"YulFunctionCall","src":"4750:81:33"},"nodeType":"YulExpressionStatement","src":"4750:81:33"}]},"nodeType":"YulCase","src":"4599:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3908:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3916:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3905:2:33"},"nodeType":"YulFunctionCall","src":"3905:14:33"},"nodeType":"YulSwitch","src":"3898:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3578:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"3584:3:33","type":""}],"src":"3499:1348:33"},{"body":{"nodeType":"YulBlock","src":"4971:275:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4988:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4999:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4981:6:33"},"nodeType":"YulFunctionCall","src":"4981:21:33"},"nodeType":"YulExpressionStatement","src":"4981:21:33"},{"nodeType":"YulVariableDeclaration","src":"5011:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5031:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5025:5:33"},"nodeType":"YulFunctionCall","src":"5025:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5015:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5058:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5069:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5054:3:33"},"nodeType":"YulFunctionCall","src":"5054:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"5074:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5047:6:33"},"nodeType":"YulFunctionCall","src":"5047:34:33"},"nodeType":"YulExpressionStatement","src":"5047:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5129:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5137:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5125:3:33"},"nodeType":"YulFunctionCall","src":"5125:15:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5146:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5157:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5142:3:33"},"nodeType":"YulFunctionCall","src":"5142:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"5162:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5090:34:33"},"nodeType":"YulFunctionCall","src":"5090:79:33"},"nodeType":"YulExpressionStatement","src":"5090:79:33"},{"nodeType":"YulAssignment","src":"5178:62:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5194:9:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5213:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5221:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5209:3:33"},"nodeType":"YulFunctionCall","src":"5209:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5230:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5226:3:33"},"nodeType":"YulFunctionCall","src":"5226:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5205:3:33"},"nodeType":"YulFunctionCall","src":"5205:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5190:3:33"},"nodeType":"YulFunctionCall","src":"5190:45:33"},{"kind":"number","nodeType":"YulLiteral","src":"5237:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5186:3:33"},"nodeType":"YulFunctionCall","src":"5186:54:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5178:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4940:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4951:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4962:4:33","type":""}],"src":"4852:394:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2DEB CODESIZE SUB DUP1 PUSH3 0x2DEB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x343 JUMP JUMPDEST DUP5 DUP5 DUP5 PUSH1 0x1 DUP1 DUP5 DUP5 DUP5 DUP4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x67 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x72 DUP2 PUSH3 0x192 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x29365989 PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xBB SWAP1 PUSH32 0xEAFEC4D89FA9619884B60000A4D96624A38F7AC2D8D9A604ECF07C12C77E480C SWAP1 PUSH3 0x200 JUMP JUMPDEST PUSH3 0xE7 PUSH32 0xDEBA1E292F8BA88238E10AB3C7F88BD4BE4FAC56CAD5194B6ECCEAF653468AF1 DUP6 PUSH3 0x200 JUMP JUMPDEST PUSH3 0x113 PUSH32 0x2F0A68AB07768E01943A599E73362A0E17A63A72E94DD2E384D2C1D4DB932756 DUP5 PUSH3 0x200 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH3 0x15C SWAP2 PUSH32 0xE0261FA95DB2EB3B5439BD033CDA66D56B96F92F243A8228FD87550ED7BDFDB3 SWAP2 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH3 0x200 JUMP JUMPDEST POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x80 MSTORE POP PUSH1 0xA0 MSTORE POP PUSH3 0x56C SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH3 0x1FD JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x21A DUP3 DUP3 PUSH3 0x46B JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH3 0x24D SWAP2 SWAP1 PUSH3 0x537 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x28C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x272 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2C4 JUMPI PUSH3 0x2C4 PUSH3 0x259 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2EF JUMPI PUSH3 0x2EF PUSH3 0x259 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x31C DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH3 0x26F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x35C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x382 DUP10 DUP4 DUP11 ADD PUSH3 0x295 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3A8 DUP9 DUP3 DUP10 ADD PUSH3 0x295 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3B9 PUSH1 0x40 DUP8 ADD PUSH3 0x326 JUMP JUMPDEST SWAP3 POP PUSH3 0x3C9 PUSH1 0x60 DUP8 ADD PUSH3 0x326 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3F1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x412 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x466 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x441 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x462 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x44D JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x487 JUMPI PUSH3 0x487 PUSH3 0x259 JUMP JUMPDEST PUSH3 0x49F DUP2 PUSH3 0x498 DUP5 SLOAD PUSH3 0x3DC JUMP JUMPDEST DUP5 PUSH3 0x418 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x4D7 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x4BE JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x462 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x508 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x4E7 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x527 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x558 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x26F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x284B PUSH3 0x5A0 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4AA ADD MSTORE PUSH2 0x95A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x432 ADD MSTORE PUSH2 0x9BD ADD MSTORE PUSH2 0x284B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x16A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x97902421 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD72FC29A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD72FC29A EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0xF0292A03 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x550 JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x97902421 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0xB49506FD EQ PUSH2 0x4CE JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0x760D9BBA EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x78381670 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x884BF67C EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46A JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x32CB6B0C GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x65AEAA95 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x385 JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x2BC1DA82 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x2D7667C9 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x30D0DC37 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BC JUMPI PUSH2 0x1C5 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1C5 JUMPI CALLVALUE PUSH1 0x0 SUB PUSH2 0x1AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE23D6B7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x60 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x1F0 JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP3 SWAP2 SWAP1 PUSH2 0x1BD2 JUMP JUMPDEST PUSH2 0x1FA DUP4 DUP4 PUSH2 0x570 JUMP JUMPDEST DUP1 MLOAD SWAP4 POP PUSH1 0x20 ADD SWAP2 POP POP RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C01 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F3C JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x819 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D1 PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x207B JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x20A5 JUMP JUMPDEST PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2121 JUMP JUMPDEST PUSH2 0xA9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x2154 JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x21C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x3A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0xC3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x2245 JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x40B CALLDATASIZE PUSH1 0x4 PUSH2 0x22B0 JUMP JUMPDEST PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x22FF JUMP JUMPDEST PUSH2 0xD42 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x452 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x2345 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0xE37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50E PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xE77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x239E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x23EB JUMP JUMPDEST PUSH2 0xE9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x56B CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x589 PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0xF80 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 CALLDATALOAD AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP8 DUP8 CALLER CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5E6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x241F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x600 SWAP2 PUSH2 0x244A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x642 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x657 JUMPI SWAP3 POP PUSH2 0x660 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH1 0x20 DUP4 ADD REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A5AC01 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x68B JUMPI POP PUSH2 0x68B DUP3 PUSH2 0xFFE JUMP JUMPDEST DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP3 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A6 DUP5 CALLER PUSH2 0xA9F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCBA6E977 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E0 DUP5 DUP4 PUSH2 0x247C JUMP JUMPDEST SWAP1 POP PUSH2 0x6F0 CALLER DUP7 DUP4 PUSH1 0x1 DUP8 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 CALLER DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x707 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x722 DUP7 DUP3 PUSH2 0x11D4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP5 MLOAD DUP5 MLOAD DUP2 EQ ISZERO DUP1 PUSH2 0x73D JUMPI POP DUP4 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0x749 JUMPI POP DUP3 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0x755 JUMPI POP DUP2 MLOAD DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x773 JUMPI PUSH1 0x40 MLOAD PUSH4 0x263EEE8D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x810 JUMPI PUSH2 0x808 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x793 JUMPI PUSH2 0x793 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7AD JUMPI PUSH2 0x7AD PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7C7 JUMPI PUSH2 0x7C7 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E1 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7FB JUMPI PUSH2 0x7FB PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x776 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x83B JUMPI POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD292D99 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x880 DUP4 DUP6 PUSH1 0x0 DUP6 DUP6 PUSH2 0x1061 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x8BB JUMPI PUSH1 0x0 DUP4 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x89E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8B9 DUP6 DUP3 PUSH2 0x11D4 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x8D4 JUMPI POP PUSH1 0x12 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH1 0x3 SLOAD PUSH2 0x8EA SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST GT ISZERO PUSH2 0x909 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 PUSH2 0x92B DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x935 SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST GT ISZERO PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x97E DUP2 PUSH32 0x0 PUSH2 0x2502 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH4 0x20B5E0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B9 DUP3 DUP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA2B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x64F70B72CC0E9E53852E2481E43068B546390216D3D062DBE11D9ECF7580835F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x660 DUP3 PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xAD9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x660 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x660 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB52 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB3D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xC34 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0xB76 JUMPI PUSH2 0xB76 PUSH2 0x24BF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB88 SWAP2 SWAP1 PUSH2 0x2519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB96 SWAP3 SWAP2 SWAP1 PUSH2 0x2566 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBD6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xC0C JUMPI DUP1 MLOAD ISZERO PUSH2 0xBF0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2DDD30A1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC1F JUMPI PUSH2 0xC1F PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xB58 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x1390 JUMP JUMPDEST PUSH2 0xC4D PUSH1 0x0 PUSH2 0x13CC JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xC6A JUMPI PUSH2 0xC6A CALLER DUP7 DUP6 PUSH2 0x143A JUMP JUMPDEST PUSH2 0x8B9 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x14C8 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0xC99 JUMPI POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x98CE2945 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDC DUP6 DUP6 PUSH2 0xA9F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xCFF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEF76C35 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB PUSH2 0xD10 DUP6 DUP8 DUP4 PUSH1 0x1 DUP8 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD27 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x810 DUP8 DUP3 PUSH2 0x11D4 JUMP JUMPDEST PUSH2 0xD4A PUSH2 0x1390 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD73 DUP3 DUP3 PUSH2 0x164C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD7F PUSH2 0x1390 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xDC0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xDE2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xE32 JUMPI PUSH2 0xE2A DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE1D JUMPI PUSH2 0xE1D PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x164C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xDE5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xE45 CALLER DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE5C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8BB DUP5 DUP3 PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0x660 SWAP1 PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE9 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xED4 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xF3F JUMPI PUSH2 0xF1A DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF0D JUMPI PUSH2 0xF0D PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12EE JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF2C JUMPI PUSH2 0xF2C PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xEEF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF4D PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7D DUP2 PUSH2 0x13CC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0xFA5 PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND PUSH2 0x1663 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFB2 DUP3 PUSH2 0x12EE JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x14 EQ ISZERO DUP1 ISZERO PUSH2 0xFC6 JUMPI POP DUP1 MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xFE6 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH2 0xFEF DUP2 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x60 SHR SWAP6 PUSH1 0x1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA918FA6B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP3 PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1036 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0xF80 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1050 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x105A DUP2 DUP5 PUSH2 0x16EC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31AAF3B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x10BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xDAB75047 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP3 ISZERO PUSH2 0x115C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x110A SWAP1 DUP6 PUSH2 0x1776 JUMP JUMPDEST POP DUP3 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF772A43BFDF4729B196E3FB54A818B91A2CA6C49D10B2E16278752F9F515C25D DUP5 PUSH1 0x40 MLOAD PUSH2 0x114F SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x117E SWAP1 DUP6 PUSH2 0x178B JUMP JUMPDEST POP DUP2 ISZERO ISZERO DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBF5762D8855CBE012D2CA42FB33A81175E17C8A8751F8859931BA453BD4167 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11C5 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD73 DUP3 PUSH32 0x386072CC5A58E61263B434C722725F21031CD06E7C552CFAA06DB5DE8A320DBC DUP4 PUSH2 0x17A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1226 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD2D5EC3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1238 SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x1265 SWAP1 DUP5 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0x3997E418D2CEF0B3B0E907B1E39605C3F7D32DBD061E82EA5B4A770D46A160A6 SWAP1 PUSH2 0x12AE SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER PUSH1 0x0 DUP7 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8B9 DUP6 DUP5 DUP4 PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x130B SWAP1 PUSH2 0x2609 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1337 SWAP1 PUSH2 0x2609 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1384 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1359 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1384 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1367 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x13A3 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x14A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3A6B691 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x8BB DUP4 DUP6 PUSH2 0x14B1 DUP6 DUP6 PUSH2 0x263D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO DUP1 PUSH2 0x14E5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO JUMPDEST ISZERO PUSH2 0x1503 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD2D5EC3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP5 GT ISZERO PUSH2 0x1556 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8D47949 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x157E SWAP1 DUP5 SWAP1 PUSH2 0x263D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x15AB SWAP1 DUP5 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x3997E418D2CEF0B3B0E907B1E39605C3F7D32DBD061E82EA5B4A770D46A160A6 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1603 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP8 DUP8 DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1626 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x1641 DUP8 DUP3 PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0x810 DUP7 DUP6 DUP4 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0xD73 DUP3 DUP3 PUSH2 0x1920 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x105A DUP4 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP5 AND PUSH1 0x2C DUP4 ADD MSTORE SWAP2 DUP3 SWAP2 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x16AF SWAP1 PUSH2 0x2650 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x660 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x660 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 DUP11 PUSH2 0x7530 STATICCALL SWAP3 POP RETURNDATASIZE SWAP2 POP PUSH1 0x0 MLOAD SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x175F JUMPI POP PUSH1 0x20 DUP3 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x176B JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1A90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x17BA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x16EC JUMP JUMPDEST ISZERO PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x17ED SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2674 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x180C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8BB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x268D JUMP JUMPDEST PUSH2 0x1845 DUP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x16EC JUMP JUMPDEST ISZERO PUSH2 0x1898 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x17ED SWAP1 PUSH32 0x20804611B3E2EA21C480DC465142210ACF4A2485947541770EC1FB87DEE4A55C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2674 JUMP JUMPDEST DUP2 PUSH2 0xE32 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x18D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x53047DDB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9B091FD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0xD73 DUP3 PUSH32 0x429AC7A06903DBC9C13DFCB3C9D11DF8194581FA047C96D7A4171FC7402958EA DUP4 PUSH2 0x17A0 JUMP JUMPDEST PUSH32 0x2145E1D6D074577DC71EF54C3807742B41B053A9352AE6B491331509ACB9750F DUP3 ADD PUSH2 0x1960 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xD0F59754F88971FE6BC5A6618CC9D5F1E859C58D16B22D1C7B2D3E2B246CD8AA DUP3 ADD PUSH2 0x19A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1FD9E056A24D14C4ABC642FCC325992A946906D0DBC57DD70278AAF12842024D DUP3 ADD PUSH2 0x19E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x19F8 DUP3 DUP3 PUSH2 0x2740 JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1A29 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1A71 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1AD7 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x660 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x660 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1BC8 JUMPI PUSH1 0x0 PUSH2 0x1B03 PUSH1 0x1 DUP4 PUSH2 0x263D JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1B17 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x263D JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1B7C JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1B37 JUMPI PUSH2 0x1B37 PUSH2 0x24BF JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1B5A JUMPI PUSH2 0x1B5A PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1B8D JUMPI PUSH2 0x1B8D PUSH2 0x27FF JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x660 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x660 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C85 JUMPI PUSH2 0x1C85 PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1CA6 JUMPI PUSH2 0x1CA6 PUSH2 0x1C47 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1CC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CD8 PUSH2 0x1CD3 DUP3 PUSH2 0x1C8D JUMP JUMPDEST PUSH2 0x1C5D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1CED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D28 DUP5 PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D56 DUP7 DUP3 DUP8 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1D79 JUMPI PUSH2 0x1D79 PUSH2 0x1C47 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1DA4 PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI PUSH2 0x1DD8 DUP2 PUSH2 0x1C2B JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1DC7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E11 PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1E34 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E7C PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1E9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI PUSH2 0x1EB0 DUP2 PUSH2 0x1E4B JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1E9F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1ECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1EDE PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1F20 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F2E DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x1CB4 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1F01 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F77 DUP10 DUP4 DUP11 ADD PUSH2 0x1D83 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1F8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F99 DUP10 DUP4 DUP11 ADD PUSH2 0x1D83 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FBB DUP10 DUP4 DUP11 ADD PUSH2 0x1DF0 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FDD DUP10 DUP4 DUP11 ADD PUSH2 0x1E5B JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2000 DUP9 DUP3 DUP10 ADD PUSH2 0x1EBD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2023 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x202C DUP6 PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH2 0x203A PUSH1 0x20 DUP7 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH2 0x2048 PUSH1 0x40 DUP7 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x206F DUP8 DUP3 DUP9 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x208E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2097 DUP4 PUSH2 0x1C2B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20D9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20C1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x20FA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x105A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x213D DUP4 PUSH2 0x1C2B JUMP JUMPDEST SWAP2 POP PUSH2 0x214B PUSH1 0x20 DUP5 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x217E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x21A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x21B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x221D JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x220B DUP6 DUP4 MLOAD PUSH2 0x20E2 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x21EF JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x105A DUP3 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x225D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2266 DUP7 PUSH2 0x1C2B JUMP JUMPDEST SWAP5 POP PUSH2 0x2274 PUSH1 0x20 DUP8 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x2289 PUSH1 0x60 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2000 DUP9 DUP3 DUP10 ADD PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22CF DUP6 PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH2 0x22DD PUSH1 0x20 DUP7 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x232F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x233B DUP6 DUP3 DUP7 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x236F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x237B DUP7 DUP4 DUP8 ADD PUSH2 0x1DF0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x233B DUP6 DUP3 DUP7 ADD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23DF JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23BA JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16AF DUP5 DUP3 DUP6 ADD PUSH2 0x1DF0 JUMP JUMPDEST DUP4 DUP6 DUP3 CALLDATACOPY PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x245C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20BE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x24B6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0xFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x24B6 SWAP1 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x254A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x255F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x25A5 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x24B6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x176B SWAP1 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x261D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF3F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x16AF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x26B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x26C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x26D4 PUSH2 0x1CD3 DUP3 PUSH2 0x1C8D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x26E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24B6 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2721 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x722 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x272D JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2759 JUMPI PUSH2 0x2759 PUSH2 0x1C47 JUMP JUMPDEST PUSH2 0x276D DUP2 PUSH2 0x2767 DUP5 SLOAD PUSH2 0x2609 JUMP JUMPDEST DUP5 PUSH2 0x26FA JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x27A2 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x278A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x722 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27D1 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x27B2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27EF JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 DUP4 PUSH19 0xEFAC78E61A2BCEC4D74D745F15C931D43CA998 0xC7 DUP10 SHR MLOAD EXTCODEHASH SWAP3 PUSH13 0xE547CC64736F6C634300081400 CALLER ","sourceMap":"316:1248:31:-:0;;;540:290;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;711:5;718:7;727:6;164:1:13;;711:5:31;718:7;727:6;164:1:13;727:6:31;-1:-1:-1;;;;;1109:26:0;;1105:100;;1158:36;;-1:-1:-1;;;1158:36:0;;;;;;;;;;;1105:100;1214:36;1237:12;1214:22;:36::i;:::-;-1:-1:-1;1555:31:14::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1555:31:14::1;::::0;::::1;::::0;1478:118:::1;::::0;388:66:13::1;::::0;1478:20:14::1;:118::i;:::-;1607:56;633:66:13;1656:5:14::0;1607:20:::1;:56::i;:::-;1673:60;776:66:13;1724:7:14::0;1673:20:::1;:60::i;:::-;1786:26;::::0;;::::1;::::0;::::1;2233:25:33::0;;;1743:70:14::1;::::0;915:66:13::1;::::0;2206:18:33;1786:26:14::1;::::0;;-1:-1:-1;;1786:26:14;;::::1;::::0;;;;;;1743:20:::1;:70::i;:::-;-1:-1:-1::0;;2255:15:19::1;:33:::0;;-1:-1:-1;;2255:33:19::1;::::0;::::1;;::::0;;;::::1;::::0;;;-1:-1:-1;;;;;;;;;773:24:31;;;::::1;;::::0;-1:-1:-1;807:16:31::1;::::0;-1:-1:-1;316:1248:31;;-1:-1:-1;;;316:1248:31;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;;2293:17:3;-1:-1:-1;;;;;2293:17:3;;;;;2197:124;2133:194;:::o;5032:188:1:-;5140:15;;;;:6;:15;;;;;:27;5158:9;5140:15;:27;:::i;:::-;;5194:7;5182:31;5203:9;5182:31;;;;;;:::i;:::-;;;;;;;;5032:188;;:::o;14:127:33:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;231:1;241:113;255:6;252:1;249:13;241:113;;;331:11;;;325:18;312:11;;;305:39;277:2;270:10;241:113;;;-1:-1:-1;;388:1:33;370:16;;363:27;146:250::o;401:699::-;455:5;508:3;501:4;493:6;489:17;485:27;475:55;;526:1;523;516:12;475:55;549:13;;-1:-1:-1;;;;;611:10:33;;;608:36;;;624:18;;:::i;:::-;699:2;693:9;667:2;753:13;;-1:-1:-1;;749:22:33;;;773:2;745:31;741:40;729:53;;;797:18;;;817:22;;;794:46;791:72;;;843:18;;:::i;:::-;883:10;879:2;872:22;918:2;910:6;903:18;964:3;957:4;952:2;944:6;940:15;936:26;933:35;930:55;;;981:1;978;971:12;930:55;994:76;1067:2;1060:4;1052:6;1048:17;1041:4;1033:6;1029:17;994:76;:::i;:::-;1088:6;401:699;-1:-1:-1;;;;;;401:699:33:o;1105:177::-;1184:13;;-1:-1:-1;;;;;1226:31:33;;1216:42;;1206:70;;1272:1;1269;1262:12;1206:70;1105:177;;;:::o;1287:795::-;1413:6;1421;1429;1437;1445;1498:3;1486:9;1477:7;1473:23;1469:33;1466:53;;;1515:1;1512;1505:12;1466:53;1542:16;;-1:-1:-1;;;;;1607:14:33;;;1604:34;;;1634:1;1631;1624:12;1604:34;1657:61;1710:7;1701:6;1690:9;1686:22;1657:61;:::i;:::-;1647:71;;1764:2;1753:9;1749:18;1743:25;1727:41;;1793:2;1783:8;1780:16;1777:36;;;1809:1;1806;1799:12;1777:36;;1832:63;1887:7;1876:8;1865:9;1861:24;1832:63;:::i;:::-;1822:73;;;1914:49;1959:2;1948:9;1944:18;1914:49;:::i;:::-;1904:59;;1982:49;2027:2;2016:9;2012:18;1982:49;:::i;:::-;1972:59;;2071:3;2060:9;2056:19;2050:26;2040:36;;1287:795;;;;;;;;:::o;2269:380::-;2348:1;2344:12;;;;2391;;;2412:61;;2466:4;2458:6;2454:17;2444:27;;2412:61;2519:2;2511:6;2508:14;2488:18;2485:38;2482:161;;2565:10;2560:3;2556:20;2553:1;2546:31;2600:4;2597:1;2590:15;2628:4;2625:1;2618:15;2482:161;;2269:380;;;:::o;2779:544::-;2880:2;2875:3;2872:11;2869:448;;;2916:1;2941:5;2937:2;2930:17;2986:4;2982:2;2972:19;3056:2;3044:10;3040:19;3037:1;3033:27;3027:4;3023:38;3092:4;3080:10;3077:20;3074:47;;;-1:-1:-1;3115:4:33;3074:47;3170:2;3165:3;3161:12;3158:1;3154:20;3148:4;3144:31;3134:41;;3225:82;3243:2;3236:5;3233:13;3225:82;;;3288:17;;;3269:1;3258:13;3225:82;;;3229:3;;;2869:448;2779:544;;;:::o;3499:1348::-;3617:10;;-1:-1:-1;;;;;3639:30:33;;3636:56;;;3672:18;;:::i;:::-;3701:96;3790:6;3750:38;3782:4;3776:11;3750:38;:::i;:::-;3744:4;3701:96;:::i;:::-;3852:4;;3916:2;3905:14;;3933:1;3928:662;;;;4634:1;4651:6;4648:89;;;-1:-1:-1;4703:19:33;;;4697:26;4648:89;-1:-1:-1;;3456:1:33;3452:11;;;3448:24;3444:29;3434:40;3480:1;3476:11;;;3431:57;4750:81;;3898:943;;3928:662;2726:1;2719:14;;;2763:4;2750:18;;-1:-1:-1;;3964:20:33;;;4081:236;4095:7;4092:1;4089:14;4081:236;;;4184:19;;;4178:26;4163:42;;4276:27;;;;4244:1;4232:14;;;;4111:19;;4081:236;;;4085:3;4345:6;4336:7;4333:19;4330:201;;;4406:19;;;4400:26;-1:-1:-1;;4489:1:33;4485:14;;;4501:3;4481:24;4477:37;4473:42;4458:58;4443:74;;4330:201;-1:-1:-1;;;;;4577:1:33;4561:14;;;4557:22;4544:36;;-1:-1:-1;3499:1348:33:o;4852:394::-;4999:2;4988:9;4981:21;4962:4;5031:6;5025:13;5074:6;5069:2;5058:9;5054:18;5047:34;5090:79;5162:6;5157:2;5146:9;5142:18;5137:2;5129:6;5125:15;5090:79;:::i;:::-;5230:2;5209:15;-1:-1:-1;;5205:29:33;5190:45;;;;5237:2;5186:54;;4852:394;-1:-1:-1;;4852:394:33:o;:::-;316:1248:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MAX_MINT_4833":{"entryPoint":null,"id":4833,"parameterSlots":0,"returnSlots":0},"@MAX_SUPPLY_4830":{"entryPoint":null,"id":4830,"parameterSlots":0,"returnSlots":0},"@_1999":{"entryPoint":null,"id":1999,"parameterSlots":2,"returnSlots":1},"@_2017":{"entryPoint":null,"id":2017,"parameterSlots":0,"returnSlots":0},"@_add_3771":{"entryPoint":6800,"id":3771,"parameterSlots":2,"returnSlots":1},"@_afterTokenTransfer_3150":{"entryPoint":null,"id":3150,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_3137":{"entryPoint":null,"id":3137,"parameterSlots":4,"returnSlots":0},"@_checkOwner_379":{"entryPoint":5008,"id":379,"parameterSlots":0,"returnSlots":0},"@_contains_3874":{"entryPoint":null,"id":3874,"parameterSlots":2,"returnSlots":1},"@_fallbackLSP17Extendable_2072":{"entryPoint":1392,"id":2072,"parameterSlots":2,"returnSlots":1},"@_getData_228":{"entryPoint":4846,"id":228,"parameterSlots":1,"returnSlots":1},"@_getExtensionAndForwardValue_2123":{"entryPoint":3968,"id":2123,"parameterSlots":1,"returnSlots":2},"@_mint_2872":{"entryPoint":4607,"id":2872,"parameterSlots":4,"returnSlots":0},"@_notifyTokenOperator_3167":{"entryPoint":4564,"id":3167,"parameterSlots":2,"returnSlots":0},"@_notifyTokenReceiver_3230":{"entryPoint":6196,"id":3230,"parameterSlots":3,"returnSlots":0},"@_notifyTokenSender_3184":{"entryPoint":6389,"id":3184,"parameterSlots":2,"returnSlots":0},"@_remove_3855":{"entryPoint":6879,"id":3855,"parameterSlots":2,"returnSlots":1},"@_setData_1656":{"entryPoint":5708,"id":1656,"parameterSlots":2,"returnSlots":0},"@_setData_1718":{"entryPoint":6432,"id":1718,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":5068,"id":401,"parameterSlots":1,"returnSlots":0},"@_spendAllowance_3015":{"entryPoint":5178,"id":3015,"parameterSlots":3,"returnSlots":0},"@_supportsInterfaceInERC165Extension_723":{"entryPoint":4131,"id":723,"parameterSlots":1,"returnSlots":1},"@_transfer_3124":{"entryPoint":5320,"id":3124,"parameterSlots":5,"returnSlots":0},"@_updateOperator_2784":{"entryPoint":4193,"id":2784,"parameterSlots":5,"returnSlots":0},"@_values_3919":{"entryPoint":6709,"id":3919,"parameterSlots":1,"returnSlots":1},"@add_4071":{"entryPoint":6006,"id":4071,"parameterSlots":2,"returnSlots":1},"@authorizeOperator_2352":{"entryPoint":3639,"id":2352,"parameterSlots":3,"returnSlots":0},"@authorizedAmountFor_2437":{"entryPoint":2719,"id":2437,"parameterSlots":2,"returnSlots":1},"@balanceOf_2246":{"entryPoint":null,"id":2246,"parameterSlots":1,"returnSlots":1},"@batchCalls_2316":{"entryPoint":2821,"id":2316,"parameterSlots":2,"returnSlots":1},"@decimals_2222":{"entryPoint":2241,"id":2222,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_2591":{"entryPoint":3191,"id":2591,"parameterSlots":4,"returnSlots":0},"@generateMappingKey_1020":{"entryPoint":5731,"id":1020,"parameterSlots":2,"returnSlots":1},"@getDataBatch_126":{"entryPoint":3739,"id":126,"parameterSlots":1,"returnSlots":1},"@getData_79":{"entryPoint":2708,"id":79,"parameterSlots":1,"returnSlots":1},"@getOperatorsOf_2454":{"entryPoint":3703,"id":2454,"parameterSlots":1,"returnSlots":1},"@getPrice_4948":{"entryPoint":null,"id":4948,"parameterSlots":0,"returnSlots":1},"@getPrizePool_4940":{"entryPoint":null,"id":4940,"parameterSlots":0,"returnSlots":1},"@increaseAllowance_2512":{"entryPoint":1690,"id":2512,"parameterSlots":3,"returnSlots":0},"@mint_4932":{"entryPoint":2266,"id":4932,"parameterSlots":2,"returnSlots":0},"@notifyUniversalReceiver_587":{"entryPoint":6048,"id":587,"parameterSlots":3,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"@remove_4098":{"entryPoint":6027,"id":4098,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_338":{"entryPoint":3131,"id":338,"parameterSlots":0,"returnSlots":0},"@revokeOperator_2409":{"entryPoint":2073,"id":2409,"parameterSlots":4,"returnSlots":0},"@setDataBatch_215":{"entryPoint":3447,"id":215,"parameterSlots":2,"returnSlots":0},"@setData_151":{"entryPoint":3394,"id":151,"parameterSlots":2,"returnSlots":0},"@supportsERC165InterfaceUnchecked_3705":{"entryPoint":5868,"id":3705,"parameterSlots":2,"returnSlots":1},"@supportsInterface_2150":{"entryPoint":1638,"id":2150,"parameterSlots":1,"returnSlots":1},"@supportsInterface_269":{"entryPoint":5815,"id":269,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3510":{"entryPoint":null,"id":3510,"parameterSlots":1,"returnSlots":1},"@supportsInterface_691":{"entryPoint":4094,"id":691,"parameterSlots":1,"returnSlots":1},"@totalSupply_2232":{"entryPoint":null,"id":2232,"parameterSlots":0,"returnSlots":1},"@transferBatch_2708":{"entryPoint":1834,"id":2708,"parameterSlots":5,"returnSlots":0},"@transferOwnership_362":{"entryPoint":3909,"id":362,"parameterSlots":1,"returnSlots":0},"@transfer_2628":{"entryPoint":3151,"id":2628,"parameterSlots":5,"returnSlots":0},"@values_4197":{"entryPoint":5718,"id":4197,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":7211,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn":{"entryPoint":7555,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bool_dyn":{"entryPoint":7771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bytes32_dyn":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bytes_dyn":{"entryPoint":7869,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":7664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool":{"entryPoint":7755,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":7348,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8746,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8481,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_boolt_bytes_memory_ptr":{"entryPoint":8205,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_addresst_uint256t_boolt_bytes_memory_ptr":{"entryPoint":8773,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":8880,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8315,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7434,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":7996,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":9195,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":9029,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":8532,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":8357,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":8959,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7169,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr_fromMemory":{"entryPoint":9869,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":8418,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9574,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":9247,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9290,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9678,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint8_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9429,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9359,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9118,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8648,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9844,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7122,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8462,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bool_t_bytes_memory_ptr__to_t_uint256_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9645,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":9497,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":7520,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":7309,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9340,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9474,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9789,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":9978,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20":{"entryPoint":9590,"id":null,"parameterSlots":1,"returnSlots":1},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":9808,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":10048,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8382,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9737,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9318,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":10239,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9407,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7239,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:26116:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"187:148:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"204:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"215:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"197:6:33"},"nodeType":"YulFunctionCall","src":"197:21:33"},"nodeType":"YulExpressionStatement","src":"197:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"238:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"249:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:33"},"nodeType":"YulFunctionCall","src":"234:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"254:1:33","type":"","value":"4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"227:6:33"},"nodeType":"YulFunctionCall","src":"227:29:33"},"nodeType":"YulExpressionStatement","src":"227:29:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"276:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"287:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"272:3:33"},"nodeType":"YulFunctionCall","src":"272:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"292:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"265:6:33"},"nodeType":"YulFunctionCall","src":"265:29:33"},"nodeType":"YulExpressionStatement","src":"265:29:33"},{"nodeType":"YulAssignment","src":"303:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"315:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"326:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:33"},"nodeType":"YulFunctionCall","src":"311:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"303:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"164:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"178:4:33","type":""}],"src":"14:321:33"},{"body":{"nodeType":"YulBlock","src":"469:259:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"486:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"497:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"479:6:33"},"nodeType":"YulFunctionCall","src":"479:21:33"},"nodeType":"YulExpressionStatement","src":"479:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"520:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"531:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"516:3:33"},"nodeType":"YulFunctionCall","src":"516:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"536:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"509:6:33"},"nodeType":"YulFunctionCall","src":"509:34:33"},"nodeType":"YulExpressionStatement","src":"509:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"569:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"580:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"565:3:33"},"nodeType":"YulFunctionCall","src":"565:18:33"},{"name":"value0","nodeType":"YulIdentifier","src":"585:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"593:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"552:12:33"},"nodeType":"YulFunctionCall","src":"552:48:33"},"nodeType":"YulExpressionStatement","src":"552:48:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"624:9:33"},{"name":"value1","nodeType":"YulIdentifier","src":"635:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"620:3:33"},"nodeType":"YulFunctionCall","src":"620:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"644:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:33"},"nodeType":"YulFunctionCall","src":"616:31:33"},{"kind":"number","nodeType":"YulLiteral","src":"649:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"609:6:33"},"nodeType":"YulFunctionCall","src":"609:42:33"},"nodeType":"YulExpressionStatement","src":"609:42:33"},{"nodeType":"YulAssignment","src":"660:62:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"676:9:33"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"695:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"703:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"691:3:33"},"nodeType":"YulFunctionCall","src":"691:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"712:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"687:3:33"},"nodeType":"YulFunctionCall","src":"687:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:33"},"nodeType":"YulFunctionCall","src":"672:45:33"},{"kind":"number","nodeType":"YulLiteral","src":"719:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"668:3:33"},"nodeType":"YulFunctionCall","src":"668:54:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"660:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"430:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"441:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"449:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"460:4:33","type":""}],"src":"340:388:33"},{"body":{"nodeType":"YulBlock","src":"802:217:33","statements":[{"body":{"nodeType":"YulBlock","src":"848:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"857:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"860:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"850:6:33"},"nodeType":"YulFunctionCall","src":"850:12:33"},"nodeType":"YulExpressionStatement","src":"850:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"823:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"832:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"819:3:33"},"nodeType":"YulFunctionCall","src":"819:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"844:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"815:3:33"},"nodeType":"YulFunctionCall","src":"815:32:33"},"nodeType":"YulIf","src":"812:52:33"},{"nodeType":"YulVariableDeclaration","src":"873:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"899:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"886:12:33"},"nodeType":"YulFunctionCall","src":"886:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"877:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"973:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"982:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"985:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"975:6:33"},"nodeType":"YulFunctionCall","src":"975:12:33"},"nodeType":"YulExpressionStatement","src":"975:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"931:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"942:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"953:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"958:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"949:3:33"},"nodeType":"YulFunctionCall","src":"949:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"938:3:33"},"nodeType":"YulFunctionCall","src":"938:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"928:2:33"},"nodeType":"YulFunctionCall","src":"928:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"921:6:33"},"nodeType":"YulFunctionCall","src":"921:51:33"},"nodeType":"YulIf","src":"918:71:33"},{"nodeType":"YulAssignment","src":"998:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"1008:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"998:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"768:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"779:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"791:6:33","type":""}],"src":"733:286:33"},{"body":{"nodeType":"YulBlock","src":"1119:92:33","statements":[{"nodeType":"YulAssignment","src":"1129:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1141:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1152:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:33"},"nodeType":"YulFunctionCall","src":"1137:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1129:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1171:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1196:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1189:6:33"},"nodeType":"YulFunctionCall","src":"1189:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1182:6:33"},"nodeType":"YulFunctionCall","src":"1182:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1164:6:33"},"nodeType":"YulFunctionCall","src":"1164:41:33"},"nodeType":"YulExpressionStatement","src":"1164:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1088:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1099:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1110:4:33","type":""}],"src":"1024:187:33"},{"body":{"nodeType":"YulBlock","src":"1317:76:33","statements":[{"nodeType":"YulAssignment","src":"1327:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1339:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1350:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1335:3:33"},"nodeType":"YulFunctionCall","src":"1335:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1327:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1369:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"1380:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1362:6:33"},"nodeType":"YulFunctionCall","src":"1362:25:33"},"nodeType":"YulExpressionStatement","src":"1362:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1286:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1297:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1308:4:33","type":""}],"src":"1216:177:33"},{"body":{"nodeType":"YulBlock","src":"1447:124:33","statements":[{"nodeType":"YulAssignment","src":"1457:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1479:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1466:12:33"},"nodeType":"YulFunctionCall","src":"1466:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1457:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1549:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1558:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1561:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1551:6:33"},"nodeType":"YulFunctionCall","src":"1551:12:33"},"nodeType":"YulExpressionStatement","src":"1551:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1508:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1519:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1534:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1530:3:33"},"nodeType":"YulFunctionCall","src":"1530:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1526:3:33"},"nodeType":"YulFunctionCall","src":"1526:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1515:3:33"},"nodeType":"YulFunctionCall","src":"1515:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1505:2:33"},"nodeType":"YulFunctionCall","src":"1505:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1498:6:33"},"nodeType":"YulFunctionCall","src":"1498:50:33"},"nodeType":"YulIf","src":"1495:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1426:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1437:5:33","type":""}],"src":"1398:173:33"},{"body":{"nodeType":"YulBlock","src":"1608:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1625:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1632:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1637:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1628:3:33"},"nodeType":"YulFunctionCall","src":"1628:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1618:6:33"},"nodeType":"YulFunctionCall","src":"1618:31:33"},"nodeType":"YulExpressionStatement","src":"1618:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1665:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1668:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1658:6:33"},"nodeType":"YulFunctionCall","src":"1658:15:33"},"nodeType":"YulExpressionStatement","src":"1658:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1689:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1692:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1682:6:33"},"nodeType":"YulFunctionCall","src":"1682:15:33"},"nodeType":"YulExpressionStatement","src":"1682:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1576:127:33"},{"body":{"nodeType":"YulBlock","src":"1753:230:33","statements":[{"nodeType":"YulAssignment","src":"1763:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1779:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1773:5:33"},"nodeType":"YulFunctionCall","src":"1773:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1763:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1791:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1813:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1829:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1835:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1825:3:33"},"nodeType":"YulFunctionCall","src":"1825:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1844:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1840:3:33"},"nodeType":"YulFunctionCall","src":"1840:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1821:3:33"},"nodeType":"YulFunctionCall","src":"1821:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1809:3:33"},"nodeType":"YulFunctionCall","src":"1809:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1795:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1924:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1926:16:33"},"nodeType":"YulFunctionCall","src":"1926:18:33"},"nodeType":"YulExpressionStatement","src":"1926:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1867:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1879:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1864:2:33"},"nodeType":"YulFunctionCall","src":"1864:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1903:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1915:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1900:2:33"},"nodeType":"YulFunctionCall","src":"1900:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1861:2:33"},"nodeType":"YulFunctionCall","src":"1861:62:33"},"nodeType":"YulIf","src":"1858:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1962:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1966:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1955:6:33"},"nodeType":"YulFunctionCall","src":"1955:22:33"},"nodeType":"YulExpressionStatement","src":"1955:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1733:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1742:6:33","type":""}],"src":"1708:275:33"},{"body":{"nodeType":"YulBlock","src":"2045:129:33","statements":[{"body":{"nodeType":"YulBlock","src":"2089:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2091:16:33"},"nodeType":"YulFunctionCall","src":"2091:18:33"},"nodeType":"YulExpressionStatement","src":"2091:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2061:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2069:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2058:2:33"},"nodeType":"YulFunctionCall","src":"2058:30:33"},"nodeType":"YulIf","src":"2055:56:33"},{"nodeType":"YulAssignment","src":"2120:48:33","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2140:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2148:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2136:3:33"},"nodeType":"YulFunctionCall","src":"2136:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2157:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2153:3:33"},"nodeType":"YulFunctionCall","src":"2153:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2132:3:33"},"nodeType":"YulFunctionCall","src":"2132:29:33"},{"kind":"number","nodeType":"YulLiteral","src":"2163:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2128:3:33"},"nodeType":"YulFunctionCall","src":"2128:40:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2120:4:33"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2025:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2036:4:33","type":""}],"src":"1988:186:33"},{"body":{"nodeType":"YulBlock","src":"2231:410:33","statements":[{"body":{"nodeType":"YulBlock","src":"2280:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2289:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2292:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2282:6:33"},"nodeType":"YulFunctionCall","src":"2282:12:33"},"nodeType":"YulExpressionStatement","src":"2282:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2259:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2267:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2255:3:33"},"nodeType":"YulFunctionCall","src":"2255:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"2274:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2251:3:33"},"nodeType":"YulFunctionCall","src":"2251:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2244:6:33"},"nodeType":"YulFunctionCall","src":"2244:35:33"},"nodeType":"YulIf","src":"2241:55:33"},{"nodeType":"YulVariableDeclaration","src":"2305:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2328:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2315:12:33"},"nodeType":"YulFunctionCall","src":"2315:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2309:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2344:63:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2403:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"2375:27:33"},"nodeType":"YulFunctionCall","src":"2375:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2359:15:33"},"nodeType":"YulFunctionCall","src":"2359:48:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2348:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2423:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2432:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2416:6:33"},"nodeType":"YulFunctionCall","src":"2416:19:33"},"nodeType":"YulExpressionStatement","src":"2416:19:33"},{"body":{"nodeType":"YulBlock","src":"2483:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2492:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2495:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2485:6:33"},"nodeType":"YulFunctionCall","src":"2485:12:33"},"nodeType":"YulExpressionStatement","src":"2485:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2458:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2466:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2454:3:33"},"nodeType":"YulFunctionCall","src":"2454:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"2471:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2450:3:33"},"nodeType":"YulFunctionCall","src":"2450:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"2478:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2447:2:33"},"nodeType":"YulFunctionCall","src":"2447:35:33"},"nodeType":"YulIf","src":"2444:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2525:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"2534:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2521:3:33"},"nodeType":"YulFunctionCall","src":"2521:18:33"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2545:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2553:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2541:3:33"},"nodeType":"YulFunctionCall","src":"2541:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2560:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2508:12:33"},"nodeType":"YulFunctionCall","src":"2508:55:33"},"nodeType":"YulExpressionStatement","src":"2508:55:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2587:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2596:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2583:3:33"},"nodeType":"YulFunctionCall","src":"2583:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"2601:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2579:3:33"},"nodeType":"YulFunctionCall","src":"2579:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"2608:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2572:6:33"},"nodeType":"YulFunctionCall","src":"2572:38:33"},"nodeType":"YulExpressionStatement","src":"2572:38:33"},{"nodeType":"YulAssignment","src":"2619:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2628:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2619:5:33"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2205:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2213:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2221:5:33","type":""}],"src":"2179:462:33"},{"body":{"nodeType":"YulBlock","src":"2759:349:33","statements":[{"body":{"nodeType":"YulBlock","src":"2805:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2814:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2817:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2807:6:33"},"nodeType":"YulFunctionCall","src":"2807:12:33"},"nodeType":"YulExpressionStatement","src":"2807:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2780:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2776:3:33"},"nodeType":"YulFunctionCall","src":"2776:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2801:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2772:3:33"},"nodeType":"YulFunctionCall","src":"2772:32:33"},"nodeType":"YulIf","src":"2769:52:33"},{"nodeType":"YulAssignment","src":"2830:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2859:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2840:18:33"},"nodeType":"YulFunctionCall","src":"2840:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2830:6:33"}]},{"nodeType":"YulAssignment","src":"2878:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2905:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2916:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2901:3:33"},"nodeType":"YulFunctionCall","src":"2901:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2888:12:33"},"nodeType":"YulFunctionCall","src":"2888:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2878:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2929:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2960:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2971:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2956:3:33"},"nodeType":"YulFunctionCall","src":"2956:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2943:12:33"},"nodeType":"YulFunctionCall","src":"2943:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2933:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3018:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3027:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3030:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3020:6:33"},"nodeType":"YulFunctionCall","src":"3020:12:33"},"nodeType":"YulExpressionStatement","src":"3020:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2990:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2998:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2987:2:33"},"nodeType":"YulFunctionCall","src":"2987:30:33"},"nodeType":"YulIf","src":"2984:50:33"},{"nodeType":"YulAssignment","src":"3043:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3074:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"3085:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3070:3:33"},"nodeType":"YulFunctionCall","src":"3070:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3094:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3053:16:33"},"nodeType":"YulFunctionCall","src":"3053:49:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3043:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2709:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2720:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2732:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2740:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2748:6:33","type":""}],"src":"2646:462:33"},{"body":{"nodeType":"YulBlock","src":"3182:114:33","statements":[{"body":{"nodeType":"YulBlock","src":"3226:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3228:16:33"},"nodeType":"YulFunctionCall","src":"3228:18:33"},"nodeType":"YulExpressionStatement","src":"3228:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3198:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3206:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3195:2:33"},"nodeType":"YulFunctionCall","src":"3195:30:33"},"nodeType":"YulIf","src":"3192:56:33"},{"nodeType":"YulAssignment","src":"3257:33:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3273:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3276:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3269:3:33"},"nodeType":"YulFunctionCall","src":"3269:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"3285:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3265:3:33"},"nodeType":"YulFunctionCall","src":"3265:25:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3257:4:33"}]}]},"name":"array_allocation_size_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3162:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3173:4:33","type":""}],"src":"3113:183:33"},{"body":{"nodeType":"YulBlock","src":"3365:604:33","statements":[{"body":{"nodeType":"YulBlock","src":"3414:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3423:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3426:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3416:6:33"},"nodeType":"YulFunctionCall","src":"3416:12:33"},"nodeType":"YulExpressionStatement","src":"3416:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3393:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3401:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3389:3:33"},"nodeType":"YulFunctionCall","src":"3389:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3408:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3385:3:33"},"nodeType":"YulFunctionCall","src":"3385:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3378:6:33"},"nodeType":"YulFunctionCall","src":"3378:35:33"},"nodeType":"YulIf","src":"3375:55:33"},{"nodeType":"YulVariableDeclaration","src":"3439:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3462:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3449:12:33"},"nodeType":"YulFunctionCall","src":"3449:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3443:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3478:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3488:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3482:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3501:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3568:2:33"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"3528:39:33"},"nodeType":"YulFunctionCall","src":"3528:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3512:15:33"},"nodeType":"YulFunctionCall","src":"3512:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3505:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3581:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"3594:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3585:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3613:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3618:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3606:6:33"},"nodeType":"YulFunctionCall","src":"3606:15:33"},"nodeType":"YulExpressionStatement","src":"3606:15:33"},{"nodeType":"YulAssignment","src":"3630:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3641:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3646:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3637:3:33"},"nodeType":"YulFunctionCall","src":"3637:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3630:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3658:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3680:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3692:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3695:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3688:3:33"},"nodeType":"YulFunctionCall","src":"3688:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3676:3:33"},"nodeType":"YulFunctionCall","src":"3676:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3701:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3672:3:33"},"nodeType":"YulFunctionCall","src":"3672:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3662:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3732:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3741:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3744:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3734:6:33"},"nodeType":"YulFunctionCall","src":"3734:12:33"},"nodeType":"YulExpressionStatement","src":"3734:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3719:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3727:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3716:2:33"},"nodeType":"YulFunctionCall","src":"3716:15:33"},"nodeType":"YulIf","src":"3713:35:33"},{"nodeType":"YulVariableDeclaration","src":"3757:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3772:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3780:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3768:3:33"},"nodeType":"YulFunctionCall","src":"3768:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3761:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3848:92:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3869:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3893:3:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3874:18:33"},"nodeType":"YulFunctionCall","src":"3874:23:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3862:6:33"},"nodeType":"YulFunctionCall","src":"3862:36:33"},"nodeType":"YulExpressionStatement","src":"3862:36:33"},{"nodeType":"YulAssignment","src":"3911:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3922:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3927:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3918:3:33"},"nodeType":"YulFunctionCall","src":"3918:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3911:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3803:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3808:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3800:2:33"},"nodeType":"YulFunctionCall","src":"3800:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3816:23:33","statements":[{"nodeType":"YulAssignment","src":"3818:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3829:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3834:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3825:3:33"},"nodeType":"YulFunctionCall","src":"3825:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3818:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3796:3:33","statements":[]},"src":"3792:148:33"},{"nodeType":"YulAssignment","src":"3949:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3958:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3949:5:33"}]}]},"name":"abi_decode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3339:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3347:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3355:5:33","type":""}],"src":"3301:668:33"},{"body":{"nodeType":"YulBlock","src":"4038:598:33","statements":[{"body":{"nodeType":"YulBlock","src":"4087:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4096:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4099:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4089:6:33"},"nodeType":"YulFunctionCall","src":"4089:12:33"},"nodeType":"YulExpressionStatement","src":"4089:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4066:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4074:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4062:3:33"},"nodeType":"YulFunctionCall","src":"4062:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"4081:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4058:3:33"},"nodeType":"YulFunctionCall","src":"4058:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4051:6:33"},"nodeType":"YulFunctionCall","src":"4051:35:33"},"nodeType":"YulIf","src":"4048:55:33"},{"nodeType":"YulVariableDeclaration","src":"4112:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4135:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4122:12:33"},"nodeType":"YulFunctionCall","src":"4122:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4116:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4151:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4161:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4155:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4174:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4241:2:33"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"4201:39:33"},"nodeType":"YulFunctionCall","src":"4201:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4185:15:33"},"nodeType":"YulFunctionCall","src":"4185:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4178:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4254:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"4267:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4258:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4286:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4291:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4279:6:33"},"nodeType":"YulFunctionCall","src":"4279:15:33"},"nodeType":"YulExpressionStatement","src":"4279:15:33"},{"nodeType":"YulAssignment","src":"4303:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4314:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4319:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4310:3:33"},"nodeType":"YulFunctionCall","src":"4310:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4303:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"4331:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4353:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4365:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"4368:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4361:3:33"},"nodeType":"YulFunctionCall","src":"4361:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4349:3:33"},"nodeType":"YulFunctionCall","src":"4349:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4374:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4345:3:33"},"nodeType":"YulFunctionCall","src":"4345:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4335:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4405:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4414:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4417:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4407:6:33"},"nodeType":"YulFunctionCall","src":"4407:12:33"},"nodeType":"YulExpressionStatement","src":"4407:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4392:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"4400:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4389:2:33"},"nodeType":"YulFunctionCall","src":"4389:15:33"},"nodeType":"YulIf","src":"4386:35:33"},{"nodeType":"YulVariableDeclaration","src":"4430:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4445:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4453:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4441:3:33"},"nodeType":"YulFunctionCall","src":"4441:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4434:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4521:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4542:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4560:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4547:12:33"},"nodeType":"YulFunctionCall","src":"4547:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4535:6:33"},"nodeType":"YulFunctionCall","src":"4535:30:33"},"nodeType":"YulExpressionStatement","src":"4535:30:33"},{"nodeType":"YulAssignment","src":"4578:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4589:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4594:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4585:3:33"},"nodeType":"YulFunctionCall","src":"4585:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4578:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4476:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4481:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4473:2:33"},"nodeType":"YulFunctionCall","src":"4473:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4489:23:33","statements":[{"nodeType":"YulAssignment","src":"4491:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4502:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4507:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4498:3:33"},"nodeType":"YulFunctionCall","src":"4498:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4491:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4469:3:33","statements":[]},"src":"4465:142:33"},{"nodeType":"YulAssignment","src":"4616:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"4625:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4616:5:33"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4012:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"4020:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4028:5:33","type":""}],"src":"3974:662:33"},{"body":{"nodeType":"YulBlock","src":"4687:114:33","statements":[{"nodeType":"YulAssignment","src":"4697:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4719:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4706:12:33"},"nodeType":"YulFunctionCall","src":"4706:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4697:5:33"}]},{"body":{"nodeType":"YulBlock","src":"4779:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4788:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4791:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4781:6:33"},"nodeType":"YulFunctionCall","src":"4781:12:33"},"nodeType":"YulExpressionStatement","src":"4781:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4748:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4769:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4762:6:33"},"nodeType":"YulFunctionCall","src":"4762:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4755:6:33"},"nodeType":"YulFunctionCall","src":"4755:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4745:2:33"},"nodeType":"YulFunctionCall","src":"4745:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4738:6:33"},"nodeType":"YulFunctionCall","src":"4738:40:33"},"nodeType":"YulIf","src":"4735:60:33"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4666:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4677:5:33","type":""}],"src":"4641:160:33"},{"body":{"nodeType":"YulBlock","src":"4867:601:33","statements":[{"body":{"nodeType":"YulBlock","src":"4916:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4925:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4928:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4918:6:33"},"nodeType":"YulFunctionCall","src":"4918:12:33"},"nodeType":"YulExpressionStatement","src":"4918:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4895:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:33"},"nodeType":"YulFunctionCall","src":"4891:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"4910:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4887:3:33"},"nodeType":"YulFunctionCall","src":"4887:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4880:6:33"},"nodeType":"YulFunctionCall","src":"4880:35:33"},"nodeType":"YulIf","src":"4877:55:33"},{"nodeType":"YulVariableDeclaration","src":"4941:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4964:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4951:12:33"},"nodeType":"YulFunctionCall","src":"4951:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4945:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4980:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4990:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4984:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5003:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5070:2:33"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"5030:39:33"},"nodeType":"YulFunctionCall","src":"5030:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"5014:15:33"},"nodeType":"YulFunctionCall","src":"5014:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5007:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5083:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"5096:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5087:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5115:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5120:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5108:6:33"},"nodeType":"YulFunctionCall","src":"5108:15:33"},"nodeType":"YulExpressionStatement","src":"5108:15:33"},{"nodeType":"YulAssignment","src":"5132:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5143:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5148:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5139:3:33"},"nodeType":"YulFunctionCall","src":"5139:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5132:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"5160:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5182:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5194:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"5197:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5190:3:33"},"nodeType":"YulFunctionCall","src":"5190:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5178:3:33"},"nodeType":"YulFunctionCall","src":"5178:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5203:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5174:3:33"},"nodeType":"YulFunctionCall","src":"5174:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5164:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5234:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5243:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5246:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5236:6:33"},"nodeType":"YulFunctionCall","src":"5236:12:33"},"nodeType":"YulExpressionStatement","src":"5236:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5221:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"5229:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5218:2:33"},"nodeType":"YulFunctionCall","src":"5218:15:33"},"nodeType":"YulIf","src":"5215:35:33"},{"nodeType":"YulVariableDeclaration","src":"5259:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5274:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5282:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5270:3:33"},"nodeType":"YulFunctionCall","src":"5270:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5263:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5350:89:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5371:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5392:3:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"5376:15:33"},"nodeType":"YulFunctionCall","src":"5376:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5364:6:33"},"nodeType":"YulFunctionCall","src":"5364:33:33"},"nodeType":"YulExpressionStatement","src":"5364:33:33"},{"nodeType":"YulAssignment","src":"5410:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5421:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5426:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5417:3:33"},"nodeType":"YulFunctionCall","src":"5417:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5410:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5305:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5310:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5302:2:33"},"nodeType":"YulFunctionCall","src":"5302:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5318:23:33","statements":[{"nodeType":"YulAssignment","src":"5320:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5331:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5336:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5327:3:33"},"nodeType":"YulFunctionCall","src":"5327:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5320:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"5298:3:33","statements":[]},"src":"5294:145:33"},{"nodeType":"YulAssignment","src":"5448:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5457:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5448:5:33"}]}]},"name":"abi_decode_array_bool_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4841:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"4849:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4857:5:33","type":""}],"src":"4806:662:33"},{"body":{"nodeType":"YulBlock","src":"5535:824:33","statements":[{"body":{"nodeType":"YulBlock","src":"5584:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5593:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5596:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5586:6:33"},"nodeType":"YulFunctionCall","src":"5586:12:33"},"nodeType":"YulExpressionStatement","src":"5586:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5563:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5571:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5559:3:33"},"nodeType":"YulFunctionCall","src":"5559:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"5578:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5555:3:33"},"nodeType":"YulFunctionCall","src":"5555:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5548:6:33"},"nodeType":"YulFunctionCall","src":"5548:35:33"},"nodeType":"YulIf","src":"5545:55:33"},{"nodeType":"YulVariableDeclaration","src":"5609:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5632:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5619:12:33"},"nodeType":"YulFunctionCall","src":"5619:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5613:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5648:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5658:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5652:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5671:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5738:2:33"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"5698:39:33"},"nodeType":"YulFunctionCall","src":"5698:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"5682:15:33"},"nodeType":"YulFunctionCall","src":"5682:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5675:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5751:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"5764:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5755:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5783:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5788:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5776:6:33"},"nodeType":"YulFunctionCall","src":"5776:15:33"},"nodeType":"YulExpressionStatement","src":"5776:15:33"},{"nodeType":"YulAssignment","src":"5800:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5811:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5816:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5807:3:33"},"nodeType":"YulFunctionCall","src":"5807:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5800:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"5828:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5850:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5862:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"5865:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5858:3:33"},"nodeType":"YulFunctionCall","src":"5858:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5846:3:33"},"nodeType":"YulFunctionCall","src":"5846:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5871:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5842:3:33"},"nodeType":"YulFunctionCall","src":"5842:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5832:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5902:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5911:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5914:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5904:6:33"},"nodeType":"YulFunctionCall","src":"5904:12:33"},"nodeType":"YulExpressionStatement","src":"5904:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5889:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"5897:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5886:2:33"},"nodeType":"YulFunctionCall","src":"5886:15:33"},"nodeType":"YulIf","src":"5883:35:33"},{"nodeType":"YulVariableDeclaration","src":"5927:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5942:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5950:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5938:3:33"},"nodeType":"YulFunctionCall","src":"5938:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5931:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6018:312:33","statements":[{"nodeType":"YulVariableDeclaration","src":"6032:36:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6064:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6051:12:33"},"nodeType":"YulFunctionCall","src":"6051:17:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"6036:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6132:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"6150:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6160:1:33","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6154:2:33","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6185:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"6189:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6178:6:33"},"nodeType":"YulFunctionCall","src":"6178:14:33"},"nodeType":"YulExpressionStatement","src":"6178:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"6087:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"6100:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6084:2:33"},"nodeType":"YulFunctionCall","src":"6084:35:33"},"nodeType":"YulIf","src":"6081:125:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6226:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6256:6:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"6264:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6252:3:33"},"nodeType":"YulFunctionCall","src":"6252:24:33"},{"name":"_2","nodeType":"YulIdentifier","src":"6278:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6248:3:33"},"nodeType":"YulFunctionCall","src":"6248:33:33"},{"name":"end","nodeType":"YulIdentifier","src":"6283:3:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6231:16:33"},"nodeType":"YulFunctionCall","src":"6231:56:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6219:6:33"},"nodeType":"YulFunctionCall","src":"6219:69:33"},"nodeType":"YulExpressionStatement","src":"6219:69:33"},{"nodeType":"YulAssignment","src":"6301:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6312:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"6317:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6308:3:33"},"nodeType":"YulFunctionCall","src":"6308:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6301:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5973:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5978:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5970:2:33"},"nodeType":"YulFunctionCall","src":"5970:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5986:23:33","statements":[{"nodeType":"YulAssignment","src":"5988:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5999:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"6004:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5995:3:33"},"nodeType":"YulFunctionCall","src":"5995:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5988:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"5966:3:33","statements":[]},"src":"5962:368:33"},{"nodeType":"YulAssignment","src":"6339:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"6348:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6339:5:33"}]}]},"name":"abi_decode_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5509:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"5517:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5525:5:33","type":""}],"src":"5473:886:33"},{"body":{"nodeType":"YulBlock","src":"6633:1007:33","statements":[{"body":{"nodeType":"YulBlock","src":"6680:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6689:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6692:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6682:6:33"},"nodeType":"YulFunctionCall","src":"6682:12:33"},"nodeType":"YulExpressionStatement","src":"6682:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6654:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6663:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6650:3:33"},"nodeType":"YulFunctionCall","src":"6650:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6675:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6646:3:33"},"nodeType":"YulFunctionCall","src":"6646:33:33"},"nodeType":"YulIf","src":"6643:53:33"},{"nodeType":"YulVariableDeclaration","src":"6705:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6732:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6719:12:33"},"nodeType":"YulFunctionCall","src":"6719:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6709:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6751:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6761:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6755:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6806:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6815:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6818:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6808:6:33"},"nodeType":"YulFunctionCall","src":"6808:12:33"},"nodeType":"YulExpressionStatement","src":"6808:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6794:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6802:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6791:2:33"},"nodeType":"YulFunctionCall","src":"6791:14:33"},"nodeType":"YulIf","src":"6788:34:33"},{"nodeType":"YulAssignment","src":"6831:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6874:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"6885:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6870:3:33"},"nodeType":"YulFunctionCall","src":"6870:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6894:7:33"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"6841:28:33"},"nodeType":"YulFunctionCall","src":"6841:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6831:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"6911:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6944:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6955:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6940:3:33"},"nodeType":"YulFunctionCall","src":"6940:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6927:12:33"},"nodeType":"YulFunctionCall","src":"6927:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6915:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6988:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6997:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7000:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6990:6:33"},"nodeType":"YulFunctionCall","src":"6990:12:33"},"nodeType":"YulExpressionStatement","src":"6990:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6974:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6984:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6971:2:33"},"nodeType":"YulFunctionCall","src":"6971:16:33"},"nodeType":"YulIf","src":"6968:36:33"},{"nodeType":"YulAssignment","src":"7013:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7056:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7067:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7052:3:33"},"nodeType":"YulFunctionCall","src":"7052:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7078:7:33"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"7023:28:33"},"nodeType":"YulFunctionCall","src":"7023:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7013:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"7095:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7128:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7139:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7124:3:33"},"nodeType":"YulFunctionCall","src":"7124:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7111:12:33"},"nodeType":"YulFunctionCall","src":"7111:32:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"7099:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7172:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7181:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7184:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7174:6:33"},"nodeType":"YulFunctionCall","src":"7174:12:33"},"nodeType":"YulExpressionStatement","src":"7174:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"7158:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7168:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7155:2:33"},"nodeType":"YulFunctionCall","src":"7155:16:33"},"nodeType":"YulIf","src":"7152:36:33"},{"nodeType":"YulAssignment","src":"7197:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7240:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"7251:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7236:3:33"},"nodeType":"YulFunctionCall","src":"7236:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7262:7:33"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7207:28:33"},"nodeType":"YulFunctionCall","src":"7207:63:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7197:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"7279:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7312:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7323:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7308:3:33"},"nodeType":"YulFunctionCall","src":"7308:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7295:12:33"},"nodeType":"YulFunctionCall","src":"7295:32:33"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"7283:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7356:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7365:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7368:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7358:6:33"},"nodeType":"YulFunctionCall","src":"7358:12:33"},"nodeType":"YulExpressionStatement","src":"7358:12:33"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"7342:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7352:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7339:2:33"},"nodeType":"YulFunctionCall","src":"7339:16:33"},"nodeType":"YulIf","src":"7336:36:33"},{"nodeType":"YulAssignment","src":"7381:70:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7421:9:33"},{"name":"offset_3","nodeType":"YulIdentifier","src":"7432:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7417:3:33"},"nodeType":"YulFunctionCall","src":"7417:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7443:7:33"}],"functionName":{"name":"abi_decode_array_bool_dyn","nodeType":"YulIdentifier","src":"7391:25:33"},"nodeType":"YulFunctionCall","src":"7391:60:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7381:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"7460:49:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7493:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7504:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7489:3:33"},"nodeType":"YulFunctionCall","src":"7489:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7476:12:33"},"nodeType":"YulFunctionCall","src":"7476:33:33"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"7464:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7538:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7547:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7550:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7540:6:33"},"nodeType":"YulFunctionCall","src":"7540:12:33"},"nodeType":"YulExpressionStatement","src":"7540:12:33"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"7524:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7534:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7521:2:33"},"nodeType":"YulFunctionCall","src":"7521:16:33"},"nodeType":"YulIf","src":"7518:36:33"},{"nodeType":"YulAssignment","src":"7563:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7604:9:33"},{"name":"offset_4","nodeType":"YulIdentifier","src":"7615:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7600:3:33"},"nodeType":"YulFunctionCall","src":"7600:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7626:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"7573:26:33"},"nodeType":"YulFunctionCall","src":"7573:61:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7563:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6567:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6578:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6590:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6598:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6606:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6614:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6622:6:33","type":""}],"src":"6364:1276:33"},{"body":{"nodeType":"YulBlock","src":"7772:410:33","statements":[{"body":{"nodeType":"YulBlock","src":"7819:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7828:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7831:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7821:6:33"},"nodeType":"YulFunctionCall","src":"7821:12:33"},"nodeType":"YulExpressionStatement","src":"7821:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7793:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"7802:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7789:3:33"},"nodeType":"YulFunctionCall","src":"7789:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"7814:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7785:3:33"},"nodeType":"YulFunctionCall","src":"7785:33:33"},"nodeType":"YulIf","src":"7782:53:33"},{"nodeType":"YulAssignment","src":"7844:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7873:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7854:18:33"},"nodeType":"YulFunctionCall","src":"7854:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7844:6:33"}]},{"nodeType":"YulAssignment","src":"7892:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7925:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7936:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7921:3:33"},"nodeType":"YulFunctionCall","src":"7921:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7902:18:33"},"nodeType":"YulFunctionCall","src":"7902:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7892:6:33"}]},{"nodeType":"YulAssignment","src":"7949:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7979:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7990:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7975:3:33"},"nodeType":"YulFunctionCall","src":"7975:18:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"7959:15:33"},"nodeType":"YulFunctionCall","src":"7959:35:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7949:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"8003:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8034:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8045:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8030:3:33"},"nodeType":"YulFunctionCall","src":"8030:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8017:12:33"},"nodeType":"YulFunctionCall","src":"8017:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8007:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8092:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8101:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8104:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8094:6:33"},"nodeType":"YulFunctionCall","src":"8094:12:33"},"nodeType":"YulExpressionStatement","src":"8094:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8064:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8072:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8061:2:33"},"nodeType":"YulFunctionCall","src":"8061:30:33"},"nodeType":"YulIf","src":"8058:50:33"},{"nodeType":"YulAssignment","src":"8117:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8148:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"8159:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8144:3:33"},"nodeType":"YulFunctionCall","src":"8144:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8168:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8127:16:33"},"nodeType":"YulFunctionCall","src":"8127:49:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8117:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_boolt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7714:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7725:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7737:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7745:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7753:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7761:6:33","type":""}],"src":"7645:537:33"},{"body":{"nodeType":"YulBlock","src":"8284:87:33","statements":[{"nodeType":"YulAssignment","src":"8294:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8306:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8317:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8302:3:33"},"nodeType":"YulFunctionCall","src":"8302:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8294:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8336:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8351:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8359:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8347:3:33"},"nodeType":"YulFunctionCall","src":"8347:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8329:6:33"},"nodeType":"YulFunctionCall","src":"8329:36:33"},"nodeType":"YulExpressionStatement","src":"8329:36:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8253:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8264:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8275:4:33","type":""}],"src":"8187:184:33"},{"body":{"nodeType":"YulBlock","src":"8463:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"8509:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8518:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8521:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8511:6:33"},"nodeType":"YulFunctionCall","src":"8511:12:33"},"nodeType":"YulExpressionStatement","src":"8511:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8484:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8493:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8480:3:33"},"nodeType":"YulFunctionCall","src":"8480:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8505:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8476:3:33"},"nodeType":"YulFunctionCall","src":"8476:32:33"},"nodeType":"YulIf","src":"8473:52:33"},{"nodeType":"YulAssignment","src":"8534:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8563:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8544:18:33"},"nodeType":"YulFunctionCall","src":"8544:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8534:6:33"}]},{"nodeType":"YulAssignment","src":"8582:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8609:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8620:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8605:3:33"},"nodeType":"YulFunctionCall","src":"8605:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8592:12:33"},"nodeType":"YulFunctionCall","src":"8592:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8582:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8421:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8432:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8444:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8452:6:33","type":""}],"src":"8376:254:33"},{"body":{"nodeType":"YulBlock","src":"8705:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"8751:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8760:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8763:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8753:6:33"},"nodeType":"YulFunctionCall","src":"8753:12:33"},"nodeType":"YulExpressionStatement","src":"8753:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8726:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8735:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8722:3:33"},"nodeType":"YulFunctionCall","src":"8722:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8747:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8718:3:33"},"nodeType":"YulFunctionCall","src":"8718:32:33"},"nodeType":"YulIf","src":"8715:52:33"},{"nodeType":"YulAssignment","src":"8776:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8799:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8786:12:33"},"nodeType":"YulFunctionCall","src":"8786:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8776:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8671:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8682:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8694:6:33","type":""}],"src":"8635:180:33"},{"body":{"nodeType":"YulBlock","src":"8886:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8896:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8905:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8900:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8965:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8990:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"8995:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8986:3:33"},"nodeType":"YulFunctionCall","src":"8986:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9009:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"9014:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9005:3:33"},"nodeType":"YulFunctionCall","src":"9005:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8999:5:33"},"nodeType":"YulFunctionCall","src":"8999:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8979:6:33"},"nodeType":"YulFunctionCall","src":"8979:39:33"},"nodeType":"YulExpressionStatement","src":"8979:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8926:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"8929:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8923:2:33"},"nodeType":"YulFunctionCall","src":"8923:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8937:19:33","statements":[{"nodeType":"YulAssignment","src":"8939:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8948:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"8951:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8944:3:33"},"nodeType":"YulFunctionCall","src":"8944:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8939:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"8919:3:33","statements":[]},"src":"8915:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9048:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"9053:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9044:3:33"},"nodeType":"YulFunctionCall","src":"9044:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"9062:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9037:6:33"},"nodeType":"YulFunctionCall","src":"9037:27:33"},"nodeType":"YulExpressionStatement","src":"9037:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8864:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8869:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"8874:6:33","type":""}],"src":"8820:250:33"},{"body":{"nodeType":"YulBlock","src":"9124:221:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9134:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9154:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9148:5:33"},"nodeType":"YulFunctionCall","src":"9148:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9138:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9176:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"9181:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9169:6:33"},"nodeType":"YulFunctionCall","src":"9169:19:33"},"nodeType":"YulExpressionStatement","src":"9169:19:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9236:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"9243:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9232:3:33"},"nodeType":"YulFunctionCall","src":"9232:16:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9254:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"9259:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9250:3:33"},"nodeType":"YulFunctionCall","src":"9250:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"9266:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9197:34:33"},"nodeType":"YulFunctionCall","src":"9197:76:33"},"nodeType":"YulExpressionStatement","src":"9197:76:33"},{"nodeType":"YulAssignment","src":"9282:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9297:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9310:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9318:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9306:3:33"},"nodeType":"YulFunctionCall","src":"9306:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9327:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9323:3:33"},"nodeType":"YulFunctionCall","src":"9323:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9302:3:33"},"nodeType":"YulFunctionCall","src":"9302:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9293:3:33"},"nodeType":"YulFunctionCall","src":"9293:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"9334:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9289:3:33"},"nodeType":"YulFunctionCall","src":"9289:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9282:3:33"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9101:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9108:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9116:3:33","type":""}],"src":"9075:270:33"},{"body":{"nodeType":"YulBlock","src":"9469:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9486:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9497:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9479:6:33"},"nodeType":"YulFunctionCall","src":"9479:21:33"},"nodeType":"YulExpressionStatement","src":"9479:21:33"},{"nodeType":"YulAssignment","src":"9509:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9534:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9546:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9557:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9542:3:33"},"nodeType":"YulFunctionCall","src":"9542:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"9517:16:33"},"nodeType":"YulFunctionCall","src":"9517:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9509:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9438:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9449:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9460:4:33","type":""}],"src":"9350:217:33"},{"body":{"nodeType":"YulBlock","src":"9659:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"9705:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9714:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9717:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9707:6:33"},"nodeType":"YulFunctionCall","src":"9707:12:33"},"nodeType":"YulExpressionStatement","src":"9707:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9680:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"9689:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9676:3:33"},"nodeType":"YulFunctionCall","src":"9676:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"9701:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9672:3:33"},"nodeType":"YulFunctionCall","src":"9672:32:33"},"nodeType":"YulIf","src":"9669:52:33"},{"nodeType":"YulAssignment","src":"9730:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9759:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9740:18:33"},"nodeType":"YulFunctionCall","src":"9740:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9730:6:33"}]},{"nodeType":"YulAssignment","src":"9778:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9811:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9822:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9807:3:33"},"nodeType":"YulFunctionCall","src":"9807:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9788:18:33"},"nodeType":"YulFunctionCall","src":"9788:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9778:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9617:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9628:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9640:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9648:6:33","type":""}],"src":"9572:260:33"},{"body":{"nodeType":"YulBlock","src":"9953:510:33","statements":[{"body":{"nodeType":"YulBlock","src":"9999:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10008:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10011:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10001:6:33"},"nodeType":"YulFunctionCall","src":"10001:12:33"},"nodeType":"YulExpressionStatement","src":"10001:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9974:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9970:3:33"},"nodeType":"YulFunctionCall","src":"9970:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"9995:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9966:3:33"},"nodeType":"YulFunctionCall","src":"9966:32:33"},"nodeType":"YulIf","src":"9963:52:33"},{"nodeType":"YulVariableDeclaration","src":"10024:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10051:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10038:12:33"},"nodeType":"YulFunctionCall","src":"10038:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10028:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10070:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10080:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10074:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10125:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10134:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10137:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10127:6:33"},"nodeType":"YulFunctionCall","src":"10127:12:33"},"nodeType":"YulExpressionStatement","src":"10127:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10113:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10121:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10110:2:33"},"nodeType":"YulFunctionCall","src":"10110:14:33"},"nodeType":"YulIf","src":"10107:34:33"},{"nodeType":"YulVariableDeclaration","src":"10150:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10164:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"10175:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10160:3:33"},"nodeType":"YulFunctionCall","src":"10160:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10154:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10230:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10239:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10242:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10232:6:33"},"nodeType":"YulFunctionCall","src":"10232:12:33"},"nodeType":"YulExpressionStatement","src":"10232:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10209:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"10213:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10205:3:33"},"nodeType":"YulFunctionCall","src":"10205:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10220:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10201:3:33"},"nodeType":"YulFunctionCall","src":"10201:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10194:6:33"},"nodeType":"YulFunctionCall","src":"10194:35:33"},"nodeType":"YulIf","src":"10191:55:33"},{"nodeType":"YulVariableDeclaration","src":"10255:30:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10282:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10269:12:33"},"nodeType":"YulFunctionCall","src":"10269:16:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10259:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10312:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10321:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10324:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10314:6:33"},"nodeType":"YulFunctionCall","src":"10314:12:33"},"nodeType":"YulExpressionStatement","src":"10314:12:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10300:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10308:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10297:2:33"},"nodeType":"YulFunctionCall","src":"10297:14:33"},"nodeType":"YulIf","src":"10294:34:33"},{"body":{"nodeType":"YulBlock","src":"10386:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10395:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10398:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10388:6:33"},"nodeType":"YulFunctionCall","src":"10388:12:33"},"nodeType":"YulExpressionStatement","src":"10388:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10351:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10359:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10362:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10355:3:33"},"nodeType":"YulFunctionCall","src":"10355:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10347:3:33"},"nodeType":"YulFunctionCall","src":"10347:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"10372:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10343:3:33"},"nodeType":"YulFunctionCall","src":"10343:32:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10377:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10340:2:33"},"nodeType":"YulFunctionCall","src":"10340:45:33"},"nodeType":"YulIf","src":"10337:65:33"},{"nodeType":"YulAssignment","src":"10411:21:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10425:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"10429:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10421:3:33"},"nodeType":"YulFunctionCall","src":"10421:11:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10411:6:33"}]},{"nodeType":"YulAssignment","src":"10441:16:33","value":{"name":"length","nodeType":"YulIdentifier","src":"10451:6:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10441:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9911:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9922:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9934:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9942:6:33","type":""}],"src":"9837:626:33"},{"body":{"nodeType":"YulBlock","src":"10637:631:33","statements":[{"nodeType":"YulVariableDeclaration","src":"10647:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10657:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10651:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10668:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10686:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10697:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10682:3:33"},"nodeType":"YulFunctionCall","src":"10682:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"10672:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10716:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10727:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10709:6:33"},"nodeType":"YulFunctionCall","src":"10709:21:33"},"nodeType":"YulExpressionStatement","src":"10709:21:33"},{"nodeType":"YulVariableDeclaration","src":"10739:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"10750:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"10743:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10765:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10785:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10779:5:33"},"nodeType":"YulFunctionCall","src":"10779:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10769:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10808:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"10816:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10801:6:33"},"nodeType":"YulFunctionCall","src":"10801:22:33"},"nodeType":"YulExpressionStatement","src":"10801:22:33"},{"nodeType":"YulAssignment","src":"10832:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10843:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10854:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10839:3:33"},"nodeType":"YulFunctionCall","src":"10839:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10832:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"10866:53:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10888:9:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10903:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10906:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10899:3:33"},"nodeType":"YulFunctionCall","src":"10899:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10884:3:33"},"nodeType":"YulFunctionCall","src":"10884:30:33"},{"kind":"number","nodeType":"YulLiteral","src":"10916:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10880:3:33"},"nodeType":"YulFunctionCall","src":"10880:39:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"10870:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10928:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10946:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10954:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10942:3:33"},"nodeType":"YulFunctionCall","src":"10942:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10932:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10966:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10975:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10970:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"11034:205:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11055:3:33"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11068:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11076:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11064:3:33"},"nodeType":"YulFunctionCall","src":"11064:22:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11092:2:33","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11088:3:33"},"nodeType":"YulFunctionCall","src":"11088:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11060:3:33"},"nodeType":"YulFunctionCall","src":"11060:36:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11048:6:33"},"nodeType":"YulFunctionCall","src":"11048:49:33"},"nodeType":"YulExpressionStatement","src":"11048:49:33"},{"nodeType":"YulAssignment","src":"11110:49:33","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11143:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11137:5:33"},"nodeType":"YulFunctionCall","src":"11137:13:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"11152:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"11120:16:33"},"nodeType":"YulFunctionCall","src":"11120:39:33"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11110:6:33"}]},{"nodeType":"YulAssignment","src":"11172:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11186:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11194:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11182:3:33"},"nodeType":"YulFunctionCall","src":"11182:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11172:6:33"}]},{"nodeType":"YulAssignment","src":"11210:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11221:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11226:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11217:3:33"},"nodeType":"YulFunctionCall","src":"11217:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11210:3:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10996:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"10999:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10993:2:33"},"nodeType":"YulFunctionCall","src":"10993:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11007:18:33","statements":[{"nodeType":"YulAssignment","src":"11009:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11018:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"11021:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11014:3:33"},"nodeType":"YulFunctionCall","src":"11014:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11009:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"10989:3:33","statements":[]},"src":"10985:254:33"},{"nodeType":"YulAssignment","src":"11248:14:33","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"11256:6:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11248:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10606:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10617:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10628:4:33","type":""}],"src":"10468:800:33"},{"body":{"nodeType":"YulBlock","src":"11343:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"11389:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11398:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11401:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11391:6:33"},"nodeType":"YulFunctionCall","src":"11391:12:33"},"nodeType":"YulExpressionStatement","src":"11391:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11364:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11373:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11360:3:33"},"nodeType":"YulFunctionCall","src":"11360:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11385:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11356:3:33"},"nodeType":"YulFunctionCall","src":"11356:32:33"},"nodeType":"YulIf","src":"11353:52:33"},{"nodeType":"YulAssignment","src":"11414:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11443:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11424:18:33"},"nodeType":"YulFunctionCall","src":"11424:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11414:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11309:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11320:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11332:6:33","type":""}],"src":"11273:186:33"},{"body":{"nodeType":"YulBlock","src":"11608:462:33","statements":[{"body":{"nodeType":"YulBlock","src":"11655:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11664:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11667:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11657:6:33"},"nodeType":"YulFunctionCall","src":"11657:12:33"},"nodeType":"YulExpressionStatement","src":"11657:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11629:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11638:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11625:3:33"},"nodeType":"YulFunctionCall","src":"11625:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11650:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11621:3:33"},"nodeType":"YulFunctionCall","src":"11621:33:33"},"nodeType":"YulIf","src":"11618:53:33"},{"nodeType":"YulAssignment","src":"11680:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11709:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11690:18:33"},"nodeType":"YulFunctionCall","src":"11690:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11680:6:33"}]},{"nodeType":"YulAssignment","src":"11728:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11761:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11772:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11757:3:33"},"nodeType":"YulFunctionCall","src":"11757:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11738:18:33"},"nodeType":"YulFunctionCall","src":"11738:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11728:6:33"}]},{"nodeType":"YulAssignment","src":"11785:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11812:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11823:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11808:3:33"},"nodeType":"YulFunctionCall","src":"11808:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11795:12:33"},"nodeType":"YulFunctionCall","src":"11795:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11785:6:33"}]},{"nodeType":"YulAssignment","src":"11836:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11866:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11877:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11862:3:33"},"nodeType":"YulFunctionCall","src":"11862:18:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"11846:15:33"},"nodeType":"YulFunctionCall","src":"11846:35:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11836:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"11890:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11921:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11932:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11917:3:33"},"nodeType":"YulFunctionCall","src":"11917:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11904:12:33"},"nodeType":"YulFunctionCall","src":"11904:33:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11894:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"11980:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11989:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11992:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11982:6:33"},"nodeType":"YulFunctionCall","src":"11982:12:33"},"nodeType":"YulExpressionStatement","src":"11982:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11952:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11960:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11949:2:33"},"nodeType":"YulFunctionCall","src":"11949:30:33"},"nodeType":"YulIf","src":"11946:50:33"},{"nodeType":"YulAssignment","src":"12005:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12036:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12047:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12032:3:33"},"nodeType":"YulFunctionCall","src":"12032:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12056:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12015:16:33"},"nodeType":"YulFunctionCall","src":"12015:49:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12005:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_boolt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11542:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11553:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11565:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11573:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11581:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11589:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11597:6:33","type":""}],"src":"11464:606:33"},{"body":{"nodeType":"YulBlock","src":"12205:407:33","statements":[{"body":{"nodeType":"YulBlock","src":"12252:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12261:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12264:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12254:6:33"},"nodeType":"YulFunctionCall","src":"12254:12:33"},"nodeType":"YulExpressionStatement","src":"12254:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12226:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12235:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12222:3:33"},"nodeType":"YulFunctionCall","src":"12222:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12247:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12218:3:33"},"nodeType":"YulFunctionCall","src":"12218:33:33"},"nodeType":"YulIf","src":"12215:53:33"},{"nodeType":"YulAssignment","src":"12277:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12306:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"12287:18:33"},"nodeType":"YulFunctionCall","src":"12287:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12277:6:33"}]},{"nodeType":"YulAssignment","src":"12325:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12358:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12369:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12354:3:33"},"nodeType":"YulFunctionCall","src":"12354:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"12335:18:33"},"nodeType":"YulFunctionCall","src":"12335:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12325:6:33"}]},{"nodeType":"YulAssignment","src":"12382:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12409:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12420:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12405:3:33"},"nodeType":"YulFunctionCall","src":"12405:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12392:12:33"},"nodeType":"YulFunctionCall","src":"12392:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12382:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12433:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12464:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12475:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12460:3:33"},"nodeType":"YulFunctionCall","src":"12460:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12447:12:33"},"nodeType":"YulFunctionCall","src":"12447:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12437:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12522:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12531:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12534:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12524:6:33"},"nodeType":"YulFunctionCall","src":"12524:12:33"},"nodeType":"YulExpressionStatement","src":"12524:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12494:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12502:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12491:2:33"},"nodeType":"YulFunctionCall","src":"12491:30:33"},"nodeType":"YulIf","src":"12488:50:33"},{"nodeType":"YulAssignment","src":"12547:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12578:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12589:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12574:3:33"},"nodeType":"YulFunctionCall","src":"12574:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12598:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12557:16:33"},"nodeType":"YulFunctionCall","src":"12557:49:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12547:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12147:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12158:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12170:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12178:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12186:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12194:6:33","type":""}],"src":"12075:537:33"},{"body":{"nodeType":"YulBlock","src":"12713:292:33","statements":[{"body":{"nodeType":"YulBlock","src":"12759:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12768:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12771:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12761:6:33"},"nodeType":"YulFunctionCall","src":"12761:12:33"},"nodeType":"YulExpressionStatement","src":"12761:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12734:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12743:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12730:3:33"},"nodeType":"YulFunctionCall","src":"12730:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12755:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12726:3:33"},"nodeType":"YulFunctionCall","src":"12726:32:33"},"nodeType":"YulIf","src":"12723:52:33"},{"nodeType":"YulAssignment","src":"12784:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12807:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12794:12:33"},"nodeType":"YulFunctionCall","src":"12794:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12784:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12826:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12857:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12868:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12853:3:33"},"nodeType":"YulFunctionCall","src":"12853:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12840:12:33"},"nodeType":"YulFunctionCall","src":"12840:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12830:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12915:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12924:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12927:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12917:6:33"},"nodeType":"YulFunctionCall","src":"12917:12:33"},"nodeType":"YulExpressionStatement","src":"12917:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12887:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12895:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12884:2:33"},"nodeType":"YulFunctionCall","src":"12884:30:33"},"nodeType":"YulIf","src":"12881:50:33"},{"nodeType":"YulAssignment","src":"12940:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12971:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12982:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12967:3:33"},"nodeType":"YulFunctionCall","src":"12967:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12991:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12950:16:33"},"nodeType":"YulFunctionCall","src":"12950:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12940:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12671:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12682:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12694:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12702:6:33","type":""}],"src":"12617:388:33"},{"body":{"nodeType":"YulBlock","src":"13111:102:33","statements":[{"nodeType":"YulAssignment","src":"13121:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13133:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13144:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13129:3:33"},"nodeType":"YulFunctionCall","src":"13129:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13121:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13178:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13194:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13199:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13190:3:33"},"nodeType":"YulFunctionCall","src":"13190:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"13203:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13186:3:33"},"nodeType":"YulFunctionCall","src":"13186:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13174:3:33"},"nodeType":"YulFunctionCall","src":"13174:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13156:6:33"},"nodeType":"YulFunctionCall","src":"13156:51:33"},"nodeType":"YulExpressionStatement","src":"13156:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13080:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13091:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13102:4:33","type":""}],"src":"13010:203:33"},{"body":{"nodeType":"YulBlock","src":"13282:598:33","statements":[{"body":{"nodeType":"YulBlock","src":"13331:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13340:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13343:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13333:6:33"},"nodeType":"YulFunctionCall","src":"13333:12:33"},"nodeType":"YulExpressionStatement","src":"13333:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13310:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13318:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13306:3:33"},"nodeType":"YulFunctionCall","src":"13306:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"13325:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13302:3:33"},"nodeType":"YulFunctionCall","src":"13302:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13295:6:33"},"nodeType":"YulFunctionCall","src":"13295:35:33"},"nodeType":"YulIf","src":"13292:55:33"},{"nodeType":"YulVariableDeclaration","src":"13356:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13379:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13366:12:33"},"nodeType":"YulFunctionCall","src":"13366:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13360:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13395:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"13405:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"13399:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13418:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"13485:2:33"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"13445:39:33"},"nodeType":"YulFunctionCall","src":"13445:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13429:15:33"},"nodeType":"YulFunctionCall","src":"13429:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13422:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13498:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"13511:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"13502:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13530:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"13535:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13523:6:33"},"nodeType":"YulFunctionCall","src":"13523:15:33"},"nodeType":"YulExpressionStatement","src":"13523:15:33"},{"nodeType":"YulAssignment","src":"13547:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13558:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"13563:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13554:3:33"},"nodeType":"YulFunctionCall","src":"13554:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"13547:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"13575:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13597:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13609:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"13612:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13605:3:33"},"nodeType":"YulFunctionCall","src":"13605:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13593:3:33"},"nodeType":"YulFunctionCall","src":"13593:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"13618:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13589:3:33"},"nodeType":"YulFunctionCall","src":"13589:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"13579:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"13649:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13658:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13661:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13651:6:33"},"nodeType":"YulFunctionCall","src":"13651:12:33"},"nodeType":"YulExpressionStatement","src":"13651:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"13636:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"13644:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13633:2:33"},"nodeType":"YulFunctionCall","src":"13633:15:33"},"nodeType":"YulIf","src":"13630:35:33"},{"nodeType":"YulVariableDeclaration","src":"13674:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13689:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"13697:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13685:3:33"},"nodeType":"YulFunctionCall","src":"13685:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"13678:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"13765:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13786:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13804:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13791:12:33"},"nodeType":"YulFunctionCall","src":"13791:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13779:6:33"},"nodeType":"YulFunctionCall","src":"13779:30:33"},"nodeType":"YulExpressionStatement","src":"13779:30:33"},{"nodeType":"YulAssignment","src":"13822:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13833:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"13838:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13829:3:33"},"nodeType":"YulFunctionCall","src":"13829:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"13822:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13720:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"13725:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13717:2:33"},"nodeType":"YulFunctionCall","src":"13717:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13733:23:33","statements":[{"nodeType":"YulAssignment","src":"13735:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13746:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"13751:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13742:3:33"},"nodeType":"YulFunctionCall","src":"13742:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"13735:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"13713:3:33","statements":[]},"src":"13709:142:33"},{"nodeType":"YulAssignment","src":"13860:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"13869:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13860:5:33"}]}]},"name":"abi_decode_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13256:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"13264:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13272:5:33","type":""}],"src":"13218:662:33"},{"body":{"nodeType":"YulBlock","src":"14031:456:33","statements":[{"body":{"nodeType":"YulBlock","src":"14077:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14086:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14089:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14079:6:33"},"nodeType":"YulFunctionCall","src":"14079:12:33"},"nodeType":"YulExpressionStatement","src":"14079:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14052:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14061:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14048:3:33"},"nodeType":"YulFunctionCall","src":"14048:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"14073:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14044:3:33"},"nodeType":"YulFunctionCall","src":"14044:32:33"},"nodeType":"YulIf","src":"14041:52:33"},{"nodeType":"YulVariableDeclaration","src":"14102:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14129:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14116:12:33"},"nodeType":"YulFunctionCall","src":"14116:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14106:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14148:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14158:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14152:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14203:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14212:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14215:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14205:6:33"},"nodeType":"YulFunctionCall","src":"14205:12:33"},"nodeType":"YulExpressionStatement","src":"14205:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14191:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14199:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14188:2:33"},"nodeType":"YulFunctionCall","src":"14188:14:33"},"nodeType":"YulIf","src":"14185:34:33"},{"nodeType":"YulAssignment","src":"14228:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14271:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"14282:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14267:3:33"},"nodeType":"YulFunctionCall","src":"14267:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14291:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"14238:28:33"},"nodeType":"YulFunctionCall","src":"14238:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14228:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"14308:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14341:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14352:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14337:3:33"},"nodeType":"YulFunctionCall","src":"14337:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14324:12:33"},"nodeType":"YulFunctionCall","src":"14324:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"14312:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14385:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14394:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14397:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14387:6:33"},"nodeType":"YulFunctionCall","src":"14387:12:33"},"nodeType":"YulExpressionStatement","src":"14387:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"14371:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14381:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14368:2:33"},"nodeType":"YulFunctionCall","src":"14368:16:33"},"nodeType":"YulIf","src":"14365:36:33"},{"nodeType":"YulAssignment","src":"14410:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14451:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"14462:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14447:3:33"},"nodeType":"YulFunctionCall","src":"14447:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14473:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"14420:26:33"},"nodeType":"YulFunctionCall","src":"14420:61:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14410:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13989:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14000:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14012:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14020:6:33","type":""}],"src":"13885:602:33"},{"body":{"nodeType":"YulBlock","src":"14643:507:33","statements":[{"nodeType":"YulVariableDeclaration","src":"14653:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14663:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14657:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14674:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14692:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14703:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14688:3:33"},"nodeType":"YulFunctionCall","src":"14688:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14678:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14722:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14733:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14715:6:33"},"nodeType":"YulFunctionCall","src":"14715:21:33"},"nodeType":"YulExpressionStatement","src":"14715:21:33"},{"nodeType":"YulVariableDeclaration","src":"14745:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"14756:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"14749:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14771:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14791:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14785:5:33"},"nodeType":"YulFunctionCall","src":"14785:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14775:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14814:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"14822:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14807:6:33"},"nodeType":"YulFunctionCall","src":"14807:22:33"},"nodeType":"YulExpressionStatement","src":"14807:22:33"},{"nodeType":"YulAssignment","src":"14838:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14849:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14860:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14845:3:33"},"nodeType":"YulFunctionCall","src":"14845:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14838:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"14872:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14890:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14898:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14886:3:33"},"nodeType":"YulFunctionCall","src":"14886:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"14876:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14910:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14919:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14914:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14978:146:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14999:3:33"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15014:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15008:5:33"},"nodeType":"YulFunctionCall","src":"15008:13:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15031:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15036:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15027:3:33"},"nodeType":"YulFunctionCall","src":"15027:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"15040:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15023:3:33"},"nodeType":"YulFunctionCall","src":"15023:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15004:3:33"},"nodeType":"YulFunctionCall","src":"15004:39:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14992:6:33"},"nodeType":"YulFunctionCall","src":"14992:52:33"},"nodeType":"YulExpressionStatement","src":"14992:52:33"},{"nodeType":"YulAssignment","src":"15057:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15068:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15073:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15064:3:33"},"nodeType":"YulFunctionCall","src":"15064:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15057:3:33"}]},{"nodeType":"YulAssignment","src":"15089:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15103:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15111:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15099:3:33"},"nodeType":"YulFunctionCall","src":"15099:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15089:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14940:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"14943:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14937:2:33"},"nodeType":"YulFunctionCall","src":"14937:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14951:18:33","statements":[{"nodeType":"YulAssignment","src":"14953:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14962:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"14965:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14958:3:33"},"nodeType":"YulFunctionCall","src":"14958:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14953:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"14933:3:33","statements":[]},"src":"14929:195:33"},{"nodeType":"YulAssignment","src":"15133:11:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"15141:3:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15133:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14612:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14623:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14634:4:33","type":""}],"src":"14492:658:33"},{"body":{"nodeType":"YulBlock","src":"15250:253:33","statements":[{"body":{"nodeType":"YulBlock","src":"15296:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15305:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15308:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15298:6:33"},"nodeType":"YulFunctionCall","src":"15298:12:33"},"nodeType":"YulExpressionStatement","src":"15298:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15271:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"15280:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15267:3:33"},"nodeType":"YulFunctionCall","src":"15267:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"15292:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15263:3:33"},"nodeType":"YulFunctionCall","src":"15263:32:33"},"nodeType":"YulIf","src":"15260:52:33"},{"nodeType":"YulVariableDeclaration","src":"15321:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15348:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15335:12:33"},"nodeType":"YulFunctionCall","src":"15335:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15325:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15401:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15410:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15413:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15403:6:33"},"nodeType":"YulFunctionCall","src":"15403:12:33"},"nodeType":"YulExpressionStatement","src":"15403:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15373:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"15381:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15370:2:33"},"nodeType":"YulFunctionCall","src":"15370:30:33"},"nodeType":"YulIf","src":"15367:50:33"},{"nodeType":"YulAssignment","src":"15426:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15469:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"15480:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15465:3:33"},"nodeType":"YulFunctionCall","src":"15465:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15489:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"15436:28:33"},"nodeType":"YulFunctionCall","src":"15436:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15426:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15216:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15227:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15239:6:33","type":""}],"src":"15155:348:33"},{"body":{"nodeType":"YulBlock","src":"15607:103:33","statements":[{"nodeType":"YulAssignment","src":"15617:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15629:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15640:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15625:3:33"},"nodeType":"YulFunctionCall","src":"15625:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15617:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15659:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15674:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15686:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15691:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15682:3:33"},"nodeType":"YulFunctionCall","src":"15682:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15670:3:33"},"nodeType":"YulFunctionCall","src":"15670:33:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15652:6:33"},"nodeType":"YulFunctionCall","src":"15652:52:33"},"nodeType":"YulExpressionStatement","src":"15652:52:33"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15576:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15587:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15598:4:33","type":""}],"src":"15508:202:33"},{"body":{"nodeType":"YulBlock","src":"15918:221:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15941:3:33"},{"name":"value0","nodeType":"YulIdentifier","src":"15946:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"15954:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"15928:12:33"},"nodeType":"YulFunctionCall","src":"15928:33:33"},"nodeType":"YulExpressionStatement","src":"15928:33:33"},{"nodeType":"YulVariableDeclaration","src":"15970:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15984:3:33"},{"name":"value1","nodeType":"YulIdentifier","src":"15989:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15980:3:33"},"nodeType":"YulFunctionCall","src":"15980:16:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15974:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16012:2:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16024:2:33","type":"","value":"96"},{"name":"value2","nodeType":"YulIdentifier","src":"16028:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16020:3:33"},"nodeType":"YulFunctionCall","src":"16020:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16041:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16037:3:33"},"nodeType":"YulFunctionCall","src":"16037:31:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16016:3:33"},"nodeType":"YulFunctionCall","src":"16016:53:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16005:6:33"},"nodeType":"YulFunctionCall","src":"16005:65:33"},"nodeType":"YulExpressionStatement","src":"16005:65:33"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16090:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"16094:2:33","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16086:3:33"},"nodeType":"YulFunctionCall","src":"16086:11:33"},{"name":"value3","nodeType":"YulIdentifier","src":"16099:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16079:6:33"},"nodeType":"YulFunctionCall","src":"16079:27:33"},"nodeType":"YulExpressionStatement","src":"16079:27:33"},{"nodeType":"YulAssignment","src":"16115:18:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16126:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"16130:2:33","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16122:3:33"},"nodeType":"YulFunctionCall","src":"16122:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16115:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15870:3:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15875:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15883:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15891:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15899:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15910:3:33","type":""}],"src":"15715:424:33"},{"body":{"nodeType":"YulBlock","src":"16281:150:33","statements":[{"nodeType":"YulVariableDeclaration","src":"16291:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16311:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16305:5:33"},"nodeType":"YulFunctionCall","src":"16305:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16295:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16366:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16374:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16362:3:33"},"nodeType":"YulFunctionCall","src":"16362:17:33"},{"name":"pos","nodeType":"YulIdentifier","src":"16381:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"16386:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16327:34:33"},"nodeType":"YulFunctionCall","src":"16327:66:33"},"nodeType":"YulExpressionStatement","src":"16327:66:33"},{"nodeType":"YulAssignment","src":"16402:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16413:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"16418:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16409:3:33"},"nodeType":"YulFunctionCall","src":"16409:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16402:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16257:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16262:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16273:3:33","type":""}],"src":"16144:287:33"},{"body":{"nodeType":"YulBlock","src":"16468:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16485:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16492:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"16497:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16488:3:33"},"nodeType":"YulFunctionCall","src":"16488:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16478:6:33"},"nodeType":"YulFunctionCall","src":"16478:31:33"},"nodeType":"YulExpressionStatement","src":"16478:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16525:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16528:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16518:6:33"},"nodeType":"YulFunctionCall","src":"16518:15:33"},"nodeType":"YulExpressionStatement","src":"16518:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16549:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16552:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16542:6:33"},"nodeType":"YulFunctionCall","src":"16542:15:33"},"nodeType":"YulExpressionStatement","src":"16542:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"16436:127:33"},{"body":{"nodeType":"YulBlock","src":"16616:77:33","statements":[{"nodeType":"YulAssignment","src":"16626:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16637:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"16640:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16633:3:33"},"nodeType":"YulFunctionCall","src":"16633:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"16626:3:33"}]},{"body":{"nodeType":"YulBlock","src":"16665:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16667:16:33"},"nodeType":"YulFunctionCall","src":"16667:18:33"},"nodeType":"YulExpressionStatement","src":"16667:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16657:1:33"},{"name":"sum","nodeType":"YulIdentifier","src":"16660:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16654:2:33"},"nodeType":"YulFunctionCall","src":"16654:10:33"},"nodeType":"YulIf","src":"16651:36:33"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16599:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"16602:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"16608:3:33","type":""}],"src":"16568:125:33"},{"body":{"nodeType":"YulBlock","src":"16873:210:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16890:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16905:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16921:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16926:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16917:3:33"},"nodeType":"YulFunctionCall","src":"16917:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"16930:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16913:3:33"},"nodeType":"YulFunctionCall","src":"16913:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16901:3:33"},"nodeType":"YulFunctionCall","src":"16901:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16883:6:33"},"nodeType":"YulFunctionCall","src":"16883:51:33"},"nodeType":"YulExpressionStatement","src":"16883:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16954:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16965:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16950:3:33"},"nodeType":"YulFunctionCall","src":"16950:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"16970:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16943:6:33"},"nodeType":"YulFunctionCall","src":"16943:34:33"},"nodeType":"YulExpressionStatement","src":"16943:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16997:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17008:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16993:3:33"},"nodeType":"YulFunctionCall","src":"16993:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"17013:2:33","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16986:6:33"},"nodeType":"YulFunctionCall","src":"16986:30:33"},"nodeType":"YulExpressionStatement","src":"16986:30:33"},{"nodeType":"YulAssignment","src":"17025:52:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17050:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17062:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17073:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17058:3:33"},"nodeType":"YulFunctionCall","src":"17058:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17033:16:33"},"nodeType":"YulFunctionCall","src":"17033:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17025:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16826:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16837:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16845:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16853:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16864:4:33","type":""}],"src":"16698:385:33"},{"body":{"nodeType":"YulBlock","src":"17120:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17137:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17144:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17149:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17140:3:33"},"nodeType":"YulFunctionCall","src":"17140:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17130:6:33"},"nodeType":"YulFunctionCall","src":"17130:31:33"},"nodeType":"YulExpressionStatement","src":"17130:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17177:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17180:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17170:6:33"},"nodeType":"YulFunctionCall","src":"17170:15:33"},"nodeType":"YulExpressionStatement","src":"17170:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17201:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17204:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17194:6:33"},"nodeType":"YulFunctionCall","src":"17194:15:33"},"nodeType":"YulExpressionStatement","src":"17194:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"17088:127:33"},{"body":{"nodeType":"YulBlock","src":"17377:227:33","statements":[{"nodeType":"YulAssignment","src":"17387:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17399:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17410:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17395:3:33"},"nodeType":"YulFunctionCall","src":"17395:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17387:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"17422:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17440:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17445:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17436:3:33"},"nodeType":"YulFunctionCall","src":"17436:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"17449:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17432:3:33"},"nodeType":"YulFunctionCall","src":"17432:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17426:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17467:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17482:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17490:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17478:3:33"},"nodeType":"YulFunctionCall","src":"17478:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17460:6:33"},"nodeType":"YulFunctionCall","src":"17460:34:33"},"nodeType":"YulExpressionStatement","src":"17460:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17514:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17525:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17510:3:33"},"nodeType":"YulFunctionCall","src":"17510:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17534:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17542:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17530:3:33"},"nodeType":"YulFunctionCall","src":"17530:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17503:6:33"},"nodeType":"YulFunctionCall","src":"17503:43:33"},"nodeType":"YulExpressionStatement","src":"17503:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17566:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17577:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17562:3:33"},"nodeType":"YulFunctionCall","src":"17562:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17586:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17594:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17582:3:33"},"nodeType":"YulFunctionCall","src":"17582:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17555:6:33"},"nodeType":"YulFunctionCall","src":"17555:43:33"},"nodeType":"YulExpressionStatement","src":"17555:43:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17330:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17341:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17349:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17357:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17368:4:33","type":""}],"src":"17220:384:33"},{"body":{"nodeType":"YulBlock","src":"17790:221:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17807:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17822:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17838:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17843:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17834:3:33"},"nodeType":"YulFunctionCall","src":"17834:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"17847:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17830:3:33"},"nodeType":"YulFunctionCall","src":"17830:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17818:3:33"},"nodeType":"YulFunctionCall","src":"17818:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17800:6:33"},"nodeType":"YulFunctionCall","src":"17800:51:33"},"nodeType":"YulExpressionStatement","src":"17800:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17871:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17882:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17867:3:33"},"nodeType":"YulFunctionCall","src":"17867:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17891:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"17899:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17887:3:33"},"nodeType":"YulFunctionCall","src":"17887:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17860:6:33"},"nodeType":"YulFunctionCall","src":"17860:45:33"},"nodeType":"YulExpressionStatement","src":"17860:45:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17925:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17936:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17921:3:33"},"nodeType":"YulFunctionCall","src":"17921:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"17941:2:33","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17914:6:33"},"nodeType":"YulFunctionCall","src":"17914:30:33"},"nodeType":"YulExpressionStatement","src":"17914:30:33"},{"nodeType":"YulAssignment","src":"17953:52:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17978:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17990:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18001:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17986:3:33"},"nodeType":"YulFunctionCall","src":"17986:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17961:16:33"},"nodeType":"YulFunctionCall","src":"17961:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17953:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint8_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17743:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17754:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17762:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17770:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17781:4:33","type":""}],"src":"17609:402:33"},{"body":{"nodeType":"YulBlock","src":"18068:116:33","statements":[{"nodeType":"YulAssignment","src":"18078:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18093:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"18096:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18089:3:33"},"nodeType":"YulFunctionCall","src":"18089:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"18078:7:33"}]},{"body":{"nodeType":"YulBlock","src":"18156:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18158:16:33"},"nodeType":"YulFunctionCall","src":"18158:18:33"},"nodeType":"YulExpressionStatement","src":"18158:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18127:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18120:6:33"},"nodeType":"YulFunctionCall","src":"18120:9:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18134:1:33"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"18141:7:33"},{"name":"x","nodeType":"YulIdentifier","src":"18150:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18137:3:33"},"nodeType":"YulFunctionCall","src":"18137:15:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18131:2:33"},"nodeType":"YulFunctionCall","src":"18131:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18117:2:33"},"nodeType":"YulFunctionCall","src":"18117:37:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18110:6:33"},"nodeType":"YulFunctionCall","src":"18110:45:33"},"nodeType":"YulIf","src":"18107:71:33"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18047:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"18050:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"18056:7:33","type":""}],"src":"18016:168:33"},{"body":{"nodeType":"YulBlock","src":"18380:14:33","statements":[{"nodeType":"YulAssignment","src":"18382:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"18389:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18382:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18364:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18372:3:33","type":""}],"src":"18189:205:33"},{"body":{"nodeType":"YulBlock","src":"18528:145:33","statements":[{"nodeType":"YulAssignment","src":"18538:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18550:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18561:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18546:3:33"},"nodeType":"YulFunctionCall","src":"18546:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18538:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18580:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18595:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18611:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18616:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18607:3:33"},"nodeType":"YulFunctionCall","src":"18607:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"18620:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18603:3:33"},"nodeType":"YulFunctionCall","src":"18603:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18591:3:33"},"nodeType":"YulFunctionCall","src":"18591:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18573:6:33"},"nodeType":"YulFunctionCall","src":"18573:51:33"},"nodeType":"YulExpressionStatement","src":"18573:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18644:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18655:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18640:3:33"},"nodeType":"YulFunctionCall","src":"18640:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"18660:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18633:6:33"},"nodeType":"YulFunctionCall","src":"18633:34:33"},"nodeType":"YulExpressionStatement","src":"18633:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18489:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18500:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18508:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18519:4:33","type":""}],"src":"18399:274:33"},{"body":{"nodeType":"YulBlock","src":"18772:427:33","statements":[{"nodeType":"YulVariableDeclaration","src":"18782:51:33","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"18821:11:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18808:12:33"},"nodeType":"YulFunctionCall","src":"18808:25:33"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"18786:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"18922:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18931:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18934:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18924:6:33"},"nodeType":"YulFunctionCall","src":"18924:12:33"},"nodeType":"YulExpressionStatement","src":"18924:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"18856:18:33"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"18884:12:33"},"nodeType":"YulFunctionCall","src":"18884:14:33"},{"name":"base_ref","nodeType":"YulIdentifier","src":"18900:8:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18880:3:33"},"nodeType":"YulFunctionCall","src":"18880:29:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18915:2:33","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18911:3:33"},"nodeType":"YulFunctionCall","src":"18911:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18876:3:33"},"nodeType":"YulFunctionCall","src":"18876:43:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18852:3:33"},"nodeType":"YulFunctionCall","src":"18852:68:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18845:6:33"},"nodeType":"YulFunctionCall","src":"18845:76:33"},"nodeType":"YulIf","src":"18842:96:33"},{"nodeType":"YulVariableDeclaration","src":"18947:47:33","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"18965:8:33"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"18975:18:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18961:3:33"},"nodeType":"YulFunctionCall","src":"18961:33:33"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"18951:6:33","type":""}]},{"nodeType":"YulAssignment","src":"19003:30:33","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"19026:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19013:12:33"},"nodeType":"YulFunctionCall","src":"19013:20:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19003:6:33"}]},{"body":{"nodeType":"YulBlock","src":"19076:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19085:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19088:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19078:6:33"},"nodeType":"YulFunctionCall","src":"19078:12:33"},"nodeType":"YulExpressionStatement","src":"19078:12:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19048:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19056:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19045:2:33"},"nodeType":"YulFunctionCall","src":"19045:30:33"},"nodeType":"YulIf","src":"19042:50:33"},{"nodeType":"YulAssignment","src":"19101:25:33","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"19113:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19121:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19109:3:33"},"nodeType":"YulFunctionCall","src":"19109:17:33"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"19101:4:33"}]},{"body":{"nodeType":"YulBlock","src":"19177:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19186:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19189:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19179:6:33"},"nodeType":"YulFunctionCall","src":"19179:12:33"},"nodeType":"YulExpressionStatement","src":"19179:12:33"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"19142:4:33"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"19152:12:33"},"nodeType":"YulFunctionCall","src":"19152:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"19168:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19148:3:33"},"nodeType":"YulFunctionCall","src":"19148:27:33"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"19138:3:33"},"nodeType":"YulFunctionCall","src":"19138:38:33"},"nodeType":"YulIf","src":"19135:58:33"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"18729:8:33","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"18739:11:33","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"18755:4:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"18761:6:33","type":""}],"src":"18678:521:33"},{"body":{"nodeType":"YulBlock","src":"19351:124:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19374:3:33"},{"name":"value0","nodeType":"YulIdentifier","src":"19379:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"19387:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19361:12:33"},"nodeType":"YulFunctionCall","src":"19361:33:33"},"nodeType":"YulExpressionStatement","src":"19361:33:33"},{"nodeType":"YulVariableDeclaration","src":"19403:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19417:3:33"},{"name":"value1","nodeType":"YulIdentifier","src":"19422:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19413:3:33"},"nodeType":"YulFunctionCall","src":"19413:16:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19407:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19445:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"19449:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19438:6:33"},"nodeType":"YulFunctionCall","src":"19438:13:33"},"nodeType":"YulExpressionStatement","src":"19438:13:33"},{"nodeType":"YulAssignment","src":"19460:9:33","value":{"name":"_1","nodeType":"YulIdentifier","src":"19467:2:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19460:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19319:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19324:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19332:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19343:3:33","type":""}],"src":"19204:271:33"},{"body":{"nodeType":"YulBlock","src":"19574:281:33","statements":[{"nodeType":"YulVariableDeclaration","src":"19584:26:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"19604:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19598:5:33"},"nodeType":"YulFunctionCall","src":"19598:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19588:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19619:33:33","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"19639:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"19646:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19635:3:33"},"nodeType":"YulFunctionCall","src":"19635:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19629:5:33"},"nodeType":"YulFunctionCall","src":"19629:23:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19623:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19661:41:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19675:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19671:3:33"},"nodeType":"YulFunctionCall","src":"19671:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"19665:2:33","type":""}]},{"nodeType":"YulAssignment","src":"19711:20:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19724:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"19728:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19720:3:33"},"nodeType":"YulFunctionCall","src":"19720:11:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19711:5:33"}]},{"body":{"nodeType":"YulBlock","src":"19766:83:33","statements":[{"nodeType":"YulAssignment","src":"19780:59:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19797:2:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19809:1:33","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19816:2:33","type":"","value":"20"},{"name":"length","nodeType":"YulIdentifier","src":"19820:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19812:3:33"},"nodeType":"YulFunctionCall","src":"19812:15:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19805:3:33"},"nodeType":"YulFunctionCall","src":"19805:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"19830:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19801:3:33"},"nodeType":"YulFunctionCall","src":"19801:32:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19793:3:33"},"nodeType":"YulFunctionCall","src":"19793:41:33"},{"name":"_2","nodeType":"YulIdentifier","src":"19836:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19789:3:33"},"nodeType":"YulFunctionCall","src":"19789:50:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19780:5:33"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19746:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19754:2:33","type":"","value":"20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19743:2:33"},"nodeType":"YulFunctionCall","src":"19743:14:33"},"nodeType":"YulIf","src":"19740:109:33"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"19554:5:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19564:5:33","type":""}],"src":"19480:375:33"},{"body":{"nodeType":"YulBlock","src":"20029:200:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20046:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"20057:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20039:6:33"},"nodeType":"YulFunctionCall","src":"20039:25:33"},"nodeType":"YulExpressionStatement","src":"20039:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20084:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20095:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20080:3:33"},"nodeType":"YulFunctionCall","src":"20080:18:33"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20114:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20107:6:33"},"nodeType":"YulFunctionCall","src":"20107:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20100:6:33"},"nodeType":"YulFunctionCall","src":"20100:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20073:6:33"},"nodeType":"YulFunctionCall","src":"20073:50:33"},"nodeType":"YulExpressionStatement","src":"20073:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20143:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20154:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20139:3:33"},"nodeType":"YulFunctionCall","src":"20139:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"20159:2:33","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20132:6:33"},"nodeType":"YulFunctionCall","src":"20132:30:33"},"nodeType":"YulExpressionStatement","src":"20132:30:33"},{"nodeType":"YulAssignment","src":"20171:52:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20196:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20208:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20219:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20204:3:33"},"nodeType":"YulFunctionCall","src":"20204:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"20179:16:33"},"nodeType":"YulFunctionCall","src":"20179:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20171:4:33"}]}]},"name":"abi_encode_tuple_t_uint256_t_bool_t_bytes_memory_ptr__to_t_uint256_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19982:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19993:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20001:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20009:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20020:4:33","type":""}],"src":"19860:369:33"},{"body":{"nodeType":"YulBlock","src":"20465:338:33","statements":[{"nodeType":"YulVariableDeclaration","src":"20475:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20493:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20498:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20489:3:33"},"nodeType":"YulFunctionCall","src":"20489:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"20502:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20485:3:33"},"nodeType":"YulFunctionCall","src":"20485:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20479:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20520:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20535:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20543:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20531:3:33"},"nodeType":"YulFunctionCall","src":"20531:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20513:6:33"},"nodeType":"YulFunctionCall","src":"20513:34:33"},"nodeType":"YulExpressionStatement","src":"20513:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20567:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20578:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20563:3:33"},"nodeType":"YulFunctionCall","src":"20563:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20587:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20595:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20583:3:33"},"nodeType":"YulFunctionCall","src":"20583:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20556:6:33"},"nodeType":"YulFunctionCall","src":"20556:43:33"},"nodeType":"YulExpressionStatement","src":"20556:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20619:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20630:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20615:3:33"},"nodeType":"YulFunctionCall","src":"20615:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20639:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20647:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20635:3:33"},"nodeType":"YulFunctionCall","src":"20635:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20608:6:33"},"nodeType":"YulFunctionCall","src":"20608:43:33"},"nodeType":"YulExpressionStatement","src":"20608:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20671:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20682:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20667:3:33"},"nodeType":"YulFunctionCall","src":"20667:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"20687:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20660:6:33"},"nodeType":"YulFunctionCall","src":"20660:34:33"},"nodeType":"YulExpressionStatement","src":"20660:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20714:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20725:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20710:3:33"},"nodeType":"YulFunctionCall","src":"20710:19:33"},{"kind":"number","nodeType":"YulLiteral","src":"20731:3:33","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20703:6:33"},"nodeType":"YulFunctionCall","src":"20703:32:33"},"nodeType":"YulExpressionStatement","src":"20703:32:33"},{"nodeType":"YulAssignment","src":"20744:53:33","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"20769:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20781:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20792:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20777:3:33"},"nodeType":"YulFunctionCall","src":"20777:19:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"20752:16:33"},"nodeType":"YulFunctionCall","src":"20752:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20744:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20402:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"20413:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20421:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20429:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20437:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20445:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20456:4:33","type":""}],"src":"20234:569:33"},{"body":{"nodeType":"YulBlock","src":"20863:325:33","statements":[{"nodeType":"YulAssignment","src":"20873:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20887:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"20890:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"20883:3:33"},"nodeType":"YulFunctionCall","src":"20883:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20873:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"20904:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"20934:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"20940:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20930:3:33"},"nodeType":"YulFunctionCall","src":"20930:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"20908:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"20981:31:33","statements":[{"nodeType":"YulAssignment","src":"20983:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"20997:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21005:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20993:3:33"},"nodeType":"YulFunctionCall","src":"20993:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20983:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"20961:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20954:6:33"},"nodeType":"YulFunctionCall","src":"20954:26:33"},"nodeType":"YulIf","src":"20951:61:33"},{"body":{"nodeType":"YulBlock","src":"21071:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21092:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21099:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"21104:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21095:3:33"},"nodeType":"YulFunctionCall","src":"21095:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21085:6:33"},"nodeType":"YulFunctionCall","src":"21085:31:33"},"nodeType":"YulExpressionStatement","src":"21085:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21136:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21139:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21129:6:33"},"nodeType":"YulFunctionCall","src":"21129:15:33"},"nodeType":"YulExpressionStatement","src":"21129:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21164:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21167:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21157:6:33"},"nodeType":"YulFunctionCall","src":"21157:15:33"},"nodeType":"YulExpressionStatement","src":"21157:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"21027:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21050:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"21058:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21047:2:33"},"nodeType":"YulFunctionCall","src":"21047:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21024:2:33"},"nodeType":"YulFunctionCall","src":"21024:38:33"},"nodeType":"YulIf","src":"21021:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"20843:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"20852:6:33","type":""}],"src":"20808:380:33"},{"body":{"nodeType":"YulBlock","src":"21378:262:33","statements":[{"nodeType":"YulAssignment","src":"21388:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21400:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21411:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21396:3:33"},"nodeType":"YulFunctionCall","src":"21396:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21388:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"21424:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21442:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"21447:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21438:3:33"},"nodeType":"YulFunctionCall","src":"21438:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"21451:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21434:3:33"},"nodeType":"YulFunctionCall","src":"21434:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21428:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21469:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21484:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"21492:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21480:3:33"},"nodeType":"YulFunctionCall","src":"21480:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21462:6:33"},"nodeType":"YulFunctionCall","src":"21462:34:33"},"nodeType":"YulExpressionStatement","src":"21462:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21516:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21527:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21512:3:33"},"nodeType":"YulFunctionCall","src":"21512:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"21532:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21505:6:33"},"nodeType":"YulFunctionCall","src":"21505:34:33"},"nodeType":"YulExpressionStatement","src":"21505:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21559:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21570:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21555:3:33"},"nodeType":"YulFunctionCall","src":"21555:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21579:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"21587:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21575:3:33"},"nodeType":"YulFunctionCall","src":"21575:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21548:6:33"},"nodeType":"YulFunctionCall","src":"21548:43:33"},"nodeType":"YulExpressionStatement","src":"21548:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21611:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21622:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21607:3:33"},"nodeType":"YulFunctionCall","src":"21607:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"21627:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21600:6:33"},"nodeType":"YulFunctionCall","src":"21600:34:33"},"nodeType":"YulExpressionStatement","src":"21600:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21323:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21334:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21342:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21350:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21358:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21369:4:33","type":""}],"src":"21193:447:33"},{"body":{"nodeType":"YulBlock","src":"21694:79:33","statements":[{"nodeType":"YulAssignment","src":"21704:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21716:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"21719:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21712:3:33"},"nodeType":"YulFunctionCall","src":"21712:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21704:4:33"}]},{"body":{"nodeType":"YulBlock","src":"21745:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21747:16:33"},"nodeType":"YulFunctionCall","src":"21747:18:33"},"nodeType":"YulExpressionStatement","src":"21747:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"21736:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"21742:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21733:2:33"},"nodeType":"YulFunctionCall","src":"21733:11:33"},"nodeType":"YulIf","src":"21730:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21676:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"21679:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21685:4:33","type":""}],"src":"21645:128:33"},{"body":{"nodeType":"YulBlock","src":"21935:188:33","statements":[{"nodeType":"YulAssignment","src":"21945:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21957:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21968:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21953:3:33"},"nodeType":"YulFunctionCall","src":"21953:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21945:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21987:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"21998:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21980:6:33"},"nodeType":"YulFunctionCall","src":"21980:25:33"},"nodeType":"YulExpressionStatement","src":"21980:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22025:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22036:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22021:3:33"},"nodeType":"YulFunctionCall","src":"22021:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22045:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22061:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"22066:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22057:3:33"},"nodeType":"YulFunctionCall","src":"22057:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"22070:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22053:3:33"},"nodeType":"YulFunctionCall","src":"22053:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22041:3:33"},"nodeType":"YulFunctionCall","src":"22041:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22014:6:33"},"nodeType":"YulFunctionCall","src":"22014:60:33"},"nodeType":"YulExpressionStatement","src":"22014:60:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22094:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22105:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22090:3:33"},"nodeType":"YulFunctionCall","src":"22090:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"22110:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22083:6:33"},"nodeType":"YulFunctionCall","src":"22083:34:33"},"nodeType":"YulExpressionStatement","src":"22083:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21888:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21899:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21907:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21915:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21926:4:33","type":""}],"src":"21778:345:33"},{"body":{"nodeType":"YulBlock","src":"22301:236:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22318:3:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22327:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22339:3:33","type":"","value":"176"},{"kind":"number","nodeType":"YulLiteral","src":"22344:22:33","type":"","value":"0xffffffffffffffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22335:3:33"},"nodeType":"YulFunctionCall","src":"22335:32:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22323:3:33"},"nodeType":"YulFunctionCall","src":"22323:45:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22311:6:33"},"nodeType":"YulFunctionCall","src":"22311:58:33"},"nodeType":"YulExpressionStatement","src":"22311:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22389:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22394:2:33","type":"","value":"10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22385:3:33"},"nodeType":"YulFunctionCall","src":"22385:12:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22403:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22415:3:33","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"22420:5:33","type":"","value":"65535"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22411:3:33"},"nodeType":"YulFunctionCall","src":"22411:15:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22399:3:33"},"nodeType":"YulFunctionCall","src":"22399:28:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22378:6:33"},"nodeType":"YulFunctionCall","src":"22378:50:33"},"nodeType":"YulExpressionStatement","src":"22378:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22448:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22453:2:33","type":"","value":"12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22444:3:33"},"nodeType":"YulFunctionCall","src":"22444:12:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22462:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22474:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22470:3:33"},"nodeType":"YulFunctionCall","src":"22470:31:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22458:3:33"},"nodeType":"YulFunctionCall","src":"22458:44:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22437:6:33"},"nodeType":"YulFunctionCall","src":"22437:66:33"},"nodeType":"YulExpressionStatement","src":"22437:66:33"},{"nodeType":"YulAssignment","src":"22512:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22523:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"22528:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22519:3:33"},"nodeType":"YulFunctionCall","src":"22519:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22512:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22261:3:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22266:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22274:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22282:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22293:3:33","type":""}],"src":"22128:409:33"},{"body":{"nodeType":"YulBlock","src":"22636:203:33","statements":[{"nodeType":"YulVariableDeclaration","src":"22646:26:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"22666:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22660:5:33"},"nodeType":"YulFunctionCall","src":"22660:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22650:6:33","type":""}]},{"nodeType":"YulAssignment","src":"22681:32:33","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"22700:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"22707:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22696:3:33"},"nodeType":"YulFunctionCall","src":"22696:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22690:5:33"},"nodeType":"YulFunctionCall","src":"22690:23:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22681:5:33"}]},{"body":{"nodeType":"YulBlock","src":"22750:83:33","statements":[{"nodeType":"YulAssignment","src":"22764:59:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22777:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22792:1:33","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22799:4:33","type":"","value":"0x20"},{"name":"length","nodeType":"YulIdentifier","src":"22805:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22795:3:33"},"nodeType":"YulFunctionCall","src":"22795:17:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22788:3:33"},"nodeType":"YulFunctionCall","src":"22788:25:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22819:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22815:3:33"},"nodeType":"YulFunctionCall","src":"22815:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22784:3:33"},"nodeType":"YulFunctionCall","src":"22784:38:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22773:3:33"},"nodeType":"YulFunctionCall","src":"22773:50:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22764:5:33"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22728:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22736:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22725:2:33"},"nodeType":"YulFunctionCall","src":"22725:16:33"},"nodeType":"YulIf","src":"22722:111:33"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"22616:5:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22626:5:33","type":""}],"src":"22542:297:33"},{"body":{"nodeType":"YulBlock","src":"22991:141:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23008:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"23019:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23001:6:33"},"nodeType":"YulFunctionCall","src":"23001:25:33"},"nodeType":"YulExpressionStatement","src":"23001:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23046:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23057:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23042:3:33"},"nodeType":"YulFunctionCall","src":"23042:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"23062:2:33","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23035:6:33"},"nodeType":"YulFunctionCall","src":"23035:30:33"},"nodeType":"YulExpressionStatement","src":"23035:30:33"},{"nodeType":"YulAssignment","src":"23074:52:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23099:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23111:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23122:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23107:3:33"},"nodeType":"YulFunctionCall","src":"23107:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"23082:16:33"},"nodeType":"YulFunctionCall","src":"23082:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23074:4:33"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22952:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22963:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22971:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22982:4:33","type":""}],"src":"22844:288:33"},{"body":{"nodeType":"YulBlock","src":"23227:557:33","statements":[{"body":{"nodeType":"YulBlock","src":"23273:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23282:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23285:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23275:6:33"},"nodeType":"YulFunctionCall","src":"23275:12:33"},"nodeType":"YulExpressionStatement","src":"23275:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23248:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"23257:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23244:3:33"},"nodeType":"YulFunctionCall","src":"23244:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"23269:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23240:3:33"},"nodeType":"YulFunctionCall","src":"23240:32:33"},"nodeType":"YulIf","src":"23237:52:33"},{"nodeType":"YulVariableDeclaration","src":"23298:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23318:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23312:5:33"},"nodeType":"YulFunctionCall","src":"23312:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23302:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"23371:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23380:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23383:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23373:6:33"},"nodeType":"YulFunctionCall","src":"23373:12:33"},"nodeType":"YulExpressionStatement","src":"23373:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23343:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"23351:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23340:2:33"},"nodeType":"YulFunctionCall","src":"23340:30:33"},"nodeType":"YulIf","src":"23337:50:33"},{"nodeType":"YulVariableDeclaration","src":"23396:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23410:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"23421:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23406:3:33"},"nodeType":"YulFunctionCall","src":"23406:22:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23400:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"23476:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23485:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23488:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23478:6:33"},"nodeType":"YulFunctionCall","src":"23478:12:33"},"nodeType":"YulExpressionStatement","src":"23478:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23455:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23459:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23451:3:33"},"nodeType":"YulFunctionCall","src":"23451:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23466:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23447:3:33"},"nodeType":"YulFunctionCall","src":"23447:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23440:6:33"},"nodeType":"YulFunctionCall","src":"23440:35:33"},"nodeType":"YulIf","src":"23437:55:33"},{"nodeType":"YulVariableDeclaration","src":"23501:19:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23517:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23511:5:33"},"nodeType":"YulFunctionCall","src":"23511:9:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"23505:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23529:61:33","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"23586:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"23558:27:33"},"nodeType":"YulFunctionCall","src":"23558:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"23542:15:33"},"nodeType":"YulFunctionCall","src":"23542:48:33"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"23533:5:33","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"23606:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"23613:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23599:6:33"},"nodeType":"YulFunctionCall","src":"23599:17:33"},"nodeType":"YulExpressionStatement","src":"23599:17:33"},{"body":{"nodeType":"YulBlock","src":"23662:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23671:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23674:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23664:6:33"},"nodeType":"YulFunctionCall","src":"23664:12:33"},"nodeType":"YulExpressionStatement","src":"23664:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23639:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"23643:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23635:3:33"},"nodeType":"YulFunctionCall","src":"23635:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"23648:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23631:3:33"},"nodeType":"YulFunctionCall","src":"23631:20:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23653:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23628:2:33"},"nodeType":"YulFunctionCall","src":"23628:33:33"},"nodeType":"YulIf","src":"23625:53:33"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23726:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23730:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23722:3:33"},"nodeType":"YulFunctionCall","src":"23722:11:33"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"23739:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"23746:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23735:3:33"},"nodeType":"YulFunctionCall","src":"23735:14:33"},{"name":"_2","nodeType":"YulIdentifier","src":"23751:2:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"23687:34:33"},"nodeType":"YulFunctionCall","src":"23687:67:33"},"nodeType":"YulExpressionStatement","src":"23687:67:33"},{"nodeType":"YulAssignment","src":"23763:15:33","value":{"name":"array","nodeType":"YulIdentifier","src":"23773:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23763:6:33"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23193:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23204:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23216:6:33","type":""}],"src":"23137:647:33"},{"body":{"nodeType":"YulBlock","src":"23844:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23861:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"23864:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23854:6:33"},"nodeType":"YulFunctionCall","src":"23854:14:33"},"nodeType":"YulExpressionStatement","src":"23854:14:33"},{"nodeType":"YulAssignment","src":"23877:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23895:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23898:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"23885:9:33"},"nodeType":"YulFunctionCall","src":"23885:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"23877:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"23827:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"23835:4:33","type":""}],"src":"23789:120:33"},{"body":{"nodeType":"YulBlock","src":"23994:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"24027:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"24041:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"24051:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24045:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24072:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"24076:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24065:6:33"},"nodeType":"YulFunctionCall","src":"24065:17:33"},"nodeType":"YulExpressionStatement","src":"24065:17:33"},{"nodeType":"YulVariableDeclaration","src":"24095:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24117:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"24121:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"24107:9:33"},"nodeType":"YulFunctionCall","src":"24107:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"24099:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24139:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24162:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24172:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"24179:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"24191:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24175:3:33"},"nodeType":"YulFunctionCall","src":"24175:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24168:3:33"},"nodeType":"YulFunctionCall","src":"24168:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24158:3:33"},"nodeType":"YulFunctionCall","src":"24158:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"24143:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24233:23:33","statements":[{"nodeType":"YulAssignment","src":"24235:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"24250:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"24235:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"24215:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"24227:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24212:2:33"},"nodeType":"YulFunctionCall","src":"24212:20:33"},"nodeType":"YulIf","src":"24209:47:33"},{"nodeType":"YulVariableDeclaration","src":"24269:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24283:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24293:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"24300:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24305:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24296:3:33"},"nodeType":"YulFunctionCall","src":"24296:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24289:3:33"},"nodeType":"YulFunctionCall","src":"24289:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24279:3:33"},"nodeType":"YulFunctionCall","src":"24279:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"24273:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24323:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"24336:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"24327:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24421:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24430:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"24437:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24423:6:33"},"nodeType":"YulFunctionCall","src":"24423:17:33"},"nodeType":"YulExpressionStatement","src":"24423:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24371:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24378:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24368:2:33"},"nodeType":"YulFunctionCall","src":"24368:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24382:26:33","statements":[{"nodeType":"YulAssignment","src":"24384:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24397:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"24404:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24393:3:33"},"nodeType":"YulFunctionCall","src":"24393:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"24384:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"24364:3:33","statements":[]},"src":"24360:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"24010:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24015:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24007:2:33"},"nodeType":"YulFunctionCall","src":"24007:11:33"},"nodeType":"YulIf","src":"24004:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"23966:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"23973:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"23978:10:33","type":""}],"src":"23914:544:33"},{"body":{"nodeType":"YulBlock","src":"24548:81:33","statements":[{"nodeType":"YulAssignment","src":"24558:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24573:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24591:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"24594:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24587:3:33"},"nodeType":"YulFunctionCall","src":"24587:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24604:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24600:3:33"},"nodeType":"YulFunctionCall","src":"24600:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24583:3:33"},"nodeType":"YulFunctionCall","src":"24583:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24579:3:33"},"nodeType":"YulFunctionCall","src":"24579:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24569:3:33"},"nodeType":"YulFunctionCall","src":"24569:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24615:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"24618:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24611:3:33"},"nodeType":"YulFunctionCall","src":"24611:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24566:2:33"},"nodeType":"YulFunctionCall","src":"24566:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"24558:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"24525:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"24531:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"24539:4:33","type":""}],"src":"24463:166:33"},{"body":{"nodeType":"YulBlock","src":"24728:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"24738:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24758:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24752:5:33"},"nodeType":"YulFunctionCall","src":"24752:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"24742:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24805:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24807:16:33"},"nodeType":"YulFunctionCall","src":"24807:18:33"},"nodeType":"YulExpressionStatement","src":"24807:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"24777:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24785:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24774:2:33"},"nodeType":"YulFunctionCall","src":"24774:30:33"},"nodeType":"YulIf","src":"24771:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24879:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24917:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"24911:5:33"},"nodeType":"YulFunctionCall","src":"24911:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"24885:25:33"},"nodeType":"YulFunctionCall","src":"24885:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"24925:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"24836:42:33"},"nodeType":"YulFunctionCall","src":"24836:96:33"},"nodeType":"YulExpressionStatement","src":"24836:96:33"},{"nodeType":"YulVariableDeclaration","src":"24941:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"24958:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"24945:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24968:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"24987:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"24972:11:33","type":""}]},{"nodeType":"YulAssignment","src":"25000:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25013:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25000:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"25070:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25084:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"25103:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25115:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25111:3:33"},"nodeType":"YulFunctionCall","src":"25111:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25099:3:33"},"nodeType":"YulFunctionCall","src":"25099:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"25088:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25132:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25175:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"25146:28:33"},"nodeType":"YulFunctionCall","src":"25146:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"25136:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25193:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25202:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"25197:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25280:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25305:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25323:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25328:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25319:3:33"},"nodeType":"YulFunctionCall","src":"25319:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25313:5:33"},"nodeType":"YulFunctionCall","src":"25313:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25298:6:33"},"nodeType":"YulFunctionCall","src":"25298:42:33"},"nodeType":"YulExpressionStatement","src":"25298:42:33"},{"nodeType":"YulAssignment","src":"25357:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25371:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25379:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25367:3:33"},"nodeType":"YulFunctionCall","src":"25367:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25357:6:33"}]},{"nodeType":"YulAssignment","src":"25398:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25415:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25426:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25411:3:33"},"nodeType":"YulFunctionCall","src":"25411:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25398:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25227:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"25230:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25224:2:33"},"nodeType":"YulFunctionCall","src":"25224:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25239:28:33","statements":[{"nodeType":"YulAssignment","src":"25241:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25250:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25253:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25246:3:33"},"nodeType":"YulFunctionCall","src":"25246:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"25241:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"25220:3:33","statements":[]},"src":"25216:236:33"},{"body":{"nodeType":"YulBlock","src":"25500:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25518:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25545:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25550:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25541:3:33"},"nodeType":"YulFunctionCall","src":"25541:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25535:5:33"},"nodeType":"YulFunctionCall","src":"25535:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"25522:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25585:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"25597:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25624:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"25627:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25620:3:33"},"nodeType":"YulFunctionCall","src":"25620:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"25636:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25616:3:33"},"nodeType":"YulFunctionCall","src":"25616:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25646:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25642:3:33"},"nodeType":"YulFunctionCall","src":"25642:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25612:3:33"},"nodeType":"YulFunctionCall","src":"25612:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25608:3:33"},"nodeType":"YulFunctionCall","src":"25608:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25593:3:33"},"nodeType":"YulFunctionCall","src":"25593:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25578:6:33"},"nodeType":"YulFunctionCall","src":"25578:74:33"},"nodeType":"YulExpressionStatement","src":"25578:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"25471:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"25480:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25468:2:33"},"nodeType":"YulFunctionCall","src":"25468:19:33"},"nodeType":"YulIf","src":"25465:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25686:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25700:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"25703:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25696:3:33"},"nodeType":"YulFunctionCall","src":"25696:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"25712:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25692:3:33"},"nodeType":"YulFunctionCall","src":"25692:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25679:6:33"},"nodeType":"YulFunctionCall","src":"25679:36:33"},"nodeType":"YulExpressionStatement","src":"25679:36:33"}]},"nodeType":"YulCase","src":"25063:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25068:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"25742:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25756:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25769:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"25760:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25805:67:33","statements":[{"nodeType":"YulAssignment","src":"25823:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25842:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25847:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25838:3:33"},"nodeType":"YulFunctionCall","src":"25838:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25832:5:33"},"nodeType":"YulFunctionCall","src":"25832:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25823:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"25786:6:33"},"nodeType":"YulIf","src":"25783:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25892:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25951:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"25958:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"25898:52:33"},"nodeType":"YulFunctionCall","src":"25898:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25885:6:33"},"nodeType":"YulFunctionCall","src":"25885:81:33"},"nodeType":"YulExpressionStatement","src":"25885:81:33"}]},"nodeType":"YulCase","src":"25734:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"25043:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25051:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25040:2:33"},"nodeType":"YulFunctionCall","src":"25040:14:33"},"nodeType":"YulSwitch","src":"25033:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"24713:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"24719:3:33","type":""}],"src":"24634:1348:33"},{"body":{"nodeType":"YulBlock","src":"26019:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26036:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26043:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"26048:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26039:3:33"},"nodeType":"YulFunctionCall","src":"26039:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26029:6:33"},"nodeType":"YulFunctionCall","src":"26029:31:33"},"nodeType":"YulExpressionStatement","src":"26029:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26076:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"26079:4:33","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26069:6:33"},"nodeType":"YulFunctionCall","src":"26069:15:33"},"nodeType":"YulExpressionStatement","src":"26069:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26100:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26103:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26093:6:33"},"nodeType":"YulFunctionCall","src":"26093:15:33"},"nodeType":"YulExpressionStatement","src":"26093:15:33"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"25987:127:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 4)\n        mstore(add(headStart, 64), 0)\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_array_bool_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_bool(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value3 := abi_decode_array_bool_dyn(add(headStart, offset_3), dataEnd)\n        let offset_4 := calldataload(add(headStart, 128))\n        if gt(offset_4, _1) { revert(0, 0) }\n        value4 := abi_decode_array_bytes_dyn(add(headStart, offset_4), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_bool(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_bool(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_array_bytes32_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_bytes_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, and(shl(96, value2), not(0xffffffffffffffffffffffff)))\n        mstore(add(_1, 20), value3)\n        end := add(_1, 52)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint8_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20(array) -> value\n    {\n        let length := mload(array)\n        let _1 := mload(add(array, 0x20))\n        let _2 := not(0xffffffffffffffffffffffff)\n        value := and(_1, _2)\n        if lt(length, 20)\n        {\n            value := and(and(_1, shl(shl(3, sub(20, length)), _2)), _2)\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_bool_t_bytes_memory_ptr__to_t_uint256_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(value0, shl(176, 0xffffffffffffffffffff)))\n        mstore(add(pos, 10), and(value1, shl(240, 65535)))\n        mstore(add(pos, 12), and(value2, not(0xffffffffffffffffffffffff)))\n        end := add(pos, 32)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4835":[{"length":32,"start":1074},{"length":32,"start":2493}],"4837":[{"length":32,"start":1194},{"length":32,"start":2394}]},"linkReferences":{},"object":"60806040526004361061016a5760003560e01c8063715018a6116100d1578063979024211161008a578063d72fc29a11610064578063d72fc29a146104ee578063dedff9c61461051b578063f0292a031461053b578063f2fde38b14610550576101c5565b8063979024211461048857806398d5fdca1461049b578063b49506fd146104ce576101c5565b8063715018a6146103bb578063760d9bba146103d057806378381670146103f05780637f23690c14610410578063884bf67c146104235780638da5cb5b1461046a576101c5565b806332cb6b0c1161012357806332cb6b0c146102e357806340c10f19146102f857806354f6127f1461030b57806365aeaa95146103385780636963d4381461035857806370a0823114610385576101c5565b806301ffc9a71461020657806318160ddd1461023b5780632bc1da821461025a5780632d7667c91461027c57806330d0dc371461029c578063313ce567146102bc576101c5565b366101c557346000036101ac5760405163e5099ee360e01b81526004016101a39060208082526004908201526000604082015260600190565b60405180910390fd5b604051630e23d6b760e21b815260040160405180910390fd5b600036606060048210156101f057828260405163e5099ee360e01b81526004016101a3929190611bd2565b6101fa8383610570565b80519350602001915050f35b34801561021257600080fd5b50610226610221366004611c01565b610666565b60405190151581526020015b60405180910390f35b34801561024757600080fd5b506003545b604051908152602001610232565b34801561026657600080fd5b5061027a610275366004611d0a565b61069a565b005b34801561028857600080fd5b5061027a610297366004611f3c565b61072a565b3480156102a857600080fd5b5061027a6102b736600461200d565b610819565b3480156102c857600080fd5b506102d16108c1565b60405160ff9091168152602001610232565b3480156102ef57600080fd5b5061024c606481565b61027a61030636600461207b565b6108da565b34801561031757600080fd5b5061032b6103263660046120a5565b610a94565b604051610232919061210e565b34801561034457600080fd5b5061024c610353366004612121565b610a9f565b34801561036457600080fd5b50610378610373366004612154565b610b05565b60405161023291906121c8565b34801561039157600080fd5b5061024c6103a036600461222a565b6001600160a01b031660009081526004602052604090205490565b3480156103c757600080fd5b5061027a610c3b565b3480156103dc57600080fd5b5061027a6103eb366004612245565b610c4f565b3480156103fc57600080fd5b5061027a61040b3660046122b0565b610c77565b61027a61041e3660046122ff565b610d42565b34801561042f57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610232565b34801561047657600080fd5b506000546001600160a01b0316610452565b61027a610496366004612345565b610d77565b3480156104a757600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061024c565b3480156104da57600080fd5b5061027a6104e9366004611d0a565b610e37565b3480156104fa57600080fd5b5061050e61050936600461222a565b610e77565b604051610232919061239e565b34801561052757600080fd5b506103786105363660046123eb565b610e9b565b34801561054757600080fd5b5061024c600581565b34801561055c57600080fd5b5061027a61056b36600461222a565b610f45565b606060006105896000356001600160e01b031916610f80565b5090506001600160a01b0381166105c15760405163bb370b2b60e01b81526001600160e01b03196000351660048201526024016101a3565b600080826001600160a01b031634878733346040516020016105e6949392919061241f565b60408051601f19818403018152908290526106009161244a565b60006040518083038185875af1925050503d806000811461063d576040519150601f19603f3d011682016040523d82523d6000602084013e610642565b606091505b50915091508115610657579250610660915050565b80518060208301fd5b92915050565b60006001600160e01b031982166318a5ac0160e31b148061068b575061068b82610ffe565b80610660575061066082611023565b60006106a68433610a9f565b9050806000036106d45760405163cba6e97760e01b81526001600160a01b03851660048201526024016101a3565b60006106e0848361247c565b90506106f0338683600187611061565b60003382856040516020016107079392919061248f565b604051602081830303815290604052905061072286826111d4565b505050505050565b845184518114158061073d575083518114155b80610749575082518114155b80610755575081518114155b156107735760405163263eee8d60e01b815260040160405180910390fd5b60005b8181101561081057610808878281518110610793576107936124bf565b60200260200101518783815181106107ad576107ad6124bf565b60200260200101518784815181106107c7576107c76124bf565b60200260200101518785815181106107e1576107e16124bf565b60200260200101518786815181106107fb576107fb6124bf565b6020026020010151610c4f565b600101610776565b50505050505050565b336001600160a01b0384161480159061083b5750336001600160a01b03851614155b1561087257604051630d292d9960e11b81523360048201526001600160a01b038085166024830152851660448201526064016101a3565b610880838560008585611061565b81156108bb5760008360008360405160200161089e939291906124d5565b60405160208183030381529060405290506108b985826111d4565b505b50505050565b60025460009060ff166108d45750601290565b50600090565b6064816003546108ea919061247c565b111561090957604051635b21dfd360e11b815260040160405180910390fd5b60058161092b846001600160a01b031660009081526004602052604090205490565b610935919061247c565b111561095457604051635b21dfd360e11b815260040160405180910390fd5b61097e817f0000000000000000000000000000000000000000000000000000000000000000612502565b341461099d5760405163020b5e0b60e11b815260040160405180910390fd5b6109b982826000604051806020016040528060008152506111ff565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163460405160006040518083038185875af1925050503d8060008114610a26576040519150601f19603f3d011682016040523d82523d6000602084013e610a2b565b606091505b5050905080610a4d576040516312171d8360e31b815260040160405180910390fd5b604080516001600160a01b0385168152602081018490527f64f70b72cc0e9e53852e2481e43068b546390216d3d062dbe11d9ecf7580835f910160405180910390a1505050565b6060610660826112ee565b6000826001600160a01b0316826001600160a01b031603610ad957506001600160a01b038116600090815260046020526040902054610660565b506001600160a01b03808216600090815260066020908152604080832093861683529290522054610660565b6060816001600160401b03811115610b1f57610b1f611c47565b604051908082528060200260200182016040528015610b5257816020015b6060815260200190600190039081610b3d5790505b50905060005b82811015610c345760008030868685818110610b7657610b766124bf565b9050602002810190610b889190612519565b604051610b96929190612566565b600060405180830381855af49150503d8060008114610bd1576040519150601f19603f3d011682016040523d82523d6000602084013e610bd6565b606091505b509150915081610c0c57805115610bf05780518082602001fd5b604051632ddd30a160e21b8152600481018490526024016101a3565b80848481518110610c1f57610c1f6124bf565b60209081029190910101525050600101610b58565b5092915050565b610c43611390565b610c4d60006113cc565b565b336001600160a01b03861614610c6a57610c6a33868561143a565b6108b985858585856114c8565b336001600160a01b03841614801590610c995750336001600160a01b03851614155b15610cd0576040516398ce294560e01b81523360048201526001600160a01b038085166024830152851660448201526064016101a3565b6000610cdc8585610a9f565b905082811015610cff57604051630ef76c3560e01b815260040160405180910390fd5b828103610d10858783600187611061565b6000858285604051602001610d279392919061248f565b604051602081830303815290604052905061081087826111d4565b610d4a611390565b3415610d695760405163f36ba73760e01b815260040160405180910390fd5b610d73828261164c565b5050565b610d7f611390565b3415610d9e5760405163f36ba73760e01b815260040160405180910390fd5b8051825114610dc057604051633bcc897960e01b815260040160405180910390fd5b8151600003610de2576040516397da5f9560e01b815260040160405180910390fd5b60005b8251811015610e3257610e2a838281518110610e0357610e036124bf565b6020026020010151838381518110610e1d57610e1d6124bf565b602002602001015161164c565b600101610de5565b505050565b610e45338484600185611061565b6000338383604051602001610e5c9392919061248f565b60405160208183030381529060405290506108bb84826111d4565b6001600160a01b038116600090815260056020526040902060609061066090611656565b606081516001600160401b03811115610eb657610eb6611c47565b604051908082528060200260200182016040528015610ee957816020015b6060815260200190600190039081610ed45790505b50905060005b8251811015610f3f57610f1a838281518110610f0d57610f0d6124bf565b60200260200101516112ee565b828281518110610f2c57610f2c6124bf565b6020908102919091010152600101610eef565b50919050565b610f4d611390565b6001600160a01b038116610f74576040516306b620db60e21b815260040160405180910390fd5b610f7d816113cc565b50565b60008080610fa5696773c5a04a6d4300884b60b11b6001600160e01b03198616611663565b90506000610fb2826112ee565b90508051601414158015610fc65750805115155b15610fe657806040516342bfe79f60e01b81526004016101a3919061210e565b610fef81612576565b60601c95600195509350505050565b60006001600160e01b0319821663a918fa6b60e01b14806106605750610660826116b7565b6000806110366301ffc9a760e01b610f80565b5090506001600160a01b0381166110505750600092915050565b61105a81846116ec565b9392505050565b6001600160a01b038416611088576040516331aaf3b360e11b815260040160405180910390fd5b846001600160a01b0316846001600160a01b0316036110ba5760405163dab7504760e01b815260040160405180910390fd5b6001600160a01b038086166000908152600660209081526040808320938816835292905220839055821561115c576001600160a01b038516600090815260056020526040902061110a9085611776565b5082856001600160a01b0316856001600160a01b03167ff772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d8460405161114f919061210e565b60405180910390a46108b9565b6001600160a01b038516600090815260056020526040902061117e908561178b565b50811515856001600160a01b0316856001600160a01b03167f0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167846040516111c5919061210e565b60405180910390a45050505050565b610d73827f386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc836117a0565b6001600160a01b03841661122657604051630d2d5ec360e41b815260040160405180910390fd5b8260036000828254611238919061247c565b90915550506001600160a01b0384166000908152600460205260408120805485929061126590849061247c565b90915550506040516001600160a01b0385169060009033907f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6906112ae908890889088906125ad565b60405180910390a460003360008686856040516020016112d29594939291906125ce565b60405160208183030381529060405290506108b9858483611834565b600081815260016020526040902080546060919061130b90612609565b80601f016020809104026020016040519081016040528092919081815260200182805461133790612609565b80156113845780601f1061135957610100808354040283529160200191611384565b820191906000526020600020905b81548152906001019060200180831161136757829003601f168201915b50505050509050919050565b336113a36000546001600160a01b031690565b6001600160a01b031614610c4d5760405163bf1169c560e01b81523360048201526024016101a3565b6000546001600160a01b03828116911614610f7d57600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b6001600160a01b03808316600090815260066020908152604080832093871683529290522054808211156114a25760405163f3a6b69160e01b81526001600160a01b0380851660048301526024820183905285166044820152606481018390526084016101a3565b6108bb83856114b1858561263d565b600060405180602001604052806000815250611061565b6001600160a01b03851615806114e557506001600160a01b038416155b1561150357604051630d2d5ec360e41b815260040160405180910390fd5b6001600160a01b03851660009081526004602052604090205480841115611556576040516308d4794960e01b8152600481018290526001600160a01b0387166024820152604481018590526064016101a3565b6001600160a01b0386166000908152600460205260408120805486929061157e90849061263d565b90915550506001600160a01b038516600090815260046020526040812080548692906115ab90849061247c565b92505081905550846001600160a01b0316866001600160a01b0316336001600160a01b03167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6878787604051611603939291906125ad565b60405180910390a4600033878787866040516020016116269594939291906125ce565b604051602081830303815290604052905061164187826118f5565b610810868583611834565b610d738282611920565b6060600061105a83611a35565b604080516001600160b01b0319841660208201526000602a82018190526001600160601b03198416602c830152918291016040516020818303038152906040529050806116af90612650565b949350505050565b60006001600160e01b031982166318a6a9a560e21b148061066057506301ffc9a760e01b6001600160e01b0319831614610660565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180516001600160e01b03166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d9150600051905082801561175f575060208210155b801561176b5750600081115b979650505050505050565b600061105a836001600160a01b038416611a90565b600061105a836001600160a01b038416611adf565b6117ba6001600160a01b038416631aed5a8560e21b6116ec565b15610e3257604051631aed5a8560e21b81526001600160a01b03841690636bb56a14906117ed9085908590600401612674565b6000604051808303816000875af115801561180c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108bb919081019061268d565b61184583631aed5a8560e21b6116ec565b1561189857604051631aed5a8560e21b81526001600160a01b03841690636bb56a14906117ed907f20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c908590600401612674565b81610e32576001600160a01b0383163b156118d1576040516353047ddb60e11b81526001600160a01b03841660048201526024016101a3565b6040516309b091fd60e21b81526001600160a01b03841660048201526024016101a3565b610d73827f429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea836117a0565b7f2145e1d6d074577dc71ef54c3807742b41b053a9352ae6b491331509acb9750f8201611960576040516385c169bd60e01b815260040160405180910390fd5b7fd0f59754f88971fe6bc5a6618cc9d5f1e859c58d16b22d1c7b2d3e2b246cd8aa82016119a057604051630eceab6760e31b815260040160405180910390fd5b7f1fd9e056a24d14c4abc642fcc325992a946906d0dbc57dd70278aaf12842024d82016119e057604051634ef6d7fb60e01b815260040160405180910390fd5b60008281526001602052604090206119f88282612740565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b282604051611a29919061210e565b60405180910390a25050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561138457602002820191906000526020600020905b815481526020019060010190808311611a715750505050509050919050565b6000818152600183016020526040812054611ad757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610660565b506000610660565b60008181526001830160205260408120548015611bc8576000611b0360018361263d565b8554909150600090611b179060019061263d565b9050808214611b7c576000866000018281548110611b3757611b376124bf565b9060005260206000200154905080876000018481548110611b5a57611b5a6124bf565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b8d57611b8d6127ff565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610660565b6000915050610660565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215611c1357600080fd5b81356001600160e01b03198116811461105a57600080fd5b80356001600160a01b0381168114611c4257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611c8557611c85611c47565b604052919050565b60006001600160401b03821115611ca657611ca6611c47565b50601f01601f191660200190565b600082601f830112611cc557600080fd5b8135611cd8611cd382611c8d565b611c5d565b818152846020838601011115611ced57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611d1f57600080fd5b611d2884611c2b565b92506020840135915060408401356001600160401b03811115611d4a57600080fd5b611d5686828701611cb4565b9150509250925092565b60006001600160401b03821115611d7957611d79611c47565b5060051b60200190565b600082601f830112611d9457600080fd5b81356020611da4611cd383611d60565b82815260059290921b84018101918181019086841115611dc357600080fd5b8286015b84811015611de557611dd881611c2b565b8352918301918301611dc7565b509695505050505050565b600082601f830112611e0157600080fd5b81356020611e11611cd383611d60565b82815260059290921b84018101918181019086841115611e3057600080fd5b8286015b84811015611de55780358352918301918301611e34565b80358015158114611c4257600080fd5b600082601f830112611e6c57600080fd5b81356020611e7c611cd383611d60565b82815260059290921b84018101918181019086841115611e9b57600080fd5b8286015b84811015611de557611eb081611e4b565b8352918301918301611e9f565b600082601f830112611ece57600080fd5b81356020611ede611cd383611d60565b82815260059290921b84018101918181019086841115611efd57600080fd5b8286015b84811015611de55780356001600160401b03811115611f205760008081fd5b611f2e8986838b0101611cb4565b845250918301918301611f01565b600080600080600060a08688031215611f5457600080fd5b85356001600160401b0380821115611f6b57600080fd5b611f7789838a01611d83565b96506020880135915080821115611f8d57600080fd5b611f9989838a01611d83565b95506040880135915080821115611faf57600080fd5b611fbb89838a01611df0565b94506060880135915080821115611fd157600080fd5b611fdd89838a01611e5b565b93506080880135915080821115611ff357600080fd5b5061200088828901611ebd565b9150509295509295909350565b6000806000806080858703121561202357600080fd5b61202c85611c2b565b935061203a60208601611c2b565b925061204860408601611e4b565b915060608501356001600160401b0381111561206357600080fd5b61206f87828801611cb4565b91505092959194509250565b6000806040838503121561208e57600080fd5b61209783611c2b565b946020939093013593505050565b6000602082840312156120b757600080fd5b5035919050565b60005b838110156120d95781810151838201526020016120c1565b50506000910152565b600081518084526120fa8160208601602086016120be565b601f01601f19169290920160200192915050565b60208152600061105a60208301846120e2565b6000806040838503121561213457600080fd5b61213d83611c2b565b915061214b60208401611c2b565b90509250929050565b6000806020838503121561216757600080fd5b82356001600160401b038082111561217e57600080fd5b818501915085601f83011261219257600080fd5b8135818111156121a157600080fd5b8660208260051b85010111156121b657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561221d57603f1988860301845261220b8583516120e2565b945092850192908501906001016121ef565b5092979650505050505050565b60006020828403121561223c57600080fd5b61105a82611c2b565b600080600080600060a0868803121561225d57600080fd5b61226686611c2b565b945061227460208701611c2b565b93506040860135925061228960608701611e4b565b915060808601356001600160401b038111156122a457600080fd5b61200088828901611cb4565b600080600080608085870312156122c657600080fd5b6122cf85611c2b565b93506122dd60208601611c2b565b92506040850135915060608501356001600160401b0381111561206357600080fd5b6000806040838503121561231257600080fd5b8235915060208301356001600160401b0381111561232f57600080fd5b61233b85828601611cb4565b9150509250929050565b6000806040838503121561235857600080fd5b82356001600160401b038082111561236f57600080fd5b61237b86838701611df0565b9350602085013591508082111561239157600080fd5b5061233b85828601611ebd565b6020808252825182820181905260009190848201906040850190845b818110156123df5783516001600160a01b0316835292840192918401916001016123ba565b50909695505050505050565b6000602082840312156123fd57600080fd5b81356001600160401b0381111561241357600080fd5b6116af84828501611df0565b8385823760609290921b6001600160601b031916919092019081526014810191909152603401919050565b6000825161245c8184602087016120be565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561066057610660612466565b60018060a01b03841681528260208201526060604082015260006124b660608301846120e2565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038416815260ff831660208201526060604082018190526000906124b6908301846120e2565b808202811582820484141761066057610660612466565b6000808335601e1984360301811261253057600080fd5b8301803591506001600160401b0382111561254a57600080fd5b60200191503681900382131561255f57600080fd5b9250929050565b8183823760009101908152919050565b805160208201516001600160601b031980821692919060148310156125a55780818460140360031b1b83161693505b505050919050565b83815282151560208201526060604082015260006124b660608301846120e2565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a06080820181905260009061176b908301846120e2565b600181811c9082168061261d57607f821691505b602082108103610f3f57634e487b7160e01b600052602260045260246000fd5b8181038181111561066057610660612466565b80516020808301519190811015610f3f5760001960209190910360031b1b16919050565b8281526040602082015260006116af60408301846120e2565b60006020828403121561269f57600080fd5b81516001600160401b038111156126b557600080fd5b8201601f810184136126c657600080fd5b80516126d4611cd382611c8d565b8181528560208385010111156126e957600080fd5b6124b68260208301602086016120be565b601f821115610e3257600081815260208120601f850160051c810160208610156127215750805b601f850160051c820191505b818110156107225782815560010161272d565b81516001600160401b0381111561275957612759611c47565b61276d816127678454612609565b846126fa565b602080601f8311600181146127a2576000841561278a5750858301515b600019600386901b1c1916600185901b178555610722565b600085815260208120601f198616915b828110156127d1578886015182559484019460019091019084016127b2565b50858210156127ef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e58372efac78e61a2bcec4d74d745f15c931d43ca998c7891c513f926ce547cc64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x16A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x97902421 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD72FC29A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD72FC29A EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0xF0292A03 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x550 JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x97902421 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0xB49506FD EQ PUSH2 0x4CE JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0x760D9BBA EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x78381670 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x884BF67C EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46A JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x32CB6B0C GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x65AEAA95 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x385 JUMPI PUSH2 0x1C5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x2BC1DA82 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x2D7667C9 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x30D0DC37 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2BC JUMPI PUSH2 0x1C5 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1C5 JUMPI CALLVALUE PUSH1 0x0 SUB PUSH2 0x1AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE23D6B7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x60 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x1F0 JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP3 SWAP2 SWAP1 PUSH2 0x1BD2 JUMP JUMPDEST PUSH2 0x1FA DUP4 DUP4 PUSH2 0x570 JUMP JUMPDEST DUP1 MLOAD SWAP4 POP PUSH1 0x20 ADD SWAP2 POP POP RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C01 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F3C JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x200D JUMP JUMPDEST PUSH2 0x819 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D1 PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x207B JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x20A5 JUMP JUMPDEST PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2121 JUMP JUMPDEST PUSH2 0xA9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x2154 JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x21C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x3A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0xC3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x2245 JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x40B CALLDATASIZE PUSH1 0x4 PUSH2 0x22B0 JUMP JUMPDEST PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x22FF JUMP JUMPDEST PUSH2 0xD42 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x232 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x452 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x2345 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0xE37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50E PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xE77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x232 SWAP2 SWAP1 PUSH2 0x239E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x23EB JUMP JUMPDEST PUSH2 0xE9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH2 0x56B CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x589 PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0xF80 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 CALLDATALOAD AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP8 DUP8 CALLER CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5E6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x241F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x600 SWAP2 PUSH2 0x244A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x642 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x657 JUMPI SWAP3 POP PUSH2 0x660 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH1 0x20 DUP4 ADD REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A5AC01 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x68B JUMPI POP PUSH2 0x68B DUP3 PUSH2 0xFFE JUMP JUMPDEST DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP3 PUSH2 0x1023 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A6 DUP5 CALLER PUSH2 0xA9F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCBA6E977 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E0 DUP5 DUP4 PUSH2 0x247C JUMP JUMPDEST SWAP1 POP PUSH2 0x6F0 CALLER DUP7 DUP4 PUSH1 0x1 DUP8 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 CALLER DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x707 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x722 DUP7 DUP3 PUSH2 0x11D4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP5 MLOAD DUP5 MLOAD DUP2 EQ ISZERO DUP1 PUSH2 0x73D JUMPI POP DUP4 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0x749 JUMPI POP DUP3 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0x755 JUMPI POP DUP2 MLOAD DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x773 JUMPI PUSH1 0x40 MLOAD PUSH4 0x263EEE8D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x810 JUMPI PUSH2 0x808 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x793 JUMPI PUSH2 0x793 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7AD JUMPI PUSH2 0x7AD PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7C7 JUMPI PUSH2 0x7C7 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E1 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7FB JUMPI PUSH2 0x7FB PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x776 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x83B JUMPI POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD292D99 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x880 DUP4 DUP6 PUSH1 0x0 DUP6 DUP6 PUSH2 0x1061 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x8BB JUMPI PUSH1 0x0 DUP4 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x89E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8B9 DUP6 DUP3 PUSH2 0x11D4 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x8D4 JUMPI POP PUSH1 0x12 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH1 0x3 SLOAD PUSH2 0x8EA SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST GT ISZERO PUSH2 0x909 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 PUSH2 0x92B DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x935 SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST GT ISZERO PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x97E DUP2 PUSH32 0x0 PUSH2 0x2502 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH4 0x20B5E0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B9 DUP3 DUP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA2B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x64F70B72CC0E9E53852E2481E43068B546390216D3D062DBE11D9ECF7580835F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x660 DUP3 PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xAD9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x660 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x660 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB52 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB3D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xC34 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0xB76 JUMPI PUSH2 0xB76 PUSH2 0x24BF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB88 SWAP2 SWAP1 PUSH2 0x2519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB96 SWAP3 SWAP2 SWAP1 PUSH2 0x2566 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBD6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xC0C JUMPI DUP1 MLOAD ISZERO PUSH2 0xBF0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2DDD30A1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC1F JUMPI PUSH2 0xC1F PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xB58 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x1390 JUMP JUMPDEST PUSH2 0xC4D PUSH1 0x0 PUSH2 0x13CC JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xC6A JUMPI PUSH2 0xC6A CALLER DUP7 DUP6 PUSH2 0x143A JUMP JUMPDEST PUSH2 0x8B9 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x14C8 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0xC99 JUMPI POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x98CE2945 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDC DUP6 DUP6 PUSH2 0xA9F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xCFF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEF76C35 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB PUSH2 0xD10 DUP6 DUP8 DUP4 PUSH1 0x1 DUP8 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD27 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x810 DUP8 DUP3 PUSH2 0x11D4 JUMP JUMPDEST PUSH2 0xD4A PUSH2 0x1390 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD73 DUP3 DUP3 PUSH2 0x164C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD7F PUSH2 0x1390 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xDC0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xDE2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xE32 JUMPI PUSH2 0xE2A DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE1D JUMPI PUSH2 0xE1D PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x164C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xDE5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xE45 CALLER DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x0 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE5C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8BB DUP5 DUP3 PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0x660 SWAP1 PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE9 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xED4 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xF3F JUMPI PUSH2 0xF1A DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF0D JUMPI PUSH2 0xF0D PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12EE JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF2C JUMPI PUSH2 0xF2C PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xEEF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF4D PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7D DUP2 PUSH2 0x13CC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0xFA5 PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND PUSH2 0x1663 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFB2 DUP3 PUSH2 0x12EE JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x14 EQ ISZERO DUP1 ISZERO PUSH2 0xFC6 JUMPI POP DUP1 MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xFE6 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH2 0xFEF DUP2 PUSH2 0x2576 JUMP JUMPDEST PUSH1 0x60 SHR SWAP6 PUSH1 0x1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA918FA6B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x660 JUMPI POP PUSH2 0x660 DUP3 PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1036 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0xF80 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1050 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x105A DUP2 DUP5 PUSH2 0x16EC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31AAF3B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x10BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xDAB75047 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP3 ISZERO PUSH2 0x115C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x110A SWAP1 DUP6 PUSH2 0x1776 JUMP JUMPDEST POP DUP3 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF772A43BFDF4729B196E3FB54A818B91A2CA6C49D10B2E16278752F9F515C25D DUP5 PUSH1 0x40 MLOAD PUSH2 0x114F SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x117E SWAP1 DUP6 PUSH2 0x178B JUMP JUMPDEST POP DUP2 ISZERO ISZERO DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBF5762D8855CBE012D2CA42FB33A81175E17C8A8751F8859931BA453BD4167 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11C5 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD73 DUP3 PUSH32 0x386072CC5A58E61263B434C722725F21031CD06E7C552CFAA06DB5DE8A320DBC DUP4 PUSH2 0x17A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1226 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD2D5EC3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1238 SWAP2 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x1265 SWAP1 DUP5 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0x3997E418D2CEF0B3B0E907B1E39605C3F7D32DBD061E82EA5B4A770D46A160A6 SWAP1 PUSH2 0x12AE SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER PUSH1 0x0 DUP7 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x8B9 DUP6 DUP5 DUP4 PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x130B SWAP1 PUSH2 0x2609 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1337 SWAP1 PUSH2 0x2609 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1384 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1359 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1384 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1367 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x13A3 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC4D JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x14A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3A6B691 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x8BB DUP4 DUP6 PUSH2 0x14B1 DUP6 DUP6 PUSH2 0x263D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1061 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO DUP1 PUSH2 0x14E5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO JUMPDEST ISZERO PUSH2 0x1503 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD2D5EC3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP5 GT ISZERO PUSH2 0x1556 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8D47949 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x157E SWAP1 DUP5 SWAP1 PUSH2 0x263D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x15AB SWAP1 DUP5 SWAP1 PUSH2 0x247C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x3997E418D2CEF0B3B0E907B1E39605C3F7D32DBD061E82EA5B4A770D46A160A6 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1603 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP8 DUP8 DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1626 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x1641 DUP8 DUP3 PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0x810 DUP7 DUP6 DUP4 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0xD73 DUP3 DUP3 PUSH2 0x1920 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x105A DUP4 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP5 AND PUSH1 0x2C DUP4 ADD MSTORE SWAP2 DUP3 SWAP2 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x16AF SWAP1 PUSH2 0x2650 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x660 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x660 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 DUP11 PUSH2 0x7530 STATICCALL SWAP3 POP RETURNDATASIZE SWAP2 POP PUSH1 0x0 MLOAD SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x175F JUMPI POP PUSH1 0x20 DUP3 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x176B JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1A90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x17BA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x16EC JUMP JUMPDEST ISZERO PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x17ED SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2674 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x180C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8BB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x268D JUMP JUMPDEST PUSH2 0x1845 DUP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x16EC JUMP JUMPDEST ISZERO PUSH2 0x1898 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x17ED SWAP1 PUSH32 0x20804611B3E2EA21C480DC465142210ACF4A2485947541770EC1FB87DEE4A55C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2674 JUMP JUMPDEST DUP2 PUSH2 0xE32 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x18D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x53047DDB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9B091FD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0xD73 DUP3 PUSH32 0x429AC7A06903DBC9C13DFCB3C9D11DF8194581FA047C96D7A4171FC7402958EA DUP4 PUSH2 0x17A0 JUMP JUMPDEST PUSH32 0x2145E1D6D074577DC71EF54C3807742B41B053A9352AE6B491331509ACB9750F DUP3 ADD PUSH2 0x1960 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xD0F59754F88971FE6BC5A6618CC9D5F1E859C58D16B22D1C7B2D3E2B246CD8AA DUP3 ADD PUSH2 0x19A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1FD9E056A24D14C4ABC642FCC325992A946906D0DBC57DD70278AAF12842024D DUP3 ADD PUSH2 0x19E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x19F8 DUP3 DUP3 PUSH2 0x2740 JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1A29 SWAP2 SWAP1 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1384 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1A71 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1AD7 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x660 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x660 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1BC8 JUMPI PUSH1 0x0 PUSH2 0x1B03 PUSH1 0x1 DUP4 PUSH2 0x263D JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1B17 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x263D JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1B7C JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1B37 JUMPI PUSH2 0x1B37 PUSH2 0x24BF JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1B5A JUMPI PUSH2 0x1B5A PUSH2 0x24BF JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1B8D JUMPI PUSH2 0x1B8D PUSH2 0x27FF JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x660 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x660 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C85 JUMPI PUSH2 0x1C85 PUSH2 0x1C47 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1CA6 JUMPI PUSH2 0x1CA6 PUSH2 0x1C47 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1CC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CD8 PUSH2 0x1CD3 DUP3 PUSH2 0x1C8D JUMP JUMPDEST PUSH2 0x1C5D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1CED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D28 DUP5 PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D56 DUP7 DUP3 DUP8 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1D79 JUMPI PUSH2 0x1D79 PUSH2 0x1C47 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1DA4 PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI PUSH2 0x1DD8 DUP2 PUSH2 0x1C2B JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1DC7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E11 PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1E34 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E7C PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1E9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI PUSH2 0x1EB0 DUP2 PUSH2 0x1E4B JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1E9F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1ECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1EDE PUSH2 0x1CD3 DUP4 PUSH2 0x1D60 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x1EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1F20 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F2E DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x1CB4 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1F01 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F77 DUP10 DUP4 DUP11 ADD PUSH2 0x1D83 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1F8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F99 DUP10 DUP4 DUP11 ADD PUSH2 0x1D83 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FBB DUP10 DUP4 DUP11 ADD PUSH2 0x1DF0 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FDD DUP10 DUP4 DUP11 ADD PUSH2 0x1E5B JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2000 DUP9 DUP3 DUP10 ADD PUSH2 0x1EBD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2023 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x202C DUP6 PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH2 0x203A PUSH1 0x20 DUP7 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH2 0x2048 PUSH1 0x40 DUP7 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x206F DUP8 DUP3 DUP9 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x208E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2097 DUP4 PUSH2 0x1C2B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20D9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20C1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x20FA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x105A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x213D DUP4 PUSH2 0x1C2B JUMP JUMPDEST SWAP2 POP PUSH2 0x214B PUSH1 0x20 DUP5 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x217E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x21A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x21B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x221D JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x220B DUP6 DUP4 MLOAD PUSH2 0x20E2 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x21EF JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x105A DUP3 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x225D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2266 DUP7 PUSH2 0x1C2B JUMP JUMPDEST SWAP5 POP PUSH2 0x2274 PUSH1 0x20 DUP8 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x2289 PUSH1 0x60 DUP8 ADD PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2000 DUP9 DUP3 DUP10 ADD PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22CF DUP6 PUSH2 0x1C2B JUMP JUMPDEST SWAP4 POP PUSH2 0x22DD PUSH1 0x20 DUP7 ADD PUSH2 0x1C2B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x232F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x233B DUP6 DUP3 DUP7 ADD PUSH2 0x1CB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x236F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x237B DUP7 DUP4 DUP8 ADD PUSH2 0x1DF0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x233B DUP6 DUP3 DUP7 ADD PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23DF JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23BA JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16AF DUP5 DUP3 DUP6 ADD PUSH2 0x1DF0 JUMP JUMPDEST DUP4 DUP6 DUP3 CALLDATACOPY PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x245C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20BE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x24B6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0xFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x24B6 SWAP1 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x254A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x255F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x25A5 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x24B6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x176B SWAP1 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x261D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF3F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x660 JUMPI PUSH2 0x660 PUSH2 0x2466 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x16AF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x26B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x26C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x26D4 PUSH2 0x1CD3 DUP3 PUSH2 0x1C8D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x26E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24B6 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2721 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x722 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x272D JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2759 JUMPI PUSH2 0x2759 PUSH2 0x1C47 JUMP JUMPDEST PUSH2 0x276D DUP2 PUSH2 0x2767 DUP5 SLOAD PUSH2 0x2609 JUMP JUMPDEST DUP5 PUSH2 0x26FA JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x27A2 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x278A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x722 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27D1 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x27B2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27EF JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 DUP4 PUSH19 0xEFAC78E61A2BCEC4D74D745F15C931D43CA998 0xC7 DUP10 SHR MLOAD EXTCODEHASH SWAP3 PUSH13 0xE547CC64736F6C634300081400 CALLER ","sourceMap":"316:1248:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4547:9:19;4560:1;4547:14;4543:90;;4584:38;;-1:-1:-1;;;4584:38:19;;;;;;215:2:33;197:21;;;254:1;234:18;;;227:29;-1:-1:-1;287:2:33;272:18;;265:29;326:2;311:18;;14:321;4584:38:19;;;;;;;;4543:90;4650:34;;-1:-1:-1;;;4650:34:19;;;;;;;;;;;316:1248:31;;;4114:12:19;4160:1;4142:19;;4138:90;;;4208:8;;4184:33;;-1:-1:-1;;;4184:33:19;;;;;;;;;:::i;4138:90::-;4244:34;4269:8;;4244:24;:34::i;:::-;316:1248:31;;;-1:-1:-1;316:1248:31;;;-1:-1:-1;;316:1248:31;7842:388:19;;;;;;;;;;-1:-1:-1;7842:388:19;;;;;:::i;:::-;;:::i;:::-;;;1189:14:33;;1182:22;1164:41;;1152:2;1137:18;7842:388:19;;;;;;;;2439:109:20;;;;;;;;;;-1:-1:-1;2526:15:20;;2439:109;;;1362:25:33;;;1350:2;1335:18;2439:109:20;1216:177:33;6598:762:20;;;;;;;;;;-1:-1:-1;6598:762:20;;;;;:::i;:::-;;:::i;:::-;;9121:779;;;;;;;;;;-1:-1:-1;9121:779:20;;;;;:::i;:::-;;:::i;5123:801::-;;;;;;;;;;-1:-1:-1;5123:801:20;;;;;:::i;:::-;;:::i;2267:113::-;;;;;;;;;;;;;:::i;:::-;;;8359:4:33;8347:17;;;8329:36;;8317:2;8302:18;2267:113:20;8187:184:33;369:40:31;;;;;;;;;;;;406:3;369:40;;836:540;;;;;;:::i;:::-;;:::i;1197:156:1:-;;;;;;;;;;-1:-1:-1;1197:156:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5983:328:20:-;;;;;;;;;;-1:-1:-1;5983:328:20;;;;;:::i;:::-;;:::i;3005:1081::-;;;;;;;;;;-1:-1:-1;3005:1081:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2639:155::-;;;;;;;;;;-1:-1:-1;2639:155:20;;;;;:::i;:::-;-1:-1:-1;;;;;2756:31:20;2730:7;2756:31;;;:19;:31;;;;;;;2639:155;1313:92:3;;;;;;;;;;;;;:::i;8643:419:20:-;;;;;;;;;;-1:-1:-1;8643:419:20;;;;;:::i;:::-;;:::i;7419:1130::-;;;;;;;;;;-1:-1:-1;7419:1130:20;;;;;:::i;:::-;;:::i;2326:232:1:-;;;;;;:::i;:::-;;:::i;1382:91:31:-;;;;;;;;;;-1:-1:-1;1455:11:31;1382:91;;;-1:-1:-1;;;;;13174:32:33;;;13156:51;;13144:2;13129:18;1382:91:31;13010:203:33;736:85:3;;;;;;;;;;-1:-1:-1;782:7:3;808:6;-1:-1:-1;;;;;808:6:3;736:85;;3076:763:1;;;;;;:::i;:::-;;:::i;1479:83:31:-;;;;;;;;;;-1:-1:-1;1548:7:31;1479:83;;4558:506:20;;;;;;;;;;-1:-1:-1;4558:506:20;;;;;:::i;:::-;;:::i;6370:169::-;;;;;;;;;;-1:-1:-1;6370:169:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1403:458:1:-;;;;;;;;;;-1:-1:-1;1403:458:1;;;;;:::i;:::-;;:::i;415:36:31:-;;;;;;;;;;;;450:1;415:36;;1554:211:3;;;;;;;;;;-1:-1:-1;1554:211:3;;;;;:::i;:::-;;:::i;5619:1041:19:-;5727:12;5795:17;5818:37;5847:7;;-1:-1:-1;;;;;;5847:7:19;5818:28;:37::i;:::-;-1:-1:-1;5794:61:19;-1:-1:-1;;;;;;5915:23:19;;5911:92;;5959:44;;-1:-1:-1;;;5959:44:19;;-1:-1:-1;;;;;;5995:7:19;;;5959:44;;;15652:52:33;15625:18;;5959:44:19;15508:202:33;5911:92:19;6015:12;6029:19;6052:9;-1:-1:-1;;;;;6052:14:19;6074:9;6115:8;;6125:10;6137:9;6098:49;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6098:49:19;;;;;;;;;;6052:105;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6014:143;;;;6172:7;6168:486;;;6202:6;-1:-1:-1;6195:13:19;;-1:-1:-1;;6195:13:19;6168:486;6566:6;6560:13;6614:15;6609:2;6601:6;6597:15;6590:40;5619:1041;;;;;:::o;7842:388::-;8020:4;-1:-1:-1;;;;;;8059:32:19;;-1:-1:-1;;;8059:32:19;;:84;;;8107:36;8131:11;8107:23;:36::i;:::-;8059:164;;;;8159:64;8211:11;8159:51;:64::i;6598:762:20:-;6767:20;6790:41;6810:8;6820:10;6790:19;:41::i;:::-;6767:64;;6845:12;6861:1;6845:17;6841:94;;6883:52;;-1:-1:-1;;;6883:52:20;;-1:-1:-1;;;;;13174:32:33;;6883:52:20;;;13156:51:33;13129:18;;6883:52:20;13010:203:33;6841:94:20;6946:20;6969:26;6984:11;6969:12;:26;:::i;:::-;6946:49;;7006:153;7035:10;7059:8;7081:12;7107:4;7125:24;7006:15;:153::i;:::-;7170:21;7218:10;7242:12;7268:24;7194:108;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7170:132;;7313:40;7334:8;7344;7313:20;:40::i;:::-;6757:603;;;6598:762;;;:::o;9121:779::-;9356:11;;9408:9;;9394:23;;;;:66;;;9447:6;:13;9433:10;:27;;9394:66;:108;;;;9490:5;:12;9476:10;:26;;9394:108;:149;;;;9532:4;:11;9518:10;:25;;9394:149;9377:235;;;9575:26;;-1:-1:-1;;;9575:26:20;;;;;;;;;;;9377:235;9627:9;9622:272;9642:10;9638:1;:14;9622:272;;;9769:54;9778:4;9783:1;9778:7;;;;;;;;:::i;:::-;;;;;;;9787:2;9790:1;9787:5;;;;;;;;:::i;:::-;;;;;;;9794:6;9801:1;9794:9;;;;;;;;:::i;:::-;;;;;;;9805:5;9811:1;9805:8;;;;;;;;:::i;:::-;;;;;;;9815:4;9820:1;9815:7;;;;;;;;:::i;:::-;;;;;;;9769:8;:54::i;:::-;9866:3;;9622:272;;;;9325:575;9121:779;;;;;:::o;5123:801::-;5313:10;-1:-1:-1;;;;;5313:24:20;;;;;;:50;;-1:-1:-1;5341:10:20;-1:-1:-1;;;;;5341:22:20;;;;5313:50;5309:215;;;5386:127;;-1:-1:-1;;;5386:127:20;;5435:10;5386:127;;;17460:34:33;-1:-1:-1;;;;;17530:15:33;;;17510:18;;;17503:43;17582:15;;17562:18;;;17555:43;17395:18;;5386:127:20;17220:384:33;5309:215:20;5534:144;5563:10;5587:8;5609:1;5624:6;5644:24;5534:15;:144::i;:::-;5693:6;5689:229;;;5715:21;5767:10;5795:1;5814:24;5739:113;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5715:137;;5867:40;5888:8;5898;5867:20;:40::i;:::-;5701:217;5689:229;5123:801;;;;:::o;2267:113::-;2349:15;;2325:5;;2349:15;;:24;;-1:-1:-1;2371:2:20;;2267:113::o;2349:24::-;-1:-1:-1;2367:1:20;;2267:113::o;836:540:31:-;406:3;957:7;939:15;;:25;;;;:::i;:::-;:38;936:69;;;986:19;;-1:-1:-1;;;986:19:31;;;;;;;;;;;936:69;450:1;1042:7;1018:21;1028:10;-1:-1:-1;;;;;2756:31:20;2730:7;2756:31;;;:19;:31;;;;;;;2639:155;1018:21:31;:31;;;;:::i;:::-;:42;1015:73;;;1069:19;;-1:-1:-1;;;1069:19:31;;;;;;;;;;;1015:73;1114:17;1124:7;1114;:17;:::i;:::-;1101:9;:30;1098:60;;1140:18;;-1:-1:-1;;;1140:18:31;;;;;;;;;;;1098:60;1169:37;1175:10;1187:7;1196:5;1169:37;;;;;;;;;;;;:5;:37::i;:::-;1218:12;1235:11;-1:-1:-1;;;;;1235:16:31;1259:9;1235:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1217:56;;;1287:7;1283:36;;1303:16;;-1:-1:-1;;;1303:16:31;;;;;;;;;;;1283:36;1335:34;;;-1:-1:-1;;;;;18591:32:33;;18573:51;;18655:2;18640:18;;18633:34;;;1335::31;;18546:18:33;1335:34:31;;;;;;;926:450;836:540;;:::o;1197:156:1:-;1283:22;1329:17;1338:7;1329:8;:17::i;5983:328:20:-;6110:7;6147:8;-1:-1:-1;;;;;6133:22:20;:10;-1:-1:-1;;;;;6133:22:20;;6129:176;;-1:-1:-1;;;;;;6178:31:20;;;;;;:19;:31;;;;;;6171:38;;6129:176;-1:-1:-1;;;;;;6247:37:20;;;;;;;:25;:37;;;;;;;;:47;;;;;;;;;;6240:54;;3005:1081;3095:22;3151:4;-1:-1:-1;;;;;3139:24:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3129:34;;3178:9;3173:907;3189:15;;;3173:907;;;3223:12;;3268:4;3304;;3309:1;3304:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;3260:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3222:103;;;;3345:7;3340:636;;3446:13;;:18;3442:520;;3761:6;3755:13;3817:15;3808:6;3804:2;3800:15;3793:40;3442:520;3908:35;;-1:-1:-1;;;3908:35:20;;;;;1362:25:33;;;1335:18;;3908:35:20;1216:177:33;3442:520:20;4003:6;3990:7;3998:1;3990:10;;;;;;;;:::i;:::-;;;;;;;;;;:19;-1:-1:-1;;4052:3:20;;3173:907;;;;3005:1081;;;;:::o;1313:92:3:-;940:13;:11;:13::i;:::-;1377:21:::1;1395:1;1377:9;:21::i;:::-;1313:92::o:0;8643:419:20:-;8818:10;-1:-1:-1;;;;;8818:18:20;;;8814:191;;8852:142;8896:10;8936:4;8973:6;8852:15;:142::i;:::-;9015:40;9025:4;9031:2;9035:6;9043:5;9050:4;9015:9;:40::i;7419:1130::-;7625:10;-1:-1:-1;;;;;7625:24:20;;;;;;:50;;-1:-1:-1;7653:10:20;-1:-1:-1;;;;;7653:22:20;;;;7625:50;7621:218;;;7698:130;;-1:-1:-1;;;7698:130:20;;7750:10;7698:130;;;17460:34:33;-1:-1:-1;;;;;17530:15:33;;;17510:18;;;17503:43;17582:15;;17562:18;;;17555:43;17395:18;;7698:130:20;17220:384:33;7621:218:20;7849:24;7876:41;7896:8;7906:10;7876:19;:41::i;:::-;7849:68;;7950:16;7931;:35;7927:106;;;7989:33;;-1:-1:-1;;;7989:33:20;;;;;;;;;;;7927:106;8112:35;;;8161:177;8194:10;8222:8;8112:35;8278:4;8300:24;8161:15;:177::i;:::-;8359:21;8407:10;8431:12;8457:24;8383:108;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8359:132;;8502:40;8523:8;8533;8502:20;:40::i;2326:232:1:-;940:13:3;:11;:13::i;:::-;2462:9:1::1;:14:::0;2458:55:::1;;2485:28;;-1:-1:-1::0;;;2485:28:1::1;;;;;;;;;;;2458:55;2523:28;2532:7;2541:9;2523:8;:28::i;:::-;2326:232:::0;;:::o;3076:763::-;940:13:3;:11;:13::i;:::-;3314:9:1::1;:14:::0;3310:55:::1;;3337:28;;-1:-1:-1::0;;;3337:28:1::1;;;;;;;;;;;3310:55;3399:10;:17;3380:8;:15;:36;3376:112;;3439:38;;-1:-1:-1::0;;;3439:38:1::1;;;;;;;;;;;3376:112;3502:8;:15;3521:1;3502:20:::0;3498:92:::1;;3545:34;;-1:-1:-1::0;;;3545:34:1::1;;;;;;;;;;;3498:92;3605:9;3600:233;3624:8;:15;3620:1;:19;3600:233;;;3657:36;3666:8;3675:1;3666:11;;;;;;;;:::i;:::-;;;;;;;3679:10;3690:1;3679:13;;;;;;;;:::i;:::-;;;;;;;3657:8;:36::i;:::-;3805:3;;3600:233;;;;3076:763:::0;;:::o;4558:506:20:-;4722:147;4751:10;4775:8;4797:6;4817:4;4835:24;4722:15;:147::i;:::-;4880:21;4928:10;4952:6;4972:24;4904:102;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4880:126;;5017:40;5038:8;5048;5017:20;:40::i;6370:169::-;-1:-1:-1;;;;;6501:22:20;;;;;;:10;:22;;;;;6466:16;;6501:31;;:29;:31::i;1403:458:1:-;1504:25;1566:8;:15;-1:-1:-1;;;;;1554:28:1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1541:41;;1598:9;1593:234;1617:8;:15;1613:1;:19;1593:234;;;1666:21;1675:8;1684:1;1675:11;;;;;;;;:::i;:::-;;;;;;;1666:8;:21::i;:::-;1650:10;1661:1;1650:13;;;;;;;;:::i;:::-;;;;;;;;;;:37;1799:3;;1593:234;;;;1403:458;;;:::o;1554:211:3:-;940:13;:11;:13::i;:::-;-1:-1:-1;;;;;1638:22:3;::::1;1634:96;;1683:36;;-1:-1:-1::0;;;1683:36:3::1;;;;;;;;;;;1634:96;1739:19;1749:8;1739:9;:19::i;:::-;1554:211:::0;:::o;7042:751:19:-;7159:7;;;7297:105;-1:-1:-1;;;;;;;;;7297:105:19;;:28;:105::i;:::-;7264:138;;7491:29;7523:66;7557:22;7523:20;:66::i;:::-;7491:98;;7603:16;:23;7630:2;7603:29;;:61;;;;-1:-1:-1;7636:23:19;;:28;;7603:61;7599:127;;;7709:16;7685:41;;-1:-1:-1;;;7685:41:19;;;;;;;;:::i;7599:127::-;7753:25;7761:16;7753:25;:::i;:::-;7745:34;;;7781:4;;-1:-1:-1;7042:751:19;-1:-1:-1;;;;7042:751:19:o;998:237:11:-;1097:4;-1:-1:-1;;;;;;1132:44:11;;-1:-1:-1;;;1132:44:11;;:96;;;1192:36;1216:11;1192:23;:36::i;1658:457::-;1768:4;;1814:85;-1:-1:-1;;;1814:28:11;:85::i;:::-;-1:-1:-1;1784:115:11;-1:-1:-1;;;;;;1913:29:11;;1909:47;;-1:-1:-1;1951:5:11;;1658:457;-1:-1:-1;;1658:457:11:o;1909:47::-;1986:122;2050:15;2083:11;1986:46;:122::i;:::-;1967:141;1658:457;-1:-1:-1;;;1658:457:11:o;11124:998:20:-;-1:-1:-1;;;;;11337:22:20;;11333:96;;11382:36;;-1:-1:-1;;;11382:36:20;;;;;;;;;;;11333:96;11455:10;-1:-1:-1;;;;;11443:22:20;:8;-1:-1:-1;;;;;11443:22:20;;11439:92;;11488:32;;-1:-1:-1;;;11488:32:20;;;;;;;;;;;11439:92;-1:-1:-1;;;;;11541:37:20;;;;;;;:25;:37;;;;;;;;:47;;;;;;;;;:59;;;11615:14;;11611:505;;-1:-1:-1;;;;;11645:22:20;;;;;;:10;:22;;;;;:36;;11672:8;11645:26;:36::i;:::-;;11800:9;11772:10;-1:-1:-1;;;;;11700:165:20;11746:8;-1:-1:-1;;;;;11700:165:20;;11827:24;11700:165;;;;;;:::i;:::-;;;;;;;;11611:505;;;-1:-1:-1;;;;;11896:22:20;;;;;;:10;:22;;;;;:39;;11926:8;11896:29;:39::i;:::-;;12041:8;11954:151;;12013:10;-1:-1:-1;;;;;11954:151:20;11987:8;-1:-1:-1;;;;;11954:151:20;;12067:24;11954:151;;;;;;:::i;:::-;;;;;;;;11124:998;;;;;:::o;22199:254::-;22319:127;22366:8;581:66:18;22428:8:20;22319:33;:127::i;12979:868::-;-1:-1:-1;;;;;13122:16:20;;13118:85;;13161:31;;-1:-1:-1;;;13161:31:20;;;;;;;;;;;13118:85;13324:6;13305:15;;:25;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;13341:23:20;;;;;;:19;:23;;;;;:33;;13368:6;;13341:23;:33;;13368:6;;13341:33;:::i;:::-;;;;-1:-1:-1;;13390:182:20;;-1:-1:-1;;;;;13390:182:20;;;13461:1;;13423:10;;13390:182;;;;13505:6;;13532:5;;13557:4;;13390:182;:::i;:::-;;;;;;;;13643:21;13691:10;13723:1;13739:2;13755:6;13775:4;13667:122;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;13643:146;;13799:41;13820:2;13824:5;13831:8;13799:20;:41::i;4335:143:1:-;4456:15;;;;:6;:15;;;;;4449:22;;4415;;4456:15;4449:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4335:143;;;:::o;1838:156:3:-;1908:10;1897:7;782;808:6;-1:-1:-1;;;;;808:6:3;;736:85;1897:7;-1:-1:-1;;;;;1897:21:3;;1893:95;;1941:36;;-1:-1:-1;;;1941:36:3;;1966:10;1941:36;;;13156:51:33;13129:18;;1941:36:3;13010:203:33;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;2293:17:3;;-1:-1:-1;;;;;;2293:17:3;;;;;;2133:194;:::o;17187:726:20:-;-1:-1:-1;;;;;17357:37:20;;;17330:24;17357:37;;;:25;:37;;;;;;;;:69;;;;;;;;;;17441:32;;;17437:236;;;17496:166;;-1:-1:-1;;;17496:166:20;;-1:-1:-1;;;;;21480:15:33;;;17496:166:20;;;21462:34:33;21512:18;;;21505:34;;;21575:15;;21555:18;;;21548:43;21607:18;;;21600:34;;;21396:19;;17496:166:20;21193:447:33;17437:236:20;17683:223;17725:10;17759:8;17792:32;17811:13;17792:16;:32;:::i;:::-;17848:5;17683:223;;;;;;;;;;;;:15;:223::i;19321:1009::-;-1:-1:-1;;;;;19490:18:20;;;;:38;;-1:-1:-1;;;;;;19512:16:20;;;19490:38;19486:107;;;19551:31;;-1:-1:-1;;;19551:31:20;;;;;;;;;;;19486:107;-1:-1:-1;;;;;19676:25:20;;19658:15;19676:25;;;:19;:25;;;;;;19715:16;;;19711:101;;;19754:47;;-1:-1:-1;;;19754:47:20;;;;;21980:25:33;;;-1:-1:-1;;;;;22041:32:33;;22021:18;;;22014:60;22090:18;;;22083:34;;;21953:18;;19754:47:20;21778:345:33;19711:101:20;-1:-1:-1;;;;;19822:25:20;;;;;;:19;:25;;;;;:35;;19851:6;;19822:25;:35;;19851:6;;19822:35;:::i;:::-;;;;-1:-1:-1;;;;;;;19867:23:20;;;;;;:19;:23;;;;;:33;;19894:6;;19867:23;:33;;19894:6;;19867:33;:::i;:::-;;;;;;;;20001:2;-1:-1:-1;;;;;19916:176:20;19979:4;-1:-1:-1;;;;;19916:176:20;19949:10;-1:-1:-1;;;;;19916:176:20;;20025:6;20052:5;20077:4;19916:176;;;;;;;;:::i;:::-;;;;;;;;20157:21;20192:10;20204:4;20210:2;20214:6;20222:4;20181:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20157:70;;20238:34;20257:4;20263:8;20238:18;:34::i;:::-;20282:41;20303:2;20307:5;20314:8;20282:20;:41::i;2008:224:14:-;2168:57;2206:7;2215:9;2168:37;:57::i;10270:300:27:-;10333:16;10361:22;10386:19;10394:3;10386:7;:19::i;5197:300:12:-;5358:94;;;-1:-1:-1;;;;;;22323:45:33;;5358:94:12;;;22311:58:33;5311:7:12;22385:12:33;;;22378:50;;;-1:-1:-1;;;;;;22458:44:33;;22444:12;;;22437:66;5311:7:12;;;22519:12:33;5358:94:12;;;;;;;;;;;;5330:122;;5477:12;5469:21;;;:::i;:::-;5462:28;5197:300;-1:-1:-1;;;;5197:300:12:o;5268:245:1:-;5384:4;-1:-1:-1;;;;;;5419:35:1;;-1:-1:-1;;;5419:35:1;;:87;;-1:-1:-1;;;;;;;;;;861:40:24;;;5470:36:1;762:146:24;4397:632:25;4568:56;;-1:-1:-1;;;;;;15670:33:33;;4568:56:25;;;15652:52:33;4499:4:25;;;;15625:18:33;;4568:56:25;;;-1:-1:-1;;4568:56:25;;;;;;;;;;;;;;;-1:-1:-1;;;;;4568:56:25;-1:-1:-1;;;4568:56:25;;;4832:20;;4568:56;;-1:-1:-1;;;;;;;4568:56:25;;-1:-1:-1;;4797:7:25;4790:5;4779:86;4768:97;;4892:16;4878:30;;4942:4;4936:11;4921:26;;4974:7;:29;;;;;4999:4;4985:10;:18;;4974:29;:48;;;;;5021:1;5007:11;:15;4974:48;4967:55;4397:632;-1:-1:-1;;;;;;;4397:632:25:o;8316:150:27:-;8386:4;8409:50;8414:3;-1:-1:-1;;;;;8434:23:27;;8409:4;:50::i;8634:156::-;8707:4;8730:53;8738:3;-1:-1:-1;;;;;8758:23:27;;8730:7;:53::i;1352:361:8:-;1514:100;-1:-1:-1;;;;;1514:51:8;;-1:-1:-1;;;1514:51:8;:100::i;:::-;1497:210;;;1639:57;;-1:-1:-1;;;1639:57:8;;-1:-1:-1;;;;;1639:43:8;;;;;:57;;1683:6;;1691:4;;1639:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1639:57:8;;;;;;;;;;;;:::i;24198:615:20:-;24349:115;24413:2;-1:-1:-1;;;24349:46:20;:115::i;:::-;24332:475;;;24489:67;;-1:-1:-1;;;24489:67:20;;-1:-1:-1;;;;;24489:27:20;;;;;:67;;418:66:18;;24547:8:20;;24489:67;;;:::i;24332:475::-;24578:5;24573:234;;-1:-1:-1;;;;;24603:14:20;;;:19;24599:198;;24649:55;;-1:-1:-1;;;24649:55:20;;-1:-1:-1;;;;;13174:32:33;;24649:55:20;;;13156:51:33;13129:18;;24649:55:20;13010:203:33;24599:198:20;24750:32;;-1:-1:-1;;;24750:32:20;;-1:-1:-1;;;;;13174:32:33;;24750::20;;;13156:51:33;13129:18;;24750:32:20;13010:203:33;23059:243:20;23173:122;23220:4;252:66:18;23277:8:20;23173:33;:122::i;930:533:15:-;1051:31;;;1047:410;;1105:26;;-1:-1:-1;;;1105:26:15;;;;;;;;;;;1047:410;1152:33;;;1148:309;;1208:28;;-1:-1:-1;;;1208:28:15;;;;;;;;;;;1148:309;1257:31;;;1253:204;;1311:26;;-1:-1:-1;;;1311:26:15;;;;;;;;;;;1253:204;1368:15;;;;:6;:15;;;;;:27;1386:9;1368:15;:27;:::i;:::-;;1427:7;1415:31;1436:9;1415:31;;;;;;:::i;:::-;;;;;;;;930:533;;:::o;5581:109:27:-;5637:16;5672:3;:11;;5665:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5581:109;;;:::o;2241:406::-;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:27;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;2320:321;-1:-1:-1;2625:5:27;2618:12;;2815:1368;2881:4;3010:21;;;:14;;;:21;;;;;;3046:13;;3042:1135;;3413:18;3434:12;3445:1;3434:8;:12;:::i;:::-;3480:18;;3413:33;;-1:-1:-1;3460:17:27;;3480:22;;3501:1;;3480:22;:::i;:::-;3460:42;;3535:9;3521:10;:23;3517:378;;3564:17;3584:3;:11;;3596:9;3584:22;;;;;;;;:::i;:::-;;;;;;;;;3564:42;;3731:9;3705:3;:11;;3717:10;3705:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;3844:25;;;:14;;;:25;;;;;:36;;;3517:378;3973:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4076:3;:14;;:21;4091:5;4076:21;;;;;;;;;;;4069:28;;;4119:4;4112:11;;;;;;;3042:1135;4161:5;4154:12;;;;;340:388:33;497:2;486:9;479:21;536:6;531:2;520:9;516:18;509:34;593:6;585;580:2;569:9;565:18;552:48;649:1;620:22;;;644:2;616:31;;;609:42;;;;712:2;691:15;;;-1:-1:-1;;687:29:33;672:45;668:54;;340:388;-1:-1:-1;340:388:33:o;733:286::-;791:6;844:2;832:9;823:7;819:23;815:32;812:52;;;860:1;857;850:12;812:52;886:23;;-1:-1:-1;;;;;;938:32:33;;928:43;;918:71;;985:1;982;975:12;1398:173;1466:20;;-1:-1:-1;;;;;1515:31:33;;1505:42;;1495:70;;1561:1;1558;1551:12;1495:70;1398:173;;;:::o;1576:127::-;1637:10;1632:3;1628:20;1625:1;1618:31;1668:4;1665:1;1658:15;1692:4;1689:1;1682:15;1708:275;1779:2;1773:9;1844:2;1825:13;;-1:-1:-1;;1821:27:33;1809:40;;-1:-1:-1;;;;;1864:34:33;;1900:22;;;1861:62;1858:88;;;1926:18;;:::i;:::-;1962:2;1955:22;1708:275;;-1:-1:-1;1708:275:33:o;1988:186::-;2036:4;-1:-1:-1;;;;;2061:6:33;2058:30;2055:56;;;2091:18;;:::i;:::-;-1:-1:-1;2157:2:33;2136:15;-1:-1:-1;;2132:29:33;2163:4;2128:40;;1988:186::o;2179:462::-;2221:5;2274:3;2267:4;2259:6;2255:17;2251:27;2241:55;;2292:1;2289;2282:12;2241:55;2328:6;2315:20;2359:48;2375:31;2403:2;2375:31;:::i;:::-;2359:48;:::i;:::-;2432:2;2423:7;2416:19;2478:3;2471:4;2466:2;2458:6;2454:15;2450:26;2447:35;2444:55;;;2495:1;2492;2485:12;2444:55;2560:2;2553:4;2545:6;2541:17;2534:4;2525:7;2521:18;2508:55;2608:1;2583:16;;;2601:4;2579:27;2572:38;;;;2587:7;2179:462;-1:-1:-1;;;2179:462:33:o;2646:::-;2732:6;2740;2748;2801:2;2789:9;2780:7;2776:23;2772:32;2769:52;;;2817:1;2814;2807:12;2769:52;2840:29;2859:9;2840:29;:::i;:::-;2830:39;;2916:2;2905:9;2901:18;2888:32;2878:42;;2971:2;2960:9;2956:18;2943:32;-1:-1:-1;;;;;2990:6:33;2987:30;2984:50;;;3030:1;3027;3020:12;2984:50;3053:49;3094:7;3085:6;3074:9;3070:22;3053:49;:::i;:::-;3043:59;;;2646:462;;;;;:::o;3113:183::-;3173:4;-1:-1:-1;;;;;3198:6:33;3195:30;3192:56;;;3228:18;;:::i;:::-;-1:-1:-1;3273:1:33;3269:14;3285:4;3265:25;;3113:183::o;3301:668::-;3355:5;3408:3;3401:4;3393:6;3389:17;3385:27;3375:55;;3426:1;3423;3416:12;3375:55;3462:6;3449:20;3488:4;3512:60;3528:43;3568:2;3528:43;:::i;3512:60::-;3606:15;;;3692:1;3688:10;;;;3676:23;;3672:32;;;3637:12;;;;3716:15;;;3713:35;;;3744:1;3741;3734:12;3713:35;3780:2;3772:6;3768:15;3792:148;3808:6;3803:3;3800:15;3792:148;;;3874:23;3893:3;3874:23;:::i;:::-;3862:36;;3918:12;;;;3825;;3792:148;;;-1:-1:-1;3958:5:33;3301:668;-1:-1:-1;;;;;;3301:668:33:o;3974:662::-;4028:5;4081:3;4074:4;4066:6;4062:17;4058:27;4048:55;;4099:1;4096;4089:12;4048:55;4135:6;4122:20;4161:4;4185:60;4201:43;4241:2;4201:43;:::i;4185:60::-;4279:15;;;4365:1;4361:10;;;;4349:23;;4345:32;;;4310:12;;;;4389:15;;;4386:35;;;4417:1;4414;4407:12;4386:35;4453:2;4445:6;4441:15;4465:142;4481:6;4476:3;4473:15;4465:142;;;4547:17;;4535:30;;4585:12;;;;4498;;4465:142;;4641:160;4706:20;;4762:13;;4755:21;4745:32;;4735:60;;4791:1;4788;4781:12;4806:662;4857:5;4910:3;4903:4;4895:6;4891:17;4887:27;4877:55;;4928:1;4925;4918:12;4877:55;4964:6;4951:20;4990:4;5014:60;5030:43;5070:2;5030:43;:::i;5014:60::-;5108:15;;;5194:1;5190:10;;;;5178:23;;5174:32;;;5139:12;;;;5218:15;;;5215:35;;;5246:1;5243;5236:12;5215:35;5282:2;5274:6;5270:15;5294:145;5310:6;5305:3;5302:15;5294:145;;;5376:20;5392:3;5376:20;:::i;:::-;5364:33;;5417:12;;;;5327;;5294:145;;5473:886;5525:5;5578:3;5571:4;5563:6;5559:17;5555:27;5545:55;;5596:1;5593;5586:12;5545:55;5632:6;5619:20;5658:4;5682:60;5698:43;5738:2;5698:43;:::i;5682:60::-;5776:15;;;5862:1;5858:10;;;;5846:23;;5842:32;;;5807:12;;;;5886:15;;;5883:35;;;5914:1;5911;5904:12;5883:35;5950:2;5942:6;5938:15;5962:368;5978:6;5973:3;5970:15;5962:368;;;6064:3;6051:17;-1:-1:-1;;;;;6087:11:33;6084:35;6081:125;;;6160:1;6189:2;6185;6178:14;6081:125;6231:56;6283:3;6278:2;6264:11;6256:6;6252:24;6248:33;6231:56;:::i;:::-;6219:69;;-1:-1:-1;6308:12:33;;;;5995;;5962:368;;6364:1276;6590:6;6598;6606;6614;6622;6675:3;6663:9;6654:7;6650:23;6646:33;6643:53;;;6692:1;6689;6682:12;6643:53;6732:9;6719:23;-1:-1:-1;;;;;6802:2:33;6794:6;6791:14;6788:34;;;6818:1;6815;6808:12;6788:34;6841:61;6894:7;6885:6;6874:9;6870:22;6841:61;:::i;:::-;6831:71;;6955:2;6944:9;6940:18;6927:32;6911:48;;6984:2;6974:8;6971:16;6968:36;;;7000:1;6997;6990:12;6968:36;7023:63;7078:7;7067:8;7056:9;7052:24;7023:63;:::i;:::-;7013:73;;7139:2;7128:9;7124:18;7111:32;7095:48;;7168:2;7158:8;7155:16;7152:36;;;7184:1;7181;7174:12;7152:36;7207:63;7262:7;7251:8;7240:9;7236:24;7207:63;:::i;:::-;7197:73;;7323:2;7312:9;7308:18;7295:32;7279:48;;7352:2;7342:8;7339:16;7336:36;;;7368:1;7365;7358:12;7336:36;7391:60;7443:7;7432:8;7421:9;7417:24;7391:60;:::i;:::-;7381:70;;7504:3;7493:9;7489:19;7476:33;7460:49;;7534:2;7524:8;7521:16;7518:36;;;7550:1;7547;7540:12;7518:36;;7573:61;7626:7;7615:8;7604:9;7600:24;7573:61;:::i;:::-;7563:71;;;6364:1276;;;;;;;;:::o;7645:537::-;7737:6;7745;7753;7761;7814:3;7802:9;7793:7;7789:23;7785:33;7782:53;;;7831:1;7828;7821:12;7782:53;7854:29;7873:9;7854:29;:::i;:::-;7844:39;;7902:38;7936:2;7925:9;7921:18;7902:38;:::i;:::-;7892:48;;7959:35;7990:2;7979:9;7975:18;7959:35;:::i;:::-;7949:45;;8045:2;8034:9;8030:18;8017:32;-1:-1:-1;;;;;8064:6:33;8061:30;8058:50;;;8104:1;8101;8094:12;8058:50;8127:49;8168:7;8159:6;8148:9;8144:22;8127:49;:::i;:::-;8117:59;;;7645:537;;;;;;;:::o;8376:254::-;8444:6;8452;8505:2;8493:9;8484:7;8480:23;8476:32;8473:52;;;8521:1;8518;8511:12;8473:52;8544:29;8563:9;8544:29;:::i;:::-;8534:39;8620:2;8605:18;;;;8592:32;;-1:-1:-1;;;8376:254:33:o;8635:180::-;8694:6;8747:2;8735:9;8726:7;8722:23;8718:32;8715:52;;;8763:1;8760;8753:12;8715:52;-1:-1:-1;8786:23:33;;8635:180;-1:-1:-1;8635:180:33:o;8820:250::-;8905:1;8915:113;8929:6;8926:1;8923:13;8915:113;;;9005:11;;;8999:18;8986:11;;;8979:39;8951:2;8944:10;8915:113;;;-1:-1:-1;;9062:1:33;9044:16;;9037:27;8820:250::o;9075:270::-;9116:3;9154:5;9148:12;9181:6;9176:3;9169:19;9197:76;9266:6;9259:4;9254:3;9250:14;9243:4;9236:5;9232:16;9197:76;:::i;:::-;9327:2;9306:15;-1:-1:-1;;9302:29:33;9293:39;;;;9334:4;9289:50;;9075:270;-1:-1:-1;;9075:270:33:o;9350:217::-;9497:2;9486:9;9479:21;9460:4;9517:44;9557:2;9546:9;9542:18;9534:6;9517:44;:::i;9572:260::-;9640:6;9648;9701:2;9689:9;9680:7;9676:23;9672:32;9669:52;;;9717:1;9714;9707:12;9669:52;9740:29;9759:9;9740:29;:::i;:::-;9730:39;;9788:38;9822:2;9811:9;9807:18;9788:38;:::i;:::-;9778:48;;9572:260;;;;;:::o;9837:626::-;9934:6;9942;9995:2;9983:9;9974:7;9970:23;9966:32;9963:52;;;10011:1;10008;10001:12;9963:52;10051:9;10038:23;-1:-1:-1;;;;;10121:2:33;10113:6;10110:14;10107:34;;;10137:1;10134;10127:12;10107:34;10175:6;10164:9;10160:22;10150:32;;10220:7;10213:4;10209:2;10205:13;10201:27;10191:55;;10242:1;10239;10232:12;10191:55;10282:2;10269:16;10308:2;10300:6;10297:14;10294:34;;;10324:1;10321;10314:12;10294:34;10377:7;10372:2;10362:6;10359:1;10355:14;10351:2;10347:23;10343:32;10340:45;10337:65;;;10398:1;10395;10388:12;10337:65;10429:2;10421:11;;;;;10451:6;;-1:-1:-1;9837:626:33;;-1:-1:-1;;;;9837:626:33:o;10468:800::-;10628:4;10657:2;10697;10686:9;10682:18;10727:2;10716:9;10709:21;10750:6;10785;10779:13;10816:6;10808;10801:22;10854:2;10843:9;10839:18;10832:25;;10916:2;10906:6;10903:1;10899:14;10888:9;10884:30;10880:39;10866:53;;10954:2;10946:6;10942:15;10975:1;10985:254;10999:6;10996:1;10993:13;10985:254;;;11092:2;11088:7;11076:9;11068:6;11064:22;11060:36;11055:3;11048:49;11120:39;11152:6;11143;11137:13;11120:39;:::i;:::-;11110:49;-1:-1:-1;11217:12:33;;;;11182:15;;;;11021:1;11014:9;10985:254;;;-1:-1:-1;11256:6:33;;10468:800;-1:-1:-1;;;;;;;10468:800:33:o;11273:186::-;11332:6;11385:2;11373:9;11364:7;11360:23;11356:32;11353:52;;;11401:1;11398;11391:12;11353:52;11424:29;11443:9;11424:29;:::i;11464:606::-;11565:6;11573;11581;11589;11597;11650:3;11638:9;11629:7;11625:23;11621:33;11618:53;;;11667:1;11664;11657:12;11618:53;11690:29;11709:9;11690:29;:::i;:::-;11680:39;;11738:38;11772:2;11761:9;11757:18;11738:38;:::i;:::-;11728:48;;11823:2;11812:9;11808:18;11795:32;11785:42;;11846:35;11877:2;11866:9;11862:18;11846:35;:::i;:::-;11836:45;;11932:3;11921:9;11917:19;11904:33;-1:-1:-1;;;;;11952:6:33;11949:30;11946:50;;;11992:1;11989;11982:12;11946:50;12015:49;12056:7;12047:6;12036:9;12032:22;12015:49;:::i;12075:537::-;12170:6;12178;12186;12194;12247:3;12235:9;12226:7;12222:23;12218:33;12215:53;;;12264:1;12261;12254:12;12215:53;12287:29;12306:9;12287:29;:::i;:::-;12277:39;;12335:38;12369:2;12358:9;12354:18;12335:38;:::i;:::-;12325:48;;12420:2;12409:9;12405:18;12392:32;12382:42;;12475:2;12464:9;12460:18;12447:32;-1:-1:-1;;;;;12494:6:33;12491:30;12488:50;;;12534:1;12531;12524:12;12617:388;12694:6;12702;12755:2;12743:9;12734:7;12730:23;12726:32;12723:52;;;12771:1;12768;12761:12;12723:52;12807:9;12794:23;12784:33;;12868:2;12857:9;12853:18;12840:32;-1:-1:-1;;;;;12887:6:33;12884:30;12881:50;;;12927:1;12924;12917:12;12881:50;12950:49;12991:7;12982:6;12971:9;12967:22;12950:49;:::i;:::-;12940:59;;;12617:388;;;;;:::o;13885:602::-;14012:6;14020;14073:2;14061:9;14052:7;14048:23;14044:32;14041:52;;;14089:1;14086;14079:12;14041:52;14129:9;14116:23;-1:-1:-1;;;;;14199:2:33;14191:6;14188:14;14185:34;;;14215:1;14212;14205:12;14185:34;14238:61;14291:7;14282:6;14271:9;14267:22;14238:61;:::i;:::-;14228:71;;14352:2;14341:9;14337:18;14324:32;14308:48;;14381:2;14371:8;14368:16;14365:36;;;14397:1;14394;14387:12;14365:36;;14420:61;14473:7;14462:8;14451:9;14447:24;14420:61;:::i;14492:658::-;14663:2;14715:21;;;14785:13;;14688:18;;;14807:22;;;14634:4;;14663:2;14886:15;;;;14860:2;14845:18;;;14634:4;14929:195;14943:6;14940:1;14937:13;14929:195;;;15008:13;;-1:-1:-1;;;;;15004:39:33;14992:52;;15099:15;;;;15064:12;;;;15040:1;14958:9;14929:195;;;-1:-1:-1;15141:3:33;;14492:658;-1:-1:-1;;;;;;14492:658:33:o;15155:348::-;15239:6;15292:2;15280:9;15271:7;15267:23;15263:32;15260:52;;;15308:1;15305;15298:12;15260:52;15348:9;15335:23;-1:-1:-1;;;;;15373:6:33;15370:30;15367:50;;;15413:1;15410;15403:12;15367:50;15436:61;15489:7;15480:6;15469:9;15465:22;15436:61;:::i;15715:424::-;15954:6;15946;15941:3;15928:33;16024:2;16020:15;;;;-1:-1:-1;;;;;;16016:53:33;15980:16;;;;16005:65;;;16094:2;16086:11;;16079:27;;;;16130:2;16122:11;;15715:424;-1:-1:-1;15715:424:33:o;16144:287::-;16273:3;16311:6;16305:13;16327:66;16386:6;16381:3;16374:4;16366:6;16362:17;16327:66;:::i;:::-;16409:16;;;;;16144:287;-1:-1:-1;;16144:287:33:o;16436:127::-;16497:10;16492:3;16488:20;16485:1;16478:31;16528:4;16525:1;16518:15;16552:4;16549:1;16542:15;16568:125;16633:9;;;16654:10;;;16651:36;;;16667:18;;:::i;16698:385::-;16930:1;16926;16921:3;16917:11;16913:19;16905:6;16901:32;16890:9;16883:51;16970:6;16965:2;16954:9;16950:18;16943:34;17013:2;17008;16997:9;16993:18;16986:30;16864:4;17033:44;17073:2;17062:9;17058:18;17050:6;17033:44;:::i;:::-;17025:52;16698:385;-1:-1:-1;;;;;16698:385:33:o;17088:127::-;17149:10;17144:3;17140:20;17137:1;17130:31;17180:4;17177:1;17170:15;17204:4;17201:1;17194:15;17609:402;-1:-1:-1;;;;;17818:32:33;;17800:51;;17899:4;17887:17;;17882:2;17867:18;;17860:45;17941:2;17936;17921:18;;17914:30;;;-1:-1:-1;;17961:44:33;;17986:18;;17978:6;17961:44;:::i;18016:168::-;18089:9;;;18120;;18137:15;;;18131:22;;18117:37;18107:71;;18158:18;;:::i;18678:521::-;18755:4;18761:6;18821:11;18808:25;18915:2;18911:7;18900:8;18884:14;18880:29;18876:43;18856:18;18852:68;18842:96;;18934:1;18931;18924:12;18842:96;18961:33;;19013:20;;;-1:-1:-1;;;;;;19045:30:33;;19042:50;;;19088:1;19085;19078:12;19042:50;19121:4;19109:17;;-1:-1:-1;19152:14:33;19148:27;;;19138:38;;19135:58;;;19189:1;19186;19179:12;19135:58;18678:521;;;;;:::o;19204:271::-;19387:6;19379;19374:3;19361:33;19343:3;19413:16;;19438:13;;;19413:16;19204:271;-1:-1:-1;19204:271:33:o;19480:375::-;19598:12;;19646:4;19635:16;;19629:23;-1:-1:-1;;;;;;19720:11:33;;;;19598:12;19629:23;19754:2;19743:14;;19740:109;;;19836:2;19830;19820:6;19816:2;19812:15;19809:1;19805:23;19801:32;19797:2;19793:41;19789:50;19780:59;;19740:109;;;;19480:375;;;:::o;19860:369::-;20057:6;20046:9;20039:25;20114:6;20107:14;20100:22;20095:2;20084:9;20080:18;20073:50;20159:2;20154;20143:9;20139:18;20132:30;20020:4;20179:44;20219:2;20208:9;20204:18;20196:6;20179:44;:::i;20234:569::-;-1:-1:-1;;;;;20531:15:33;;;20513:34;;20583:15;;;20578:2;20563:18;;20556:43;20635:15;;20630:2;20615:18;;20608:43;20682:2;20667:18;;20660:34;;;20493:3;20725;20710:19;;20703:32;;;20456:4;;20752:45;;20777:19;;20769:6;20752:45;:::i;20808:380::-;20887:1;20883:12;;;;20930;;;20951:61;;21005:4;20997:6;20993:17;20983:27;;20951:61;21058:2;21050:6;21047:14;21027:18;21024:38;21021:161;;21104:10;21099:3;21095:20;21092:1;21085:31;21139:4;21136:1;21129:15;21167:4;21164:1;21157:15;21645:128;21712:9;;;21733:11;;;21730:37;;;21747:18;;:::i;22542:297::-;22660:12;;22707:4;22696:16;;;22690:23;;22660:12;22725:16;;22722:111;;;-1:-1:-1;;22799:4:33;22795:17;;;;22792:1;22788:25;22784:38;22773:50;;22542:297;-1:-1:-1;22542:297:33:o;22844:288::-;23019:6;23008:9;23001:25;23062:2;23057;23046:9;23042:18;23035:30;22982:4;23082:44;23122:2;23111:9;23107:18;23099:6;23082:44;:::i;23137:647::-;23216:6;23269:2;23257:9;23248:7;23244:23;23240:32;23237:52;;;23285:1;23282;23275:12;23237:52;23318:9;23312:16;-1:-1:-1;;;;;23343:6:33;23340:30;23337:50;;;23383:1;23380;23373:12;23337:50;23406:22;;23459:4;23451:13;;23447:27;-1:-1:-1;23437:55:33;;23488:1;23485;23478:12;23437:55;23517:2;23511:9;23542:48;23558:31;23586:2;23558:31;:::i;23542:48::-;23613:2;23606:5;23599:17;23653:7;23648:2;23643;23639;23635:11;23631:20;23628:33;23625:53;;;23674:1;23671;23664:12;23625:53;23687:67;23751:2;23746;23739:5;23735:14;23730:2;23726;23722:11;23687:67;:::i;23914:544::-;24015:2;24010:3;24007:11;24004:448;;;24051:1;24076:5;24072:2;24065:17;24121:4;24117:2;24107:19;24191:2;24179:10;24175:19;24172:1;24168:27;24162:4;24158:38;24227:4;24215:10;24212:20;24209:47;;;-1:-1:-1;24250:4:33;24209:47;24305:2;24300:3;24296:12;24293:1;24289:20;24283:4;24279:31;24269:41;;24360:82;24378:2;24371:5;24368:13;24360:82;;;24423:17;;;24404:1;24393:13;24360:82;;24634:1348;24758:3;24752:10;-1:-1:-1;;;;;24777:6:33;24774:30;24771:56;;;24807:18;;:::i;:::-;24836:96;24925:6;24885:38;24917:4;24911:11;24885:38;:::i;:::-;24879:4;24836:96;:::i;:::-;24987:4;;25051:2;25040:14;;25068:1;25063:662;;;;25769:1;25786:6;25783:89;;;-1:-1:-1;25838:19:33;;;25832:26;25783:89;-1:-1:-1;;24591:1:33;24587:11;;;24583:24;24579:29;24569:40;24615:1;24611:11;;;24566:57;25885:81;;25033:943;;25063:662;23861:1;23854:14;;;23898:4;23885:18;;-1:-1:-1;;25099:20:33;;;25216:236;25230:7;25227:1;25224:14;25216:236;;;25319:19;;;25313:26;25298:42;;25411:27;;;;25379:1;25367:14;;;;25246:19;;25216:236;;;25220:3;25480:6;25471:7;25468:19;25465:201;;;25541:19;;;25535:26;-1:-1:-1;;25624:1:33;25620:14;;;25636:3;25616:24;25612:37;25608:42;25593:58;25578:74;;25465:201;-1:-1:-1;;;;;25712:1:33;25696:14;;;25692:22;25679:36;;-1:-1:-1;24634:1348:33:o;25987:127::-;26048:10;26043:3;26039:20;26036:1;26029:31;26079:4;26076:1;26069:15;26103:4;26100:1;26093:15"},"gasEstimates":{"creation":{"codeDepositCost":"2063000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","MAX_MINT()":"283","MAX_SUPPLY()":"218","authorizeOperator(address,uint256,bytes)":"infinite","authorizedAmountFor(address,address)":"infinite","balanceOf(address)":"2670","batchCalls(bytes[])":"infinite","decimals()":"2481","decreaseAllowance(address,address,uint256,bytes)":"infinite","getData(bytes32)":"infinite","getDataBatch(bytes32[])":"infinite","getOperatorsOf(address)":"infinite","getPrice()":"infinite","getPrizePool()":"infinite","increaseAllowance(address,uint256,bytes)":"infinite","mint(address,uint256)":"infinite","owner()":"2464","renounceOwnership()":"infinite","revokeOperator(address,address,bool,bytes)":"infinite","setData(bytes32,bytes)":"infinite","setDataBatch(bytes32[],bytes[])":"infinite","supportsInterface(bytes4)":"infinite","totalSupply()":"2327","transfer(address,address,uint256,bool,bytes)":"infinite","transferBatch(address[],address[],uint256[],bool[],bytes[])":"infinite","transferOwnership(address)":"32738"}},"methodIdentifiers":{"MAX_MINT()":"f0292a03","MAX_SUPPLY()":"32cb6b0c","authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","getPrice()":"98d5fdca","getPrizePool()":"884bf67c","increaseAllowance(address,uint256,bytes)":"2bc1da82","mint(address,uint256)":"40c10f19","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"storedData\",\"type\":\"bytes\"}],\"name\":\"InvalidExtensionAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsAuthorizedAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP7BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotSendWithAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7DecreaseAllowanceNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LSP7RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7TokenContractCannotHoldValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"NoExtensionFoundForFunctionSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAllowanceCannotBeIncreasedFromZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TicketsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"InvalidExtensionAddress(bytes)\":[{\"details\":\"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\"}],\"InvalidFunctionSelector(bytes)\":[{\"details\":\"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)\":[{\"details\":\"reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`.\"}],\"LSP7AmountExceedsBalance(uint256,address,uint256)\":[{\"details\":\"reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\"}],\"LSP7BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP7CannotSendWithAddressZero()\":[{\"details\":\"reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address.\"}],\"LSP7CannotUseAddressZeroAsOperator()\":[{\"details\":\"reverts when trying to set the zero address as an operator.\"}],\"LSP7DecreaseAllowanceNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to decrease allowance is not authorized.\"}],\"LSP7DecreasedAllowanceBelowZero()\":[{\"details\":\"Reverts when trying to decrease an operator's allowance to more than its current allowance.\"}],\"LSP7InvalidTransferBatch()\":[{\"details\":\"reverts when the array parameters used in {transferBatch} have different lengths.\"}],\"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP7RevokeOperatorNotAuthorized(address,address,address)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP7TokenContractCannotHoldValue()\":[{\"details\":\"Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\"}],\"LSP7TokenOwnerCannotBeOperator()\":[{\"details\":\"reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"NoExtensionFoundForFunctionSelector(bytes4)\":[{\"details\":\"reverts when there is no extension for the function selector being called with\"}],\"OperatorAllowanceCannotBeIncreasedFromZero(address)\":[{\"details\":\"Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:danger\":\"To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,address,bool,bytes)\":{\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"LSP7BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}],\"LSP7TokenContractCannotHoldValue()\":[{\"notice\":\"LSP7 contract cannot receive native tokens.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Tickets.sol\":\"Tickets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP7 = 0xc52d6008;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP7Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea;\\n\\n// keccak256('LSP7Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c;\\n\\n// keccak256('LSP7Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP7_TOKENOPERATOR = 0x386072cc5a58e61263b434c722725f21031cd06e7c552cfaa06db5de8a320dbc;\\n\",\"keccak256\":\"0x9c7d7749a5f8de103f791b42684fb5bc99e23c2f85aa408a87e96f592394ad2a\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {\\n    LSP4DigitalAssetMetadata\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\nimport {LSP7DigitalAssetCore} from \\\"./LSP7DigitalAssetCore.sol\\\";\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP7} from \\\"./LSP7Constants.sol\\\";\\nimport {LSP7TokenContractCannotHoldValue} from \\\"./LSP7Errors.sol\\\";\\n\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\n\\n// errors\\n\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP7 Digital Asset, a contract that represents a fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Minting and transferring are supplied with a `uint256` amount.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP7DigitalAsset is\\n    LSP4DigitalAssetMetadata,\\n    LSP7DigitalAssetCore,\\n    LSP17Extendable\\n{\\n    /**\\n     * @notice Sets the token-Metadata\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param newOwner_ The owner of the the token-Metadata.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param isNonDivisible_ Specify if the LSP7 token is a fungible or non-fungible token.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        bool isNonDivisible_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        _isNonDivisible = isNonDivisible_;\\n    }\\n\\n    // fallback function\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP7 contract.\\n     * @notice LSP7 contract cannot receive native tokens.\\n     */\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP7TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP7 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            /// @solidity memory-safe-assembly\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     * - we do not check that payable bool as in lsp7 standard we will always forward the value to the extension\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = ERC725YCore._getData(\\n            mappedExtensionDataKey\\n        );\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore, LSP17Extendable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP7 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe5e7cd4ddb4d5ac232e8ba70fb202254d9616e95836f617f74b2f75d92c5a1aa\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7DigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {ILSP7DigitalAsset} from \\\"./ILSP7DigitalAsset.sol\\\";\\n\\n// modules\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP7AmountExceedsAuthorizedAmount,\\n    LSP7InvalidTransferBatch,\\n    LSP7AmountExceedsBalance,\\n    LSP7DecreasedAllowanceBelowZero,\\n    LSP7CannotUseAddressZeroAsOperator,\\n    LSP7TokenOwnerCannotBeOperator,\\n    LSP7CannotSendWithAddressZero,\\n    LSP7NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP7NotifyTokenReceiverIsEOA,\\n    OperatorAllowanceCannotBeIncreasedFromZero,\\n    LSP7BatchCallFailed,\\n    LSP7RevokeOperatorNotAuthorized,\\n    LSP7DecreaseAllowanceNotAuthorized\\n} from \\\"./LSP7Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP7_TOKENOPERATOR,\\n    _TYPEID_LSP7_TOKENSSENDER,\\n    _TYPEID_LSP7_TOKENSRECIPIENT\\n} from \\\"./LSP7Constants.sol\\\";\\n\\n/**\\n * @title LSP7DigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP7 compliant contract.\\n *\\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\\n */\\nabstract contract LSP7DigitalAssetCore is ILSP7DigitalAsset {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- Storage\\n\\n    bool internal _isNonDivisible;\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenOwner` to an `amount` of tokens\\n    mapping(address => uint256) internal _tokenOwnerBalances;\\n\\n    // Mapping an `address` to its authorized operator addresses.\\n    mapping(address => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\\n    mapping(address => mapping(address => uint256))\\n        internal _operatorAuthorizedAmount;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _isNonDivisible ? 0 : 18;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _tokenOwnerBalances[tokenOwner];\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP7BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     *\\n     * @custom:danger To avoid front-running and Allowance Double-Spend Exploit when\\n     * increasing or decreasing the authorized amount of an operator, it is advised to\\n     * use the {increaseAllowance} and {decreaseAllowance} functions.\\n     *\\n     * For more information, see:\\n     * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            amount,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            amount,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7RevokeOperatorNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        _updateOperator(\\n            tokenOwner,\\n            operator,\\n            0,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                0,\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        if (tokenOwner == operator) {\\n            return _tokenOwnerBalances[tokenOwner];\\n        } else {\\n            return _operatorAuthorizedAmount[tokenOwner][operator];\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (address[] memory) {\\n        return _operators[tokenOwner].values();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        uint256 oldAllowance = authorizedAmountFor(operator, msg.sender);\\n        if (oldAllowance == 0)\\n            revert OperatorAllowanceCannotBeIncreasedFromZero(operator);\\n\\n        uint256 newAllowance = oldAllowance + addedAmount;\\n\\n        _updateOperator(\\n            msg.sender,\\n            operator,\\n            newAllowance,\\n            true,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        if (msg.sender != tokenOwner && msg.sender != operator) {\\n            revert LSP7DecreaseAllowanceNotAuthorized(\\n                msg.sender,\\n                tokenOwner,\\n                operator\\n            );\\n        }\\n\\n        uint256 currentAllowance = authorizedAmountFor(operator, tokenOwner);\\n        if (currentAllowance < subtractedAmount) {\\n            revert LSP7DecreasedAllowanceBelowZero();\\n        }\\n\\n        uint256 newAllowance;\\n        unchecked {\\n            newAllowance = currentAllowance - subtractedAmount;\\n            _updateOperator(\\n                tokenOwner,\\n                operator,\\n                newAllowance,\\n                true,\\n                operatorNotificationData\\n            );\\n        }\\n\\n        bytes memory lsp1Data = abi.encode(\\n            tokenOwner,\\n            newAllowance,\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (msg.sender != from) {\\n            _spendAllowance({\\n                operator: msg.sender,\\n                tokenOwner: from,\\n                amountToSpend: amount\\n            });\\n        }\\n\\n        _transfer(from, to, amount, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != amount.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP7InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            // using the public transfer function to handle updates to operator authorized amounts\\n            transfer(from[i], to[i], amount[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens.\\n     * If the amount is zero the operator is removed from the list of operators, otherwise he is added to the list of operators.\\n     * If the amount is zero then the operator is being revoked, otherwise the operator amount is being modified.\\n     *\\n     * @param tokenOwner The address that will give `operator` an allowance for on its balance.\\n     * @param operator The address to grant an allowance to spend.\\n     * @param allowance The maximum amount of token that `operator` can spend from the `tokenOwner`'s balance.\\n     * @param notified Boolean indicating whether the operator has been notified about the change of allowance\\n     * @param operatorNotificationData The data to send to the universalReceiver function of the operator in case of notifying\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _updateOperator(\\n        address tokenOwner,\\n        address operator,\\n        uint256 allowance,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        if (operator == address(0)) {\\n            revert LSP7CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (operator == tokenOwner) {\\n            revert LSP7TokenOwnerCannotBeOperator();\\n        }\\n\\n        _operatorAuthorizedAmount[tokenOwner][operator] = allowance;\\n\\n        if (allowance != 0) {\\n            _operators[tokenOwner].add(operator);\\n            emit OperatorAuthorizationChanged(\\n                operator,\\n                tokenOwner,\\n                allowance,\\n                operatorNotificationData\\n            );\\n        } else {\\n            _operators[tokenOwner].remove(operator);\\n            emit OperatorRevoked(\\n                operator,\\n                tokenOwner,\\n                notified,\\n                operatorNotificationData\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `amount` of tokens and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address to mint tokens for.\\n     * @param amount The amount of tokens to mint.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted {Transfer} event, and sent in the LSP1 hook to the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as `from`.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, amount, data);\\n\\n        // tokens being minted\\n        _existingTokens += amount;\\n\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: address(0),\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(address(0), to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            amount,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burns (= destroys) `amount` of tokens, decrease the `from` balance. This is done by sending them to the zero address.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender via LSP1**.\\n     *\\n     * @param from The address to burn tokens from its balance.\\n     * @param amount The amount of tokens to burn.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:hint In dApps, you can know which address is burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, address(0), amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n        // tokens being burnt\\n        _existingTokens -= amount;\\n\\n        _tokenOwnerBalances[from] -= amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: address(0),\\n            amount: amount,\\n            force: false,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, address(0), amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            from,\\n            address(0),\\n            amount,\\n            data\\n        );\\n        _notifyTokenSender(from, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Spend `amountToSpend` from the `operator`'s authorized on behalf of the `tokenOwner`.\\n     *\\n     * @param operator The address of the operator to decrease the allowance of.\\n     * @param tokenOwner The address that granted an allowance on its balance to `operator`.\\n     * @param amountToSpend The amount of tokens to substract in allowance of `operator`.\\n     *\\n     * @custom:events\\n     * - {OperatorRevoked} event when operator's allowance is set to `0`.\\n     * - {OperatorAuthorizationChanged} event when operator's allowance is set to any other amount.\\n     *\\n     * @custom:requirements\\n     * - The `amountToSpend` MUST be at least the allowance granted to `operator` (accessible via {`authorizedAmountFor}`)\\n     * - `operator` cannot be the zero address.\\n     * - `operator` cannot be the same address as `tokenOwner`.\\n     */\\n    function _spendAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 amountToSpend\\n    ) internal virtual {\\n        uint256 authorizedAmount = _operatorAuthorizedAmount[tokenOwner][\\n            operator\\n        ];\\n\\n        if (amountToSpend > authorizedAmount) {\\n            revert LSP7AmountExceedsAuthorizedAmount(\\n                tokenOwner,\\n                authorizedAmount,\\n                operator,\\n                amountToSpend\\n            );\\n        }\\n\\n        _updateOperator({\\n            tokenOwner: tokenOwner,\\n            operator: operator,\\n            allowance: authorizedAmount - amountToSpend,\\n            notified: false,\\n            operatorNotificationData: \\\"\\\"\\n        });\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from `from` to `to` by decreasing the balance of `from` by `-amount` and increasing the balance\\n     * of `to` by `+amount`.\\n     *\\n     * Both the sender and recipient will be notified of the token transfer through the LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances.\\n     * - {_afterTokenTransfer} function will run after updating the balances, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The address to decrease the balance.\\n     * @param to The address to increase the balance.\\n     * @param amount The amount of tokens to transfer from `from` to `to`.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the LSP1 hook to the `from` and `to` address.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have at least `amount` of tokens.\\n     *\\n     * @custom:events {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0) || to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, amount, data);\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n\\n        _tokenOwnerBalances[from] -= amount;\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer({\\n            operator: msg.sender,\\n            from: from,\\n            to: to,\\n            amount: amount,\\n            force: force,\\n            data: data\\n        });\\n\\n        _afterTokenTransfer(from, to, amount, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, amount, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param amount The amount of token to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `amount` tokens being authorized with.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP7_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `amount` of tokens being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP7_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `amount` tokens being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP7_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP7NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b31fd7419e25bc6696d2a11257d18a2ac7bf9741d142fff227729ce9a71d01e\",\"license\":\"Apache-2.0\"},\"@lukso/lsp7-contracts/contracts/LSP7Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`.\\n */\\nerror LSP7AmountExceedsBalance(\\n    uint256 balance,\\n    address tokenOwner,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when `operator` of `tokenOwner` send an `amount` of tokens\\n * larger than the `authorizedAmount`.\\n */\\nerror LSP7AmountExceedsAuthorizedAmount(\\n    address tokenOwner,\\n    uint256 authorizedAmount,\\n    address operator,\\n    uint256 amount\\n);\\n\\n/**\\n * @dev reverts when trying to set the zero address as an operator.\\n */\\nerror LSP7CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev reverts when trying to:\\n * - mint tokens to the zero address.\\n * - burn tokens from the zero address.\\n * - transfer tokens from or to the zero address.\\n */\\nerror LSP7CannotSendWithAddressZero();\\n\\n/**\\n * @dev reverts when the array parameters used in {transferBatch} have different lengths.\\n */\\nerror LSP7InvalidTransferBatch();\\n\\n/**\\n * @dev reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP7TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Reverts when trying to decrease an operator's allowance to more than its current allowance.\\n */\\nerror LSP7DecreasedAllowanceBelowZero();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP7 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP7 contract cannot receive native tokens.\\n */\\nerror LSP7TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance\\n */\\nerror OperatorAllowanceCannotBeIncreasedFromZero(address operator);\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP7BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP7RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\\n/**\\n * @dev Reverts when the call to decrease allowance is not authorized.\\n */\\nerror LSP7DecreaseAllowanceNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    address operator\\n);\\n\",\"keccak256\":\"0x5bd6d23f61d45a390041b788c5e341bd0e1972b4112c7700af1addcfa284e821\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP7DigitalAsset} from \\\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\\\";\\ninterface ITickets is ILSP7DigitalAsset {\\n    event TicketsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n}\",\"keccak256\":\"0x24e407930a7c7fba4ee021520bbdec17e27f1fa4d24b94700440a742de6a43f4\",\"license\":\"MIT\"},\"contracts/tokens/Tickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {LSP7DigitalAsset} from '@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol';\\nimport {_LSP4_TOKEN_TYPE_NFT} from '@lukso/lsp4-contracts/contracts/LSP4Constants.sol';\\nimport {ITickets} from '../interfaces/ITickets.sol';\\nimport '../utils/Errors.sol';\\n\\ncontract Tickets is ITickets, LSP7DigitalAsset {\\n    uint256 public constant MAX_SUPPLY = 100;\\n    uint256 public constant MAX_MINT = 5;\\n    address private immutable i_prizePool;\\n    uint256 private immutable i_price; \\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner,\\n        address _prizePool,\\n        uint256 _price\\n    ) LSP7DigitalAsset(_name, _symbol, _owner, _LSP4_TOKEN_TYPE_NFT, true) {\\n        i_prizePool = _prizePool;\\n        i_price = _price;\\n    }\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable {\\n        if(_existingTokens + _amount > MAX_SUPPLY) revert MintLimitExceeded();\\n        if(balanceOf(_recipient) + _amount > MAX_MINT) revert MintLimitExceeded();\\n        if(msg.value != i_price * _amount) revert InvalidMintPrice();\\n\\n        _mint(_recipient, _amount, false, '');\\n\\n        (bool success,) = i_prizePool.call{value: msg.value}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit TicketsMinted(_recipient, _amount);\\n    }\\n\\n    function getPrizePool() external view returns (address) {\\n        return i_prizePool;\\n    }\\n\\n    function getPrice() external view returns (uint256) {\\n        return i_price;\\n    }\\n}\",\"keccak256\":\"0x434511e54ee2ce091d9c75a3b356ca1122f836009d7b88ad3c6f52c188f02174\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisTicket();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoTickets();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\\n\\nerror MintClosed();\",\"keccak256\":\"0xca7fe76b15de655ab37149643a2d706aa305b8a4a2becb0b878b42bd246d964e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":2192,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_isNonDivisible","offset":0,"slot":"2","type":"t_bool"},{"astId":2194,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_existingTokens","offset":0,"slot":"3","type":"t_uint256"},{"astId":2198,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_tokenOwnerBalances","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":2203,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_operators","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(AddressSet)4044_storage)"},{"astId":2209,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_operatorAuthorizedAmount","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(AddressSet)4044_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4044_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4044_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4043,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3729_storage"}],"numberOfBytes":"64"},"t_struct(Set)3729_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3724,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3728,"contract":"contracts/tokens/Tickets.sol:Tickets","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP7BatchCallFailed(uint256)":[{"notice":"Batch call failed."}],"LSP7TokenContractCannotHoldValue()":[{"notice":"LSP7 contract cannot receive native tokens."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}}}}}