{"id":"fd465ac26c103bfe303cb280a691b281","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@erc725/smart-contracts/contracts/constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// ERC165 INTERFACE IDs\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\n\n// ERC725X OPERATION TYPES\nuint256 constant OPERATION_0_CALL = 0;\nuint256 constant OPERATION_1_CREATE = 1;\nuint256 constant OPERATION_2_CREATE2 = 2;\nuint256 constant OPERATION_3_STATICCALL = 3;\nuint256 constant OPERATION_4_DELEGATECALL = 4;\n"},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// errors\nimport {\n    OwnableCannotSetZeroAddressAsOwner,\n    OwnableCallerNotTheOwner\n} from \"../errors.sol\";\n\n/**\n * @title OwnableUnset\n * @dev modified version of OpenZeppelin implementation, where:\n * - _setOwner(address) function is internal, so this function can be used in constructor\n * of contracts implementation (instead of using transferOwnership(address)\n * - the contract does not inherit from Context contract\n */\nabstract contract OwnableUnset {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableCannotSetZeroAddressAsOwner();\n        }\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != msg.sender) {\n            revert OwnableCallerNotTheOwner(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Changes the owner if `newOwner` and oldOwner are different\n     * This pattern is useful in inheritance.\n     */\n    function _setOwner(address newOwner) internal virtual {\n        if (newOwner != owner()) {\n            emit OwnershipTransferred(_owner, newOwner);\n            _owner = newOwner;\n        }\n    }\n}\n"},"@erc725/smart-contracts/contracts/ERC725Y.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\nimport {ERC725YCore} from \"./ERC725YCore.sol\";\n\n// errors\nimport {OwnableCannotSetZeroAddressAsOwner} from \"./errors.sol\";\n\n/**\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ncontract ERC725Y is ERC725YCore {\n    /**\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\n     * @param initialOwner the owner of the contract.\n     *\n     * @custom:requirements\n     * - `initialOwner` CANNOT be the zero address.\n     */\n    constructor(address initialOwner) payable {\n        if (initialOwner == address(0)) {\n            revert OwnableCannotSetZeroAddressAsOwner();\n        }\n        OwnableUnset._setOwner(initialOwner);\n    }\n}\n"},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725Y} from \"./interfaces/IERC725Y.sol\";\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\n\n// constants\nimport {_INTERFACEID_ERC725Y} from \"./constants.sol\";\n\nimport {\n    ERC725Y_MsgValueDisallowed,\n    ERC725Y_DataKeysValuesLengthMismatch,\n    ERC725Y_DataKeysValuesEmptyArray\n} from \"./errors.sol\";\n\n/**\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\n    /**\n     * @dev Map `bytes32` data keys to their `bytes` data values.\n     */\n    mapping(bytes32 => bytes) internal _store;\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getData(\n        bytes32 dataKey\n    ) public view virtual override returns (bytes memory dataValue) {\n        dataValue = _getData(dataKey);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) public view virtual override returns (bytes[] memory dataValues) {\n        dataValues = new bytes[](dataKeys.length);\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            dataValues[i] = _getData(dataKeys[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n\n        return dataValues;\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner}.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event.\n     */\n    function setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) public payable virtual override onlyOwner {\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n        _setData(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     * @custom:requirements\n     * - SHOULD only be callable by the {owner} of the contract.\n     *\n     * @custom:warning\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n     *\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) public payable virtual override onlyOwner {\n        /// @dev do not allow to send value by default when setting data in ERC725Y\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\n\n        if (dataKeys.length != dataValues.length) {\n            revert ERC725Y_DataKeysValuesLengthMismatch();\n        }\n\n        if (dataKeys.length == 0) {\n            revert ERC725Y_DataKeysValuesEmptyArray();\n        }\n\n        for (uint256 i = 0; i < dataKeys.length; ) {\n            _setData(dataKeys[i], dataValues[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\n     */\n    function _getData(\n        bytes32 dataKey\n    ) internal view virtual returns (bytes memory dataValue) {\n        return _store[dataKey];\n    }\n\n    /**\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n     * `bytes32` data keys mapped to their `bytes` data values.\n     *\n     * ```solidity\n     * mapping(bytes32 => bytes) _store\n     * ```\n     *\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\n     *\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual {\n        _store[dataKey] = dataValue;\n        emit DataChanged(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == _INTERFACEID_ERC725Y ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"},"@erc725/smart-contracts/contracts/errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\n * initializing it or transferring ownership of the contract.\n */\nerror OwnableCannotSetZeroAddressAsOwner();\n\n/**\n * @dev Reverts when only the owner is allowed to call the function.\n * @param callerAddress The address that tried to make the call.\n */\nerror OwnableCallerNotTheOwner(address callerAddress);\n\n/**\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\n * @param balance The balance of native tokens of the ERC725X smart contract.\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\n */\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\n\n/**\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\n */\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\n */\nerror ERC725X_MsgValueDisallowedInStaticCall();\n\n/**\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\n */\nerror ERC725X_MsgValueDisallowedInDelegateCall();\n\n/**\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\n\n/**\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_ContractDeploymentFailed();\n\n/**\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\n */\nerror ERC725X_NoContractBytecodeProvided();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\n * array parameters provided when calling the {executeBatch} function.\n */\nerror ERC725X_ExecuteParametersLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\n */\nerror ERC725X_ExecuteParametersEmptyArray();\n\n/**\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\n * array parameters provided when calling the {setDataBatch} function.\n */\nerror ERC725Y_DataKeysValuesLengthMismatch();\n\n/**\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\n */\nerror ERC725Y_DataKeysValuesEmptyArray();\n\n/**\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\n */\nerror ERC725Y_MsgValueDisallowed();\n"},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"content":"// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n     * @param dataKey The data key for which to retrieve the value.\n     * @return dataValue The bytes value stored under the specified data key.\n     */\n    function getData(\n        bytes32 dataKey\n    ) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n     *\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\n     * a fee mechanism for setting specific data.\n     *\n     * @param dataKey The data key for which to set a new value.\n     * @param dataValue The new bytes value to set.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\n\n    /**\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n     *\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n     *\n     * @param dataKeys An array of data keys to set bytes values for.\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external payable;\n}\n"},"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\";\n"},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\";\n"},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\";\n"},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.12;\n\nimport \"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\";\n"},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\n */\ninterface ILSP1UniversalReceiver {\n    /**\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n     *\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n     * @param value The amount sent to the {universalReceiver(...)} function.\n     * @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\n     */\n    event UniversalReceiver(\n        address indexed from,\n        uint256 indexed value,\n        bytes32 indexed typeId,\n        bytes receivedData,\n        bytes returnedValue\n    );\n\n    /**\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n     * @notice Reacted on received notification with `typeId` & `data`.\n     *\n     * @param typeId The hash of a specific standard or a hook.\n     * @param data The arbitrary data received with the call.\n     *\n     * @custom:events {UniversalReceiver} event.\n     */\n    function universalReceiver(\n        bytes32 typeId,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n}\n"},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\n\n// --- ERC725Y Data Keys\n\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\n\n// keccak256('LSP1UniversalReceiverDelegate')\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\n"},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// libraries\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// constants\nimport {ILSP1UniversalReceiver as ILSP1} from \"./ILSP1UniversalReceiver.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP1,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\n} from \"./LSP1Constants.sol\";\n\n/**\n * @title LSP1 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\n * Based on LSP1 Universal Receiver standard.\n */\nlibrary LSP1Utils {\n    using ERC165Checker for address;\n\n    /**\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\n     * supports the LSP1 interface.\n     *\n     * @param lsp1Implementation The address of the contract to notify.\n     * @param typeId A `bytes32` typeId.\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\n     */\n    function notifyUniversalReceiver(\n        address lsp1Implementation,\n        bytes32 typeId,\n        bytes memory data\n    ) internal {\n        if (\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\n                _INTERFACEID_LSP1\n            )\n        ) {\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\n        }\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\n     */\n    function getLSP1DelegateValue(\n        mapping(bytes32 => bytes) storage erc725YStorage\n    ) internal view returns (bytes memory) {\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\n    }\n\n    /**\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\n     *\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\n     *\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n     * @param typeId A bytes32 LSP1 `typeId`;\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\n     */\n    function getLSP1DelegateValueForTypeId(\n        mapping(bytes32 => bytes) storage erc725YStorage,\n        bytes32 typeId\n    ) internal view returns (bytes memory) {\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\n            bytes20(typeId)\n        );\n        return erc725YStorage[lsp1TypeIdDataKey];\n    }\n}\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\n\n// bytes4(keccack256(\"LSP17Extendable\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\n\n// bytes4(keccack256(\"LSP17Extension\"))\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\n\n// --- ERC725Y Data Keys\n\n// Extension Handler Prefix\n\n// bytes10(keccak256('LSP17Extension'))\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev reverts when there is no extension for the function selector being called with\n */\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\n\n/**\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\n */\nerror InvalidFunctionSelector(bytes data);\n\n/**\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\n */\nerror InvalidExtensionAddress(bytes storedData);\n"},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\n// constants\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \"./LSP17Constants.sol\";\n\n// errors\nimport {NoExtensionFoundForFunctionSelector} from \"./LSP17Errors.sol\";\n\n/**\n * @title Module to add more functionalities to a contract using extensions.\n *\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\n * This module can be inherited to extend the functionality of the parent contract when\n * calling a function that doesn't exist on the parent contract via forwarding the call\n * to an extension mapped to the function selector being called, set originally by the parent contract\n */\nabstract contract LSP17Extendable is ERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\n     * {supportsInterface} selector.\n     *\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n     * extension if the extension is set, if not it returns false.\n     */\n    function _supportsInterfaceInERC165Extension(\n        bytes4 interfaceId\n    ) internal view virtual returns (bool) {\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\n            ERC165.supportsInterface.selector\n        );\n        if (erc165Extension == address(0)) return false;\n\n        return\n            ERC165Checker.supportsERC165InterfaceUnchecked(\n                erc165Extension,\n                interfaceId\n            );\n    }\n\n    /**\n     * @dev Returns the extension mapped to a specific function selector\n     * If no extension was found, return the address(0)\n     * To be overrided.\n     * Up to the implementor contract to return an extension based on a function selector\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual returns (address, bool);\n\n    /**\n     * @dev Forwards the call to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the `address(0)` will be returned.\n     * Forwards the value if the extension is payable.\n     *\n     * Reverts if there is no extension for the function being called.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n     *\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n     *\n     * ```solidity\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\n     *     abi.encodePacked(callData, msg.sender, msg.value)\n     * );\n     * ```\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual returns (bytes memory) {\n        // If there is a function selector\n        (\n            address extension,\n            bool shouldForwardValue\n        ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if no extension was found, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{\n            value: shouldForwardValue ? msg.value : 0\n        }(abi.encodePacked(callData, msg.sender, msg.value));\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            // solhint-disable no-inline-assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n}\n"},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title LSP2 Utility library.\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\n * defined on the LSP2 standard.\n * Based on LSP2 ERC725Y JSON Schema standard.\n */\nlibrary LSP2Utils {\n    /**\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\n     *\n     * ```\n     * keccak256(\"keyName\")\n     * ```\n     *\n     * @param keyName The string to hash to generate a Singleton data key.\n     *\n     * @return The generated `bytes32` data key of key type Singleton.\n     */\n    function generateSingletonKey(\n        string memory keyName\n    ) internal pure returns (bytes32) {\n        return keccak256(bytes(keyName));\n    }\n\n    /**\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\n     *\n     * ```\n     * keccak256(\"arrayKeyName[]\")\n     * ```\n     *\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\n     *\n     * @return The generated `bytes32` data key of key type Array.\n     *\n     * @custom:requirements\n     * - The `keyName` must include at the end of the string the square brackets `\"[]\"`.\n     */\n    function generateArrayKey(\n        string memory arrayKeyName\n    ) internal pure returns (bytes32) {\n        bytes memory dataKey = bytes(arrayKeyName);\n        require(dataKey.length >= 2, \"MUST be longer than 2 characters\");\n        require(\n            dataKey[dataKey.length - 2] == 0x5b && // \"[\" in utf8 encoded\n                dataKey[dataKey.length - 1] == 0x5d, // \"]\" in utf8\n            \"Missing empty square brackets '[]' at the end of the key name\"\n        );\n\n        return keccak256(dataKey);\n    }\n\n    /**\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\n     * with the 16 bytes of `index`. As:\n     *\n     * ```\n     * arrayKey[index]\n     * ```\n     *\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\n     * @param index The index number in the `arrayKey`.\n     *\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\n     */\n    function generateArrayElementKeyAtIndex(\n        bytes32 arrayKey,\n        uint128 index\n    ) internal pure returns (bytes32) {\n        bytes memory elementInArray = bytes.concat(\n            bytes16(arrayKey),\n            bytes16(index)\n        );\n        return bytes32(elementInArray);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        string memory lastWord\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(lastWordHash)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\n     *\n     * ```\n     * bytes10(firstWordHash):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\n     * @param addr An address to map `firstWord` to.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\n     */\n    function generateMappingKey(\n        string memory firstWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes10(firstWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\n     *\n     * ```\n     * keyPrefix:bytes20Value\n     * ```\n     *\n     * @param keyPrefix The first part of the data key of key type Mapping.\n     * @param bytes20Value The second part of the data key of key type Mapping.\n     *\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\n     */\n    function generateMappingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\n     *\n     * ```\n     * bytes6(keccak256(\"firstWord\")):bytes4(keccak256(\"secondWord\")):0000:<address>\n     * ```\n     *\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\n     * @param addr The address that makes the last part of the MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\n     */\n    function generateMappingWithGroupingKey(\n        string memory firstWord,\n        string memory secondWord,\n        address addr\n    ) internal pure returns (bytes32) {\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\n\n        bytes memory temporaryBytes = bytes.concat(\n            bytes6(firstWordHash),\n            bytes4(secondWordHash),\n            bytes2(0),\n            bytes20(addr)\n        );\n\n        return bytes32(temporaryBytes);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\n     *\n     * ```\n     * keyPrefix:mapPrefix:0000:subMapKey\n     * ```\n     *\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes6 keyPrefix,\n        bytes4 mapPrefix,\n        bytes20 subMapKey\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            mapPrefix,\n            bytes2(0),\n            subMapKey\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\n     *\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\n     *\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\n     */\n    function generateMappingWithGroupingKey(\n        bytes10 keyPrefix,\n        bytes20 bytes20Value\n    ) internal pure returns (bytes32) {\n        bytes memory generatedKey = bytes.concat(\n            keyPrefix,\n            bytes2(0),\n            bytes20Value\n        );\n        return bytes32(generatedKey);\n    }\n\n    /**\n     * @dev Generate a JSONURL value content.\n     * @param hashFunction The function used to hash the JSON file.\n     * @param json Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     */\n    function generateJSONURLValue(\n        string memory hashFunction,\n        string memory json,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(json));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Generate a ASSETURL value content.\n     *\n     * @param hashFunction The function used to hash the JSON file.\n     * @param assetBytes Bytes value of the JSON file.\n     * @param url The URL where the JSON file is hosted.\n     *\n     * @return The encoded value as an `ASSETURL`.\n     */\n    function generateASSETURLValue(\n        string memory hashFunction,\n        string memory assetBytes,\n        string memory url\n    ) internal pure returns (bytes memory) {\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\n\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\n    }\n\n    /**\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\n     *\n     * @param compactBytesArray The bytes value to verify.\n     *\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\n     */\n    function isCompactBytesArray(\n        bytes memory compactBytesArray\n    ) internal pure returns (bool) {\n        /**\n         * Pointer will always land on these values:\n         *\n         * ↓↓↓↓\n         * 0003 a00000\n         * 0005 fff83a0011\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\n         * 0012 bb000000000000000000000000000000beef\n         * 0019 cc00000000000000000000000000000000000000000000deed\n         * ↑↑↑↑\n         *\n         * The pointer can only land on the length of the following bytes value.\n         */\n        uint256 pointer = 0;\n\n        /**\n         * Check each length byte and make sure that when you reach the last length byte.\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\n         */\n        while (pointer < compactBytesArray.length) {\n            if (pointer + 1 >= compactBytesArray.length) return false;\n            uint256 elementLength = uint16(\n                bytes2(\n                    abi.encodePacked(\n                        compactBytesArray[pointer],\n                        compactBytesArray[pointer + 1]\n                    )\n                )\n            );\n            pointer += elementLength + 2;\n        }\n        if (pointer == compactBytesArray.length) return true;\n        return false;\n    }\n\n    /**\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\n     *\n     * @param arrayLength Plain bytes that should be validated.\n     *\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\n     */\n    function isValidLSP2ArrayLengthValue(\n        bytes memory arrayLength\n    ) internal pure returns (bool) {\n        if (arrayLength.length == 16) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\n     *\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeLastElementFromArrayAndMap(\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        bytes32 removedElementMapKey\n    )\n        internal\n        pure\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](3);\n        dataValues = new bytes[](3);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // remove the data value for the map key of the element\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = \"\";\n    }\n\n    /**\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\n     *\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\n     *\n     * @param erc725YContract The ERC725Y contract.\n     * @param arrayKey The Data Key of Key Type Array.\n     * @param newArrayLength The new Array Length for the `arrayKey`.\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n     * @param removedElementIndex the index of the removed element.\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\n     */\n    function removeElementFromArrayAndMap(\n        IERC725Y erc725YContract,\n        bytes32 arrayKey,\n        uint128 newArrayLength,\n        bytes32 removedElementIndexKey,\n        uint128 removedElementIndex,\n        bytes32 removedElementMapKey\n    )\n        internal\n        view\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\n    {\n        dataKeys = new bytes32[](5);\n        dataValues = new bytes[](5);\n\n        // store the number of received assets decremented by 1\n        dataKeys[0] = arrayKey;\n        dataValues[0] = abi.encodePacked(newArrayLength);\n\n        // remove the data value for the map key of the element\n        dataKeys[1] = removedElementMapKey;\n        dataValues[1] = \"\";\n\n        // Generate the key of the last element in the array\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\n            arrayKey,\n            newArrayLength\n        );\n\n        // Get the data value from the key of the last element in the array\n        bytes20 lastElementIndexValue = bytes20(\n            erc725YContract.getData(lastElementIndexKey)\n        );\n\n        // Set data value of the last element instead of the element from the array that will be removed\n        dataKeys[2] = removedElementIndexKey;\n        dataValues[2] = bytes.concat(lastElementIndexValue);\n\n        // Remove the data value for the swapped array element\n        dataKeys[3] = lastElementIndexKey;\n        dataValues[3] = \"\";\n\n        // Generate mapping key for the swapped array element\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\n            bytes10(removedElementMapKey),\n            lastElementIndexValue\n        );\n\n        // Generate the mapping value for the swapped array element\n        bytes memory lastElementMapValue = abi.encodePacked(\n            bytes4(erc725YContract.getData(lastElementMapKey)),\n            removedElementIndex\n        );\n\n        // Update the map value of the swapped array element to the new index\n        dataKeys[4] = lastElementMapKey;\n        dataValues[4] = lastElementMapValue;\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// Token types\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\n\n// --- ERC725Y entries\n\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\n\n// bytes4(keccak256('LSP4DigitalAsset'))\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\"a4d96624\";\n\n// keccak256('LSP4TokenName')\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\n\n// keccak256('LSP4TokenSymbol')\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\n\n// keccak256('LSP4TokenType')\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\n\n// keccak256('LSP4Creators[]')\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\n\n// bytes10(keccak256('LSP4CreatorsMap'))\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\n\n// keccak256('LSP4Metadata')\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\n"},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC725Y} from \"@erc725/smart-contracts/contracts/ERC725Y.sol\";\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {LSP4DigitalAssetMetadataCore} from \"./LSP4DigitalAssetMetadataCore.sol\";\n\n// constants\nimport {\n    _LSP4_SUPPORTED_STANDARDS_KEY,\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\n    _LSP4_TOKEN_NAME_KEY,\n    _LSP4_TOKEN_SYMBOL_KEY,\n    _LSP4_TOKEN_TYPE_KEY\n} from \"./LSP4Constants.sol\";\n\n/**\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n * @author Matthew Stevens\n * @dev Standard Implementation of the LSP4 standard.\n */\nabstract contract LSP4DigitalAssetMetadata is\n    ERC725Y,\n    LSP4DigitalAssetMetadataCore\n{\n    /**\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\n     *\n     * @param name_ The name of the token.\n     * @param symbol_ The symbol of the token.\n     * @param initialOwner_ The owner of the token contract.\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address initialOwner_,\n        uint256 lsp4TokenType_\n    ) ERC725Y(initialOwner_) {\n        // set data key SupportedStandards:LSP4DigitalAsset\n        ERC725YCore._setData(\n            _LSP4_SUPPORTED_STANDARDS_KEY,\n            _LSP4_SUPPORTED_STANDARDS_VALUE\n        );\n\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\n    }\n\n    /**\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n     * via this function once the digital asset contract has been deployed.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\n\n// constants\nimport {\n    _LSP4_TOKEN_NAME_KEY,\n    _LSP4_TOKEN_SYMBOL_KEY,\n    _LSP4_TOKEN_TYPE_KEY\n} from \"./LSP4Constants.sol\";\n\n// errors\nimport {\n    LSP4TokenNameNotEditable,\n    LSP4TokenSymbolNotEditable,\n    LSP4TokenTypeNotEditable\n} from \"./LSP4Errors.sol\";\n\n/**\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n * @author Matthew Stevens\n * @dev Standard Implementation of the LSP4 standard.\n */\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\n    /**\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n     * via this function once the digital asset contract has been deployed.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual override {\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\n            revert LSP4TokenNameNotEditable();\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\n            revert LSP4TokenSymbolNotEditable();\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\n            revert LSP4TokenTypeNotEditable();\n        } else {\n            _store[dataKey] = dataValue;\n\n            emit DataChanged(dataKey, dataValue);\n        }\n    }\n}\n"},"@lukso/lsp4-contracts/contracts/LSP4Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenNameNotEditable();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenSymbolNotEditable();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\n */\nerror LSP4TokenTypeNotEditable();\n"},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\n */\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\n     * @param operator The address of operator that sent the `tokenId`\n     * @param from The previous owner of the `tokenId`\n     * @param to The new owner of `tokenId`\n     * @param tokenId The tokenId that was transferred\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\n     */\n    event Transfer(\n        address operator,\n        address indexed from,\n        address indexed to,\n        bytes32 indexed tokenId,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\n     * @param operator The address authorized as an operator.\n     * @param tokenOwner The owner of the `tokenId`.\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorAuthorizationChanged(\n        address indexed operator,\n        address indexed tokenOwner,\n        bytes32 indexed tokenId,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\n     * @param tokenOwner The owner of the `tokenId`.\n     * @param tokenId The tokenId `operator` is revoked from operating on.\n     * @param notified Bool indicating whether the operator has been notified or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorRevoked(\n        address indexed operator,\n        address indexed tokenOwner,\n        bytes32 indexed tokenId,\n        bool notified,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when setting data for `tokenId`.\n     * @param tokenId The tokenId which data is set for.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event TokenIdDataChanged(\n        bytes32 indexed tokenId,\n        bytes32 indexed dataKey,\n        bytes dataValue\n    );\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of existing tokens that have been minted in this contract.\n     * @return The number of existing tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Get the number of token IDs owned by `tokenOwner`.\n\n     * @param tokenOwner The address to query     *\n     * @return The total number of token IDs that `tokenOwner` owns.\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    /**\n     * @dev Returns the address that owns a given `tokenId`.\n     *\n     * @param tokenId The token ID to query the owner for.\n     * @return The owner address of the given `tokenId`.\n     *\n     * @custom:requirements `tokenId` must exist.\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\n     */\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\n\n    /**\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\n     * @param tokenOwner The address that we want to get the list of token IDs for.\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\n     */\n    function tokenIdsOf(\n        address tokenOwner\n    ) external view returns (bytes32[] memory);\n\n    // --- TokenId Metadata functionality\n\n    /**\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to retrieve.\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\n     */\n    function getDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey\n    ) external returns (bytes memory dataValues);\n\n    /**\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\n     * @param tokenIds An array of token IDs.\n     * @param dataKeys An array of data keys corresponding to the token IDs.\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\n     */\n    function getDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys\n    ) external returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to set.\n     * @param dataValue The value to set for the given data key.\n     * @custom:events {TokenIdDataChanged} event.\n     */\n    function setDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) external;\n\n    /**\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\n     * @param tokenIds An array of token IDs.\n     * @param dataKeys An array of data keys corresponding to the token IDs.\n     * @param dataValues An array of values to set for the given data keys.\n     * @custom:events {TokenIdDataChanged} event for each pair.\n     */\n    function setDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external;\n\n    // --- Operator functionality\n\n    /**\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The address to authorize as an operator.\n     * @param tokenId The token ID operator has access to.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} event.\n     */\n    function authorizeOperator(\n        address operator,\n        bytes32 tokenId,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\n     * See also {isOperatorFor}.\n     *\n     * @param operator The address to revoke as an operator.\n     * @param tokenId The tokenId `operator` is revoked from operating on.\n     * @param notify Boolean indicating whether to notify the operator or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller must be the {tokenOwnerOf} `tokenId`.\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\n     */\n    function revokeOperator(\n        address operator,\n        bytes32 tokenId,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\n     *\n     * @param operator The address to query operator status for.\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\n     *\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\n     *\n     * @custom:info The tokenOwner is its own operator.\n     */\n    function isOperatorFor(\n        address operator,\n        bytes32 tokenId\n    ) external view returns (bool);\n\n    /**\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\n     *\n     * @param tokenId The token ID to get the operators for.\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\n     *\n     * Requirements\n     * - `tokenId` must exist.\n     */\n    function getOperatorsOf(\n        bytes32 tokenId\n    ) external view returns (address[] memory);\n\n    // --- Transfer functionality\n\n    /**\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\n     *\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\n     *\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 standard.\n     *\n     * @param from The address that owns the given `tokenId`.\n     * @param to The address that will receive the `tokenId`.\n     * @param tokenId The token ID to transfer.\n     * @param force When set to `true`, the `to` address CAN be any addres.\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\n     * - `from` must own the given `tokenId`.\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\n     *\n     * @custom:events\n     * - {Transfer} event when the `tokenId` is successfully transferred.\n     *\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n     *\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n     *\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n     * This even if the `force` was set to `true`.\n     */\n    function transfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\n     * If any transfer fails, the whole call will revert.\n     *\n     * @param from An array of sending addresses.\n     * @param to An array of recipient addresses.\n     * @param tokenId An array of token IDs to transfer.\n     * @param force When set to `true`, `to` may be any address.\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\n     *\n     *\n     * @custom:requirements\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\n     * - no values in the `from` array can be the zero address.\n     * - no values in the `to` array can be the zero address.\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\n     * - each `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\n     *\n     * @custom:events\n     * - {Transfer} events on each successful token transfer.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        bytes32[] memory tokenId,\n        bool[] memory force,\n        bytes[] memory data\n    ) external;\n\n    /**\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n     *\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n     * @param data An array of ABI encoded function calls to be called on the contract.\n     * @return results An array of abi-encoded data returned by the functions executed.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"},"@lukso/lsp8-contracts/contracts/LSP8Constants.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\n\n// --- ERC725Y Data Keys\n\n// keccak256('LSP8TokenIdFormat')\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\n\n// keccak256('LSP8TokenMetadataBaseURI')\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\n\n// keccak256('LSP8ReferenceContract')\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\n\n// --- Token Hooks\n\n// keccak256('LSP8Tokens_SenderNotification')\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\n\n// keccak256('LSP8Tokens_RecipientNotification')\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\n\n// keccak256('LSP8Tokens_OperatorNotification')\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\n\n// --- Token IDs Format\n\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\n\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\n"},"@lukso/lsp8-contracts/contracts/LSP8Errors.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.4;\n\n// --- Errors\n\n/**\n * @dev Reverts when `tokenId` has not been minted.\n */\nerror LSP8NonExistentTokenId(bytes32 tokenId);\n\n/**\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\n */\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\n\n/**\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\n */\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\n\n/**\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\n */\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\n\n/**\n * @dev Reverts when trying to set the zero address as an operator.\n */\nerror LSP8CannotUseAddressZeroAsOperator();\n\n/**\n * @dev Reverts when trying to send token to the zero address.\n */\nerror LSP8CannotSendToAddressZero();\n\n/**\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\n */\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\n\n/**\n * @dev Reverts when `tokenId` has already been minted.\n */\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\n\n/**\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\n */\nerror LSP8InvalidTransferBatch();\n\n/**\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\n * when minting or transferring tokens with `bool force` set as `false`.\n */\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\n    address tokenReceiver\n);\n\n/**\n * @dev Reverts if the `tokenReceiver` is an EOA\n * when minting or transferring tokens with `bool force` set as `false`.\n */\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\n\n/**\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\n */\nerror LSP8TokenOwnerCannotBeOperator();\n\n/**\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\n *\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\n *\n * @notice LSP8 contract cannot receive native tokens.\n */\nerror LSP8TokenContractCannotHoldValue();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\n */\nerror LSP8TokenIdFormatNotEditable();\n\n/**\n * @dev Reverts when the length of the token IDs data arrays is not equal\n */\nerror LSP8TokenIdsDataLengthMismatch();\n\n/**\n * @dev Reverts when empty arrays is passed to the function\n */\nerror LSP8TokenIdsDataEmptyArray();\n\n/**\n * @dev Reverts when a batch call failed.\n * @notice Batch call failed.\n */\nerror LSP8BatchCallFailed(uint256 callIndex);\n\n/**\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\n */\nerror LSP8TokenOwnerChanged(\n    bytes32 tokenId,\n    address oldOwner,\n    address newOwner\n);\n\n/**\n * @dev Reverts when the call to revoke operator is not authorized.\n */\nerror LSP8RevokeOperatorNotAuthorized(\n    address caller,\n    address tokenOwner,\n    bytes32 tokenId\n);\n"},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.12;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {\n    LSP8IdentifiableDigitalAssetCore\n} from \"./LSP8IdentifiableDigitalAssetCore.sol\";\nimport {\n    LSP4DigitalAssetMetadata\n} from \"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\";\n\nimport {\n    LSP4DigitalAssetMetadataCore\n} from \"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\";\n\nimport {\n    LSP17Extendable\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\";\n\n// libraries\nimport {LSP2Utils} from \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\";\n\n// constants\nimport {_INTERFACEID_LSP8, _LSP8_TOKENID_FORMAT_KEY} from \"./LSP8Constants.sol\";\n\n// errors\nimport {\n    LSP8TokenContractCannotHoldValue,\n    LSP8TokenIdFormatNotEditable\n} from \"./LSP8Errors.sol\";\n\nimport {\n    _LSP17_EXTENSION_PREFIX\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\";\n\n// errors\n\nimport {\n    NoExtensionFoundForFunctionSelector,\n    InvalidFunctionSelector,\n    InvalidExtensionAddress\n} from \"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\";\n\n/**\n * @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\n * @author Matthew Stevens\n *\n * @dev Standard implementation contract of the LSP8 standard.\n *\n * Minting and transferring are done by providing a unique `tokenId`.\n * This implementation is agnostic to the way tokens are created.\n * A supply mechanism has to be added in a derived contract using {_mint}\n * For a generic mechanism, see {LSP7Mintable}.\n */\nabstract contract LSP8IdentifiableDigitalAsset is\n    LSP4DigitalAssetMetadata,\n    LSP8IdentifiableDigitalAssetCore,\n    LSP17Extendable\n{\n    /**\n     * @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\n     * with tokenId format `lsp8TokenIdFormat_`.\n     *\n     * @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\n     * This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\n     *\n     * @param name_ The name of the token\n     * @param symbol_ The symbol of the token\n     * @param newOwner_ The owner of the the token-Metadata\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n     * @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\n     *\n     * @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\n     * and cannot be changed in the ERC725Y storage after the contract has been deployed.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address newOwner_,\n        uint256 lsp4TokenType_,\n        uint256 lsp8TokenIdFormat_\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\n        LSP4DigitalAssetMetadata._setData(\n            _LSP8_TOKENID_FORMAT_KEY,\n            abi.encode(lsp8TokenIdFormat_)\n        );\n    }\n\n    // fallback function\n\n    /**\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\n     *\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\n     * forwarding the function call to the extension address mapped to the function being called.\n     *\n     * This function is executed when:\n     *    - Sending data of length less than 4 bytes to the contract.\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\n     *    - Receiving native tokens\n     *\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n     *\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\n     *\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\n     *\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\n     */\n    // solhint-disable-next-line no-complex-fallback\n    fallback(\n        bytes calldata callData\n    ) external payable virtual returns (bytes memory) {\n        if (msg.data.length < 4) {\n            revert InvalidFunctionSelector(callData);\n        }\n        return _fallbackLSP17Extendable(callData);\n    }\n\n    /**\n     * @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\n     * @notice LSP8 contract cannot receive native tokens.\n     */\n    receive() external payable virtual {\n        // revert on empty calls with no value\n        if (msg.value == 0) {\n            revert InvalidFunctionSelector(hex\"00000000\");\n        }\n\n        revert LSP8TokenContractCannotHoldValue();\n    }\n\n    /**\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\n     *\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n     * called on the account. If there is no extension, the address(0) will be returned.\n     * We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\n     *\n     * Reverts if there is no extension for the function being called.\n     *\n     * If there is an extension for the function selector being called, it calls the extension with the\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\n     * 32 bytes of the {msg.value}\n     *\n     * @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\n     */\n    function _fallbackLSP17Extendable(\n        bytes calldata callData\n    ) internal virtual override returns (bytes memory) {\n        // If there is a function selector\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\n\n        // if no extension was found, revert\n        if (extension == address(0))\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\n\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\n            abi.encodePacked(callData, msg.sender, msg.value)\n        );\n\n        if (success) {\n            return result;\n        } else {\n            // `mload(result)` -> offset in memory where `result.length` is located\n            // `add(result, 32)` -> offset in memory where `result` data starts\n            // solhint-disable no-inline-assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let resultdata_size := mload(result)\n                revert(add(result, 32), resultdata_size)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the extension address stored under the following data key:\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\n     * - If no extension is stored, returns the address(0).\n     */\n    function _getExtensionAndForwardValue(\n        bytes4 functionSelector\n    ) internal view virtual override returns (address, bool) {\n        // Generate the data key relevant for the functionSelector being called\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\n            _LSP17_EXTENSION_PREFIX,\n            functionSelector\n        );\n\n        // Check if there is an extension stored under the generated data key\n        bytes memory extensionAddress = ERC725YCore._getData(\n            mappedExtensionDataKey\n        );\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\n            revert InvalidExtensionAddress(extensionAddress);\n\n        return (address(bytes20(extensionAddress)), true);\n    }\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(IERC165, ERC725YCore, LSP17Extendable)\n        returns (bool)\n    {\n        return\n            interfaceId == _INTERFACEID_LSP8 ||\n            super.supportsInterface(interfaceId) ||\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\n    }\n\n    /**\n     * @inheritdoc LSP4DigitalAssetMetadata\n     * @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\n     * once the identifiable digital asset contract has been deployed.\n     */\n    function _setData(\n        bytes32 dataKey,\n        bytes memory dataValue\n    )\n        internal\n        virtual\n        override(LSP4DigitalAssetMetadata, LSP4DigitalAssetMetadataCore)\n    {\n        if (dataKey == _LSP8_TOKENID_FORMAT_KEY) {\n            revert LSP8TokenIdFormatNotEditable();\n        }\n        LSP4DigitalAssetMetadata._setData(dataKey, dataValue);\n    }\n}\n"},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.12;\n\n// interfaces\nimport {\n    ILSP1UniversalReceiver as ILSP1\n} from \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\";\nimport {\n    ILSP8IdentifiableDigitalAsset\n} from \"./ILSP8IdentifiableDigitalAsset.sol\";\n\n// modules\n\nimport {\n    LSP4DigitalAssetMetadataCore\n} from \"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\";\n\n// libraries\nimport {\n    EnumerableSet\n} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {\n    ERC165Checker\n} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {LSP1Utils} from \"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\";\n\n// errors\nimport {\n    LSP8NonExistentTokenId,\n    LSP8NotTokenOwner,\n    LSP8CannotUseAddressZeroAsOperator,\n    LSP8TokenOwnerCannotBeOperator,\n    LSP8OperatorAlreadyAuthorized,\n    LSP8NotTokenOperator,\n    LSP8InvalidTransferBatch,\n    LSP8NonExistingOperator,\n    LSP8CannotSendToAddressZero,\n    LSP8TokenIdAlreadyMinted,\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\n    LSP8NotifyTokenReceiverIsEOA,\n    LSP8TokenIdsDataLengthMismatch,\n    LSP8TokenIdsDataEmptyArray,\n    LSP8BatchCallFailed,\n    LSP8TokenOwnerChanged,\n    LSP8RevokeOperatorNotAuthorized\n} from \"./LSP8Errors.sol\";\n\n// constants\nimport {\n    _INTERFACEID_LSP1\n} from \"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\";\nimport {\n    _TYPEID_LSP8_TOKENOPERATOR,\n    _TYPEID_LSP8_TOKENSSENDER,\n    _TYPEID_LSP8_TOKENSRECIPIENT\n} from \"./LSP8Constants.sol\";\n\n/**\n * @title LSP8IdentifiableDigitalAsset contract\n * @author Matthew Stevens\n * @dev Core Implementation of a LSP8 compliant contract.\n */\nabstract contract LSP8IdentifiableDigitalAssetCore is\n    LSP4DigitalAssetMetadataCore,\n    ILSP8IdentifiableDigitalAsset\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // --- Storage\n\n    uint256 internal _existingTokens;\n\n    // Mapping from `tokenId` to `tokenOwner`\n    mapping(bytes32 => address) internal _tokenOwners;\n\n    // Mapping `tokenOwner` to owned tokenIds\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\n\n    // Mapping a `tokenId` to its authorized operator addresses.\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\n\n    // Mapping from `tokenId` to `dataKey` to `dataValue`\n    mapping(bytes32 => mapping(bytes32 => bytes)) internal _tokenIdData;\n\n    // --- Token queries\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _existingTokens;\n    }\n\n    // --- Token owner queries\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function balanceOf(\n        address tokenOwner\n    ) public view virtual override returns (uint256) {\n        return _ownedTokens[tokenOwner].length();\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function tokenOwnerOf(\n        bytes32 tokenId\n    ) public view virtual override returns (address) {\n        address tokenOwner = _tokenOwners[tokenId];\n\n        if (tokenOwner == address(0)) {\n            revert LSP8NonExistentTokenId(tokenId);\n        }\n\n        return tokenOwner;\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function tokenIdsOf(\n        address tokenOwner\n    ) public view virtual override returns (bytes32[] memory) {\n        return _ownedTokens[tokenOwner].values();\n    }\n\n    // --- TokenId Metadata functionality\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function getDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey\n    ) public view virtual override returns (bytes memory dataValue) {\n        return _getDataForTokenId(tokenId, dataKey);\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function getDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys\n    ) public view virtual override returns (bytes[] memory dataValues) {\n        if (tokenIds.length != dataKeys.length) {\n            revert LSP8TokenIdsDataLengthMismatch();\n        }\n\n        dataValues = new bytes[](tokenIds.length);\n\n        for (uint256 i; i < tokenIds.length; ) {\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n\n        return dataValues;\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function setDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) public virtual override onlyOwner {\n        _setDataForTokenId(tokenId, dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function setDataBatchForTokenIds(\n        bytes32[] memory tokenIds,\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) public virtual override onlyOwner {\n        if (\n            tokenIds.length != dataKeys.length ||\n            dataKeys.length != dataValues.length\n        ) {\n            revert LSP8TokenIdsDataLengthMismatch();\n        }\n\n        if (tokenIds.length == 0) {\n            revert LSP8TokenIdsDataEmptyArray();\n        }\n\n        for (uint256 i; i < tokenIds.length; ) {\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\n\n            // Increment the iterator in unchecked block to save gas\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // --- General functionality\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     *\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) public virtual override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i; i < data.length; ) {\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n\n            if (!success) {\n                // Look for revert reason and bubble it up if present\n                if (result.length != 0) {\n                    // The easiest way to bubble the revert reason is using memory via assembly\n                    // solhint-disable no-inline-assembly\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        let returndata_size := mload(result)\n                        revert(add(32, result), returndata_size)\n                    }\n                } else {\n                    revert LSP8BatchCallFailed({callIndex: i});\n                }\n            }\n\n            results[i] = result;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // --- Operator functionality\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function authorizeOperator(\n        address operator,\n        bytes32 tokenId,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        address tokenOwner = tokenOwnerOf(tokenId);\n\n        if (tokenOwner != msg.sender) {\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\n        }\n\n        if (operator == address(0)) {\n            revert LSP8CannotUseAddressZeroAsOperator();\n        }\n\n        if (tokenOwner == operator) {\n            revert LSP8TokenOwnerCannotBeOperator();\n        }\n\n        bool isAdded = _operators[tokenId].add(operator);\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\n\n        emit OperatorAuthorizationChanged(\n            operator,\n            tokenOwner,\n            tokenId,\n            operatorNotificationData\n        );\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            tokenId,\n            true, // authorized\n            operatorNotificationData\n        );\n\n        _notifyTokenOperator(operator, lsp1Data);\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function revokeOperator(\n        address operator,\n        bytes32 tokenId,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) public virtual override {\n        address tokenOwner = tokenOwnerOf(tokenId);\n\n        if (msg.sender != tokenOwner) {\n            if (operator != msg.sender) {\n                revert LSP8RevokeOperatorNotAuthorized(\n                    msg.sender,\n                    tokenOwner,\n                    tokenId\n                );\n            }\n        }\n\n        if (operator == address(0)) {\n            revert LSP8CannotUseAddressZeroAsOperator();\n        }\n\n        if (tokenOwner == operator) {\n            revert LSP8TokenOwnerCannotBeOperator();\n        }\n\n        _revokeOperator(\n            operator,\n            tokenOwner,\n            tokenId,\n            notify,\n            operatorNotificationData\n        );\n\n        if (notify) {\n            bytes memory lsp1Data = abi.encode(\n                tokenOwner,\n                tokenId,\n                false, // unauthorized\n                operatorNotificationData\n            );\n\n            _notifyTokenOperator(operator, lsp1Data);\n        }\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function isOperatorFor(\n        address operator,\n        bytes32 tokenId\n    ) public view virtual override returns (bool) {\n        return _isOperatorOrOwner(operator, tokenId);\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function getOperatorsOf(\n        bytes32 tokenId\n    ) public view virtual override returns (address[] memory) {\n        _existsOrError(tokenId);\n\n        return _operators[tokenId].values();\n    }\n\n    /**\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\n     * @return true if `caller` is either operator or owner\n     */\n    function _isOperatorOrOwner(\n        address caller,\n        bytes32 tokenId\n    ) internal view virtual returns (bool) {\n        return (caller == tokenOwnerOf(tokenId) ||\n            _operators[tokenId].contains(caller));\n    }\n\n    // --- Transfer functionality\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function transfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bool force,\n        bytes memory data\n    ) public virtual override {\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\n        }\n\n        _transfer(from, to, tokenId, force, data);\n    }\n\n    /**\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        bytes32[] memory tokenId,\n        bool[] memory force,\n        bytes[] memory data\n    ) public virtual override {\n        uint256 fromLength = from.length;\n        if (\n            fromLength != to.length ||\n            fromLength != tokenId.length ||\n            fromLength != force.length ||\n            fromLength != data.length\n        ) {\n            revert LSP8InvalidTransferBatch();\n        }\n\n        for (uint256 i; i < fromLength; ) {\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev removes `operator` from the list of operators for the `tokenId`\n     */\n    function _revokeOperator(\n        address operator,\n        address tokenOwner,\n        bytes32 tokenId,\n        bool notified,\n        bytes memory operatorNotificationData\n    ) internal virtual {\n        bool isRemoved = _operators[tokenId].remove(operator);\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\n\n        emit OperatorRevoked(\n            operator,\n            tokenOwner,\n            tokenId,\n            notified,\n            operatorNotificationData\n        );\n    }\n\n    /**\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\n     *\n     * @param tokenOwner The address that is the owner of the `tokenId`.\n     * @param tokenId The token to remove the associated operators for.\n     */\n    function _clearOperators(\n        address tokenOwner,\n        bytes32 tokenId\n    ) internal virtual {\n        // here is a good example of why having multiple operators will be expensive.. we\n        // need to clear them on token transfer\n        //\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\n        // the desired `transfer` or `burn` call can succeed.\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\n            tokenId\n        ];\n\n        uint256 operatorListLength = operatorsForTokenId.length();\n        address operator;\n        for (uint256 i; i < operatorListLength; ) {\n            // we are emptying the list, always remove from index 0\n            operator = operatorsForTokenId.at(0);\n            _revokeOperator(operator, tokenOwner, tokenId, false, \"\");\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\n     */\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev When `tokenId` does not exist then revert with an error.\n     */\n    function _existsOrError(bytes32 tokenId) internal view virtual {\n        if (!_exists(tokenId)) {\n            revert LSP8NonExistentTokenId(tokenId);\n        }\n    }\n\n    /**\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\n     *\n     * @param to The address that will receive the minted `tokenId`.\n     * @param tokenId The token ID to create (= mint).\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\n     *\n     * @custom:requirements\n     * - `tokenId` must not exist and not have been already minted.\n     * - `to` cannot be the zero address.\n\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\n     */\n    function _mint(\n        address to,\n        bytes32 tokenId,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) {\n            revert LSP8CannotSendToAddressZero();\n        }\n\n        // Check that `tokenId` is not already minted\n        if (_exists(tokenId)) {\n            revert LSP8TokenIdAlreadyMinted(tokenId);\n        }\n\n        _beforeTokenTransfer(address(0), to, tokenId, data);\n\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\n        if (_exists(tokenId)) {\n            revert LSP8TokenIdAlreadyMinted(tokenId);\n        }\n\n        // token being minted\n        ++_existingTokens;\n\n        _ownedTokens[to].add(tokenId);\n        _tokenOwners[tokenId] = to;\n\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\n\n        _afterTokenTransfer(address(0), to, tokenId, data);\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            address(0),\n            to,\n            tokenId,\n            data\n        );\n        _notifyTokenReceiver(to, force, lsp1Data);\n    }\n\n    /**\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\n     * This will also clear all the operators allowed to transfer the `tokenId`.\n     *\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\n     * all the parameters in the calldata packed encoded.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\n     *\n     * @param tokenId The token to burn.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\n     *\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\n     *\n     * @custom:requirements\n     * - `tokenId` must exist.\n     *\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\n     */\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\n        address tokenOwner = tokenOwnerOf(tokenId);\n\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, data);\n\n        // Re-fetch and update `tokenOwner` in case `tokenId`\n        // was transferred inside the `_beforeTokenTransfer` hook\n        tokenOwner = tokenOwnerOf(tokenId);\n\n        // token being burned\n        --_existingTokens;\n\n        _clearOperators(tokenOwner, tokenId);\n\n        _ownedTokens[tokenOwner].remove(tokenId);\n        delete _tokenOwners[tokenId];\n\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\n\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, data);\n\n        bytes memory lsp1Data = abi.encode(\n            msg.sender,\n            tokenOwner,\n            address(0),\n            tokenId,\n            data\n        );\n\n        _notifyTokenSender(tokenOwner, lsp1Data);\n    }\n\n    /**\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\n     *\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n     * all the parameters in the calldata packed encoded.\n     *\n     * @custom:info Any logic in the:\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\n     *\n     * @param from The sender address.\n     * @param to The recipient address.\n     * @param tokenId The token to transfer.\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * @custom:events {Transfer} event.\n     *\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        address tokenOwner = tokenOwnerOf(tokenId);\n        if (tokenOwner != from) {\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\n        }\n\n        if (to == address(0)) {\n            revert LSP8CannotSendToAddressZero();\n        }\n\n        _beforeTokenTransfer(from, to, tokenId, data);\n\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\n        address currentTokenOwner = tokenOwnerOf(tokenId);\n        if (tokenOwner != currentTokenOwner) {\n            revert LSP8TokenOwnerChanged(\n                tokenId,\n                tokenOwner,\n                currentTokenOwner\n            );\n        }\n\n        _clearOperators(from, tokenId);\n\n        _ownedTokens[from].remove(tokenId);\n        _ownedTokens[to].add(tokenId);\n        _tokenOwners[tokenId] = to;\n\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\n\n        _afterTokenTransfer(from, to, tokenId, data);\n\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\n\n        _notifyTokenSender(from, lsp1Data);\n        _notifyTokenReceiver(to, force, lsp1Data);\n    }\n\n    /**\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to set.\n     * @param dataValue The value to set for the given data key.\n     * @custom:events {TokenIdDataChanged} event.\n     */\n    function _setDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey,\n        bytes memory dataValue\n    ) internal virtual {\n        _tokenIdData[tokenId][dataKey] = dataValue;\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\n    }\n\n    /**\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\n     * @param tokenId The unique identifier for a token.\n     * @param dataKey The key for the data to retrieve.\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\n     */\n    function _getDataForTokenId(\n        bytes32 tokenId,\n        bytes32 dataKey\n    ) internal view virtual returns (bytes memory dataValues) {\n        return _tokenIdData[tokenId][dataKey];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer, including minting and burning.\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\n     *\n     * @param from The sender address\n     * @param to The recipient address\n     * @param tokenId The tokenId to transfer\n     * @param data The data sent alongside the transfer\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bytes memory data // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer, including minting and burning.\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient via LSP1** by overriding this function.\n     *\n     * @param from The sender address\n     * @param to The recipient address\n     * @param tokenId The tokenId to transfer\n     * @param data The data sent alongside the transfer\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        bytes32 tokenId,\n        bytes memory data // solhint-disable-next-line no-empty-blocks\n    ) internal virtual {}\n\n    /**\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n\n     * @param operator The address to call the {universalReceiver} function on.\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\n     */\n    function _notifyTokenOperator(\n        address operator,\n        bytes memory lsp1Data\n    ) internal virtual {\n        LSP1Utils.notifyUniversalReceiver(\n            operator,\n            _TYPEID_LSP8_TOKENOPERATOR,\n            lsp1Data\n        );\n    }\n\n    /**\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n\n     * @param from The address to call the {universalReceiver} function on.\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\n     */\n    function _notifyTokenSender(\n        address from,\n        bytes memory lsp1Data\n    ) internal virtual {\n        LSP1Utils.notifyUniversalReceiver(\n            from,\n            _TYPEID_LSP8_TOKENSSENDER,\n            lsp1Data\n        );\n    }\n\n    /**\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\n     *\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\n     * - if `force` is set to `false, the transaction will revert.\n     *\n     * @param to The address to call the {universalReceiver} function on.\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\n     */\n    function _notifyTokenReceiver(\n        address to,\n        bool force,\n        bytes memory lsp1Data\n    ) internal virtual {\n        if (\n            ERC165Checker.supportsERC165InterfaceUnchecked(\n                to,\n                _INTERFACEID_LSP1\n            )\n        ) {\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\n        } else if (!force) {\n            if (to.code.length != 0) {\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\n            } else {\n                revert LSP8NotifyTokenReceiverIsEOA(to);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/interfaces/IShirts.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\";\ninterface IShirts is ILSP8 {\n    event ShirtsMinted(address _recipient, uint256 _amount);\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable;\n    \n    function getPrizePool() external view returns (address prizePool);\n\n    function getPrice() external view returns (uint256 price);\n}"},"contracts/tokens/Shirts.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {LSP8IdentifiableDigitalAsset as LSP8} from '@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol';\nimport {_LSP4_TOKEN_TYPE_NFT} from '@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol';\nimport {_LSP8_TOKENID_FORMAT_NUMBER, _LSP8_TOKEN_METADATA_BASE_URI} from '@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol';\nimport {IShirts} from '../interfaces/IShirts.sol';\nimport '../utils/Errors.sol';\n\ncontract Shirts is IShirts, LSP8 {\n    uint256 public constant MAX_SUPPLY = 100;\n    uint256 public constant MAX_MINT = 5;\n    address private immutable i_prizePool;\n    uint256 private immutable i_price; \n    \n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        address _prizePool,\n        uint256 _price\n    ) LSP8(\n        _name,\n        _symbol,\n        _owner,\n        _LSP4_TOKEN_TYPE_NFT,\n        _LSP8_TOKENID_FORMAT_NUMBER\n    ) {\n        i_prizePool = _prizePool;\n        i_price = _price;\n    }\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable {\n        if(_existingTokens + _amount > MAX_SUPPLY) revert MintLimitExceeded();\n        if(balanceOf(_recipient) + _amount > MAX_MINT) revert MintLimitExceeded();\n        if(msg.value != i_price * _amount) revert InvalidMintPrice();\n\n        for(uint256 i; i < _amount; i++) {\n            uint256 tokenId = _existingTokens + 1;\n            _mint(_recipient, bytes32(tokenId), false, '');\n        }\n\n        (bool success,) = i_prizePool.call{value: msg.value}('');\n        if(!success) revert TransferFailed();\n\n        emit ShirtsMinted(_recipient, _amount);\n    }\n\n    function getPrizePool() external view returns (address prizePool) {\n        return i_prizePool;\n    }\n\n    function getPrice() external view returns (uint256 price) {\n        return i_price;\n    }\n}"},"contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nerror MintLimitExceeded();\n\nerror InvalidMintPrice();\n\nerror NoPrizeForThisTicket();\n\nerror AlreadyClaimedPrize();\n\nerror NoTickets();\n\nerror ZeroAddress();\n\nerror ZeroAmount();\n\nerror TransferFailed();\n\nerror FeeTransferFailed(address _creators, uint256 _amount);\n\nerror NoWinnersYet();\n\nerror MintClosed();"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@erc725/smart-contracts/contracts/ERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/ERC725Y.sol","exportedSymbols":{"ERC725Y":[35],"ERC725YCore":[270],"OwnableCannotSetZeroAddressAsOwner":[407],"OwnableUnset":[402]},"id":36,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:0"},{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","file":"./custom/OwnableUnset.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":403,"src":"75:55:0","symbolAliases":[{"foreign":{"id":2,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"83:12:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"./ERC725YCore.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":271,"src":"131:46:0","symbolAliases":[{"foreign":{"id":4,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"139:11:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"./errors.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":36,"sourceUnit":455,"src":"189:64:0","symbolAliases":[{"foreign":{"id":6,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"197:34:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9,"name":"ERC725YCore","nameLocations":["669:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"669:11:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"669:11:0"}],"canonicalName":"ERC725Y","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"255:393:0","text":" @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\n @author Fabian Vogelsteller <fabian@lukso.network>\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":true,"id":35,"linearizedBaseContracts":[35,270,505,3761,3968,402],"name":"ERC725Y","nameLocation":"658:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":33,"nodeType":"Block","src":"1095:162:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":16,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1109:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":19,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1133:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":18,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1125:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:0","typeDescriptions":{}}},"id":20,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1125:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1109:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":26,"nodeType":"IfStatement","src":"1105:100:0","trueBody":{"id":25,"nodeType":"Block","src":"1137:68:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1158:34:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1158:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"RevertStatement","src":"1151:43:0"}]}},{"expression":{"arguments":[{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1237:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":27,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"1214:12:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OwnableUnset_$402_$","typeString":"type(contract OwnableUnset)"}},"id":29,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1227:9:0","memberName":"_setOwner","nodeType":"MemberAccess","referencedDeclaration":401,"src":"1214:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1214:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":32,"nodeType":"ExpressionStatement","src":"1214:36:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"687:361:0","text":" @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\n @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\n @param initialOwner the owner of the contract.\n @custom:requirements\n - `initialOwner` CANNOT be the zero address."},"id":34,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"initialOwner","nameLocation":"1073:12:0","nodeType":"VariableDeclaration","scope":34,"src":"1065:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"1065:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1064:22:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"1095:0:0"},"scope":35,"src":"1053:204:0","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":36,"src":"649:610:0","usedErrors":[407,412,448,451,454],"usedEvents":[307,468]}],"src":"39:1221:0"},"id":0},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","exportedSymbols":{"ERC165":[3761],"ERC725YCore":[270],"ERC725Y_DataKeysValuesEmptyArray":[451],"ERC725Y_DataKeysValuesLengthMismatch":[448],"ERC725Y_MsgValueDisallowed":[454],"IERC165":[3968],"IERC725Y":[505],"OwnableUnset":[402],"_INTERFACEID_ERC725Y":[278]},"id":271,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":37,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":39,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":3969,"src":"78:80:1","symbolAliases":[{"foreign":{"id":38,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"86:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"./interfaces/IERC725Y.sol","id":41,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":506,"src":"159:51:1","symbolAliases":[{"foreign":{"id":40,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"167:8:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":43,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":3762,"src":"223:78:1","symbolAliases":[{"foreign":{"id":42,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"231:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","file":"./custom/OwnableUnset.sol","id":45,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":403,"src":"302:55:1","symbolAliases":[{"foreign":{"id":44,"name":"OwnableUnset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"310:12:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/constants.sol","file":"./constants.sol","id":47,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":294,"src":"372:53:1","symbolAliases":[{"foreign":{"id":46,"name":"_INTERFACEID_ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"380:20:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"./errors.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":271,"sourceUnit":455,"src":"427:142:1","symbolAliases":[{"foreign":{"id":48,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"440:26:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":49,"name":"ERC725Y_DataKeysValuesLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"472:36:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":50,"name":"ERC725Y_DataKeysValuesEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"514:32:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":53,"name":"OwnableUnset","nameLocations":["986:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":402,"src":"986:12:1"},"id":54,"nodeType":"InheritanceSpecifier","src":"986:12:1"},{"baseName":{"id":55,"name":"ERC165","nameLocations":["1000:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":3761,"src":"1000:6:1"},"id":56,"nodeType":"InheritanceSpecifier","src":"1000:6:1"},{"baseName":{"id":57,"name":"IERC725Y","nameLocations":["1008:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"1008:8:1"},"id":58,"nodeType":"InheritanceSpecifier","src":"1008:8:1"}],"canonicalName":"ERC725YCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"571:381:1","text":" @title Core implementation of ERC725Y sub-standard, a general data key/value store.\n @author Fabian Vogelsteller <fabian@lukso.network>\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":true,"id":270,"linearizedBaseContracts":[270,505,3761,3968,402],"name":"ERC725YCore","nameLocation":"971:11:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1023:77:1","text":" @dev Map `bytes32` data keys to their `bytes` data values."},"id":63,"mutability":"mutable","name":"_store","nameLocation":"1140:6:1","nodeType":"VariableDeclaration","scope":270,"src":"1105:41:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":62,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":60,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1105:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1124:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"},{"baseFunctions":[476],"body":{"id":78,"nodeType":"Block","src":"1307:46:1","statements":[{"expression":{"id":76,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":72,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1317:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":74,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1338:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":73,"name":"_getData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"1329:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1317:29:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":77,"nodeType":"ExpressionStatement","src":"1317:29:1"}]},"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"1153:39:1","text":" @inheritdoc IERC725Y"},"functionSelector":"54f6127f","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1206:7:1","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:1"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"dataKey","nameLocation":"1231:7:1","nodeType":"VariableDeclaration","scope":79,"src":"1223:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1223:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1213:31:1"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"dataValue","nameLocation":"1296:9:1","nodeType":"VariableDeclaration","scope":79,"src":"1283:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":69,"name":"bytes","nodeType":"ElementaryTypeName","src":"1283:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1282:24:1"},"scope":270,"src":"1197:156:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[486],"body":{"id":125,"nodeType":"Block","src":"1531:330:1","statements":[{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":90,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1541:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":94,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1566:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1575:6:1","memberName":"length","nodeType":"MemberAccess","src":"1566:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1554:11:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":91,"name":"bytes","nodeType":"ElementaryTypeName","src":"1558:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":92,"nodeType":"ArrayTypeName","src":"1558:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1554:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"1541:41:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":98,"nodeType":"ExpressionStatement","src":"1541:41:1"},{"body":{"id":121,"nodeType":"Block","src":"1636:191:1","statements":[{"expression":{"id":115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":107,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1650:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":109,"indexExpression":{"id":108,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1661:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1650:13:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":111,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1675:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":113,"indexExpression":{"id":112,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1684:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1675:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":110,"name":"_getData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"1666:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1666:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1650:37:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":116,"nodeType":"ExpressionStatement","src":"1650:37:1"},{"id":120,"nodeType":"UncheckedBlock","src":"1771:46:1","statements":[{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1799:3:1","subExpression":{"id":117,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1801:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"1799:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1613:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":104,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1617:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:6:1","memberName":"length","nodeType":"MemberAccess","src":"1617:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1613:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":122,"initializationExpression":{"assignments":[100],"declarations":[{"constant":false,"id":100,"mutability":"mutable","name":"i","nameLocation":"1606:1:1","nodeType":"VariableDeclaration","scope":122,"src":"1598:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99,"name":"uint256","nodeType":"ElementaryTypeName","src":"1598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":102,"initialValue":{"hexValue":"30","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1598:13:1"},"nodeType":"ForStatement","src":"1593:234:1"},{"expression":{"id":123,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1844:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":89,"id":124,"nodeType":"Return","src":"1837:17:1"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"1359:39:1","text":" @inheritdoc IERC725Y"},"functionSelector":"dedff9c6","id":126,"implemented":true,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1412:12:1","nodeType":"FunctionDefinition","overrides":{"id":85,"nodeType":"OverrideSpecifier","overrides":[],"src":"1486:8:1"},"parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"dataKeys","nameLocation":"1451:8:1","nodeType":"VariableDeclaration","scope":126,"src":"1434:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1434:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":82,"nodeType":"ArrayTypeName","src":"1434:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1424:41:1"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"dataValues","nameLocation":"1519:10:1","nodeType":"VariableDeclaration","scope":126,"src":"1504:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":86,"name":"bytes","nodeType":"ElementaryTypeName","src":"1504:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":87,"nodeType":"ArrayTypeName","src":"1504:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1503:27:1"},"scope":270,"src":"1403:458:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[494],"body":{"id":150,"nodeType":"Block","src":"2448:110:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2462:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2466:5:1","memberName":"value","nodeType":"MemberAccess","src":"2462:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2475:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2462:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"2458:55:1","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":141,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"2485:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2485:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"RevertStatement","src":"2478:35:1"}},{"expression":{"arguments":[{"id":146,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"2532:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":147,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"2541:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":145,"name":"_setData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"2523:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":149,"nodeType":"ExpressionStatement","src":"2523:28:1"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"1867:454:1","text":" @inheritdoc IERC725Y\n @custom:requirements\n - SHOULD only be callable by the {owner}.\n @custom:warning\n **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n @custom:events {DataChanged} event."},"functionSelector":"7f23690c","id":151,"implemented":true,"kind":"function","modifiers":[{"id":135,"kind":"modifierInvocation","modifierName":{"id":134,"name":"onlyOwner","nameLocations":["2438:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"2438:9:1"},"nodeType":"ModifierInvocation","src":"2438:9:1"}],"name":"setData","nameLocation":"2335:7:1","nodeType":"FunctionDefinition","overrides":{"id":133,"nodeType":"OverrideSpecifier","overrides":[],"src":"2429:8:1"},"parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"dataKey","nameLocation":"2360:7:1","nodeType":"VariableDeclaration","scope":151,"src":"2352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2352:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"dataValue","nameLocation":"2390:9:1","nodeType":"VariableDeclaration","scope":151,"src":"2377:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2377:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2342:63:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"2448:0:1"},"scope":270,"src":"2326:232:1","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[504],"body":{"id":214,"nodeType":"Block","src":"3216:623:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3314:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3318:5:1","memberName":"value","nodeType":"MemberAccess","src":"3314:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3327:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3314:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev do not allow to send value by default when setting data in ERC725Y","id":171,"nodeType":"IfStatement","src":"3310:55:1","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":168,"name":"ERC725Y_MsgValueDisallowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"3337:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3337:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"RevertStatement","src":"3330:35:1"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":172,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3380:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3389:6:1","memberName":"length","nodeType":"MemberAccess","src":"3380:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":174,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3399:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3410:6:1","memberName":"length","nodeType":"MemberAccess","src":"3399:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3380:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":181,"nodeType":"IfStatement","src":"3376:112:1","trueBody":{"id":180,"nodeType":"Block","src":"3418:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":177,"name":"ERC725Y_DataKeysValuesLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"3439:36:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3439:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"RevertStatement","src":"3432:45:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":182,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3502:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3511:6:1","memberName":"length","nodeType":"MemberAccess","src":"3502:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3521:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3502:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":190,"nodeType":"IfStatement","src":"3498:92:1","trueBody":{"id":189,"nodeType":"Block","src":"3524:66:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":186,"name":"ERC725Y_DataKeysValuesEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"3545:32:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3545:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"RevertStatement","src":"3538:41:1"}]}},{"body":{"id":212,"nodeType":"Block","src":"3643:190:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":200,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3666:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":202,"indexExpression":{"id":201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3675:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3666:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":203,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3679:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":205,"indexExpression":{"id":204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3690:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3679:13:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":199,"name":"_setData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"3657:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3657:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"3657:36:1"},{"id":211,"nodeType":"UncheckedBlock","src":"3777:46:1","statements":[{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3805:3:1","subExpression":{"id":208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3807:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":210,"nodeType":"ExpressionStatement","src":"3805:3:1"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":195,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3620:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":196,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"3624:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3633:6:1","memberName":"length","nodeType":"MemberAccess","src":"3624:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3620:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"initializationExpression":{"assignments":[192],"declarations":[{"constant":false,"id":192,"mutability":"mutable","name":"i","nameLocation":"3613:1:1","nodeType":"VariableDeclaration","scope":213,"src":"3605:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"3605:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":194,"initialValue":{"hexValue":"30","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3617:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3605:13:1"},"nodeType":"ForStatement","src":"3600:233:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"2564:507:1","text":" @inheritdoc IERC725Y\n @custom:requirements\n - SHOULD only be callable by the {owner} of the contract.\n @custom:warning\n **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\n (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\n @custom:events {DataChanged} event **for each data key/value pair set**."},"functionSelector":"97902421","id":215,"implemented":true,"kind":"function","modifiers":[{"id":162,"kind":"modifierInvocation","modifierName":{"id":161,"name":"onlyOwner","nameLocations":["3206:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"3206:9:1"},"nodeType":"ModifierInvocation","src":"3206:9:1"}],"name":"setDataBatch","nameLocation":"3085:12:1","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"3197:8:1"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"dataKeys","nameLocation":"3124:8:1","nodeType":"VariableDeclaration","scope":215,"src":"3107:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3107:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":154,"nodeType":"ArrayTypeName","src":"3107:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"dataValues","nameLocation":"3157:10:1","nodeType":"VariableDeclaration","scope":215,"src":"3142:25:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":156,"name":"bytes","nodeType":"ElementaryTypeName","src":"3142:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":157,"nodeType":"ArrayTypeName","src":"3142:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3097:76:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"3216:0:1"},"scope":270,"src":"3076:763:1","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":227,"nodeType":"Block","src":"4439:39:1","statements":[{"expression":{"baseExpression":{"id":223,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"4456:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":225,"indexExpression":{"id":224,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"4463:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4456:15:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":222,"id":226,"nodeType":"Return","src":"4449:22:1"}]},"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"3845:485:1","text":" @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```\n @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\n @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage."},"id":228,"implemented":true,"kind":"function","modifiers":[],"name":"_getData","nameLocation":"4344:8:1","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"dataKey","nameLocation":"4370:7:1","nodeType":"VariableDeclaration","scope":228,"src":"4362:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4362:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4352:31:1"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"dataValue","nameLocation":"4428:9:1","nodeType":"VariableDeclaration","scope":228,"src":"4415:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":220,"name":"bytes","nodeType":"ElementaryTypeName","src":"4415:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4414:24:1"},"scope":270,"src":"4335:143:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":247,"nodeType":"Block","src":"5130:90:1","statements":[{"expression":{"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":236,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"5140:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":238,"indexExpression":{"id":237,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"5147:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5140:15:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":239,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5158:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5140:27:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":241,"nodeType":"ExpressionStatement","src":"5140:27:1"},{"eventCall":{"arguments":[{"id":243,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"5194:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":244,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5203:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":242,"name":"DataChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5182:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"EmitStatement","src":"5177:36:1"}]},"documentation":{"id":229,"nodeType":"StructuredDocumentation","src":"4484:543:1","text":" @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```\n @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\n @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\n @custom:events {DataChanged} event emitted after a successful `setData` call."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"5041:8:1","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"dataKey","nameLocation":"5067:7:1","nodeType":"VariableDeclaration","scope":248,"src":"5059:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5059:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"dataValue","nameLocation":"5097:9:1","nodeType":"VariableDeclaration","scope":248,"src":"5084:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"5084:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5049:63:1"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"5130:0:1"},"scope":270,"src":"5032:188:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3760,3967],"body":{"id":268,"nodeType":"Block","src":"5390:123:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":259,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5419:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":260,"name":"_INTERFACEID_ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"5434:20:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5419:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":264,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5494:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":262,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5470:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC725YCore_$270_$","typeString":"type(contract super ERC725YCore)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5476:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3760,"src":"5470:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5470:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5419:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":258,"id":267,"nodeType":"Return","src":"5400:106:1"}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"5226:37:1","text":" @inheritdoc ERC165"},"functionSelector":"01ffc9a7","id":269,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5277:17:1","nodeType":"FunctionDefinition","overrides":{"id":255,"nodeType":"OverrideSpecifier","overrides":[{"id":253,"name":"IERC165","nameLocations":["5358:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":3968,"src":"5358:7:1"},{"id":254,"name":"ERC165","nameLocations":["5367:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":3761,"src":"5367:6:1"}],"src":"5349:25:1"},"parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"interfaceId","nameLocation":"5311:11:1","nodeType":"VariableDeclaration","scope":269,"src":"5304:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":250,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5304:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5294:34:1"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":269,"src":"5384:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":256,"name":"bool","nodeType":"ElementaryTypeName","src":"5384:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5383:6:1"},"scope":270,"src":"5268:245:1","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":271,"src":"953:4562:1","usedErrors":[407,412,448,451,454],"usedEvents":[307,468]}],"src":"39:5477:1"},"id":1},"@erc725/smart-contracts/contracts/constants.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/constants.sol","exportedSymbols":{"OPERATION_0_CALL":[281],"OPERATION_1_CREATE":[284],"OPERATION_2_CREATE2":[287],"OPERATION_3_STATICCALL":[290],"OPERATION_4_DELEGATECALL":[293],"_INTERFACEID_ERC725X":[275],"_INTERFACEID_ERC725Y":[278]},"id":294,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":272,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:2"},{"constant":true,"id":275,"mutability":"constant","name":"_INTERFACEID_ERC725X","nameLocation":"104:20:2","nodeType":"VariableDeclaration","scope":294,"src":"88:49:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":273,"name":"bytes4","nodeType":"ElementaryTypeName","src":"88:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783735343561636163","id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"127:10:2","typeDescriptions":{"typeIdentifier":"t_rational_1967500460_by_1","typeString":"int_const 1967500460"},"value":"0x7545acac"},"visibility":"internal"},{"constant":true,"id":278,"mutability":"constant","name":"_INTERFACEID_ERC725Y","nameLocation":"155:20:2","nodeType":"VariableDeclaration","scope":294,"src":"139:49:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":276,"name":"bytes4","nodeType":"ElementaryTypeName","src":"139:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783632396161363934","id":277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"178:10:2","typeDescriptions":{"typeIdentifier":"t_rational_1654302356_by_1","typeString":"int_const 1654302356"},"value":"0x629aa694"},"visibility":"internal"},{"constant":true,"id":281,"mutability":"constant","name":"OPERATION_0_CALL","nameLocation":"235:16:2","nodeType":"VariableDeclaration","scope":294,"src":"218:37:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"218:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"254:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":284,"mutability":"constant","name":"OPERATION_1_CREATE","nameLocation":"274:18:2","nodeType":"VariableDeclaration","scope":294,"src":"257:39:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"257:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"295:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":287,"mutability":"constant","name":"OPERATION_2_CREATE2","nameLocation":"315:19:2","nodeType":"VariableDeclaration","scope":294,"src":"298:40:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"298:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"337:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":290,"mutability":"constant","name":"OPERATION_3_STATICCALL","nameLocation":"357:22:2","nodeType":"VariableDeclaration","scope":294,"src":"340:43:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"382:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":293,"mutability":"constant","name":"OPERATION_4_DELEGATECALL","nameLocation":"402:24:2","nodeType":"VariableDeclaration","scope":294,"src":"385:45:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"385:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"429:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"}],"src":"39:393:2"},"id":2},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol","exportedSymbols":{"OwnableCallerNotTheOwner":[412],"OwnableCannotSetZeroAddressAsOwner":[407],"OwnableUnset":[402]},"id":403,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":295,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","file":"../errors.sol","id":298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":403,"sourceUnit":455,"src":"67:101:3","symbolAliases":[{"foreign":{"id":296,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"80:34:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":297,"name":"OwnableCallerNotTheOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"120:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"OwnableUnset","contractDependencies":[],"contractKind":"contract","documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"170:317:3","text":" @title OwnableUnset\n @dev modified version of OpenZeppelin implementation, where:\n - _setOwner(address) function is internal, so this function can be used in constructor\n of contracts implementation (instead of using transferOwnership(address)\n - the contract does not inherit from Context contract"},"fullyImplemented":true,"id":402,"linearizedBaseContracts":[402],"name":"OwnableUnset","nameLocation":"506:12:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":301,"mutability":"mutable","name":"_owner","nameLocation":"541:6:3","nodeType":"VariableDeclaration","scope":402,"src":"525:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"525:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":307,"name":"OwnershipTransferred","nameLocation":"560:20:3","nodeType":"EventDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"606:13:3","nodeType":"VariableDeclaration","scope":307,"src":"590:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":305,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"645:8:3","nodeType":"VariableDeclaration","scope":307,"src":"629:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"629:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:79:3"},"src":"554:106:3"},{"body":{"id":315,"nodeType":"Block","src":"791:30:3","statements":[{"expression":{"id":313,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"808:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":312,"id":314,"nodeType":"Return","src":"801:13:3"}]},"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"666:65:3","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":316,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"745:5:3","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[],"src":"750:2:3"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":316,"src":"782:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"782:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"781:9:3"},"scope":402,"src":"736:85:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":323,"nodeType":"Block","src":"930:41:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":319,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"940:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"940:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"ExpressionStatement","src":"940:13:3"},{"id":322,"nodeType":"PlaceholderStatement","src":"963:1:3"}]},"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"827:77:3","text":" @dev Throws if called by any account other than the owner."},"id":324,"name":"onlyOwner","nameLocation":"918:9:3","nodeType":"ModifierDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[],"src":"927:2:3"},"src":"909:62:3","virtual":false,"visibility":"internal"},{"body":{"id":337,"nodeType":"Block","src":"1367:38:3","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1395:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1387:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"1387:7:3","typeDescriptions":{}}},"id":334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1387:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":330,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"1377:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1377:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"ExpressionStatement","src":"1377:21:3"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"977:331:3","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":338,"implemented":true,"kind":"function","modifiers":[{"id":328,"kind":"modifierInvocation","modifierName":{"id":327,"name":"onlyOwner","nameLocations":["1357:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"1357:9:3"},"nodeType":"ModifierInvocation","src":"1357:9:3"}],"name":"renounceOwnership","nameLocation":"1322:17:3","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"1339:2:3"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[],"src":"1367:0:3"},"scope":402,"src":"1313:92:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":361,"nodeType":"Block","src":"1624:141:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1638:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1650:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1650:7:3","typeDescriptions":{}}},"id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1650:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1638:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":356,"nodeType":"IfStatement","src":"1634:96:3","trueBody":{"id":355,"nodeType":"Block","src":"1662:68:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"OwnableCannotSetZeroAddressAsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1683:34:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"RevertStatement","src":"1676:43:3"}]}},{"expression":{"arguments":[{"id":358,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1749:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":357,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"1739:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":360,"nodeType":"ExpressionStatement","src":"1739:19:3"}]},"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"1411:138:3","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":362,"implemented":true,"kind":"function","modifiers":[{"id":344,"kind":"modifierInvocation","modifierName":{"id":343,"name":"onlyOwner","nameLocations":["1614:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"1614:9:3"},"nodeType":"ModifierInvocation","src":"1614:9:3"}],"name":"transferOwnership","nameLocation":"1563:17:3","nodeType":"FunctionDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"newOwner","nameLocation":"1589:8:3","nodeType":"VariableDeclaration","scope":362,"src":"1581:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1580:18:3"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"1624:0:3"},"scope":402,"src":"1554:211:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":378,"nodeType":"Block","src":"1883:111:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":366,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"1897:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1897:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":368,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1908:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1912:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1908:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1897:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":377,"nodeType":"IfStatement","src":"1893:95:3","trueBody":{"id":376,"nodeType":"Block","src":"1920:68:3","statements":[{"errorCall":{"arguments":[{"expression":{"id":372,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1966:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1970:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1966:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":371,"name":"OwnableCallerNotTheOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1941:24:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":375,"nodeType":"RevertStatement","src":"1934:43:3"}]}}]},"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"1771:62:3","text":" @dev Throws if the sender is not the owner."},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1847:11:3","nodeType":"FunctionDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[],"src":"1858:2:3"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[],"src":"1883:0:3"},"scope":402,"src":"1838:156:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":400,"nodeType":"Block","src":"2187:140:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":385,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2201:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":386,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"2213:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2213:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2201:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":399,"nodeType":"IfStatement","src":"2197:124:3","trueBody":{"id":398,"nodeType":"Block","src":"2222:99:3","statements":[{"eventCall":{"arguments":[{"id":390,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2262:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":391,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2270:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":389,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2241:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2241:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":393,"nodeType":"EmitStatement","src":"2236:43:3"},{"expression":{"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":394,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2293:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":395,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2302:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2293:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":397,"nodeType":"ExpressionStatement","src":"2293:17:3"}]}}]},"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2000:128:3","text":" @dev Changes the owner if `newOwner` and oldOwner are different\n This pattern is useful in inheritance."},"id":401,"implemented":true,"kind":"function","modifiers":[],"name":"_setOwner","nameLocation":"2142:9:3","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"newOwner","nameLocation":"2160:8:3","nodeType":"VariableDeclaration","scope":401,"src":"2152:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"2152:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2151:18:3"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[],"src":"2187:0:3"},"scope":402,"src":"2133:194:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":403,"src":"488:1841:3","usedErrors":[407,412],"usedEvents":[307]}],"src":"32:2298:3"},"id":3},"@erc725/smart-contracts/contracts/errors.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/errors.sol","exportedSymbols":{"ERC725X_ContractDeploymentFailed":[436],"ERC725X_CreateOperationsRequireEmptyRecipientAddress":[433],"ERC725X_ExecuteParametersEmptyArray":[445],"ERC725X_ExecuteParametersLengthMismatch":[442],"ERC725X_InsufficientBalance":[419],"ERC725X_MsgValueDisallowedInDelegateCall":[430],"ERC725X_MsgValueDisallowedInStaticCall":[427],"ERC725X_NoContractBytecodeProvided":[439],"ERC725X_UnknownOperationType":[424],"ERC725Y_DataKeysValuesEmptyArray":[451],"ERC725Y_DataKeysValuesLengthMismatch":[448],"ERC725Y_MsgValueDisallowed":[454],"OwnableCallerNotTheOwner":[412],"OwnableCannotSetZeroAddressAsOwner":[407]},"id":455,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":404,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:4"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"64:168:4","text":" @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\n initializing it or transferring ownership of the contract."},"errorSelector":"1ad8836c","id":407,"name":"OwnableCannotSetZeroAddressAsOwner","nameLocation":"239:34:4","nodeType":"ErrorDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"273:2:4"},"src":"233:43:4"},{"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"278:141:4","text":" @dev Reverts when only the owner is allowed to call the function.\n @param callerAddress The address that tried to make the call."},"errorSelector":"bf1169c5","id":412,"name":"OwnableCallerNotTheOwner","nameLocation":"426:24:4","nodeType":"ErrorDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"callerAddress","nameLocation":"459:13:4","nodeType":"VariableDeclaration","scope":412,"src":"451:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":409,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:23:4"},"src":"420:54:4"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"476:336:4","text":" @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\n @param balance The balance of native tokens of the ERC725X smart contract.\n @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`."},"errorSelector":"0df9a8f8","id":419,"name":"ERC725X_InsufficientBalance","nameLocation":"819:27:4","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"balance","nameLocation":"855:7:4","nodeType":"VariableDeclaration","scope":419,"src":"847:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"847:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"value","nameLocation":"872:5:4","nodeType":"VariableDeclaration","scope":419,"src":"864:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"864:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"846:32:4"},"src":"813:66:4"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"881:314:4","text":" @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\n (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\n @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`."},"errorSelector":"7583b3bc","id":424,"name":"ERC725X_UnknownOperationType","nameLocation":"1202:28:4","nodeType":"ErrorDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"operationTypeProvided","nameLocation":"1239:21:4","nodeType":"VariableDeclaration","scope":424,"src":"1231:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1230:31:4"},"src":"1196:66:4"},{"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"1264:282:4","text":" @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\n Sending native tokens via `staticcall` is not allowed because it is a state changing operation."},"errorSelector":"72f2bc6a","id":427,"name":"ERC725X_MsgValueDisallowedInStaticCall","nameLocation":"1553:38:4","nodeType":"ErrorDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[],"src":"1591:2:4"},"src":"1547:47:4"},{"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"1596:277:4","text":" @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\n Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting."},"errorSelector":"5ac83135","id":430,"name":"ERC725X_MsgValueDisallowedInDelegateCall","nameLocation":"1880:40:4","nodeType":"ErrorDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[],"src":"1920:2:4"},"src":"1874:49:4"},{"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"1925:246:4","text":" @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"3041824a","id":433,"name":"ERC725X_CreateOperationsRequireEmptyRecipientAddress","nameLocation":"2178:52:4","nodeType":"ErrorDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"2230:2:4"},"src":"2172:61:4"},{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"2235:181:4","text":" @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"0b07489b","id":436,"name":"ERC725X_ContractDeploymentFailed","nameLocation":"2423:32:4","nodeType":"ErrorDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"2455:2:4"},"src":"2417:41:4"},{"documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"2460:224:4","text":" @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\n This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`)."},"errorSelector":"b81cd8d9","id":439,"name":"ERC725X_NoContractBytecodeProvided","nameLocation":"2691:34:4","nodeType":"ErrorDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[],"src":"2725:2:4"},"src":"2685:43:4"},{"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"2730:208:4","text":" @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\n array parameters provided when calling the {executeBatch} function."},"errorSelector":"3ff55f4d","id":442,"name":"ERC725X_ExecuteParametersLengthMismatch","nameLocation":"2945:39:4","nodeType":"ErrorDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[],"src":"2984:2:4"},"src":"2939:48:4"},{"documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"2989:114:4","text":" @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array."},"errorSelector":"e9ad2b5f","id":445,"name":"ERC725X_ExecuteParametersEmptyArray","nameLocation":"3110:35:4","nodeType":"ErrorDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[],"src":"3145:2:4"},"src":"3104:44:4"},{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"3150:175:4","text":" @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\n array parameters provided when calling the {setDataBatch} function."},"errorSelector":"3bcc8979","id":448,"name":"ERC725Y_DataKeysValuesLengthMismatch","nameLocation":"3332:36:4","nodeType":"ErrorDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[],"src":"3368:2:4"},"src":"3326:45:4"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"3373:110:4","text":" @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."},"errorSelector":"97da5f95","id":451,"name":"ERC725Y_DataKeysValuesEmptyArray","nameLocation":"3490:32:4","nodeType":"ErrorDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"3522:2:4"},"src":"3484:41:4"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"3527:87:4","text":" @dev Reverts when sending value to the {setData} or {setDataBatch} function."},"errorSelector":"f36ba737","id":454,"name":"ERC725Y_MsgValueDisallowed","nameLocation":"3621:26:4","nodeType":"ErrorDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"3647:2:4"},"src":"3615:35:4"}],"src":"39:3612:4"},"id":4},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","exportedSymbols":{"IERC165":[3968],"IERC725Y":[505]},"id":506,"license":"CC0-1.0","nodeType":"SourceUnit","nodes":[{"id":456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"36:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":506,"sourceUnit":3969,"src":"75:80:5","symbolAliases":[{"foreign":{"id":457,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"83:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":460,"name":"IERC165","nameLocations":["502:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":3968,"src":"502:7:5"},"id":461,"nodeType":"InheritanceSpecifier","src":"502:7:5"}],"canonicalName":"IERC725Y","contractDependencies":[],"contractKind":"interface","documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"157:322:5","text":" @title The interface for ERC725Y sub-standard, a generic data key/value store.\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":false,"id":505,"linearizedBaseContracts":[505,3968],"name":"IERC725Y","nameLocation":"490:8:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"516:373:5","text":" @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"ece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2","id":468,"name":"DataChanged","nameLocation":"900:11:5","nodeType":"EventDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"928:7:5","nodeType":"VariableDeclaration","scope":468,"src":"912:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":466,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"943:9:5","nodeType":"VariableDeclaration","scope":468,"src":"937:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":465,"name":"bytes","nodeType":"ElementaryTypeName","src":"937:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:42:5"},"src":"894:60:5"},{"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"960:361:5","text":" @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n @param dataKey The data key for which to retrieve the value.\n @return dataValue The bytes value stored under the specified data key."},"functionSelector":"54f6127f","id":476,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1335:7:5","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"dataKey","nameLocation":"1360:7:5","nodeType":"VariableDeclaration","scope":476,"src":"1352:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1352:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1342:31:5"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"dataValue","nameLocation":"1410:9:5","nodeType":"VariableDeclaration","scope":476,"src":"1397:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":473,"name":"bytes","nodeType":"ElementaryTypeName","src":"1397:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1396:24:5"},"scope":505,"src":"1326:95:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"1427:353:5","text":" @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n @param dataKeys The array of keys which values to retrieve\n @return dataValues The array of data stored at multiple keys"},"functionSelector":"dedff9c6","id":486,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1794:12:5","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"dataKeys","nameLocation":"1833:8:5","nodeType":"VariableDeclaration","scope":486,"src":"1816:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1816:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":479,"nodeType":"ArrayTypeName","src":"1816:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1806:41:5"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"dataValues","nameLocation":"1886:10:5","nodeType":"VariableDeclaration","scope":486,"src":"1871:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":482,"name":"bytes","nodeType":"ElementaryTypeName","src":"1871:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":483,"nodeType":"ArrayTypeName","src":"1871:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1870:27:5"},"scope":505,"src":"1785:113:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"1904:536:5","text":" @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n The function is marked as payable to enable flexibility on child contracts. For instance to implement\n a fee mechanism for setting specific data.\n @param dataKey The data key for which to set a new value.\n @param dataValue The new bytes value to set."},"functionSelector":"7f23690c","id":494,"implemented":false,"kind":"function","modifiers":[],"name":"setData","nameLocation":"2454:7:5","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"dataKey","nameLocation":"2470:7:5","nodeType":"VariableDeclaration","scope":494,"src":"2462:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2462:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"dataValue","nameLocation":"2492:9:5","nodeType":"VariableDeclaration","scope":494,"src":"2479:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":490,"name":"bytes","nodeType":"ElementaryTypeName","src":"2479:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2461:41:5"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[],"src":"2519:0:5"},"scope":505,"src":"2445:75:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"2526:478:5","text":" @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n @param dataKeys An array of data keys to set bytes values for.\n @param dataValues An array of bytes values to set for each `dataKeys`."},"functionSelector":"97902421","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatch","nameLocation":"3018:12:5","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"dataKeys","nameLocation":"3057:8:5","nodeType":"VariableDeclaration","scope":504,"src":"3040:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3040:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":497,"nodeType":"ArrayTypeName","src":"3040:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"dataValues","nameLocation":"3090:10:5","nodeType":"VariableDeclaration","scope":504,"src":"3075:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":499,"name":"bytes","nodeType":"ElementaryTypeName","src":"3075:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":500,"nodeType":"ArrayTypeName","src":"3075:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3030:76:5"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"3123:0:5"},"scope":505,"src":"3009:115:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":506,"src":"480:2646:5","usedErrors":[],"usedEvents":[468]}],"src":"36:3091:5"},"id":5},"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol","exportedSymbols":{"_LSP4_CREATORS_ARRAY_KEY":[1571],"_LSP4_CREATORS_MAP_KEY_PREFIX":[1574],"_LSP4_METADATA_KEY":[1577],"_LSP4_SUPPORTED_STANDARDS_KEY":[1556],"_LSP4_SUPPORTED_STANDARDS_VALUE":[1559],"_LSP4_TOKEN_NAME_KEY":[1562],"_LSP4_TOKEN_SYMBOL_KEY":[1565],"_LSP4_TOKEN_TYPE_COLLECTION":[1553],"_LSP4_TOKEN_TYPE_KEY":[1568],"_LSP4_TOKEN_TYPE_NFT":[1550],"_LSP4_TOKEN_TYPE_TOKEN":[1547]},"id":509,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":507,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:6"},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","id":508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":509,"sourceUnit":1578,"src":"64:59:6","symbolAliases":[],"unitAlias":""}],"src":"39:85:6"},"id":6},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"IERC165":[3968],"IERC725Y":[505],"ILSP8IdentifiableDigitalAsset":[1963]},"id":512,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":510,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:7"},{"absolutePath":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","id":511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":512,"sourceUnit":1964,"src":"64:75:7","symbolAliases":[],"unitAlias":""}],"src":"39:101:7"},"id":7},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol","exportedSymbols":{"_INTERFACEID_LSP8":[1968],"_LSP8_REFERENCE_CONTRACT":[1977],"_LSP8_TOKENID_FORMAT_ADDRESS":[1995],"_LSP8_TOKENID_FORMAT_HASH":[2001],"_LSP8_TOKENID_FORMAT_KEY":[1971],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS":[2010],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH":[2016],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER":[2004],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING":[2007],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID":[2013],"_LSP8_TOKENID_FORMAT_NUMBER":[1989],"_LSP8_TOKENID_FORMAT_STRING":[1992],"_LSP8_TOKENID_FORMAT_UNIQUE_ID":[1998],"_LSP8_TOKEN_METADATA_BASE_URI":[1974],"_TYPEID_LSP8_TOKENOPERATOR":[1986],"_TYPEID_LSP8_TOKENSRECIPIENT":[1983],"_TYPEID_LSP8_TOKENSSENDER":[1980]},"id":515,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":513,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:8"},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Constants.sol","file":"@lukso/lsp8-contracts/contracts/LSP8Constants.sol","id":514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":515,"sourceUnit":2017,"src":"64:59:8","symbolAliases":[],"unitAlias":""}],"src":"39:85:8"},"id":8},"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"ERC725YCore":[270],"IERC165":[3968],"InvalidExtensionAddress":[671],"InvalidFunctionSelector":[666],"LSP17Extendable":[805],"LSP2Utils":[1542],"LSP4DigitalAssetMetadata":[1669],"LSP4DigitalAssetMetadataCore":[1731],"LSP8IdentifiableDigitalAsset":[2384],"LSP8IdentifiableDigitalAssetCore":[3737],"LSP8TokenContractCannotHoldValue":[2083],"LSP8TokenIdFormatNotEditable":[2086],"NoExtensionFoundForFunctionSelector":[661],"_INTERFACEID_LSP8":[1968],"_LSP17_EXTENSION_PREFIX":[654],"_LSP8_TOKENID_FORMAT_KEY":[1971]},"id":518,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":516,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"39:24:9"},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol","id":517,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":518,"sourceUnit":2385,"src":"65:74:9","symbolAliases":[],"unitAlias":""}],"src":"39:101:9"},"id":9},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","exportedSymbols":{"ILSP1UniversalReceiver":[544]},"id":545,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":519,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"ILSP1UniversalReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"64:257:10","text":" @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\n @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received."},"fullyImplemented":false,"id":544,"linearizedBaseContracts":[544],"name":"ILSP1UniversalReceiver","nameLocation":"332:22:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"361:893:10","text":" @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\n @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\n @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\n @param value The amount sent to the {universalReceiver(...)} function.\n @param typeId A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\n @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\n @param returnedValue The value returned by the {universalReceiver(...)} function."},"eventSelector":"9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2","id":533,"name":"UniversalReceiver","nameLocation":"1265:17:10","nodeType":"EventDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1308:4:10","nodeType":"VariableDeclaration","scope":533,"src":"1292:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":522,"name":"address","nodeType":"ElementaryTypeName","src":"1292:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":525,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"1338:5:10","nodeType":"VariableDeclaration","scope":533,"src":"1322:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"1322:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":527,"indexed":true,"mutability":"mutable","name":"typeId","nameLocation":"1369:6:10","nodeType":"VariableDeclaration","scope":533,"src":"1353:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1353:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":529,"indexed":false,"mutability":"mutable","name":"receivedData","nameLocation":"1391:12:10","nodeType":"VariableDeclaration","scope":533,"src":"1385:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":528,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":531,"indexed":false,"mutability":"mutable","name":"returnedValue","nameLocation":"1419:13:10","nodeType":"VariableDeclaration","scope":533,"src":"1413:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"1413:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1282:156:10"},"src":"1259:180:10"},{"documentation":{"id":534,"nodeType":"StructuredDocumentation","src":"1445:517:10","text":" @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\n @notice Reacted on received notification with `typeId` & `data`.\n @param typeId The hash of a specific standard or a hook.\n @param data The arbitrary data received with the call.\n @custom:events {UniversalReceiver} event."},"functionSelector":"6bb56a14","id":543,"implemented":false,"kind":"function","modifiers":[],"name":"universalReceiver","nameLocation":"1976:17:10","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"typeId","nameLocation":"2011:6:10","nodeType":"VariableDeclaration","scope":543,"src":"2003:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"data","nameLocation":"2042:4:10","nodeType":"VariableDeclaration","scope":543,"src":"2027:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":537,"name":"bytes","nodeType":"ElementaryTypeName","src":"2027:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1993:59:10"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":543,"src":"2079:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":540,"name":"bytes","nodeType":"ElementaryTypeName","src":"2079:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2078:14:10"},"scope":544,"src":"1967:126:10","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":545,"src":"322:1773:10","usedErrors":[],"usedEvents":[533]}],"src":"39:2057:10"},"id":10},"@lukso/lsp1-contracts/contracts/LSP1Constants.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","exportedSymbols":{"_INTERFACEID_LSP1":[549],"_INTERFACEID_LSP1_DELEGATE":[552],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[558],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[555]},"id":559,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":546,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:11"},{"constant":true,"id":549,"mutability":"constant","name":"_INTERFACEID_LSP1","nameLocation":"108:17:11","nodeType":"VariableDeclaration","scope":559,"src":"92:46:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":547,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783662623536613134","id":548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:11","typeDescriptions":{"typeIdentifier":"t_rational_1807051284_by_1","typeString":"int_const 1807051284"},"value":"0x6bb56a14"},"visibility":"internal"},{"constant":true,"id":552,"mutability":"constant","name":"_INTERFACEID_LSP1_DELEGATE","nameLocation":"156:26:11","nodeType":"VariableDeclaration","scope":559,"src":"140:55:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":550,"name":"bytes4","nodeType":"ElementaryTypeName","src":"140:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786132343562626461","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"185:10:11","typeDescriptions":{"typeIdentifier":"t_rational_2722479066_by_1","typeString":"int_const 2722479066"},"value":"0xa245bbda"},"visibility":"internal"},{"constant":true,"id":555,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nameLocation":"296:40:11","nodeType":"VariableDeclaration","scope":559,"src":"279:82:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":553,"name":"bytes10","nodeType":"ElementaryTypeName","src":"279:7:11","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30783063666335316165633337633535613464306231","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"339:22:11","typeDescriptions":{"typeIdentifier":"t_rational_61322863157712349614257_by_1","typeString":"int_const 61322863157712349614257"},"value":"0x0cfc51aec37c55a4d0b1"},"visibility":"internal"},{"constant":true,"id":558,"mutability":"constant","name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nameLocation":"427:37:11","nodeType":"VariableDeclaration","scope":559,"src":"410:123:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"410:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830636663353161656333376335356134643062316136356336323535633462663266626466363237376633636330373330633435623832386236646238623437","id":557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"467:66:11","typeDescriptions":{"typeIdentifier":"t_rational_5873563396395204772354203425660447968463963513255343663932314865640255753031_by_1","typeString":"int_const 5873...(68 digits omitted)...3031"},"value":"0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47"},"visibility":"internal"}],"src":"39:496:11"},"id":11},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"ast":{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","exportedSymbols":{"ERC165Checker":[3956],"ILSP1":[544],"LSP1Utils":[643],"LSP2Utils":[1542],"_INTERFACEID_LSP1":[549],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY":[558],"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX":[555]},"id":644,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":560,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":644,"sourceUnit":3957,"src":"77:98:12","symbolAliases":[{"foreign":{"id":561,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"90:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","file":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","id":564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":644,"sourceUnit":1543,"src":"176:72:12","symbolAliases":[{"foreign":{"id":563,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"184:9:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","file":"./ILSP1UniversalReceiver.sol","id":566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":644,"sourceUnit":545,"src":"263:77:12","symbolAliases":[{"foreign":{"id":565,"name":"ILSP1UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"271:22:12","typeDescriptions":{}},"local":"ILSP1","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","file":"./LSP1Constants.sol","id":570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":644,"sourceUnit":559,"src":"355:149:12","symbolAliases":[{"foreign":{"id":567,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"368:17:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":568,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"391:37:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":569,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"434:40:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LSP1Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"506:370:12","text":" @title LSP1 Utility library.\n @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\n that implements LSP1 and retrieve informations related to LSP1 `typeId`.\n Based on LSP1 Universal Receiver standard."},"fullyImplemented":true,"id":643,"linearizedBaseContracts":[643],"name":"LSP1Utils","nameLocation":"885:9:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":574,"libraryName":{"id":572,"name":"ERC165Checker","nameLocations":["907:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":3956,"src":"907:13:12"},"nodeType":"UsingForDirective","src":"901:32:12","typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":598,"nodeType":"Block","src":"1487:226:12","statements":[{"condition":{"arguments":[{"id":586,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"1583:17:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":584,"name":"lsp1Implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"1514:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1533:32:12","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3955,"src":"1514:51:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1514:100:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":597,"nodeType":"IfStatement","src":"1497:210:12","trueBody":{"id":596,"nodeType":"Block","src":"1625:82:12","statements":[{"expression":{"arguments":[{"id":592,"name":"typeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"1683:6:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":593,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"1691:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":589,"name":"lsp1Implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"1645:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":588,"name":"ILSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"1639:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILSP1UniversalReceiver_$544_$","typeString":"type(contract ILSP1UniversalReceiver)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILSP1UniversalReceiver_$544","typeString":"contract ILSP1UniversalReceiver"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:17:12","memberName":"universalReceiver","nodeType":"MemberAccess","referencedDeclaration":543,"src":"1639:43:12","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes memory) payable external returns (bytes memory)"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:57:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":595,"nodeType":"ExpressionStatement","src":"1639:57:12"}]}}]},"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"939:408:12","text":" @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\n supports the LSP1 interface.\n @param lsp1Implementation The address of the contract to notify.\n @param typeId A `bytes32` typeId.\n @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address."},"id":599,"implemented":true,"kind":"function","modifiers":[],"name":"notifyUniversalReceiver","nameLocation":"1361:23:12","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"lsp1Implementation","nameLocation":"1402:18:12","nodeType":"VariableDeclaration","scope":599,"src":"1394:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":576,"name":"address","nodeType":"ElementaryTypeName","src":"1394:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"typeId","nameLocation":"1438:6:12","nodeType":"VariableDeclaration","scope":599,"src":"1430:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1430:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"data","nameLocation":"1467:4:12","nodeType":"VariableDeclaration","scope":599,"src":"1454:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":580,"name":"bytes","nodeType":"ElementaryTypeName","src":"1454:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1384:93:12"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"1487:0:12"},"scope":643,"src":"1352:361:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":613,"nodeType":"Block","src":"2326:77:12","statements":[{"expression":{"baseExpression":{"id":609,"name":"erc725YStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2343:14:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":611,"indexExpression":{"id":610,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"2358:37:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2343:53:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":608,"id":612,"nodeType":"Return","src":"2336:60:12"}]},"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"1719:471:12","text":" @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\n @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n the value set under the `LSP1UniversalReceiverDelegate` data key.\n @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key."},"id":614,"implemented":true,"kind":"function","modifiers":[],"name":"getLSP1DelegateValue","nameLocation":"2204:20:12","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"erc725YStorage","nameLocation":"2268:14:12","nodeType":"VariableDeclaration","scope":614,"src":"2234:48:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":603,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2242:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2234:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":602,"name":"bytes","nodeType":"ElementaryTypeName","src":"2253:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"}],"src":"2224:64:12"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":614,"src":"2312:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":606,"name":"bytes","nodeType":"ElementaryTypeName","src":"2312:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2311:14:12"},"scope":643,"src":"2195:208:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":641,"nodeType":"Block","src":"3178:216:12","statements":[{"assignments":[627],"declarations":[{"constant":false,"id":627,"mutability":"mutable","name":"lsp1TypeIdDataKey","nameLocation":"3196:17:12","nodeType":"VariableDeclaration","scope":641,"src":"3188:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3188:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":636,"initialValue":{"arguments":[{"id":630,"name":"_LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"3258:40:12","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"id":633,"name":"typeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"3320:6:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3312:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":631,"name":"bytes20","nodeType":"ElementaryTypeName","src":"3312:7:12","typeDescriptions":{}}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3312:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":628,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"3216:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1542_$","typeString":"type(library LSP2Utils)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3226:18:12","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1032,"src":"3216:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3216:121:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3188:149:12"},{"expression":{"baseExpression":{"id":637,"name":"erc725YStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"3354:14:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":639,"indexExpression":{"id":638,"name":"lsp1TypeIdDataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"3369:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3354:33:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":625,"id":640,"nodeType":"Return","src":"3347:40:12"}]},"documentation":{"id":615,"nodeType":"StructuredDocumentation","src":"2409:600:12","text":" @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\n @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\n the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\n @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\n @param typeId A bytes32 LSP1 `typeId`;\n @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key."},"id":642,"implemented":true,"kind":"function","modifiers":[],"name":"getLSP1DelegateValueForTypeId","nameLocation":"3023:29:12","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"erc725YStorage","nameLocation":"3096:14:12","nodeType":"VariableDeclaration","scope":642,"src":"3062:48:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"typeName":{"id":618,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3070:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3062:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":617,"name":"bytes","nodeType":"ElementaryTypeName","src":"3081:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"internal"},{"constant":false,"id":621,"mutability":"mutable","name":"typeId","nameLocation":"3128:6:12","nodeType":"VariableDeclaration","scope":642,"src":"3120:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3120:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3052:88:12"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":642,"src":"3164:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":623,"name":"bytes","nodeType":"ElementaryTypeName","src":"3164:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3163:14:12"},"scope":643,"src":"3014:380:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":644,"src":"877:2519:12","usedErrors":[],"usedEvents":[]}],"src":"39:3358:12"},"id":12},"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","exportedSymbols":{"_INTERFACEID_LSP17_EXTENDABLE":[648],"_INTERFACEID_LSP17_EXTENSION":[651],"_LSP17_EXTENSION_PREFIX":[654]},"id":655,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":645,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:13"},{"constant":true,"id":648,"mutability":"constant","name":"_INTERFACEID_LSP17_EXTENDABLE","nameLocation":"150:29:13","nodeType":"VariableDeclaration","scope":655,"src":"134:58:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":646,"name":"bytes4","nodeType":"ElementaryTypeName","src":"134:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786139313866613662","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"182:10:13","typeDescriptions":{"typeIdentifier":"t_rational_2836986475_by_1","typeString":"int_const 2836986475"},"value":"0xa918fa6b"},"visibility":"internal"},{"constant":true,"id":651,"mutability":"constant","name":"_INTERFACEID_LSP17_EXTENSION","nameLocation":"251:28:13","nodeType":"VariableDeclaration","scope":655,"src":"235:57:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":649,"name":"bytes4","nodeType":"ElementaryTypeName","src":"235:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786365653738623430","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"282:10:13","typeDescriptions":{"typeIdentifier":"t_rational_3471280960_by_1","typeString":"int_const 3471280960"},"value":"0xcee78b40"},"visibility":"internal"},{"constant":true,"id":654,"mutability":"constant","name":"_LSP17_EXTENSION_PREFIX","nameLocation":"407:23:13","nodeType":"VariableDeclaration","scope":655,"src":"390:65:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":652,"name":"bytes10","nodeType":"ElementaryTypeName","src":"390:7:13","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30786365653738623430393464613836303131303936","id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"433:22:13","typeDescriptions":{"typeIdentifier":"t_rational_977078727535809873907862_by_1","typeString":"int_const 977078727535809873907862"},"value":"0xcee78b4094da86011096"},"visibility":"internal"}],"src":"39:418:13"},"id":13},"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","exportedSymbols":{"InvalidExtensionAddress":[671],"InvalidFunctionSelector":[666],"NoExtensionFoundForFunctionSelector":[661]},"id":672,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":656,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:14"},{"documentation":{"id":657,"nodeType":"StructuredDocumentation","src":"64:94:14","text":" @dev reverts when there is no extension for the function selector being called with"},"errorSelector":"bb370b2b","id":661,"name":"NoExtensionFoundForFunctionSelector","nameLocation":"165:35:14","nodeType":"ErrorDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"functionSelector","nameLocation":"208:16:14","nodeType":"VariableDeclaration","scope":661,"src":"201:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":658,"name":"bytes4","nodeType":"ElementaryTypeName","src":"201:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"200:25:14"},"src":"159:67:14"},{"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"228:114:14","text":" @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"},"errorSelector":"e5099ee3","id":666,"name":"InvalidFunctionSelector","nameLocation":"349:23:14","nodeType":"ErrorDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"data","nameLocation":"379:4:14","nodeType":"VariableDeclaration","scope":666,"src":"373:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":663,"name":"bytes","nodeType":"ElementaryTypeName","src":"373:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"372:12:14"},"src":"343:42:14"},{"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"387:110:14","text":" @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"},"errorSelector":"42bfe79f","id":671,"name":"InvalidExtensionAddress","nameLocation":"504:23:14","nodeType":"ErrorDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"storedData","nameLocation":"534:10:14","nodeType":"VariableDeclaration","scope":671,"src":"528:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":668,"name":"bytes","nodeType":"ElementaryTypeName","src":"528:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"527:18:14"},"src":"498:48:14"}],"src":"39:508:14"},"id":14},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"ast":{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","exportedSymbols":{"ERC165":[3761],"ERC165Checker":[3956],"LSP17Extendable":[805],"NoExtensionFoundForFunctionSelector":[661],"_INTERFACEID_LSP17_EXTENDABLE":[648]},"id":806,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":673,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:15"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":675,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":806,"sourceUnit":3762,"src":"75:78:15","symbolAliases":[{"foreign":{"id":674,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"83:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":677,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":806,"sourceUnit":3957,"src":"154:98:15","symbolAliases":[{"foreign":{"id":676,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"167:13:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","file":"./LSP17Constants.sol","id":679,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":806,"sourceUnit":655,"src":"267:67:15","symbolAliases":[{"foreign":{"id":678,"name":"_INTERFACEID_LSP17_EXTENDABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"275:29:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","file":"./LSP17Errors.sol","id":681,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":806,"sourceUnit":672,"src":"346:70:15","symbolAliases":[{"foreign":{"id":680,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"354:35:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":683,"name":"ERC165","nameLocations":["924:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3761,"src":"924:6:15"},"id":684,"nodeType":"InheritanceSpecifier","src":"924:6:15"}],"canonicalName":"LSP17Extendable","contractDependencies":[],"contractKind":"contract","documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"418:468:15","text":" @title Module to add more functionalities to a contract using extensions.\n @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\n This module can be inherited to extend the functionality of the parent contract when\n calling a function that doesn't exist on the parent contract via forwarding the call\n to an extension mapped to the function selector being called, set originally by the parent contract"},"fullyImplemented":false,"id":805,"linearizedBaseContracts":[805,3761,3968],"name":"LSP17Extendable","nameLocation":"905:15:15","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3760],"body":{"id":702,"nodeType":"Block","src":"1103:132:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":693,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"1132:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":694,"name":"_INTERFACEID_LSP17_EXTENDABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1147:29:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1132:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":698,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"1216:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":696,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1192:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_LSP17Extendable_$805_$","typeString":"type(contract super LSP17Extendable)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1198:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3760,"src":"1192:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1192:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1132:96:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":692,"id":701,"nodeType":"Return","src":"1113:115:15"}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"937:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":703,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1007:17:15","nodeType":"FunctionDefinition","overrides":{"id":689,"nodeType":"OverrideSpecifier","overrides":[],"src":"1079:8:15"},"parameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"interfaceId","nameLocation":"1041:11:15","nodeType":"VariableDeclaration","scope":703,"src":"1034:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":686,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1034:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1024:34:15"},"returnParameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":703,"src":"1097:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":690,"name":"bool","nodeType":"ElementaryTypeName","src":"1097:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1096:6:15"},"scope":805,"src":"998:237:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":734,"nodeType":"Block","src":"1774:341:15","statements":[{"assignments":[712,null],"declarations":[{"constant":false,"id":712,"mutability":"mutable","name":"erc165Extension","nameLocation":"1793:15:15","nodeType":"VariableDeclaration","scope":734,"src":"1785:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":711,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":718,"initialValue":{"arguments":[{"expression":{"expression":{"id":714,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"1856:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165_$3761_$","typeString":"type(contract ERC165)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1863:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3760,"src":"1856:24:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1881:8:15","memberName":"selector","nodeType":"MemberAccess","src":"1856:33:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":713,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"1814:28:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1814:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"1784:115:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":719,"name":"erc165Extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"1913:15:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1940:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1932:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"1932:7:15","typeDescriptions":{}}},"id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1932:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1913:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":727,"nodeType":"IfStatement","src":"1909:47:15","trueBody":{"expression":{"hexValue":"66616c7365","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1951:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":710,"id":726,"nodeType":"Return","src":"1944:12:15"}},{"expression":{"arguments":[{"id":730,"name":"erc165Extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"2050:15:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":731,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"2083:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":728,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"1986:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$3956_$","typeString":"type(library ERC165Checker)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:32:15","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3955,"src":"1986:46:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1986:122:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":710,"id":733,"nodeType":"Return","src":"1967:141:15"}]},"documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"1241:412:15","text":" @dev Returns whether the interfaceId being checked is supported in the extension of the\n {supportsInterface} selector.\n To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n extension if the extension is set, if not it returns false."},"id":735,"implemented":true,"kind":"function","modifiers":[],"name":"_supportsInterfaceInERC165Extension","nameLocation":"1667:35:15","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"interfaceId","nameLocation":"1719:11:15","nodeType":"VariableDeclaration","scope":735,"src":"1712:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":705,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1712:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1702:34:15"},"returnParameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":735,"src":"1768:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":708,"name":"bool","nodeType":"ElementaryTypeName","src":"1768:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1767:6:15"},"scope":805,"src":"1658:457:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":736,"nodeType":"StructuredDocumentation","src":"2121:254:15","text":" @dev Returns the extension mapped to a specific function selector\n If no extension was found, return the address(0)\n To be overrided.\n Up to the implementor contract to return an extension based on a function selector"},"id":745,"implemented":false,"kind":"function","modifiers":[],"name":"_getExtensionAndForwardValue","nameLocation":"2389:28:15","nodeType":"FunctionDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"functionSelector","nameLocation":"2434:16:15","nodeType":"VariableDeclaration","scope":745,"src":"2427:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":737,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2427:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2417:39:15"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":745,"src":"2488:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"2488:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":745,"src":"2497:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":742,"name":"bool","nodeType":"ElementaryTypeName","src":"2497:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2487:15:15"},"scope":805,"src":"2380:123:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":803,"nodeType":"Block","src":"3787:991:15","statements":[{"assignments":[754,756],"declarations":[{"constant":false,"id":754,"mutability":"mutable","name":"extension","nameLocation":"3862:9:15","nodeType":"VariableDeclaration","scope":803,"src":"3854:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"3854:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"shouldForwardValue","nameLocation":"3890:18:15","nodeType":"VariableDeclaration","scope":803,"src":"3885:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":755,"name":"bool","nodeType":"ElementaryTypeName","src":"3885:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":761,"initialValue":{"arguments":[{"expression":{"id":758,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3950:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3954:3:15","memberName":"sig","nodeType":"MemberAccess","src":"3950:7:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":757,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3921:28:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3921:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"3840:118:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":762,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"4018:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4039:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4031:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"4031:7:15","typeDescriptions":{}}},"id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4031:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4018:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":773,"nodeType":"IfStatement","src":"4014:92:15","trueBody":{"errorCall":{"arguments":[{"expression":{"id":769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4098:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4102:3:15","memberName":"sig","nodeType":"MemberAccess","src":"4098:7:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":768,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4062:35:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes4_$returns$__$","typeString":"function (bytes4) pure"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"RevertStatement","src":"4055:51:15"}},{"assignments":[775,777],"declarations":[{"constant":false,"id":775,"mutability":"mutable","name":"success","nameLocation":"4123:7:15","nodeType":"VariableDeclaration","scope":803,"src":"4118:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":774,"name":"bool","nodeType":"ElementaryTypeName","src":"4118:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"result","nameLocation":"4145:6:15","nodeType":"VariableDeclaration","scope":803,"src":"4132:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":776,"name":"bytes","nodeType":"ElementaryTypeName","src":"4132:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":795,"initialValue":{"arguments":[{"arguments":[{"id":788,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"4252:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"id":789,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4262:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4266:6:15","memberName":"sender","nodeType":"MemberAccess","src":"4262:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":791,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4274:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4278:5:15","memberName":"value","nodeType":"MemberAccess","src":"4274:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":786,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4235:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4239:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"4235:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4235:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":778,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"4155:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4165:4:15","memberName":"call","nodeType":"MemberAccess","src":"4155:14:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"condition":{"id":780,"name":"shouldForwardValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"4190:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4223:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4190:34:15","trueExpression":{"expression":{"id":781,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4211:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4215:5:15","memberName":"value","nodeType":"MemberAccess","src":"4211:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4155:79:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4155:130:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4117:168:15"},{"condition":{"id":796,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4300:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":801,"nodeType":"Block","src":"4353:419:15","statements":[{"AST":{"nodeType":"YulBlock","src":"4637:125:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4655:36:15","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4684:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4678:5:15"},"nodeType":"YulFunctionCall","src":"4678:13:15"},"variables":[{"name":"resultdata_size","nodeType":"YulTypedName","src":"4659:15:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4719:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4727:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4715:3:15"},"nodeType":"YulFunctionCall","src":"4715:15:15"},{"name":"resultdata_size","nodeType":"YulIdentifier","src":"4732:15:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4708:6:15"},"nodeType":"YulFunctionCall","src":"4708:40:15"},"nodeType":"YulExpressionStatement","src":"4708:40:15"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":777,"isOffset":false,"isSlot":false,"src":"4684:6:15","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"4719:6:15","valueSize":1}],"id":800,"nodeType":"InlineAssembly","src":"4628:134:15"}]},"id":802,"nodeType":"IfStatement","src":"4296:476:15","trueBody":{"id":799,"nodeType":"Block","src":"4309:38:15","statements":[{"expression":{"id":797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4330:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":752,"id":798,"nodeType":"Return","src":"4323:13:15"}]}}]},"documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"2509:1160:15","text":" @dev Forwards the call to an extension mapped to a function selector.\n Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n called on the account. If there is no extension, the `address(0)` will be returned.\n Forwards the value if the extension is payable.\n Reverts if there is no extension for the function being called.\n If there is an extension for the function selector being called, it calls the extension with the\n `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\n @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n ```solidity\n (bool success, bytes memory result) = extension.call{value: msg.value}(\n     abi.encodePacked(callData, msg.sender, msg.value)\n );\n ```"},"id":804,"implemented":true,"kind":"function","modifiers":[],"name":"_fallbackLSP17Extendable","nameLocation":"3683:24:15","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"callData","nameLocation":"3732:8:15","nodeType":"VariableDeclaration","scope":804,"src":"3717:23:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":747,"name":"bytes","nodeType":"ElementaryTypeName","src":"3717:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3707:39:15"},"returnParameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":804,"src":"3773:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":750,"name":"bytes","nodeType":"ElementaryTypeName","src":"3773:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3772:14:15"},"scope":805,"src":"3674:1104:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":806,"src":"887:3893:15","usedErrors":[],"usedEvents":[]}],"src":"39:4742:15"},"id":15},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"ast":{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","exportedSymbols":{"IERC725Y":[505],"LSP2Utils":[1542]},"id":1543,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":807,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:16"},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":809,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1543,"sourceUnit":506,"src":"78:89:16","symbolAliases":[{"foreign":{"id":808,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"91:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LSP2Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"169:312:16","text":" @title LSP2 Utility library.\n @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\n @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\n defined on the LSP2 standard.\n Based on LSP2 ERC725Y JSON Schema standard."},"fullyImplemented":true,"id":1542,"linearizedBaseContracts":[1542],"name":"LSP2Utils","nameLocation":"490:9:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":825,"nodeType":"Block","src":"929:49:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":821,"name":"keyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"962:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"956:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"956:5:16","typeDescriptions":{}}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"956:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":818,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"946:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":817,"id":824,"nodeType":"Return","src":"939:32:16"}]},"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"506:319:16","text":" @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\n ```\n keccak256(\"keyName\")\n ```\n @param keyName The string to hash to generate a Singleton data key.\n @return The generated `bytes32` data key of key type Singleton."},"id":826,"implemented":true,"kind":"function","modifiers":[],"name":"generateSingletonKey","nameLocation":"839:20:16","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":813,"mutability":"mutable","name":"keyName","nameLocation":"883:7:16","nodeType":"VariableDeclaration","scope":826,"src":"869:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":812,"name":"string","nodeType":"ElementaryTypeName","src":"869:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"859:37:16"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":826,"src":"920:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"920:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"919:9:16"},"scope":1542,"src":"830:148:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":874,"nodeType":"Block","src":"1548:415:16","statements":[{"assignments":[835],"declarations":[{"constant":false,"id":835,"mutability":"mutable","name":"dataKey","nameLocation":"1571:7:16","nodeType":"VariableDeclaration","scope":874,"src":"1558:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":834,"name":"bytes","nodeType":"ElementaryTypeName","src":"1558:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":840,"initialValue":{"arguments":[{"id":838,"name":"arrayKeyName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"1587:12:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1581:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":836,"name":"bytes","nodeType":"ElementaryTypeName","src":"1581:5:16","typeDescriptions":{}}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1558:42:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":842,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1618:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:6:16","memberName":"length","nodeType":"MemberAccess","src":"1618:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1636:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1618:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d555354206265206c6f6e676572207468616e20322063686172616374657273","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1639:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1330e5505d03eb8c2f3c566a974e84b491f709354814e0b84c5b75865f42fea2","typeString":"literal_string \"MUST be longer than 2 characters\""},"value":"MUST be longer than 2 characters"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1330e5505d03eb8c2f3c566a974e84b491f709354814e0b84c5b75865f42fea2","typeString":"literal_string \"MUST be longer than 2 characters\""}],"id":841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1610:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1610:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":848,"nodeType":"ExpressionStatement","src":"1610:64:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":850,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1705:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":855,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":851,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1713:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:6:16","memberName":"length","nodeType":"MemberAccess","src":"1713:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1730:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1713:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1705:27:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783562","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1736:4:16","typeDescriptions":{"typeIdentifier":"t_rational_91_by_1","typeString":"int_const 91"},"value":"0x5b"},"src":"1705:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":858,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1783:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":863,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":859,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1791:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:6:16","memberName":"length","nodeType":"MemberAccess","src":"1791:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1791:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1783:27:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783564","id":864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1814:4:16","typeDescriptions":{"typeIdentifier":"t_rational_93_by_1","typeString":"int_const 93"},"value":"0x5d"},"src":"1783:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1705:113:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d697373696e6720656d7074792073717561726520627261636b65747320275b5d272061742074686520656e64206f6620746865206b6579206e616d65","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:63:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e3b6aa919fe1aff12eb32ef9916d0e70635ca417f19f845d5b01296b02b93b3","typeString":"literal_string \"Missing empty square brackets '[]' at the end of the key name\""},"value":"Missing empty square brackets '[]' at the end of the key name"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e3b6aa919fe1aff12eb32ef9916d0e70635ca417f19f845d5b01296b02b93b3","typeString":"literal_string \"Missing empty square brackets '[]' at the end of the key name\""}],"id":849,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1684:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1684:236:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"1684:236:16"},{"expression":{"arguments":[{"id":871,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"1948:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":870,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1938:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":833,"id":873,"nodeType":"Return","src":"1931:25:16"}]},"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"984:459:16","text":" @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\n ```\n keccak256(\"arrayKeyName[]\")\n ```\n @param arrayKeyName The string that will be used to generate a data key of key type Array.\n @return The generated `bytes32` data key of key type Array.\n @custom:requirements\n - The `keyName` must include at the end of the string the square brackets `\"[]\"`."},"id":875,"implemented":true,"kind":"function","modifiers":[],"name":"generateArrayKey","nameLocation":"1457:16:16","nodeType":"FunctionDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"arrayKeyName","nameLocation":"1497:12:16","nodeType":"VariableDeclaration","scope":875,"src":"1483:26:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":828,"name":"string","nodeType":"ElementaryTypeName","src":"1483:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1473:42:16"},"returnParameters":{"id":833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":875,"src":"1539:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1539:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1538:9:16"},"scope":1542,"src":"1448:515:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":905,"nodeType":"Block","src":"2592:168:16","statements":[{"assignments":[886],"declarations":[{"constant":false,"id":886,"mutability":"mutable","name":"elementInArray","nameLocation":"2615:14:16","nodeType":"VariableDeclaration","scope":905,"src":"2602:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":885,"name":"bytes","nodeType":"ElementaryTypeName","src":"2602:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":899,"initialValue":{"arguments":[{"arguments":[{"id":892,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"2666:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2658:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes16_$","typeString":"type(bytes16)"},"typeName":{"id":890,"name":"bytes16","nodeType":"ElementaryTypeName","src":"2658:7:16","typeDescriptions":{}}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2658:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},{"arguments":[{"id":896,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"2697:5:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2689:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes16_$","typeString":"type(bytes16)"},"typeName":{"id":894,"name":"bytes16","nodeType":"ElementaryTypeName","src":"2689:7:16","typeDescriptions":{}}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes16","typeString":"bytes16"},{"typeIdentifier":"t_bytes16","typeString":"bytes16"}],"expression":{"id":888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2632:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":887,"name":"bytes","nodeType":"ElementaryTypeName","src":"2632:5:16","typeDescriptions":{}}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2638:6:16","memberName":"concat","nodeType":"MemberAccess","src":"2632:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2632:81:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2602:111:16"},{"expression":{"arguments":[{"id":902,"name":"elementInArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"2738:14:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2730:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":900,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2730:7:16","typeDescriptions":{}}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":884,"id":904,"nodeType":"Return","src":"2723:30:16"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"1969:491:16","text":" @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\n with the 16 bytes of `index`. As:\n ```\n arrayKey[index]\n ```\n @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\n @param index The index number in the `arrayKey`.\n @return The generated `bytes32` data key of key type Array at a specific `index`."},"id":906,"implemented":true,"kind":"function","modifiers":[],"name":"generateArrayElementKeyAtIndex","nameLocation":"2474:30:16","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"arrayKey","nameLocation":"2522:8:16","nodeType":"VariableDeclaration","scope":906,"src":"2514:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2514:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"index","nameLocation":"2548:5:16","nodeType":"VariableDeclaration","scope":906,"src":"2540:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":879,"name":"uint128","nodeType":"ElementaryTypeName","src":"2540:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2504:55:16"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":906,"src":"2583:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2583:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2582:9:16"},"scope":1542,"src":"2465:295:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":958,"nodeType":"Block","src":"3444:325:16","statements":[{"assignments":[917],"declarations":[{"constant":false,"id":917,"mutability":"mutable","name":"firstWordHash","nameLocation":"3462:13:16","nodeType":"VariableDeclaration","scope":958,"src":"3454:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3454:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":924,"initialValue":{"arguments":[{"arguments":[{"id":921,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"3494:9:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3488:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":919,"name":"bytes","nodeType":"ElementaryTypeName","src":"3488:5:16","typeDescriptions":{}}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":918,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3478:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3478:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3454:51:16"},{"assignments":[926],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"lastWordHash","nameLocation":"3523:12:16","nodeType":"VariableDeclaration","scope":958,"src":"3515:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3515:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":933,"initialValue":{"arguments":[{"arguments":[{"id":930,"name":"lastWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"3554:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3548:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":928,"name":"bytes","nodeType":"ElementaryTypeName","src":"3548:5:16","typeDescriptions":{}}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3548:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":927,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3538:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3538:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3515:49:16"},{"assignments":[935],"declarations":[{"constant":false,"id":935,"mutability":"mutable","name":"temporaryBytes","nameLocation":"3588:14:16","nodeType":"VariableDeclaration","scope":958,"src":"3575:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":934,"name":"bytes","nodeType":"ElementaryTypeName","src":"3575:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":952,"initialValue":{"arguments":[{"arguments":[{"id":941,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"3639:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3631:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":939,"name":"bytes10","nodeType":"ElementaryTypeName","src":"3631:7:16","typeDescriptions":{}}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3674:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3667:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":943,"name":"bytes2","nodeType":"ElementaryTypeName","src":"3667:6:16","typeDescriptions":{}}},"id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3667:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":949,"name":"lastWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3698:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3690:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":947,"name":"bytes20","nodeType":"ElementaryTypeName","src":"3690:7:16","typeDescriptions":{}}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3690:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3605:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":936,"name":"bytes","nodeType":"ElementaryTypeName","src":"3605:5:16","typeDescriptions":{}}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3611:6:16","memberName":"concat","nodeType":"MemberAccess","src":"3605:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3605:116:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3575:146:16"},{"expression":{"arguments":[{"id":955,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"3747:14:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3739:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3739:7:16","typeDescriptions":{}}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":915,"id":957,"nodeType":"Return","src":"3732:30:16"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"2766:542:16","text":" @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\n ```\n bytes10(firstWordHash):0000:bytes20(lastWordHash)\n ```\n @param firstWord The word to retrieve the first 10 bytes of its hash.\n @param lastWord The word to retrieve the first 10 bytes of its hash.\n @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`."},"id":959,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"3322:18:16","nodeType":"FunctionDefinition","parameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"firstWord","nameLocation":"3364:9:16","nodeType":"VariableDeclaration","scope":959,"src":"3350:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":908,"name":"string","nodeType":"ElementaryTypeName","src":"3350:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"lastWord","nameLocation":"3397:8:16","nodeType":"VariableDeclaration","scope":959,"src":"3383:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":910,"name":"string","nodeType":"ElementaryTypeName","src":"3383:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3340:71:16"},"returnParameters":{"id":915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":959,"src":"3435:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":913,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3435:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3434:9:16"},"scope":1542,"src":"3313:456:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1002,"nodeType":"Block","src":"4458:258:16","statements":[{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"firstWordHash","nameLocation":"4476:13:16","nodeType":"VariableDeclaration","scope":1002,"src":"4468:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4468:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":977,"initialValue":{"arguments":[{"arguments":[{"id":974,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"4508:9:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4502:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":972,"name":"bytes","nodeType":"ElementaryTypeName","src":"4502:5:16","typeDescriptions":{}}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4502:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":971,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4492:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4468:51:16"},{"assignments":[979],"declarations":[{"constant":false,"id":979,"mutability":"mutable","name":"temporaryBytes","nameLocation":"4543:14:16","nodeType":"VariableDeclaration","scope":1002,"src":"4530:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":978,"name":"bytes","nodeType":"ElementaryTypeName","src":"4530:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":996,"initialValue":{"arguments":[{"arguments":[{"id":985,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"4594:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4586:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":983,"name":"bytes10","nodeType":"ElementaryTypeName","src":"4586:7:16","typeDescriptions":{}}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4586:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4629:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4622:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":987,"name":"bytes2","nodeType":"ElementaryTypeName","src":"4622:6:16","typeDescriptions":{}}},"id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4622:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":993,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"4653:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4645:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":991,"name":"bytes20","nodeType":"ElementaryTypeName","src":"4645:7:16","typeDescriptions":{}}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4645:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4560:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":980,"name":"bytes","nodeType":"ElementaryTypeName","src":"4560:5:16","typeDescriptions":{}}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4566:6:16","memberName":"concat","nodeType":"MemberAccess","src":"4560:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4560:108:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4530:138:16"},{"expression":{"arguments":[{"id":999,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4694:14:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4686:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4686:7:16","typeDescriptions":{}}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4686:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":968,"id":1001,"nodeType":"Return","src":"4679:30:16"}]},"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"3775:557:16","text":" @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\n This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\n ```\n bytes10(firstWordHash):0000:<address>\n ```\n @param firstWord The word to retrieve the first 10 bytes of its hash.\n @param addr An address to map `firstWord` to.\n @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`."},"id":1003,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"4346:18:16","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"firstWord","nameLocation":"4388:9:16","nodeType":"VariableDeclaration","scope":1003,"src":"4374:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":961,"name":"string","nodeType":"ElementaryTypeName","src":"4374:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"addr","nameLocation":"4415:4:16","nodeType":"VariableDeclaration","scope":1003,"src":"4407:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"4407:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4364:61:16"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1003,"src":"4449:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4449:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4448:9:16"},"scope":1542,"src":"4337:379:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1031,"nodeType":"Block","src":"5320:177:16","statements":[{"assignments":[1014],"declarations":[{"constant":false,"id":1014,"mutability":"mutable","name":"generatedKey","nameLocation":"5343:12:16","nodeType":"VariableDeclaration","scope":1031,"src":"5330:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1013,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1025,"initialValue":{"arguments":[{"id":1018,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"5384:9:16","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5414:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5407:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1019,"name":"bytes2","nodeType":"ElementaryTypeName","src":"5407:6:16","typeDescriptions":{}}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5407:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1023,"name":"bytes20Value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"5430:12:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5358:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1015,"name":"bytes","nodeType":"ElementaryTypeName","src":"5358:5:16","typeDescriptions":{}}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5364:6:16","memberName":"concat","nodeType":"MemberAccess","src":"5358:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5358:94:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5330:122:16"},{"expression":{"arguments":[{"id":1028,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"5477:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5469:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5469:7:16","typeDescriptions":{}}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5469:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1012,"id":1030,"nodeType":"Return","src":"5462:28:16"}]},"documentation":{"id":1004,"nodeType":"StructuredDocumentation","src":"4722:470:16","text":" @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\n ```\n keyPrefix:bytes20Value\n ```\n @param keyPrefix The first part of the data key of key type Mapping.\n @param bytes20Value The second part of the data key of key type Mapping.\n @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`."},"id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingKey","nameLocation":"5206:18:16","nodeType":"FunctionDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"keyPrefix","nameLocation":"5242:9:16","nodeType":"VariableDeclaration","scope":1032,"src":"5234:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":1005,"name":"bytes10","nodeType":"ElementaryTypeName","src":"5234:7:16","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"visibility":"internal"},{"constant":false,"id":1008,"mutability":"mutable","name":"bytes20Value","nameLocation":"5269:12:16","nodeType":"VariableDeclaration","scope":1032,"src":"5261:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1007,"name":"bytes20","nodeType":"ElementaryTypeName","src":"5261:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"5224:63:16"},"returnParameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1032,"src":"5311:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5311:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5310:9:16"},"scope":1542,"src":"5197:300:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1090,"nodeType":"Block","src":"6379:356:16","statements":[{"assignments":[1045],"declarations":[{"constant":false,"id":1045,"mutability":"mutable","name":"firstWordHash","nameLocation":"6397:13:16","nodeType":"VariableDeclaration","scope":1090,"src":"6389:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1044,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6389:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1052,"initialValue":{"arguments":[{"arguments":[{"id":1049,"name":"firstWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"6429:9:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6423:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1047,"name":"bytes","nodeType":"ElementaryTypeName","src":"6423:5:16","typeDescriptions":{}}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1046,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6413:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6413:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6389:51:16"},{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"secondWordHash","nameLocation":"6458:14:16","nodeType":"VariableDeclaration","scope":1090,"src":"6450:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1053,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6450:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1061,"initialValue":{"arguments":[{"arguments":[{"id":1058,"name":"secondWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"6491:10:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6485:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1056,"name":"bytes","nodeType":"ElementaryTypeName","src":"6485:5:16","typeDescriptions":{}}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6485:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1055,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6475:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6475:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6450:53:16"},{"assignments":[1063],"declarations":[{"constant":false,"id":1063,"mutability":"mutable","name":"temporaryBytes","nameLocation":"6527:14:16","nodeType":"VariableDeclaration","scope":1090,"src":"6514:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1062,"name":"bytes","nodeType":"ElementaryTypeName","src":"6514:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1084,"initialValue":{"arguments":[{"arguments":[{"id":1069,"name":"firstWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"6577:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6570:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes6_$","typeString":"type(bytes6)"},"typeName":{"id":1067,"name":"bytes6","nodeType":"ElementaryTypeName","src":"6570:6:16","typeDescriptions":{}}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6570:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},{"arguments":[{"id":1073,"name":"secondWordHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"6612:14:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6605:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1071,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6605:6:16","typeDescriptions":{}}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6605:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"arguments":[{"hexValue":"30","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6648:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6641:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1075,"name":"bytes2","nodeType":"ElementaryTypeName","src":"6641:6:16","typeDescriptions":{}}},"id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"arguments":[{"id":1081,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"6672:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6664:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1079,"name":"bytes20","nodeType":"ElementaryTypeName","src":"6664:7:16","typeDescriptions":{}}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6664:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes6","typeString":"bytes6"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6544:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1064,"name":"bytes","nodeType":"ElementaryTypeName","src":"6544:5:16","typeDescriptions":{}}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6550:6:16","memberName":"concat","nodeType":"MemberAccess","src":"6544:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6544:143:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6514:173:16"},{"expression":{"arguments":[{"id":1087,"name":"temporaryBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6713:14:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6705:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6705:7:16","typeDescriptions":{}}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6705:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1043,"id":1089,"nodeType":"Return","src":"6698:30:16"}]},"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"5503:704:16","text":" @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\n mapped to a `secondWord` mapped itself to a specific address `addr`. As:\n ```\n bytes6(keccak256(\"firstWord\")):bytes4(keccak256(\"secondWord\")):0000:<address>\n ```\n @param firstWord The word to retrieve the first 6 bytes of its hash.\n @param secondWord The word to retrieve the first 4 bytes of its hash.\n @param addr The address that makes the last part of the MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`."},"id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"6221:30:16","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"firstWord","nameLocation":"6275:9:16","nodeType":"VariableDeclaration","scope":1091,"src":"6261:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1034,"name":"string","nodeType":"ElementaryTypeName","src":"6261:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"secondWord","nameLocation":"6308:10:16","nodeType":"VariableDeclaration","scope":1091,"src":"6294:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1036,"name":"string","nodeType":"ElementaryTypeName","src":"6294:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"addr","nameLocation":"6336:4:16","nodeType":"VariableDeclaration","scope":1091,"src":"6328:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"6328:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6251:95:16"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1091,"src":"6370:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6370:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6369:9:16"},"scope":1542,"src":"6212:523:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1122,"nodeType":"Block","src":"7579:197:16","statements":[{"assignments":[1104],"declarations":[{"constant":false,"id":1104,"mutability":"mutable","name":"generatedKey","nameLocation":"7602:12:16","nodeType":"VariableDeclaration","scope":1122,"src":"7589:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1103,"name":"bytes","nodeType":"ElementaryTypeName","src":"7589:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1116,"initialValue":{"arguments":[{"id":1108,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"7643:9:16","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},{"id":1109,"name":"mapPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7666:9:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"arguments":[{"hexValue":"30","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7696:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7689:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1110,"name":"bytes2","nodeType":"ElementaryTypeName","src":"7689:6:16","typeDescriptions":{}}},"id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7689:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1114,"name":"subMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"7712:9:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes6","typeString":"bytes6"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7617:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"7617:5:16","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7623:6:16","memberName":"concat","nodeType":"MemberAccess","src":"7617:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7617:114:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7589:142:16"},{"expression":{"arguments":[{"id":1119,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"7756:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7748:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7748:7:16","typeDescriptions":{}}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7748:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1102,"id":1121,"nodeType":"Return","src":"7741:28:16"}]},"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"6741:676:16","text":" @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\n ```\n keyPrefix:mapPrefix:0000:subMapKey\n ```\n @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\n @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\n @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`."},"id":1123,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"7431:30:16","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"keyPrefix","nameLocation":"7478:9:16","nodeType":"VariableDeclaration","scope":1123,"src":"7471:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"},"typeName":{"id":1093,"name":"bytes6","nodeType":"ElementaryTypeName","src":"7471:6:16","typeDescriptions":{"typeIdentifier":"t_bytes6","typeString":"bytes6"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"mapPrefix","nameLocation":"7504:9:16","nodeType":"VariableDeclaration","scope":1123,"src":"7497:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1095,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7497:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1098,"mutability":"mutable","name":"subMapKey","nameLocation":"7531:9:16","nodeType":"VariableDeclaration","scope":1123,"src":"7523:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1097,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7523:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7461:85:16"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1123,"src":"7570:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7570:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7569:9:16"},"scope":1542,"src":"7422:354:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1151,"nodeType":"Block","src":"8434:177:16","statements":[{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"generatedKey","nameLocation":"8457:12:16","nodeType":"VariableDeclaration","scope":1151,"src":"8444:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1133,"name":"bytes","nodeType":"ElementaryTypeName","src":"8444:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1145,"initialValue":{"arguments":[{"id":1138,"name":"keyPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"8498:9:16","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"arguments":[{"hexValue":"30","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8528:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8521:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1139,"name":"bytes2","nodeType":"ElementaryTypeName","src":"8521:6:16","typeDescriptions":{}}},"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8521:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},{"id":1143,"name":"bytes20Value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"8544:12:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes2","typeString":"bytes2"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8472:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1135,"name":"bytes","nodeType":"ElementaryTypeName","src":"8472:5:16","typeDescriptions":{}}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8478:6:16","memberName":"concat","nodeType":"MemberAccess","src":"8472:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8472:94:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8444:122:16"},{"expression":{"arguments":[{"id":1148,"name":"generatedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"8591:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8583:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8583:7:16","typeDescriptions":{}}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8583:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1132,"id":1150,"nodeType":"Return","src":"8576:28:16"}]},"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"7782:512:16","text":" @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\n @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\n @param bytes20Value The last of the data key of keyType MappingWithGrouping.\n @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\n (containing the first and second mapped word) to a specific `bytes20Value`."},"id":1152,"implemented":true,"kind":"function","modifiers":[],"name":"generateMappingWithGroupingKey","nameLocation":"8308:30:16","nodeType":"FunctionDefinition","parameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"keyPrefix","nameLocation":"8356:9:16","nodeType":"VariableDeclaration","scope":1152,"src":"8348:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":1125,"name":"bytes10","nodeType":"ElementaryTypeName","src":"8348:7:16","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"bytes20Value","nameLocation":"8383:12:16","nodeType":"VariableDeclaration","scope":1152,"src":"8375:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1127,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8375:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8338:63:16"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1152,"src":"8425:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8424:9:16"},"scope":1542,"src":"8299:312:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1192,"nodeType":"Block","src":"9017:208:16","statements":[{"assignments":[1165],"declarations":[{"constant":false,"id":1165,"mutability":"mutable","name":"hashFunctionDigest","nameLocation":"9035:18:16","nodeType":"VariableDeclaration","scope":1192,"src":"9027:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9027:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1172,"initialValue":{"arguments":[{"arguments":[{"id":1169,"name":"hashFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"9072:12:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9066:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1167,"name":"bytes","nodeType":"ElementaryTypeName","src":"9066:5:16","typeDescriptions":{}}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9066:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1166,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9056:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9056:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9027:59:16"},{"assignments":[1174],"declarations":[{"constant":false,"id":1174,"mutability":"mutable","name":"jsonDigest","nameLocation":"9104:10:16","nodeType":"VariableDeclaration","scope":1192,"src":"9096:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9096:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1181,"initialValue":{"arguments":[{"arguments":[{"id":1178,"name":"json","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"9133:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9127:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1176,"name":"bytes","nodeType":"ElementaryTypeName","src":"9127:5:16","typeDescriptions":{}}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9127:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1175,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9117:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9117:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9096:43:16"},{"expression":{"arguments":[{"arguments":[{"id":1186,"name":"hashFunctionDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"9181:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9174:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1184,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9174:6:16","typeDescriptions":{}}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9174:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1188,"name":"jsonDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9202:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1189,"name":"url","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"9214:3:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1182,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9157:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9161:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"9157:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:61:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1163,"id":1191,"nodeType":"Return","src":"9150:68:16"}]},"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"8617:231:16","text":" @dev Generate a JSONURL value content.\n @param hashFunction The function used to hash the JSON file.\n @param json Bytes value of the JSON file.\n @param url The URL where the JSON file is hosted."},"id":1193,"implemented":true,"kind":"function","modifiers":[],"name":"generateJSONURLValue","nameLocation":"8862:20:16","nodeType":"FunctionDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"hashFunction","nameLocation":"8906:12:16","nodeType":"VariableDeclaration","scope":1193,"src":"8892:26:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1154,"name":"string","nodeType":"ElementaryTypeName","src":"8892:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"json","nameLocation":"8942:4:16","nodeType":"VariableDeclaration","scope":1193,"src":"8928:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1156,"name":"string","nodeType":"ElementaryTypeName","src":"8928:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"url","nameLocation":"8970:3:16","nodeType":"VariableDeclaration","scope":1193,"src":"8956:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1158,"name":"string","nodeType":"ElementaryTypeName","src":"8956:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8882:97:16"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"9003:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1161,"name":"bytes","nodeType":"ElementaryTypeName","src":"9003:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9002:14:16"},"scope":1542,"src":"8853:372:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1233,"nodeType":"Block","src":"9710:214:16","statements":[{"assignments":[1206],"declarations":[{"constant":false,"id":1206,"mutability":"mutable","name":"hashFunctionDigest","nameLocation":"9728:18:16","nodeType":"VariableDeclaration","scope":1233,"src":"9720:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9720:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1213,"initialValue":{"arguments":[{"arguments":[{"id":1210,"name":"hashFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"9765:12:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9759:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1208,"name":"bytes","nodeType":"ElementaryTypeName","src":"9759:5:16","typeDescriptions":{}}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9759:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1207,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9749:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9749:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9720:59:16"},{"assignments":[1215],"declarations":[{"constant":false,"id":1215,"mutability":"mutable","name":"jsonDigest","nameLocation":"9797:10:16","nodeType":"VariableDeclaration","scope":1233,"src":"9789:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9789:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1222,"initialValue":{"arguments":[{"arguments":[{"id":1219,"name":"assetBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"9826:10:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9820:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1217,"name":"bytes","nodeType":"ElementaryTypeName","src":"9820:5:16","typeDescriptions":{}}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9820:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1216,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9810:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9810:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9789:49:16"},{"expression":{"arguments":[{"arguments":[{"id":1227,"name":"hashFunctionDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"9880:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9873:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1225,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9873:6:16","typeDescriptions":{}}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9873:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1229,"name":"jsonDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"9901:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1230,"name":"url","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"9913:3:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1223,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9856:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9860:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"9856:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:61:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1204,"id":1232,"nodeType":"Return","src":"9849:68:16"}]},"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"9231:303:16","text":" @dev Generate a ASSETURL value content.\n @param hashFunction The function used to hash the JSON file.\n @param assetBytes Bytes value of the JSON file.\n @param url The URL where the JSON file is hosted.\n @return The encoded value as an `ASSETURL`."},"id":1234,"implemented":true,"kind":"function","modifiers":[],"name":"generateASSETURLValue","nameLocation":"9548:21:16","nodeType":"FunctionDefinition","parameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"hashFunction","nameLocation":"9593:12:16","nodeType":"VariableDeclaration","scope":1234,"src":"9579:26:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1195,"name":"string","nodeType":"ElementaryTypeName","src":"9579:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"assetBytes","nameLocation":"9629:10:16","nodeType":"VariableDeclaration","scope":1234,"src":"9615:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1197,"name":"string","nodeType":"ElementaryTypeName","src":"9615:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"url","nameLocation":"9663:3:16","nodeType":"VariableDeclaration","scope":1234,"src":"9649:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1199,"name":"string","nodeType":"ElementaryTypeName","src":"9649:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9569:103:16"},"returnParameters":{"id":1204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1234,"src":"9696:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1202,"name":"bytes","nodeType":"ElementaryTypeName","src":"9696:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9695:14:16"},"scope":1542,"src":"9539:385:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1297,"nodeType":"Block","src":"10373:1273:16","statements":[{"assignments":[1244],"declarations":[{"constant":false,"id":1244,"mutability":"mutable","name":"pointer","nameLocation":"10870:7:16","nodeType":"VariableDeclaration","scope":1297,"src":"10862:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"10862:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"documentation":" Pointer will always land on these values:\n ↓↓↓↓\n 0003 a00000\n 0005 fff83a0011\n 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\n 0012 bb000000000000000000000000000000beef\n 0019 cc00000000000000000000000000000000000000000000deed\n ↑↑↑↑\n The pointer can only land on the length of the following bytes value.","id":1246,"initialValue":{"hexValue":"30","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10880:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10862:19:16"},{"body":{"id":1286,"nodeType":"Block","src":"11164:392:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11182:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11192:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11182:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1254,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"11197:17:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11215:6:16","memberName":"length","nodeType":"MemberAccess","src":"11197:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11182:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1259,"nodeType":"IfStatement","src":"11178:57:16","trueBody":{"expression":{"hexValue":"66616c7365","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11230:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1241,"id":1258,"nodeType":"Return","src":"11223:12:16"}},{"assignments":[1261],"declarations":[{"constant":false,"id":1261,"mutability":"mutable","name":"elementLength","nameLocation":"11257:13:16","nodeType":"VariableDeclaration","scope":1286,"src":"11249:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"11249:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1279,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"baseExpression":{"id":1268,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"11367:17:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1270,"indexExpression":{"id":1269,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11385:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11367:26:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"baseExpression":{"id":1271,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"11419:17:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1275,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11437:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11419:30:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"expression":{"id":1266,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11325:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11329:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"11325:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11325:146:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11297:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1264,"name":"bytes2","nodeType":"ElementaryTypeName","src":"11297:6:16","typeDescriptions":{}}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11297:192:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes2","typeString":"bytes2"}],"id":1263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11273:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":1262,"name":"uint16","nodeType":"ElementaryTypeName","src":"11273:6:16","typeDescriptions":{}}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11273:230:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"11249:254:16"},{"expression":{"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1280,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11517:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1281,"name":"elementLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"11528:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11544:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11528:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11517:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1285,"nodeType":"ExpressionStatement","src":"11517:28:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11128:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1248,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"11138:17:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11156:6:16","memberName":"length","nodeType":"MemberAccess","src":"11138:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11128:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Check each length byte and make sure that when you reach the last length byte.\n Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.","id":1287,"nodeType":"WhileStatement","src":"11121:435:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1288,"name":"pointer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"11569:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1289,"name":"compactBytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"11580:17:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11598:6:16","memberName":"length","nodeType":"MemberAccess","src":"11580:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11569:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1294,"nodeType":"IfStatement","src":"11565:52:16","trueBody":{"expression":{"hexValue":"74727565","id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11613:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1241,"id":1293,"nodeType":"Return","src":"11606:11:16"}},{"expression":{"hexValue":"66616c7365","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11634:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1241,"id":1296,"nodeType":"Return","src":"11627:12:16"}]},"documentation":{"id":1235,"nodeType":"StructuredDocumentation","src":"9930:334:16","text":" @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\n @param compactBytesArray The bytes value to verify.\n @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise."},"id":1298,"implemented":true,"kind":"function","modifiers":[],"name":"isCompactBytesArray","nameLocation":"10278:19:16","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"compactBytesArray","nameLocation":"10320:17:16","nodeType":"VariableDeclaration","scope":1298,"src":"10307:30:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1236,"name":"bytes","nodeType":"ElementaryTypeName","src":"10307:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10297:46:16"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1298,"src":"10367:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1239,"name":"bool","nodeType":"ElementaryTypeName","src":"10367:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10366:6:16"},"scope":1542,"src":"10269:1377:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1316,"nodeType":"Block","src":"12056:104:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1306,"name":"arrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"12070:11:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12082:6:16","memberName":"length","nodeType":"MemberAccess","src":"12070:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3136","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12092:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12070:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1313,"nodeType":"IfStatement","src":"12066:66:16","trueBody":{"id":1312,"nodeType":"Block","src":"12096:36:16","statements":[{"expression":{"hexValue":"74727565","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12117:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1305,"id":1311,"nodeType":"Return","src":"12110:11:16"}]}},{"expression":{"hexValue":"66616c7365","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12148:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1305,"id":1315,"nodeType":"Return","src":"12141:12:16"}]},"documentation":{"id":1299,"nodeType":"StructuredDocumentation","src":"11652:293:16","text":" @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\n @param arrayLength Plain bytes that should be validated.\n @return `true` if the value is 16 bytes long, `false` otherwise."},"id":1317,"implemented":true,"kind":"function","modifiers":[],"name":"isValidLSP2ArrayLengthValue","nameLocation":"11959:27:16","nodeType":"FunctionDefinition","parameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1301,"mutability":"mutable","name":"arrayLength","nameLocation":"12009:11:16","nodeType":"VariableDeclaration","scope":1317,"src":"11996:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1300,"name":"bytes","nodeType":"ElementaryTypeName","src":"11996:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11986:40:16"},"returnParameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"12050:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1303,"name":"bool","nodeType":"ElementaryTypeName","src":"12050:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12049:6:16"},"scope":1542,"src":"11950:210:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1390,"nodeType":"Block","src":"12894:512:16","statements":[{"expression":{"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1335,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12904:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"33","id":1339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12929:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12915:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12919:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1337,"nodeType":"ArrayTypeName","src":"12919:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12915:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"12904:27:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1342,"nodeType":"ExpressionStatement","src":"12904:27:16"},{"expression":{"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1343,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"12941:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"33","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12966:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"id":1346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12954:11:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1344,"name":"bytes","nodeType":"ElementaryTypeName","src":"12958:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1345,"nodeType":"ArrayTypeName","src":"12958:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12954:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"12941:27:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1350,"nodeType":"ExpressionStatement","src":"12941:27:16"},{"expression":{"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1351,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"13043:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1353,"indexExpression":{"hexValue":"30","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13052:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13043:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1354,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"13057:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13043:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1356,"nodeType":"ExpressionStatement","src":"13043:22:16"},{"expression":{"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1357,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"13075:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1359,"indexExpression":{"hexValue":"30","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13086:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13075:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1362,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"13108:14:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1360,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13091:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13095:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"13091:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13091:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"13075:48:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1365,"nodeType":"ExpressionStatement","src":"13075:48:16"},{"expression":{"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1366,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"13198:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1368,"indexExpression":{"hexValue":"31","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13207:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13198:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1369,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"13212:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13198:34:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1371,"nodeType":"ExpressionStatement","src":"13198:34:16"},{"expression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1372,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"13242:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1374,"indexExpression":{"hexValue":"31","id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13253:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13242:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13258:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"13242:18:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1377,"nodeType":"ExpressionStatement","src":"13242:18:16"},{"expression":{"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1378,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"13335:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1380,"indexExpression":{"hexValue":"32","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13344:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13335:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1381,"name":"removedElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"13349:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13335:36:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1383,"nodeType":"ExpressionStatement","src":"13335:36:16"},{"expression":{"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1384,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"13381:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1386,"indexExpression":{"hexValue":"32","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13392:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13381:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13397:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"13381:18:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1389,"nodeType":"ExpressionStatement","src":"13381:18:16"}]},"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"12166:434:16","text":" @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\n @param arrayKey The Data Key of Key Type Array.\n @param newArrayLength The new Array Length for the `arrayKey`.\n @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n @param removedElementMapKey The Data Key of a mapping to be removed."},"id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"removeLastElementFromArrayAndMap","nameLocation":"12614:32:16","nodeType":"FunctionDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"arrayKey","nameLocation":"12664:8:16","nodeType":"VariableDeclaration","scope":1391,"src":"12656:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12656:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"newArrayLength","nameLocation":"12690:14:16","nodeType":"VariableDeclaration","scope":1391,"src":"12682:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1321,"name":"uint128","nodeType":"ElementaryTypeName","src":"12682:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"removedElementIndexKey","nameLocation":"12722:22:16","nodeType":"VariableDeclaration","scope":1391,"src":"12714:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12714:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"removedElementMapKey","nameLocation":"12762:20:16","nodeType":"VariableDeclaration","scope":1391,"src":"12754:28:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12754:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12646:142:16"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"dataKeys","nameLocation":"12853:8:16","nodeType":"VariableDeclaration","scope":1391,"src":"12836:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12836:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1329,"nodeType":"ArrayTypeName","src":"12836:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"dataValues","nameLocation":"12878:10:16","nodeType":"VariableDeclaration","scope":1391,"src":"12863:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1331,"name":"bytes","nodeType":"ElementaryTypeName","src":"12863:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1332,"nodeType":"ArrayTypeName","src":"12863:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"12835:54:16"},"scope":1542,"src":"12605:801:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1540,"nodeType":"Block","src":"14506:1736:16","statements":[{"expression":{"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1414,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"14516:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"35","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14541:1:16","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"}],"id":1417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14527:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14531:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1416,"nodeType":"ArrayTypeName","src":"14531:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14527:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"14516:27:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1421,"nodeType":"ExpressionStatement","src":"14516:27:16"},{"expression":{"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1422,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"14553:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"35","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14578:1:16","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"}],"id":1425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14566:11:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1423,"name":"bytes","nodeType":"ElementaryTypeName","src":"14570:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1424,"nodeType":"ArrayTypeName","src":"14570:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14566:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"14553:27:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1429,"nodeType":"ExpressionStatement","src":"14553:27:16"},{"expression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1430,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"14655:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1432,"indexExpression":{"hexValue":"30","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14664:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14655:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1433,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"14669:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"14655:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1435,"nodeType":"ExpressionStatement","src":"14655:22:16"},{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1436,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"14687:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1438,"indexExpression":{"hexValue":"30","id":1437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14698:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14687:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1441,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"14720:14:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1439,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"14703:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14707:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"14703:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14703:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"14687:48:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1444,"nodeType":"ExpressionStatement","src":"14687:48:16"},{"expression":{"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1445,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"14810:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1447,"indexExpression":{"hexValue":"31","id":1446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14819:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14810:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1448,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"14824:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"14810:34:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1450,"nodeType":"ExpressionStatement","src":"14810:34:16"},{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1451,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"14854:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1453,"indexExpression":{"hexValue":"31","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14865:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14854:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14870:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"14854:18:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1456,"nodeType":"ExpressionStatement","src":"14854:18:16"},{"assignments":[1458],"declarations":[{"constant":false,"id":1458,"mutability":"mutable","name":"lastElementIndexKey","nameLocation":"14952:19:16","nodeType":"VariableDeclaration","scope":1540,"src":"14944:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14944:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1464,"initialValue":{"arguments":[{"id":1461,"name":"arrayKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"15028:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1462,"name":"newArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"15050:14:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1459,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"14974:9:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1542_$","typeString":"type(library LSP2Utils)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14984:30:16","memberName":"generateArrayElementKeyAtIndex","nodeType":"MemberAccess","referencedDeclaration":906,"src":"14974:40:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint128_$returns$_t_bytes32_$","typeString":"function (bytes32,uint128) pure returns (bytes32)"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14974:100:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14944:130:16"},{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"lastElementIndexValue","nameLocation":"15169:21:16","nodeType":"VariableDeclaration","scope":1540,"src":"15161:29:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1465,"name":"bytes20","nodeType":"ElementaryTypeName","src":"15161:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"id":1474,"initialValue":{"arguments":[{"arguments":[{"id":1471,"name":"lastElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"15238:19:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1469,"name":"erc725YContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"15214:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15230:7:16","memberName":"getData","nodeType":"MemberAccess","referencedDeclaration":476,"src":"15214:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view external returns (bytes memory)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15214:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15193:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1467,"name":"bytes20","nodeType":"ElementaryTypeName","src":"15193:7:16","typeDescriptions":{}}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15193:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"VariableDeclarationStatement","src":"15161:107:16"},{"expression":{"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1475,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"15384:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1477,"indexExpression":{"hexValue":"32","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15393:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15384:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1478,"name":"removedElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"15398:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15384:36:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1480,"nodeType":"ExpressionStatement","src":"15384:36:16"},{"expression":{"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1481,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"15430:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1483,"indexExpression":{"hexValue":"32","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15441:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15430:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1487,"name":"lastElementIndexValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"15459:21:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15446:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1484,"name":"bytes","nodeType":"ElementaryTypeName","src":"15446:5:16","typeDescriptions":{}}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15452:6:16","memberName":"concat","nodeType":"MemberAccess","src":"15446:12:16","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15446:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"15430:51:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1490,"nodeType":"ExpressionStatement","src":"15430:51:16"},{"expression":{"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1491,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"15555:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1493,"indexExpression":{"hexValue":"33","id":1492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15564:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15555:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1494,"name":"lastElementIndexKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"15569:19:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15555:33:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1496,"nodeType":"ExpressionStatement","src":"15555:33:16"},{"expression":{"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1497,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"15598:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1499,"indexExpression":{"hexValue":"33","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15598:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15614:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"15598:18:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1502,"nodeType":"ExpressionStatement","src":"15598:18:16"},{"assignments":[1504],"declarations":[{"constant":false,"id":1504,"mutability":"mutable","name":"lastElementMapKey","nameLocation":"15697:17:16","nodeType":"VariableDeclaration","scope":1540,"src":"15689:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15689:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1513,"initialValue":{"arguments":[{"arguments":[{"id":1509,"name":"removedElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"15767:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15759:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes10_$","typeString":"type(bytes10)"},"typeName":{"id":1507,"name":"bytes10","nodeType":"ElementaryTypeName","src":"15759:7:16","typeDescriptions":{}}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15759:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"id":1511,"name":"lastElementIndexValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"15802:21:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":1505,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"15717:9:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1542_$","typeString":"type(library LSP2Utils)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15727:18:16","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1032,"src":"15717:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15717:116:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15689:144:16"},{"assignments":[1515],"declarations":[{"constant":false,"id":1515,"mutability":"mutable","name":"lastElementMapValue","nameLocation":"15925:19:16","nodeType":"VariableDeclaration","scope":1540,"src":"15912:32:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1514,"name":"bytes","nodeType":"ElementaryTypeName","src":"15912:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1527,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1522,"name":"lastElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"16008:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1520,"name":"erc725YContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"15984:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16000:7:16","memberName":"getData","nodeType":"MemberAccess","referencedDeclaration":476,"src":"15984:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view external returns (bytes memory)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15977:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1518,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15977:6:16","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15977:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1525,"name":"removedElementIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"16041:19:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1516,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15947:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15951:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"15947:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15947:123:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"15912:158:16"},{"expression":{"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1528,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"16159:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1530,"indexExpression":{"hexValue":"34","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16168:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16159:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1531,"name":"lastElementMapKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"16173:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16159:31:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1533,"nodeType":"ExpressionStatement","src":"16159:31:16"},{"expression":{"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1534,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"16200:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1536,"indexExpression":{"hexValue":"34","id":1535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16211:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16200:13:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1537,"name":"lastElementMapValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"16216:19:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"16200:35:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1539,"nodeType":"ExpressionStatement","src":"16200:35:16"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"13412:733:16","text":" @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\n @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\n @param erc725YContract The ERC725Y contract.\n @param arrayKey The Data Key of Key Type Array.\n @param newArrayLength The new Array Length for the `arrayKey`.\n @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\n @param removedElementIndex the index of the removed element.\n @param removedElementMapKey The Data Key of a mapping to be removed."},"id":1541,"implemented":true,"kind":"function","modifiers":[],"name":"removeElementFromArrayAndMap","nameLocation":"14159:28:16","nodeType":"FunctionDefinition","parameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"mutability":"mutable","name":"erc725YContract","nameLocation":"14206:15:16","nodeType":"VariableDeclaration","scope":1541,"src":"14197:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"},"typeName":{"id":1394,"nodeType":"UserDefinedTypeName","pathNode":{"id":1393,"name":"IERC725Y","nameLocations":["14197:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"14197:8:16"},"referencedDeclaration":505,"src":"14197:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC725Y_$505","typeString":"contract IERC725Y"}},"visibility":"internal"},{"constant":false,"id":1397,"mutability":"mutable","name":"arrayKey","nameLocation":"14239:8:16","nodeType":"VariableDeclaration","scope":1541,"src":"14231:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14231:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1399,"mutability":"mutable","name":"newArrayLength","nameLocation":"14265:14:16","nodeType":"VariableDeclaration","scope":1541,"src":"14257:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1398,"name":"uint128","nodeType":"ElementaryTypeName","src":"14257:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"removedElementIndexKey","nameLocation":"14297:22:16","nodeType":"VariableDeclaration","scope":1541,"src":"14289:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14289:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"removedElementIndex","nameLocation":"14337:19:16","nodeType":"VariableDeclaration","scope":1541,"src":"14329:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1402,"name":"uint128","nodeType":"ElementaryTypeName","src":"14329:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"removedElementMapKey","nameLocation":"14374:20:16","nodeType":"VariableDeclaration","scope":1541,"src":"14366:28:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14366:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14187:213:16"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"dataKeys","nameLocation":"14465:8:16","nodeType":"VariableDeclaration","scope":1541,"src":"14448:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14448:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1408,"nodeType":"ArrayTypeName","src":"14448:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"dataValues","nameLocation":"14490:10:16","nodeType":"VariableDeclaration","scope":1541,"src":"14475:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1410,"name":"bytes","nodeType":"ElementaryTypeName","src":"14475:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1411,"nodeType":"ArrayTypeName","src":"14475:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14447:54:16"},"scope":1542,"src":"14150:2092:16","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1543,"src":"482:15762:16","usedErrors":[],"usedEvents":[]}],"src":"39:16206:16"},"id":16},"@lukso/lsp4-contracts/contracts/LSP4Constants.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","exportedSymbols":{"_LSP4_CREATORS_ARRAY_KEY":[1571],"_LSP4_CREATORS_MAP_KEY_PREFIX":[1574],"_LSP4_METADATA_KEY":[1577],"_LSP4_SUPPORTED_STANDARDS_KEY":[1556],"_LSP4_SUPPORTED_STANDARDS_VALUE":[1559],"_LSP4_TOKEN_NAME_KEY":[1562],"_LSP4_TOKEN_SYMBOL_KEY":[1565],"_LSP4_TOKEN_TYPE_COLLECTION":[1553],"_LSP4_TOKEN_TYPE_KEY":[1568],"_LSP4_TOKEN_TYPE_NFT":[1550],"_LSP4_TOKEN_TYPE_TOKEN":[1547]},"id":1578,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1544,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:17"},{"constant":true,"id":1547,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_TOKEN","nameLocation":"96:22:17","nodeType":"VariableDeclaration","scope":1578,"src":"79:43:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"79:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"121:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":1550,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_NFT","nameLocation":"141:20:17","nodeType":"VariableDeclaration","scope":1578,"src":"124:41:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1548,"name":"uint256","nodeType":"ElementaryTypeName","src":"124:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"164:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":1553,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_COLLECTION","nameLocation":"184:27:17","nodeType":"VariableDeclaration","scope":1578,"src":"167:48:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"167:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"214:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":1556,"mutability":"constant","name":"_LSP4_SUPPORTED_STANDARDS_KEY","nameLocation":"356:29:17","nodeType":"VariableDeclaration","scope":1578,"src":"339:115:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1554,"name":"bytes32","nodeType":"ElementaryTypeName","src":"339:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865616665633464383966613936313938383462363030303061346439363632346133386637616332643864396136303465636630376331326337376534383063","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"388:66:17","typeDescriptions":{"typeIdentifier":"t_rational_106291344305384829327323777171026204092068863755428044681309751323096797562892_by_1","typeString":"int_const 1062...(70 digits omitted)...2892"},"value":"0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c"},"visibility":"internal"},{"constant":true,"id":1559,"mutability":"constant","name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nameLocation":"513:31:17","nodeType":"VariableDeclaration","scope":1578,"src":"498:62:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1557,"name":"bytes","nodeType":"ElementaryTypeName","src":"498:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"a4d96624","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"547:13:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8031d7c868dca389fb4e96c3f4df5650d21c8966ab67d753610d01e72b8a0278","typeString":"literal_string hex\"a4d96624\""}},"visibility":"internal"},{"constant":true,"id":1562,"mutability":"constant","name":"_LSP4_TOKEN_NAME_KEY","nameLocation":"610:20:17","nodeType":"VariableDeclaration","scope":1578,"src":"593:106:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864656261316532393266386261383832333865313061623363376638386264346265346661633536636164353139346236656363656166363533343638616631","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:66:17","typeDescriptions":{"typeIdentifier":"t_rational_100742294102289264549068743044138917200237013684961480918773254279156963117809_by_1","typeString":"int_const 1007...(70 digits omitted)...7809"},"value":"0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1"},"visibility":"internal"},{"constant":true,"id":1565,"mutability":"constant","name":"_LSP4_TOKEN_SYMBOL_KEY","nameLocation":"751:22:17","nodeType":"VariableDeclaration","scope":1578,"src":"734:108:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"734:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307832663061363861623037373638653031393433613539396537333336326130653137613633613732653934646432653338346432633164346462393332373536","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"776:66:17","typeDescriptions":{"typeIdentifier":"t_rational_21277094746618207019470167271284656117398221945515764204453433194201650243414_by_1","typeString":"int_const 2127...(69 digits omitted)...3414"},"value":"0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756"},"visibility":"internal"},{"constant":true,"id":1568,"mutability":"constant","name":"_LSP4_TOKEN_TYPE_KEY","nameLocation":"892:20:17","nodeType":"VariableDeclaration","scope":1578,"src":"875:106:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"875:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865303236316661393564623265623362353433396264303333636461363664353662393666393266323433613832323866643837353530656437626466646233","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"915:66:17","typeDescriptions":{"typeIdentifier":"t_rational_101385436791348632936915532486413845551797772917774025249609027894947960716723_by_1","typeString":"int_const 1013...(70 digits omitted)...6723"},"value":"0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3"},"visibility":"internal"},{"constant":true,"id":1571,"mutability":"constant","name":"_LSP4_CREATORS_ARRAY_KEY","nameLocation":"1032:24:17","nodeType":"VariableDeclaration","scope":1578,"src":"1015:110:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1015:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307831313462643033623361343664343837353936383064383165626232623431346664613764303330613731303561383531383637616363663163323335326537","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1059:66:17","typeDescriptions":{"typeIdentifier":"t_rational_7823269115788143993216587392684831921119603420524855766908370213719800763111_by_1","typeString":"int_const 7823...(68 digits omitted)...3111"},"value":"0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7"},"visibility":"internal"},{"constant":true,"id":1574,"mutability":"constant","name":"_LSP4_CREATORS_MAP_KEY_PREFIX","nameLocation":"1186:29:17","nodeType":"VariableDeclaration","scope":1578,"src":"1169:71:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"},"typeName":{"id":1572,"name":"bytes10","nodeType":"ElementaryTypeName","src":"1169:7:17","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},"value":{"hexValue":"30783664653835656166356439383262346535646130","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1218:22:17","typeDescriptions":{"typeIdentifier":"t_rational_519024414032760576826784_by_1","typeString":"int_const 519024414032760576826784"},"value":"0x6de85eaf5d982b4e5da0"},"visibility":"internal"},{"constant":true,"id":1577,"mutability":"constant","name":"_LSP4_METADATA_KEY","nameLocation":"1289:18:17","nodeType":"VariableDeclaration","scope":1578,"src":"1272:104:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1272:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839616662393563616363396639353835386563343461613863336236383535313130303265333061653534343135383233663430363132386238356232333865","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1310:66:17","typeDescriptions":{"typeIdentifier":"t_rational_70100691122746653413313834938425876827577001362390431744658469452576166978446_by_1","typeString":"int_const 7010...(69 digits omitted)...8446"},"value":"0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e"},"visibility":"internal"}],"src":"39:1339:17"},"id":17},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","exportedSymbols":{"ERC725Y":[35],"ERC725YCore":[270],"LSP4DigitalAssetMetadata":[1669],"LSP4DigitalAssetMetadataCore":[1731],"_LSP4_SUPPORTED_STANDARDS_KEY":[1556],"_LSP4_SUPPORTED_STANDARDS_VALUE":[1559],"_LSP4_TOKEN_NAME_KEY":[1562],"_LSP4_TOKEN_SYMBOL_KEY":[1565],"_LSP4_TOKEN_TYPE_KEY":[1568]},"id":1670,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1579,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:18"},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725Y.sol","file":"@erc725/smart-contracts/contracts/ERC725Y.sol","id":1581,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1670,"sourceUnit":36,"src":"75:70:18","symbolAliases":[{"foreign":{"id":1580,"name":"ERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"83:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":1583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1670,"sourceUnit":271,"src":"146:78:18","symbolAliases":[{"foreign":{"id":1582,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"154:11:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","file":"./LSP4DigitalAssetMetadataCore.sol","id":1585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1670,"sourceUnit":1732,"src":"225:80:18","symbolAliases":[{"foreign":{"id":1584,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"233:28:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"./LSP4Constants.sol","id":1591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1670,"sourceUnit":1578,"src":"320:189:18","symbolAliases":[{"foreign":{"id":1586,"name":"_LSP4_SUPPORTED_STANDARDS_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"333:29:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1587,"name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"368:31:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1588,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"405:20:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1589,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"431:22:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1590,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"459:20:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1593,"name":"ERC725Y","nameLocations":["816:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"816:7:18"},"id":1594,"nodeType":"InheritanceSpecifier","src":"816:7:18"},{"baseName":{"id":1595,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["829:28:18"],"nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"829:28:18"},"id":1596,"nodeType":"InheritanceSpecifier","src":"829:28:18"}],"canonicalName":"LSP4DigitalAssetMetadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1592,"nodeType":"StructuredDocumentation","src":"511:254:18","text":" @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n @author Matthew Stevens\n @dev Standard Implementation of the LSP4 standard."},"fullyImplemented":true,"id":1669,"linearizedBaseContracts":[1669,1731,35,270,505,3761,3968,402],"name":"LSP4DigitalAssetMetadata","nameLocation":"784:24:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1648,"nodeType":"Block","src":"1408:412:18","statements":[{"expression":{"arguments":[{"id":1614,"name":"_LSP4_SUPPORTED_STANDARDS_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1512:29:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1615,"name":"_LSP4_SUPPORTED_STANDARDS_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"1555:31:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1611,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1478:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1490:8:18","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1478:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1478:118:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"1478:118:18"},{"expression":{"arguments":[{"id":1621,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1628:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1624,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"1656:5:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1650:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1622,"name":"bytes","nodeType":"ElementaryTypeName","src":"1650:5:18","typeDescriptions":{}}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1650:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1618,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1607:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1619:8:18","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1607:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1607:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1627,"nodeType":"ExpressionStatement","src":"1607:56:18"},{"expression":{"arguments":[{"id":1631,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1694:22:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1634,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"1724:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1718:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1632,"name":"bytes","nodeType":"ElementaryTypeName","src":"1718:5:18","typeDescriptions":{}}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1628,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1673:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1685:8:18","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1673:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1637,"nodeType":"ExpressionStatement","src":"1673:60:18"},{"expression":{"arguments":[{"id":1641,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1764:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1644,"name":"lsp4TokenType_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"1797:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1642,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1786:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1790:6:18","memberName":"encode","nodeType":"MemberAccess","src":"1786:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1638,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1743:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1755:8:18","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1743:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1743:70:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1647,"nodeType":"ExpressionStatement","src":"1743:70:18"}]},"documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"864:375:18","text":" @notice Deploying a digital asset `name_` with the `symbol_` symbol.\n @param name_ The name of the token.\n @param symbol_ The symbol of the token.\n @param initialOwner_ The owner of the token contract.\n @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection)."},"id":1649,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1608,"name":"initialOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"1393:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1609,"kind":"baseConstructorSpecifier","modifierName":{"id":1607,"name":"ERC725Y","nameLocations":["1385:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"1385:7:18"},"nodeType":"ModifierInvocation","src":"1385:22:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"name_","nameLocation":"1279:5:18","nodeType":"VariableDeclaration","scope":1649,"src":"1265:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1598,"name":"string","nodeType":"ElementaryTypeName","src":"1265:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1601,"mutability":"mutable","name":"symbol_","nameLocation":"1308:7:18","nodeType":"VariableDeclaration","scope":1649,"src":"1294:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1600,"name":"string","nodeType":"ElementaryTypeName","src":"1294:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"initialOwner_","nameLocation":"1333:13:18","nodeType":"VariableDeclaration","scope":1649,"src":"1325:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1602,"name":"address","nodeType":"ElementaryTypeName","src":"1325:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"lsp4TokenType_","nameLocation":"1364:14:18","nodeType":"VariableDeclaration","scope":1649,"src":"1356:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1356:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1255:129:18"},"returnParameters":{"id":1610,"nodeType":"ParameterList","parameters":[],"src":"1408:0:18"},"scope":1669,"src":"1244:576:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[248,1730],"body":{"id":1667,"nodeType":"Block","src":"2158:74:18","statements":[{"expression":{"arguments":[{"id":1663,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"2206:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1664,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"2215:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1660,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"2168:28:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP4DigitalAssetMetadataCore_$1731_$","typeString":"type(contract LSP4DigitalAssetMetadataCore)"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2197:8:18","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"2168:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:57:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1666,"nodeType":"ExpressionStatement","src":"2168:57:18"}]},"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"1826:177:18","text":" @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n via this function once the digital asset contract has been deployed."},"id":1668,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"2017:8:18","nodeType":"FunctionDefinition","overrides":{"id":1658,"nodeType":"OverrideSpecifier","overrides":[{"id":1656,"name":"ERC725YCore","nameLocations":["2115:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"2115:11:18"},{"id":1657,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["2128:28:18"],"nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"2128:28:18"}],"src":"2106:51:18"},"parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"dataKey","nameLocation":"2043:7:18","nodeType":"VariableDeclaration","scope":1668,"src":"2035:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2035:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"dataValue","nameLocation":"2073:9:18","nodeType":"VariableDeclaration","scope":1668,"src":"2060:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1653,"name":"bytes","nodeType":"ElementaryTypeName","src":"2060:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2025:63:18"},"returnParameters":{"id":1659,"nodeType":"ParameterList","parameters":[],"src":"2158:0:18"},"scope":1669,"src":"2008:224:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1670,"src":"766:1468:18","usedErrors":[407,412,448,451,454,1736,1739,1742],"usedEvents":[307,468]}],"src":"39:2196:18"},"id":18},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","exportedSymbols":{"ERC725YCore":[270],"LSP4DigitalAssetMetadataCore":[1731],"LSP4TokenNameNotEditable":[1736],"LSP4TokenSymbolNotEditable":[1739],"LSP4TokenTypeNotEditable":[1742],"_LSP4_TOKEN_NAME_KEY":[1562],"_LSP4_TOKEN_SYMBOL_KEY":[1565],"_LSP4_TOKEN_TYPE_KEY":[1568]},"id":1732,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1671,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:19"},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":1673,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1732,"sourceUnit":271,"src":"75:78:19","symbolAliases":[{"foreign":{"id":1672,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"83:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Constants.sol","file":"./LSP4Constants.sol","id":1677,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1732,"sourceUnit":1578,"src":"168:117:19","symbolAliases":[{"foreign":{"id":1674,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"181:20:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1675,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"207:22:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1676,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"235:20:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Errors.sol","file":"./LSP4Errors.sol","id":1681,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1732,"sourceUnit":1743,"src":"297:126:19","symbolAliases":[{"foreign":{"id":1678,"name":"LSP4TokenNameNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"310:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1679,"name":"LSP4TokenSymbolNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"340:26:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1680,"name":"LSP4TokenTypeNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"372:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1683,"name":"ERC725YCore","nameLocations":["730:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"730:11:19"},"id":1684,"nodeType":"InheritanceSpecifier","src":"730:11:19"}],"canonicalName":"LSP4DigitalAssetMetadataCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"425:254:19","text":" @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\n @author Matthew Stevens\n @dev Standard Implementation of the LSP4 standard."},"fullyImplemented":true,"id":1731,"linearizedBaseContracts":[1731,270,505,3761,3968,402],"name":"LSP4DigitalAssetMetadataCore","nameLocation":"698:28:19","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[248],"body":{"id":1729,"nodeType":"Block","src":"1037:426:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1693,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"1051:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1694,"name":"_LSP4_TOKEN_NAME_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1062:20:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1051:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"1152:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1701,"name":"_LSP4_TOKEN_SYMBOL_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1163:22:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1152:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1707,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"1257:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1708,"name":"_LSP4_TOKEN_TYPE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1268:20:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1257:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1725,"nodeType":"Block","src":"1354:103:19","statements":[{"expression":{"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1714,"name":"_store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1368:6:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":1716,"indexExpression":{"id":1715,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"1375:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1368:15:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1717,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"1386:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1368:27:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1719,"nodeType":"ExpressionStatement","src":"1368:27:19"},{"eventCall":{"arguments":[{"id":1721,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"1427:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1722,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"1436:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1720,"name":"DataChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"1415:11:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1415:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1724,"nodeType":"EmitStatement","src":"1410:36:19"}]},"id":1726,"nodeType":"IfStatement","src":"1253:204:19","trueBody":{"id":1713,"nodeType":"Block","src":"1290:58:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1710,"name":"LSP4TokenTypeNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"1311:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1311:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1712,"nodeType":"RevertStatement","src":"1304:33:19"}]}},"id":1727,"nodeType":"IfStatement","src":"1148:309:19","trueBody":{"id":1706,"nodeType":"Block","src":"1187:60:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1703,"name":"LSP4TokenSymbolNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"1208:26:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1208:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1705,"nodeType":"RevertStatement","src":"1201:35:19"}]}},"id":1728,"nodeType":"IfStatement","src":"1047:410:19","trueBody":{"id":1699,"nodeType":"Block","src":"1084:58:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1696,"name":"LSP4TokenNameNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"1105:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1105:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1698,"nodeType":"RevertStatement","src":"1098:33:19"}]}}]},"documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"748:177:19","text":" @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\n via this function once the digital asset contract has been deployed."},"id":1730,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"939:8:19","nodeType":"FunctionDefinition","overrides":{"id":1691,"nodeType":"OverrideSpecifier","overrides":[],"src":"1028:8:19"},"parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"dataKey","nameLocation":"965:7:19","nodeType":"VariableDeclaration","scope":1730,"src":"957:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"957:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1689,"mutability":"mutable","name":"dataValue","nameLocation":"995:9:19","nodeType":"VariableDeclaration","scope":1730,"src":"982:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1688,"name":"bytes","nodeType":"ElementaryTypeName","src":"982:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"947:63:19"},"returnParameters":{"id":1692,"nodeType":"ParameterList","parameters":[],"src":"1037:0:19"},"scope":1731,"src":"930:533:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1732,"src":"680:785:19","usedErrors":[407,412,448,451,454,1736,1739,1742],"usedEvents":[307,468]}],"src":"39:1427:19"},"id":19},"@lukso/lsp4-contracts/contracts/LSP4Errors.sol":{"ast":{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4Errors.sol","exportedSymbols":{"LSP4TokenNameNotEditable":[1736],"LSP4TokenSymbolNotEditable":[1739],"LSP4TokenTypeNotEditable":[1742]},"id":1743,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1733,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:20"},{"documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"64:379:20","text":" @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"85c169bd","id":1736,"name":"LSP4TokenNameNotEditable","nameLocation":"450:24:20","nodeType":"ErrorDefinition","parameters":{"id":1735,"nodeType":"ParameterList","parameters":[],"src":"474:2:20"},"src":"444:33:20"},{"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"479:383:20","text":" @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"76755b38","id":1739,"name":"LSP4TokenSymbolNotEditable","nameLocation":"869:26:20","nodeType":"ErrorDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[],"src":"895:2:20"},"src":"863:35:20"},{"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"900:381:20","text":" @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\n The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\n It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."},"errorSelector":"4ef6d7fb","id":1742,"name":"LSP4TokenTypeNotEditable","nameLocation":"1288:24:20","nodeType":"ErrorDefinition","parameters":{"id":1741,"nodeType":"ParameterList","parameters":[],"src":"1312:2:20"},"src":"1282:33:20"}],"src":"39:1277:20"},"id":20},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"IERC165":[3968],"IERC725Y":[505],"ILSP8IdentifiableDigitalAsset":[1963]},"id":1964,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1744,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:21"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":1746,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":3969,"src":"78:80:21","symbolAliases":[{"foreign":{"id":1745,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"86:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":1748,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":506,"src":"159:89:21","symbolAliases":[{"foreign":{"id":1747,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"172:8:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1750,"name":"IERC165","nameLocations":["402:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":3968,"src":"402:7:21"},"id":1751,"nodeType":"InheritanceSpecifier","src":"402:7:21"},{"baseName":{"id":1752,"name":"IERC725Y","nameLocations":["411:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"411:8:21"},"id":1753,"nodeType":"InheritanceSpecifier","src":"411:8:21"}],"canonicalName":"ILSP8IdentifiableDigitalAsset","contractDependencies":[],"contractKind":"interface","documentation":{"id":1749,"nodeType":"StructuredDocumentation","src":"250:108:21","text":" @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset."},"fullyImplemented":false,"id":1963,"linearizedBaseContracts":[1963,505,3968],"name":"ILSP8IdentifiableDigitalAsset","nameLocation":"369:29:21","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"445:616:21","text":" @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\n @param operator The address of operator that sent the `tokenId`\n @param from The previous owner of the `tokenId`\n @param to The new owner of `tokenId`\n @param tokenId The tokenId that was transferred\n @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\n @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses."},"eventSelector":"b333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf","id":1768,"name":"Transfer","nameLocation":"1072:8:21","nodeType":"EventDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1098:8:21","nodeType":"VariableDeclaration","scope":1768,"src":"1090:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"1090:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1758,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1132:4:21","nodeType":"VariableDeclaration","scope":1768,"src":"1116:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"1116:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1760,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1162:2:21","nodeType":"VariableDeclaration","scope":1768,"src":"1146:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1759,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1762,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1190:7:21","nodeType":"VariableDeclaration","scope":1768,"src":"1174:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1174:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1764,"indexed":false,"mutability":"mutable","name":"force","nameLocation":"1212:5:21","nodeType":"VariableDeclaration","scope":1768,"src":"1207:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1763,"name":"bool","nodeType":"ElementaryTypeName","src":"1207:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1766,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1233:4:21","nodeType":"VariableDeclaration","scope":1768,"src":"1227:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1765,"name":"bytes","nodeType":"ElementaryTypeName","src":"1227:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1080:163:21"},"src":"1066:178:21"},{"anonymous":false,"documentation":{"id":1769,"nodeType":"StructuredDocumentation","src":"1250:396:21","text":" @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\n @param operator The address authorized as an operator.\n @param tokenOwner The owner of the `tokenId`.\n @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215","id":1779,"name":"OperatorAuthorizationChanged","nameLocation":"1657:28:21","nodeType":"EventDefinition","parameters":{"id":1778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1711:8:21","nodeType":"VariableDeclaration","scope":1779,"src":"1695:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1770,"name":"address","nodeType":"ElementaryTypeName","src":"1695:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1773,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"1745:10:21","nodeType":"VariableDeclaration","scope":1779,"src":"1729:26:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1772,"name":"address","nodeType":"ElementaryTypeName","src":"1729:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1775,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1781:7:21","nodeType":"VariableDeclaration","scope":1779,"src":"1765:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1777,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"1804:24:21","nodeType":"VariableDeclaration","scope":1779,"src":"1798:30:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1776,"name":"bytes","nodeType":"ElementaryTypeName","src":"1798:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1685:149:21"},"src":"1651:184:21"},{"anonymous":false,"documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"1841:501:21","text":" @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\n @param operator The address revoked from the operator array ({getOperatorsOf}).\n @param tokenOwner The owner of the `tokenId`.\n @param tokenId The tokenId `operator` is revoked from operating on.\n @param notified Bool indicating whether the operator has been notified or not\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c","id":1792,"name":"OperatorRevoked","nameLocation":"2353:15:21","nodeType":"EventDefinition","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2394:8:21","nodeType":"VariableDeclaration","scope":1792,"src":"2378:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1784,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"2428:10:21","nodeType":"VariableDeclaration","scope":1792,"src":"2412:26:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1783,"name":"address","nodeType":"ElementaryTypeName","src":"2412:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1786,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"2464:7:21","nodeType":"VariableDeclaration","scope":1792,"src":"2448:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2448:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1788,"indexed":false,"mutability":"mutable","name":"notified","nameLocation":"2486:8:21","nodeType":"VariableDeclaration","scope":1792,"src":"2481:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1787,"name":"bool","nodeType":"ElementaryTypeName","src":"2481:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1790,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"2510:24:21","nodeType":"VariableDeclaration","scope":1792,"src":"2504:30:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1789,"name":"bytes","nodeType":"ElementaryTypeName","src":"2504:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2368:172:21"},"src":"2347:194:21"},{"anonymous":false,"documentation":{"id":1793,"nodeType":"StructuredDocumentation","src":"2547:253:21","text":" @dev Emitted when setting data for `tokenId`.\n @param tokenId The tokenId which data is set for.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"a6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb","id":1801,"name":"TokenIdDataChanged","nameLocation":"2811:18:21","nodeType":"EventDefinition","parameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"2855:7:21","nodeType":"VariableDeclaration","scope":1801,"src":"2839:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2839:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1797,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"2888:7:21","nodeType":"VariableDeclaration","scope":1801,"src":"2872:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2872:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1799,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"2911:9:21","nodeType":"VariableDeclaration","scope":1801,"src":"2905:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1798,"name":"bytes","nodeType":"ElementaryTypeName","src":"2905:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2829:97:21"},"src":"2805:122:21"},{"documentation":{"id":1802,"nodeType":"StructuredDocumentation","src":"2959:147:21","text":" @dev Returns the number of existing tokens that have been minted in this contract.\n @return The number of existing tokens."},"functionSelector":"18160ddd","id":1807,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3120:11:21","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[],"src":"3131:2:21"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"3157:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"3157:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3156:9:21"},"scope":1963,"src":"3111:55:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"3204:196:21","text":" @dev Get the number of token IDs owned by `tokenOwner`.\n @param tokenOwner The address to query     *\n @return The total number of token IDs that `tokenOwner` owns."},"functionSelector":"70a08231","id":1815,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3414:9:21","nodeType":"FunctionDefinition","parameters":{"id":1811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"tokenOwner","nameLocation":"3432:10:21","nodeType":"VariableDeclaration","scope":1815,"src":"3424:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"3424:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3423:20:21"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1815,"src":"3467:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1812,"name":"uint256","nodeType":"ElementaryTypeName","src":"3467:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3466:9:21"},"scope":1963,"src":"3405:71:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"3482:360:21","text":" @dev Returns the address that owns a given `tokenId`.\n @param tokenId The token ID to query the owner for.\n @return The owner address of the given `tokenId`.\n @custom:requirements `tokenId` must exist.\n @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`"},"functionSelector":"217b2270","id":1823,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOwnerOf","nameLocation":"3856:12:21","nodeType":"FunctionDefinition","parameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"tokenId","nameLocation":"3877:7:21","nodeType":"VariableDeclaration","scope":1823,"src":"3869:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3869:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3868:17:21"},"returnParameters":{"id":1822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"3909:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1820,"name":"address","nodeType":"ElementaryTypeName","src":"3909:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3908:9:21"},"scope":1963,"src":"3847:71:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"3924:244:21","text":" @dev Returns the list of token IDs that the `tokenOwner` address owns.\n @param tokenOwner The address that we want to get the list of token IDs for.\n @return An array of `bytes32[] tokenIds` owned by `tokenOwner`."},"functionSelector":"a3b261f2","id":1832,"implemented":false,"kind":"function","modifiers":[],"name":"tokenIdsOf","nameLocation":"4182:10:21","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"tokenOwner","nameLocation":"4210:10:21","nodeType":"VariableDeclaration","scope":1832,"src":"4202:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"4202:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4192:34:21"},"returnParameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1832,"src":"4250:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1828,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4250:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1829,"nodeType":"ArrayTypeName","src":"4250:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4249:18:21"},"scope":1963,"src":"4173:95:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"4317:286:21","text":" @notice Retrieves data for a specific `tokenId` and `dataKey`.\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to retrieve.\n @return dataValues The data value associated with the given `tokenId` and `dataKey`."},"functionSelector":"16e023b3","id":1842,"implemented":false,"kind":"function","modifiers":[],"name":"getDataForTokenId","nameLocation":"4617:17:21","nodeType":"FunctionDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"tokenId","nameLocation":"4652:7:21","nodeType":"VariableDeclaration","scope":1842,"src":"4644:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"dataKey","nameLocation":"4677:7:21","nodeType":"VariableDeclaration","scope":1842,"src":"4669:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1836,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4634:56:21"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1840,"mutability":"mutable","name":"dataValues","nameLocation":"4722:10:21","nodeType":"VariableDeclaration","scope":1842,"src":"4709:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1839,"name":"bytes","nodeType":"ElementaryTypeName","src":"4709:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4708:25:21"},"scope":1963,"src":"4608:126:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1843,"nodeType":"StructuredDocumentation","src":"4740:309:21","text":" @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\n @param tokenIds An array of token IDs.\n @param dataKeys An array of data keys corresponding to the token IDs.\n @return dataValues An array of data values for each pair of `tokenId` and `dataKey`."},"functionSelector":"1d26fce6","id":1855,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatchForTokenIds","nameLocation":"5063:23:21","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"tokenIds","nameLocation":"5113:8:21","nodeType":"VariableDeclaration","scope":1855,"src":"5096:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5096:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1845,"nodeType":"ArrayTypeName","src":"5096:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"dataKeys","nameLocation":"5148:8:21","nodeType":"VariableDeclaration","scope":1855,"src":"5131:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5131:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1848,"nodeType":"ArrayTypeName","src":"5131:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5086:76:21"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"dataValues","nameLocation":"5196:10:21","nodeType":"VariableDeclaration","scope":1855,"src":"5181:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1851,"name":"bytes","nodeType":"ElementaryTypeName","src":"5181:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1852,"nodeType":"ArrayTypeName","src":"5181:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5180:27:21"},"scope":1963,"src":"5054:154:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"5214:299:21","text":" @notice Sets data for a specific `tokenId` and `dataKey`.\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to set.\n @param dataValue The value to set for the given data key.\n @custom:events {TokenIdDataChanged} event."},"functionSelector":"d6c1407c","id":1865,"implemented":false,"kind":"function","modifiers":[],"name":"setDataForTokenId","nameLocation":"5527:17:21","nodeType":"FunctionDefinition","parameters":{"id":1863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"tokenId","nameLocation":"5562:7:21","nodeType":"VariableDeclaration","scope":1865,"src":"5554:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5554:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"dataKey","nameLocation":"5587:7:21","nodeType":"VariableDeclaration","scope":1865,"src":"5579:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5579:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"dataValue","nameLocation":"5617:9:21","nodeType":"VariableDeclaration","scope":1865,"src":"5604:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1861,"name":"bytes","nodeType":"ElementaryTypeName","src":"5604:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5544:88:21"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[],"src":"5641:0:21"},"scope":1963,"src":"5518:124:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"5648:352:21","text":" @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\n @param tokenIds An array of token IDs.\n @param dataKeys An array of data keys corresponding to the token IDs.\n @param dataValues An array of values to set for the given data keys.\n @custom:events {TokenIdDataChanged} event for each pair."},"functionSelector":"be9f0e6f","id":1878,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatchForTokenIds","nameLocation":"6014:23:21","nodeType":"FunctionDefinition","parameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"tokenIds","nameLocation":"6064:8:21","nodeType":"VariableDeclaration","scope":1878,"src":"6047:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1867,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6047:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1868,"nodeType":"ArrayTypeName","src":"6047:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"dataKeys","nameLocation":"6099:8:21","nodeType":"VariableDeclaration","scope":1878,"src":"6082:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6082:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1871,"nodeType":"ArrayTypeName","src":"6082:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"dataValues","nameLocation":"6132:10:21","nodeType":"VariableDeclaration","scope":1878,"src":"6117:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1873,"name":"bytes","nodeType":"ElementaryTypeName","src":"6117:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1874,"nodeType":"ArrayTypeName","src":"6117:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6037:111:21"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[],"src":"6157:0:21"},"scope":1963,"src":"6005:153:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1879,"nodeType":"StructuredDocumentation","src":"6199:782:21","text":" @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The address to authorize as an operator.\n @param tokenId The token ID operator has access to.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `tokenId` must exist.\n - caller MUST be the {tokenOwnerOf} `tokenId`.\n - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\n - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} event."},"functionSelector":"86a10ddd","id":1888,"implemented":false,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"6995:17:21","nodeType":"FunctionDefinition","parameters":{"id":1886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"operator","nameLocation":"7030:8:21","nodeType":"VariableDeclaration","scope":1888,"src":"7022:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1880,"name":"address","nodeType":"ElementaryTypeName","src":"7022:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1883,"mutability":"mutable","name":"tokenId","nameLocation":"7056:7:21","nodeType":"VariableDeclaration","scope":1888,"src":"7048:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7048:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"7086:24:21","nodeType":"VariableDeclaration","scope":1888,"src":"7073:37:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1884,"name":"bytes","nodeType":"ElementaryTypeName","src":"7073:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7012:104:21"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[],"src":"7125:0:21"},"scope":1963,"src":"6986:140:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"7132:893:21","text":" @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\n See also {isOperatorFor}.\n @param operator The address to revoke as an operator.\n @param tokenId The tokenId `operator` is revoked from operating on.\n @param notify Boolean indicating whether to notify the operator or not\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `tokenId` must exist.\n - caller must be the {tokenOwnerOf} `tokenId`.\n - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\n - `operator` cannot be the zero address.\n @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner).."},"functionSelector":"db8c9663","id":1900,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"8039:14:21","nodeType":"FunctionDefinition","parameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"operator","nameLocation":"8071:8:21","nodeType":"VariableDeclaration","scope":1900,"src":"8063:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1890,"name":"address","nodeType":"ElementaryTypeName","src":"8063:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"tokenId","nameLocation":"8097:7:21","nodeType":"VariableDeclaration","scope":1900,"src":"8089:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8089:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"notify","nameLocation":"8119:6:21","nodeType":"VariableDeclaration","scope":1900,"src":"8114:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1894,"name":"bool","nodeType":"ElementaryTypeName","src":"8114:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1897,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"8148:24:21","nodeType":"VariableDeclaration","scope":1900,"src":"8135:37:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1896,"name":"bytes","nodeType":"ElementaryTypeName","src":"8135:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8053:125:21"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"8187:0:21"},"scope":1963,"src":"8030:158:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"8194:535:21","text":" @dev Returns whether `operator` address is an operator for a given `tokenId`.\n @param operator The address to query operator status for.\n @param tokenId The token ID to check if `operator` is allowed to operate on.\n @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\n @custom:requirements\n - `tokenId` must exist.\n - caller must be the current {tokenOwnerOf} `tokenId`.\n @custom:info The tokenOwner is its own operator."},"functionSelector":"2a3654a4","id":1910,"implemented":false,"kind":"function","modifiers":[],"name":"isOperatorFor","nameLocation":"8743:13:21","nodeType":"FunctionDefinition","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"operator","nameLocation":"8774:8:21","nodeType":"VariableDeclaration","scope":1910,"src":"8766:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1902,"name":"address","nodeType":"ElementaryTypeName","src":"8766:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"tokenId","nameLocation":"8800:7:21","nodeType":"VariableDeclaration","scope":1910,"src":"8792:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1904,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8792:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8756:57:21"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"8837:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1907,"name":"bool","nodeType":"ElementaryTypeName","src":"8837:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8836:6:21"},"scope":1963,"src":"8734:109:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"8849:351:21","text":" @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\n @param tokenId The token ID to get the operators for.\n @return An array of operators allowed to transfer or burn a specific `tokenId`.\n Requirements\n - `tokenId` must exist."},"functionSelector":"49a6078d","id":1919,"implemented":false,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"9214:14:21","nodeType":"FunctionDefinition","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"tokenId","nameLocation":"9246:7:21","nodeType":"VariableDeclaration","scope":1919,"src":"9238:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9238:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9228:31:21"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1919,"src":"9283:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1915,"name":"address","nodeType":"ElementaryTypeName","src":"9283:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1916,"nodeType":"ArrayTypeName","src":"9283:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9282:18:21"},"scope":1963,"src":"9205:96:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1920,"nodeType":"StructuredDocumentation","src":"9342:2075:21","text":" @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\n If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\n The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 standard.\n @param from The address that owns the given `tokenId`.\n @param to The address that will receive the `tokenId`.\n @param tokenId The token ID to transfer.\n @param force When set to `true`, the `to` address CAN be any addres.\n When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n @custom:requirements\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\n - `from` must own the given `tokenId`.\n - If the caller is not `from`, it must be an operator for the `tokenId`.\n @custom:events\n - {Transfer} event when the `tokenId` is successfully transferred.\n @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n This even if the `force` was set to `true`."},"functionSelector":"511b6952","id":1933,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"11431:8:21","nodeType":"FunctionDefinition","parameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1922,"mutability":"mutable","name":"from","nameLocation":"11457:4:21","nodeType":"VariableDeclaration","scope":1933,"src":"11449:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1921,"name":"address","nodeType":"ElementaryTypeName","src":"11449:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"to","nameLocation":"11479:2:21","nodeType":"VariableDeclaration","scope":1933,"src":"11471:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1923,"name":"address","nodeType":"ElementaryTypeName","src":"11471:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1926,"mutability":"mutable","name":"tokenId","nameLocation":"11499:7:21","nodeType":"VariableDeclaration","scope":1933,"src":"11491:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11491:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"force","nameLocation":"11521:5:21","nodeType":"VariableDeclaration","scope":1933,"src":"11516:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1927,"name":"bool","nodeType":"ElementaryTypeName","src":"11516:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1930,"mutability":"mutable","name":"data","nameLocation":"11549:4:21","nodeType":"VariableDeclaration","scope":1933,"src":"11536:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1929,"name":"bytes","nodeType":"ElementaryTypeName","src":"11536:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11439:120:21"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[],"src":"11568:0:21"},"scope":1963,"src":"11422:147:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"11575:1189:21","text":" @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\n If any transfer fails, the whole call will revert.\n @param from An array of sending addresses.\n @param to An array of recipient addresses.\n @param tokenId An array of token IDs to transfer.\n @param force When set to `true`, `to` may be any address.\n When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\n @custom:requirements\n - The arrays of `from`, `to` and `tokenId` must have the same length.\n - no values in the `from` array can be the zero address.\n - no values in the `to` array can be the zero address.\n - `from` and `to` cannot be the same address at the same index on each arrays.\n - each `tokenId` must be owned by `from`.\n - If the caller is not `from`, it must be an operator of each `tokenId`.\n @custom:events\n - {Transfer} events on each successful token transfer."},"functionSelector":"7e87632c","id":1952,"implemented":false,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"12778:13:21","nodeType":"FunctionDefinition","parameters":{"id":1950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1937,"mutability":"mutable","name":"from","nameLocation":"12818:4:21","nodeType":"VariableDeclaration","scope":1952,"src":"12801:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"12801:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1936,"nodeType":"ArrayTypeName","src":"12801:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1940,"mutability":"mutable","name":"to","nameLocation":"12849:2:21","nodeType":"VariableDeclaration","scope":1952,"src":"12832:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"12832:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1939,"nodeType":"ArrayTypeName","src":"12832:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"tokenId","nameLocation":"12878:7:21","nodeType":"VariableDeclaration","scope":1952,"src":"12861:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12861:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1942,"nodeType":"ArrayTypeName","src":"12861:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1946,"mutability":"mutable","name":"force","nameLocation":"12909:5:21","nodeType":"VariableDeclaration","scope":1952,"src":"12895:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1944,"name":"bool","nodeType":"ElementaryTypeName","src":"12895:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1945,"nodeType":"ArrayTypeName","src":"12895:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"data","nameLocation":"12939:4:21","nodeType":"VariableDeclaration","scope":1952,"src":"12924:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1947,"name":"bytes","nodeType":"ElementaryTypeName","src":"12924:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1948,"nodeType":"ArrayTypeName","src":"12924:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"12791:158:21"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[],"src":"12958:0:21"},"scope":1963,"src":"12769:190:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"12965:460:21","text":" @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n @param data An array of ABI encoded function calls to be called on the contract.\n @return results An array of abi-encoded data returned by the functions executed."},"functionSelector":"6963d438","id":1962,"implemented":false,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"13439:10:21","nodeType":"FunctionDefinition","parameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"data","nameLocation":"13476:4:21","nodeType":"VariableDeclaration","scope":1962,"src":"13459:21:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"13459:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1955,"nodeType":"ArrayTypeName","src":"13459:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13449:37:21"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"results","nameLocation":"13520:7:21","nodeType":"VariableDeclaration","scope":1962,"src":"13505:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1958,"name":"bytes","nodeType":"ElementaryTypeName","src":"13505:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1959,"nodeType":"ArrayTypeName","src":"13505:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13504:24:21"},"scope":1963,"src":"13430:99:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1964,"src":"359:13172:21","usedErrors":[],"usedEvents":[468,1768,1779,1792,1801]}],"src":"39:13493:21"},"id":21},"@lukso/lsp8-contracts/contracts/LSP8Constants.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Constants.sol","exportedSymbols":{"_INTERFACEID_LSP8":[1968],"_LSP8_REFERENCE_CONTRACT":[1977],"_LSP8_TOKENID_FORMAT_ADDRESS":[1995],"_LSP8_TOKENID_FORMAT_HASH":[2001],"_LSP8_TOKENID_FORMAT_KEY":[1971],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS":[2010],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH":[2016],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER":[2004],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING":[2007],"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID":[2013],"_LSP8_TOKENID_FORMAT_NUMBER":[1989],"_LSP8_TOKENID_FORMAT_STRING":[1992],"_LSP8_TOKENID_FORMAT_UNIQUE_ID":[1998],"_LSP8_TOKEN_METADATA_BASE_URI":[1974],"_TYPEID_LSP8_TOKENOPERATOR":[1986],"_TYPEID_LSP8_TOKENSRECIPIENT":[1983],"_TYPEID_LSP8_TOKENSSENDER":[1980]},"id":2017,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1965,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:22"},{"constant":true,"id":1968,"mutability":"constant","name":"_INTERFACEID_LSP8","nameLocation":"108:17:22","nodeType":"VariableDeclaration","scope":2017,"src":"92:46:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1966,"name":"bytes4","nodeType":"ElementaryTypeName","src":"92:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783361323731373036","id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"128:10:22","typeDescriptions":{"typeIdentifier":"t_rational_975640326_by_1","typeString":"int_const 975640326"},"value":"0x3a271706"},"visibility":"internal"},{"constant":true,"id":1971,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_KEY","nameLocation":"218:24:22","nodeType":"VariableDeclaration","scope":2017,"src":"201:110:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"201:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866363735653933363161663163313636346331383638636661336562393736373264366231613531336161356238316465633334633965653333306538313864","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"245:66:22","typeDescriptions":{"typeIdentifier":"t_rational_111477291423636096748029871472748476558390830835668367522651640064380322611597_by_1","typeString":"int_const 1114...(70 digits omitted)...1597"},"value":"0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d"},"visibility":"internal"},{"constant":true,"id":1974,"mutability":"constant","name":"_LSP8_TOKEN_METADATA_BASE_URI","nameLocation":"372:29:22","nodeType":"VariableDeclaration","scope":2017,"src":"355:115:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"355:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307831613736323836303063336261633731303166353336393766343864663338316464633336623930313565376437633963353633336431323532616132383433","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"404:66:22","typeDescriptions":{"typeIdentifier":"t_rational_11968900676105822912557464315324495329565190357858734522371517867650361993283_by_1","typeString":"int_const 1196...(69 digits omitted)...3283"},"value":"0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843"},"visibility":"internal"},{"constant":true,"id":1977,"mutability":"constant","name":"_LSP8_REFERENCE_CONTRACT","nameLocation":"528:24:22","nodeType":"VariableDeclaration","scope":2017,"src":"511:110:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1975,"name":"bytes32","nodeType":"ElementaryTypeName","src":"511:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307837303865376238383137393566326536623663323735323130386331373765633839323438343538646533626636396430643433343830623365353033346536","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"555:66:22","typeDescriptions":{"typeIdentifier":"t_rational_50910783908361636124804393116408259141598108534342564848859926123218144867558_by_1","typeString":"int_const 5091...(69 digits omitted)...7558"},"value":"0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6"},"visibility":"internal"},{"constant":true,"id":1980,"mutability":"constant","name":"_TYPEID_LSP8_TOKENSSENDER","nameLocation":"707:25:22","nodeType":"VariableDeclaration","scope":2017,"src":"690:111:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862323365616537653664313536346232393562346333653362653430326439613266303737366335376264663336353930333439366636666134383161623030","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"735:66:22","typeDescriptions":{"typeIdentifier":"t_rational_80622435878143139083563480449382184796258105498148027923970953027117195045632_by_1","typeString":"int_const 8062...(69 digits omitted)...5632"},"value":"0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00"},"visibility":"internal"},{"constant":true,"id":1983,"mutability":"constant","name":"_TYPEID_LSP8_TOKENSRECIPIENT","nameLocation":"870:28:22","nodeType":"VariableDeclaration","scope":2017,"src":"853:114:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"853:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830623038346135356562663730666433633036666437353532363964616332323132633464336630663464303930373937383062666135306331623239383464","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"901:66:22","typeDescriptions":{"typeIdentifier":"t_rational_4990089156609310438051076814138656340767597687526420738174868187457831213133_by_1","typeString":"int_const 4990...(68 digits omitted)...3133"},"value":"0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d"},"visibility":"internal"},{"constant":true,"id":1986,"mutability":"constant","name":"_TYPEID_LSP8_TOKENOPERATOR","nameLocation":"1035:26:22","nodeType":"VariableDeclaration","scope":2017,"src":"1018:112:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1984,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1018:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307838613163313561383739396637316235343765303865326263623265383532353765383162306130376565653263653637313235343965656631663030393730","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1064:66:22","typeDescriptions":{"typeIdentifier":"t_rational_62468794301057257859859864036220190757926884000171377020854266712521628977520_by_1","typeString":"int_const 6246...(69 digits omitted)...7520"},"value":"0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970"},"visibility":"internal"},{"constant":true,"id":1989,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_NUMBER","nameLocation":"1175:27:22","nodeType":"VariableDeclaration","scope":2017,"src":"1158:48:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1987,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1205:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":1992,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_STRING","nameLocation":"1225:27:22","nodeType":"VariableDeclaration","scope":2017,"src":"1208:48:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1208:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1255:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":1995,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_ADDRESS","nameLocation":"1275:28:22","nodeType":"VariableDeclaration","scope":2017,"src":"1258:49:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1258:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1306:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":1998,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_UNIQUE_ID","nameLocation":"1326:30:22","nodeType":"VariableDeclaration","scope":2017,"src":"1309:51:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"1309:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1359:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":2001,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_HASH","nameLocation":"1379:25:22","nodeType":"VariableDeclaration","scope":2017,"src":"1362:46:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1362:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1407:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"constant":true,"id":2004,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER","nameLocation":"1428:41:22","nodeType":"VariableDeclaration","scope":2017,"src":"1411:64:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2002,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1472:3:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"constant":true,"id":2007,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING","nameLocation":"1494:41:22","nodeType":"VariableDeclaration","scope":2017,"src":"1477:64:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"1477:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313031","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1538:3:22","typeDescriptions":{"typeIdentifier":"t_rational_101_by_1","typeString":"int_const 101"},"value":"101"},"visibility":"internal"},{"constant":true,"id":2010,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS","nameLocation":"1560:42:22","nodeType":"VariableDeclaration","scope":2017,"src":"1543:65:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1543:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313032","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1605:3:22","typeDescriptions":{"typeIdentifier":"t_rational_102_by_1","typeString":"int_const 102"},"value":"102"},"visibility":"internal"},{"constant":true,"id":2013,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID","nameLocation":"1627:44:22","nodeType":"VariableDeclaration","scope":2017,"src":"1610:67:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1610:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313033","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1674:3:22","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"visibility":"internal"},{"constant":true,"id":2016,"mutability":"constant","name":"_LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH","nameLocation":"1696:39:22","nodeType":"VariableDeclaration","scope":2017,"src":"1679:62:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"1679:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313034","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1738:3:22","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"visibility":"internal"}],"src":"39:1704:22"},"id":22},"@lukso/lsp8-contracts/contracts/LSP8Errors.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Errors.sol","exportedSymbols":{"LSP8BatchCallFailed":[2097],"LSP8CannotSendToAddressZero":[2052],"LSP8CannotUseAddressZeroAsOperator":[2049],"LSP8InvalidTransferBatch":[2067],"LSP8NonExistentTokenId":[2023],"LSP8NonExistingOperator":[2059],"LSP8NotTokenOperator":[2039],"LSP8NotTokenOwner":[2032],"LSP8NotifyTokenReceiverContractMissingLSP1Interface":[2072],"LSP8NotifyTokenReceiverIsEOA":[2077],"LSP8OperatorAlreadyAuthorized":[2046],"LSP8RevokeOperatorNotAuthorized":[2115],"LSP8TokenContractCannotHoldValue":[2083],"LSP8TokenIdAlreadyMinted":[2064],"LSP8TokenIdFormatNotEditable":[2086],"LSP8TokenIdsDataEmptyArray":[2092],"LSP8TokenIdsDataLengthMismatch":[2089],"LSP8TokenOwnerCannotBeOperator":[2080],"LSP8TokenOwnerChanged":[2106]},"id":2116,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":2018,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"39:23:23"},{"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"79:59:23","text":" @dev Reverts when `tokenId` has not been minted."},"errorSelector":"ae8f9a36","id":2023,"name":"LSP8NonExistentTokenId","nameLocation":"145:22:23","nodeType":"ErrorDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"tokenId","nameLocation":"176:7:23","nodeType":"VariableDeclaration","scope":2023,"src":"168:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"168:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"167:17:23"},"src":"139:46:23"},{"documentation":{"id":2024,"nodeType":"StructuredDocumentation","src":"187:79:23","text":" @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`."},"errorSelector":"5b271ea2","id":2032,"name":"LSP8NotTokenOwner","nameLocation":"273:17:23","nodeType":"ErrorDefinition","parameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"tokenOwner","nameLocation":"299:10:23","nodeType":"VariableDeclaration","scope":2032,"src":"291:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"tokenId","nameLocation":"319:7:23","nodeType":"VariableDeclaration","scope":2032,"src":"311:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"311:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"caller","nameLocation":"336:6:23","nodeType":"VariableDeclaration","scope":2032,"src":"328:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"328:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:53:23"},"src":"267:77:23"},{"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"346:79:23","text":" @dev Reverts when `caller` is not an allowed operator for `tokenId`."},"errorSelector":"1294d2a9","id":2039,"name":"LSP8NotTokenOperator","nameLocation":"432:20:23","nodeType":"ErrorDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"tokenId","nameLocation":"461:7:23","nodeType":"VariableDeclaration","scope":2039,"src":"453:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"453:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2037,"mutability":"mutable","name":"caller","nameLocation":"478:6:23","nodeType":"VariableDeclaration","scope":2039,"src":"470:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2036,"name":"address","nodeType":"ElementaryTypeName","src":"470:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:33:23"},"src":"426:60:23"},{"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"488:80:23","text":" @dev Reverts when `operator` is already authorized for the `tokenId`."},"errorSelector":"a7626b68","id":2046,"name":"LSP8OperatorAlreadyAuthorized","nameLocation":"575:29:23","nodeType":"ErrorDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"operator","nameLocation":"613:8:23","nodeType":"VariableDeclaration","scope":2046,"src":"605:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"605:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2044,"mutability":"mutable","name":"tokenId","nameLocation":"631:7:23","nodeType":"VariableDeclaration","scope":2046,"src":"623:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"623:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"604:35:23"},"src":"569:71:23"},{"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"642:75:23","text":" @dev Reverts when trying to set the zero address as an operator."},"errorSelector":"9577b8b3","id":2049,"name":"LSP8CannotUseAddressZeroAsOperator","nameLocation":"724:34:23","nodeType":"ErrorDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[],"src":"758:2:23"},"src":"718:43:23"},{"documentation":{"id":2050,"nodeType":"StructuredDocumentation","src":"763:70:23","text":" @dev Reverts when trying to send token to the zero address."},"errorSelector":"24ecef4d","id":2052,"name":"LSP8CannotSendToAddressZero","nameLocation":"840:27:23","nodeType":"ErrorDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[],"src":"867:2:23"},"src":"834:36:23"},{"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"872:77:23","text":" @dev Reverts when `operator` is not an operator for the `tokenId`."},"errorSelector":"4aa31a8c","id":2059,"name":"LSP8NonExistingOperator","nameLocation":"956:23:23","nodeType":"ErrorDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"operator","nameLocation":"988:8:23","nodeType":"VariableDeclaration","scope":2059,"src":"980:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2054,"name":"address","nodeType":"ElementaryTypeName","src":"980:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"tokenId","nameLocation":"1006:7:23","nodeType":"VariableDeclaration","scope":2059,"src":"998:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"979:35:23"},"src":"950:65:23"},{"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"1017:63:23","text":" @dev Reverts when `tokenId` has already been minted."},"errorSelector":"34c7b511","id":2064,"name":"LSP8TokenIdAlreadyMinted","nameLocation":"1087:24:23","nodeType":"ErrorDefinition","parameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"tokenId","nameLocation":"1120:7:23","nodeType":"VariableDeclaration","scope":2064,"src":"1112:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2061,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1112:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1111:17:23"},"src":"1081:48:23"},{"documentation":{"id":2065,"nodeType":"StructuredDocumentation","src":"1131:92:23","text":" @dev Reverts when the parameters used for `transferBatch` have different lengths."},"errorSelector":"93a83119","id":2067,"name":"LSP8InvalidTransferBatch","nameLocation":"1230:24:23","nodeType":"ErrorDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[],"src":"1254:2:23"},"src":"1224:33:23"},{"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"1259:143:23","text":" @dev Reverts if the `tokenReceiver` does not implement LSP1\n when minting or transferring tokens with `bool force` set as `false`."},"errorSelector":"4349776d","id":2072,"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","nameLocation":"1409:51:23","nodeType":"ErrorDefinition","parameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"tokenReceiver","nameLocation":"1474:13:23","nodeType":"VariableDeclaration","scope":2072,"src":"1466:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"1466:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1460:29:23"},"src":"1403:87:23"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"1492:129:23","text":" @dev Reverts if the `tokenReceiver` is an EOA\n when minting or transferring tokens with `bool force` set as `false`."},"errorSelector":"03173137","id":2077,"name":"LSP8NotifyTokenReceiverIsEOA","nameLocation":"1628:28:23","nodeType":"ErrorDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"tokenReceiver","nameLocation":"1665:13:23","nodeType":"VariableDeclaration","scope":2077,"src":"1657:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"1657:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1656:23:23"},"src":"1622:58:23"},{"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"1682:92:23","text":" @dev Reverts when trying to authorize or revoke the token's owner as an operator."},"errorSelector":"89fdad62","id":2080,"name":"LSP8TokenOwnerCannotBeOperator","nameLocation":"1781:30:23","nodeType":"ErrorDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"1811:2:23"},"src":"1775:39:23"},{"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"1816:255:23","text":" @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\n E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\n @notice LSP8 contract cannot receive native tokens."},"errorSelector":"61f49442","id":2083,"name":"LSP8TokenContractCannotHoldValue","nameLocation":"2078:32:23","nodeType":"ErrorDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[],"src":"2110:2:23"},"src":"2072:41:23"},{"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"2115:398:23","text":" @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\n The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\n It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed."},"errorSelector":"3664800a","id":2086,"name":"LSP8TokenIdFormatNotEditable","nameLocation":"2520:28:23","nodeType":"ErrorDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[],"src":"2548:2:23"},"src":"2514:37:23"},{"documentation":{"id":2087,"nodeType":"StructuredDocumentation","src":"2553:81:23","text":" @dev Reverts when the length of the token IDs data arrays is not equal"},"errorSelector":"2fa71dfe","id":2089,"name":"LSP8TokenIdsDataLengthMismatch","nameLocation":"2641:30:23","nodeType":"ErrorDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[],"src":"2671:2:23"},"src":"2635:39:23"},{"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"2676:67:23","text":" @dev Reverts when empty arrays is passed to the function"},"errorSelector":"80c98305","id":2092,"name":"LSP8TokenIdsDataEmptyArray","nameLocation":"2750:26:23","nodeType":"ErrorDefinition","parameters":{"id":2091,"nodeType":"ParameterList","parameters":[],"src":"2776:2:23"},"src":"2744:35:23"},{"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"2781:79:23","text":" @dev Reverts when a batch call failed.\n @notice Batch call failed."},"errorSelector":"234eb819","id":2097,"name":"LSP8BatchCallFailed","nameLocation":"2867:19:23","nodeType":"ErrorDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"callIndex","nameLocation":"2895:9:23","nodeType":"VariableDeclaration","scope":2097,"src":"2887:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"2887:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2886:19:23"},"src":"2861:45:23"},{"documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"2908:92:23","text":" @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."},"errorSelector":"5a9c31d3","id":2106,"name":"LSP8TokenOwnerChanged","nameLocation":"3007:21:23","nodeType":"ErrorDefinition","parameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"tokenId","nameLocation":"3042:7:23","nodeType":"VariableDeclaration","scope":2106,"src":"3034:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2099,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3034:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"oldOwner","nameLocation":"3063:8:23","nodeType":"VariableDeclaration","scope":2106,"src":"3055:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"newOwner","nameLocation":"3085:8:23","nodeType":"VariableDeclaration","scope":2106,"src":"3077:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2103,"name":"address","nodeType":"ElementaryTypeName","src":"3077:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3028:67:23"},"src":"3001:95:23"},{"documentation":{"id":2107,"nodeType":"StructuredDocumentation","src":"3098:75:23","text":" @dev Reverts when the call to revoke operator is not authorized."},"errorSelector":"760b5acd","id":2115,"name":"LSP8RevokeOperatorNotAuthorized","nameLocation":"3180:31:23","nodeType":"ErrorDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"caller","nameLocation":"3225:6:23","nodeType":"VariableDeclaration","scope":2115,"src":"3217:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"3217:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"tokenOwner","nameLocation":"3245:10:23","nodeType":"VariableDeclaration","scope":2115,"src":"3237:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2110,"name":"address","nodeType":"ElementaryTypeName","src":"3237:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"tokenId","nameLocation":"3269:7:23","nodeType":"VariableDeclaration","scope":2115,"src":"3261:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3261:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3211:67:23"},"src":"3174:105:23"}],"src":"39:3241:23"},"id":23},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol","exportedSymbols":{"ERC725YCore":[270],"IERC165":[3968],"InvalidExtensionAddress":[671],"InvalidFunctionSelector":[666],"LSP17Extendable":[805],"LSP2Utils":[1542],"LSP4DigitalAssetMetadata":[1669],"LSP4DigitalAssetMetadataCore":[1731],"LSP8IdentifiableDigitalAsset":[2384],"LSP8IdentifiableDigitalAssetCore":[3737],"LSP8TokenContractCannotHoldValue":[2083],"LSP8TokenIdFormatNotEditable":[2086],"NoExtensionFoundForFunctionSelector":[661],"_INTERFACEID_LSP8":[1968],"_LSP17_EXTENSION_PREFIX":[654],"_LSP8_TOKENID_FORMAT_KEY":[1971]},"id":2385,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":2117,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"39:24:24"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":2119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":3969,"src":"79:80:24","symbolAliases":[{"foreign":{"id":2118,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"87:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/ERC725YCore.sol","file":"@erc725/smart-contracts/contracts/ERC725YCore.sol","id":2121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":271,"src":"172:78:24","symbolAliases":[{"foreign":{"id":2120,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"180:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol","file":"./LSP8IdentifiableDigitalAssetCore.sol","id":2123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":3738,"src":"251:94:24","symbolAliases":[{"foreign":{"id":2122,"name":"LSP8IdentifiableDigitalAssetCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"264:32:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","file":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol","id":2125,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":1670,"src":"346:108:24","symbolAliases":[{"foreign":{"id":2124,"name":"LSP4DigitalAssetMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"359:24:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","file":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","id":2127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":1732,"src":"456:116:24","symbolAliases":[{"foreign":{"id":2126,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"469:28:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol","id":2129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":806,"src":"574:108:24","symbolAliases":[{"foreign":{"id":2128,"name":"LSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"587:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","file":"@lukso/lsp2-contracts/contracts/LSP2Utils.sol","id":2131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":1543,"src":"697:72:24","symbolAliases":[{"foreign":{"id":2130,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"705:9:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Constants.sol","file":"./LSP8Constants.sol","id":2134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":2017,"src":"784:80:24","symbolAliases":[{"foreign":{"id":2132,"name":"_INTERFACEID_LSP8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"792:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2133,"name":"_LSP8_TOKENID_FORMAT_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"811:24:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Errors.sol","file":"./LSP8Errors.sol","id":2137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":2116,"src":"876:106:24","symbolAliases":[{"foreign":{"id":2135,"name":"LSP8TokenContractCannotHoldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"889:32:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2136,"name":"LSP8TokenIdFormatNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"927:28:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol","id":2139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":655,"src":"984:115:24","symbolAliases":[{"foreign":{"id":2138,"name":"_LSP17_EXTENSION_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"997:23:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","file":"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol","id":2143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2385,"sourceUnit":672,"src":"1112:182:24","symbolAliases":[{"foreign":{"id":2140,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"1125:35:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2141,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"1166:23:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2142,"name":"InvalidExtensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"1195:23:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2145,"name":"LSP4DigitalAssetMetadata","nameLocations":["1824:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":1669,"src":"1824:24:24"},"id":2146,"nodeType":"InheritanceSpecifier","src":"1824:24:24"},{"baseName":{"id":2147,"name":"LSP8IdentifiableDigitalAssetCore","nameLocations":["1854:32:24"],"nodeType":"IdentifierPath","referencedDeclaration":3737,"src":"1854:32:24"},"id":2148,"nodeType":"InheritanceSpecifier","src":"1854:32:24"},{"baseName":{"id":2149,"name":"LSP17Extendable","nameLocations":["1892:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":805,"src":"1892:15:24"},"id":2150,"nodeType":"InheritanceSpecifier","src":"1892:15:24"}],"canonicalName":"LSP8IdentifiableDigitalAsset","contractDependencies":[],"contractKind":"contract","documentation":{"id":2144,"nodeType":"StructuredDocumentation","src":"1296:473:24","text":" @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\n @author Matthew Stevens\n @dev Standard implementation contract of the LSP8 standard.\n Minting and transferring are done by providing a unique `tokenId`.\n This implementation is agnostic to the way tokens are created.\n A supply mechanism has to be added in a derived contract using {_mint}\n For a generic mechanism, see {LSP7Mintable}."},"fullyImplemented":true,"id":2384,"internalFunctionIDs":{"3760":1},"linearizedBaseContracts":[2384,805,3737,1963,1669,1731,35,270,505,3761,3968,402],"name":"LSP8IdentifiableDigitalAsset","nameLocation":"1788:28:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":2180,"nodeType":"Block","src":"3199:142:24","statements":[{"expression":{"arguments":[{"id":2173,"name":"_LSP8_TOKENID_FORMAT_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"3256:24:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":2176,"name":"lsp8TokenIdFormat_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3305:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2174,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3294:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3298:6:24","memberName":"encode","nodeType":"MemberAccess","src":"3294:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3294:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2170,"name":"LSP4DigitalAssetMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"3209:24:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP4DigitalAssetMetadata_$1669_$","typeString":"type(contract LSP4DigitalAssetMetadata)"}},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3234:8:24","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":1668,"src":"3209:33:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3209:125:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2179,"nodeType":"ExpressionStatement","src":"3209:125:24"}]},"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"1914:1039:24","text":" @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\n with tokenId format `lsp8TokenIdFormat_`.\n @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\n This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\n @param name_ The name of the token\n @param symbol_ The symbol of the token\n @param newOwner_ The owner of the the token-Metadata\n @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\n @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\n @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\n and cannot be changed in the ERC725Y storage after the contract has been deployed."},"id":2181,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2164,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"3156:5:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2165,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3163:7:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2166,"name":"newOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"3172:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2167,"name":"lsp4TokenType_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"3183:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2168,"kind":"baseConstructorSpecifier","modifierName":{"id":2163,"name":"LSP4DigitalAssetMetadata","nameLocations":["3131:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":1669,"src":"3131:24:24"},"nodeType":"ModifierInvocation","src":"3131:67:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"name_","nameLocation":"2993:5:24","nodeType":"VariableDeclaration","scope":2181,"src":"2979:19:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2152,"name":"string","nodeType":"ElementaryTypeName","src":"2979:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"symbol_","nameLocation":"3022:7:24","nodeType":"VariableDeclaration","scope":2181,"src":"3008:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2154,"name":"string","nodeType":"ElementaryTypeName","src":"3008:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"newOwner_","nameLocation":"3047:9:24","nodeType":"VariableDeclaration","scope":2181,"src":"3039:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2156,"name":"address","nodeType":"ElementaryTypeName","src":"3039:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"lsp4TokenType_","nameLocation":"3074:14:24","nodeType":"VariableDeclaration","scope":2181,"src":"3066:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"3066:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"lsp8TokenIdFormat_","nameLocation":"3106:18:24","nodeType":"VariableDeclaration","scope":2181,"src":"3098:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2969:161:24"},"returnParameters":{"id":2169,"nodeType":"ParameterList","parameters":[],"src":"3199:0:24"},"scope":2384,"src":"2958:383:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2204,"nodeType":"Block","src":"5174:157:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2189,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5188:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5192:4:24","memberName":"data","nodeType":"MemberAccess","src":"5188:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5197:6:24","memberName":"length","nodeType":"MemberAccess","src":"5188:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5206:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5188:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2199,"nodeType":"IfStatement","src":"5184:90:24","trueBody":{"id":2198,"nodeType":"Block","src":"5209:65:24","statements":[{"errorCall":{"arguments":[{"id":2195,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"5254:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2194,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"5230:23:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5230:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2197,"nodeType":"RevertStatement","src":"5223:40:24"}]}},{"expression":{"arguments":[{"id":2201,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"5315:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2200,"name":"_fallbackLSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[2278],"referencedDeclaration":2278,"src":"5290:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes calldata) returns (bytes memory)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5290:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2188,"id":2203,"nodeType":"Return","src":"5283:41:24"}]},"documentation":{"id":2182,"nodeType":"StructuredDocumentation","src":"3373:1647:24","text":" @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\n @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\n forwarding the function call to the extension address mapped to the function being called.\n This function is executed when:\n    - Sending data of length less than 4 bytes to the contract.\n    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\n    - Receiving native tokens\n 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\n   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\n   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\n 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert."},"id":2205,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2184,"mutability":"mutable","name":"callData","nameLocation":"5111:8:24","nodeType":"VariableDeclaration","scope":2205,"src":"5096:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2183,"name":"bytes","nodeType":"ElementaryTypeName","src":"5096:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5086:39:24"},"returnParameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2205,"src":"5160:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2186,"name":"bytes","nodeType":"ElementaryTypeName","src":"5160:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5159:14:24"},"scope":2384,"src":"5078:253:24","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":2222,"nodeType":"Block","src":"5532:205:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2209,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5593:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5597:5:24","memberName":"value","nodeType":"MemberAccess","src":"5593:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5606:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5593:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2218,"nodeType":"IfStatement","src":"5589:90:24","trueBody":{"id":2217,"nodeType":"Block","src":"5609:70:24","statements":[{"errorCall":{"arguments":[{"hexValue":"00000000","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5654:13:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c","typeString":"literal_string hex\"00000000\""},"value":"\u0000\u0000\u0000\u0000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c","typeString":"literal_string hex\"00000000\""}],"id":2213,"name":"InvalidFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"5630:23:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5630:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2216,"nodeType":"RevertStatement","src":"5623:45:24"}]}},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2219,"name":"LSP8TokenContractCannotHoldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"5696:32:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5696:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2221,"nodeType":"RevertStatement","src":"5689:41:24"}]},"documentation":{"id":2206,"nodeType":"StructuredDocumentation","src":"5337:155:24","text":" @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\n @notice LSP8 contract cannot receive native tokens."},"id":2223,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[],"src":"5504:2:24"},"returnParameters":{"id":2208,"nodeType":"ParameterList","parameters":[],"src":"5532:0:24"},"scope":2384,"src":"5497:240:24","stateMutability":"payable","virtual":true,"visibility":"external"},{"baseFunctions":[804],"body":{"id":2277,"nodeType":"Block","src":"6854:909:24","statements":[{"assignments":[2233,null],"declarations":[{"constant":false,"id":2233,"mutability":"mutable","name":"extension","nameLocation":"6916:9:24","nodeType":"VariableDeclaration","scope":2277,"src":"6908:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"6908:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":2238,"initialValue":{"arguments":[{"expression":{"id":2235,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6960:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6964:3:24","memberName":"sig","nodeType":"MemberAccess","src":"6960:7:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":2234,"name":"_getExtensionAndForwardValue","nodeType":"Identifier","overloadedDeclarations":[2329],"referencedDeclaration":2329,"src":"6931:28:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_address_$_t_bool_$","typeString":"function (bytes4) view returns (address,bool)"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6931:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"nodeType":"VariableDeclarationStatement","src":"6907:61:24"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"7028:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7049:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7041:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2240,"name":"address","nodeType":"ElementaryTypeName","src":"7041:7:24","typeDescriptions":{}}},"id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7041:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7028:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2250,"nodeType":"IfStatement","src":"7024:92:24","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2246,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7108:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7112:3:24","memberName":"sig","nodeType":"MemberAccess","src":"7108:7:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":2245,"name":"NoExtensionFoundForFunctionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"7072:35:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes4_$returns$__$","typeString":"function (bytes4) pure"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2249,"nodeType":"RevertStatement","src":"7065:51:24"}},{"assignments":[2252,2254],"declarations":[{"constant":false,"id":2252,"mutability":"mutable","name":"success","nameLocation":"7133:7:24","nodeType":"VariableDeclaration","scope":2277,"src":"7128:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2251,"name":"bool","nodeType":"ElementaryTypeName","src":"7128:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2254,"mutability":"mutable","name":"result","nameLocation":"7155:6:24","nodeType":"VariableDeclaration","scope":2277,"src":"7142:19:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2253,"name":"bytes","nodeType":"ElementaryTypeName","src":"7142:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2269,"initialValue":{"arguments":[{"arguments":[{"id":2262,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"7228:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"id":2263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7238:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7242:6:24","memberName":"sender","nodeType":"MemberAccess","src":"7238:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2265,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7250:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7254:5:24","memberName":"value","nodeType":"MemberAccess","src":"7250:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2260,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7211:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7215:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"7211:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7211:49:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2255,"name":"extension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"7165:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7175:4:24","memberName":"call","nodeType":"MemberAccess","src":"7165:14:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2257,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7187:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7191:5:24","memberName":"value","nodeType":"MemberAccess","src":"7187:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"7165:32:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7165:105:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7127:143:24"},{"condition":{"id":2270,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"7285:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2275,"nodeType":"Block","src":"7338:419:24","statements":[{"AST":{"nodeType":"YulBlock","src":"7622:125:24","statements":[{"nodeType":"YulVariableDeclaration","src":"7640:36:24","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"7669:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7663:5:24"},"nodeType":"YulFunctionCall","src":"7663:13:24"},"variables":[{"name":"resultdata_size","nodeType":"YulTypedName","src":"7644:15:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"7704:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"7712:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7700:3:24"},"nodeType":"YulFunctionCall","src":"7700:15:24"},{"name":"resultdata_size","nodeType":"YulIdentifier","src":"7717:15:24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7693:6:24"},"nodeType":"YulFunctionCall","src":"7693:40:24"},"nodeType":"YulExpressionStatement","src":"7693:40:24"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2254,"isOffset":false,"isSlot":false,"src":"7669:6:24","valueSize":1},{"declaration":2254,"isOffset":false,"isSlot":false,"src":"7704:6:24","valueSize":1}],"id":2274,"nodeType":"InlineAssembly","src":"7613:134:24"}]},"id":2276,"nodeType":"IfStatement","src":"7281:476:24","trueBody":{"id":2273,"nodeType":"Block","src":"7294:38:24","statements":[{"expression":{"id":2271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"7315:6:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2231,"id":2272,"nodeType":"Return","src":"7308:13:24"}]}}]},"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"5743:984:24","text":" @dev Forwards the call with the received value to an extension mapped to a function selector.\n Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n called on the account. If there is no extension, the address(0) will be returned.\n We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\n Reverts if there is no extension for the function being called.\n If there is an extension for the function selector being called, it calls the extension with the\n CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\n 32 bytes of the {msg.value}\n @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\n will be forwarded to the extension address mapped to the selector from `msg.sig`."},"id":2278,"implemented":true,"kind":"function","modifiers":[],"name":"_fallbackLSP17Extendable","nameLocation":"6741:24:24","nodeType":"FunctionDefinition","overrides":{"id":2228,"nodeType":"OverrideSpecifier","overrides":[],"src":"6822:8:24"},"parameters":{"id":2227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"mutability":"mutable","name":"callData","nameLocation":"6790:8:24","nodeType":"VariableDeclaration","scope":2278,"src":"6775:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2225,"name":"bytes","nodeType":"ElementaryTypeName","src":"6775:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6765:39:24"},"returnParameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2278,"src":"6840:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2229,"name":"bytes","nodeType":"ElementaryTypeName","src":"6840:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6839:14:24"},"scope":2384,"src":"6732:1031:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[745],"body":{"id":2328,"nodeType":"Block","src":"8164:619:24","statements":[{"assignments":[2290],"declarations":[{"constant":false,"id":2290,"mutability":"mutable","name":"mappedExtensionDataKey","nameLocation":"8262:22:24","nodeType":"VariableDeclaration","scope":2328,"src":"8254:30:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8254:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2296,"initialValue":{"arguments":[{"id":2293,"name":"_LSP17_EXTENSION_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"8329:23:24","typeDescriptions":{"typeIdentifier":"t_bytes10","typeString":"bytes10"}},{"id":2294,"name":"functionSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"8366:16:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes10","typeString":"bytes10"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2291,"name":"LSP2Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"8287:9:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP2Utils_$1542_$","typeString":"type(library LSP2Utils)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8297:18:24","memberName":"generateMappingKey","nodeType":"MemberAccess","referencedDeclaration":1032,"src":"8287:28:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes10_$_t_bytes20_$returns$_t_bytes32_$","typeString":"function (bytes10,bytes20) pure returns (bytes32)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8287:105:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8254:138:24"},{"assignments":[2298],"declarations":[{"constant":false,"id":2298,"mutability":"mutable","name":"extensionAddress","nameLocation":"8494:16:24","nodeType":"VariableDeclaration","scope":2328,"src":"8481:29:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2297,"name":"bytes","nodeType":"ElementaryTypeName","src":"8481:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2303,"initialValue":{"arguments":[{"id":2301,"name":"mappedExtensionDataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"8547:22:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2299,"name":"ERC725YCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"8513:11:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC725YCore_$270_$","typeString":"type(contract ERC725YCore)"}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8525:8:24","memberName":"_getData","nodeType":"MemberAccess","referencedDeclaration":228,"src":"8513:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8513:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8481:98:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2304,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"8593:16:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8610:6:24","memberName":"length","nodeType":"MemberAccess","src":"8593:23:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3230","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8620:2:24","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"8593:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2308,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"8626:16:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8643:6:24","memberName":"length","nodeType":"MemberAccess","src":"8626:23:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8653:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8626:28:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8593:61:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2317,"nodeType":"IfStatement","src":"8589:127:24","trueBody":{"errorCall":{"arguments":[{"id":2314,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"8699:16:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2313,"name":"InvalidExtensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"8675:23:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8675:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"RevertStatement","src":"8668:48:24"}},{"expression":{"components":[{"arguments":[{"arguments":[{"id":2322,"name":"extensionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"8751:16:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8743:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":2320,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8743:7:24","typeDescriptions":{}}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8743:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":2319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8735:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2318,"name":"address","nodeType":"ElementaryTypeName","src":"8735:7:24","typeDescriptions":{}}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8735:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8771:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"id":2326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8734:42:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$","typeString":"tuple(address,bool)"}},"functionReturnParameters":2288,"id":2327,"nodeType":"Return","src":"8727:49:24"}]},"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"7769:258:24","text":" @dev Returns the extension address stored under the following data key:\n - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\n - If no extension is stored, returns the address(0)."},"id":2329,"implemented":true,"kind":"function","modifiers":[],"name":"_getExtensionAndForwardValue","nameLocation":"8041:28:24","nodeType":"FunctionDefinition","overrides":{"id":2283,"nodeType":"OverrideSpecifier","overrides":[],"src":"8131:8:24"},"parameters":{"id":2282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"functionSelector","nameLocation":"8086:16:24","nodeType":"VariableDeclaration","scope":2329,"src":"8079:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2280,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8079:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8069:39:24"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"8149:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2284,"name":"address","nodeType":"ElementaryTypeName","src":"8149:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"8158:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2286,"name":"bool","nodeType":"ElementaryTypeName","src":"8158:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8148:15:24"},"scope":2384,"src":"8032:751:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[269,703,3967],"body":{"id":2355,"nodeType":"Block","src":"9020:200:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2341,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"9049:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2342,"name":"_INTERFACEID_LSP8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"9064:17:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"9049:32:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2346,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"9121:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2344,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"9097:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_LSP8IdentifiableDigitalAsset_$2384_$","typeString":"type(contract super LSP8IdentifiableDigitalAsset)"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9103:17:24","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":703,"src":"9097:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9097:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9049:84:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2351,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"9201:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2349,"name":"LSP17Extendable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"9149:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP17Extendable_$805_$","typeString":"type(contract LSP17Extendable)"}},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9165:35:24","memberName":"_supportsInterfaceInERC165Extension","nodeType":"MemberAccess","referencedDeclaration":735,"src":"9149:51:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9149:64:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9049:164:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2340,"id":2354,"nodeType":"Return","src":"9030:183:24"}]},"documentation":{"id":2330,"nodeType":"StructuredDocumentation","src":"8789:38:24","text":" @inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":2356,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"8841:17:24","nodeType":"FunctionDefinition","overrides":{"id":2337,"nodeType":"OverrideSpecifier","overrides":[{"id":2334,"name":"IERC165","nameLocations":["8954:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":3968,"src":"8954:7:24"},{"id":2335,"name":"ERC725YCore","nameLocations":["8963:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":270,"src":"8963:11:24"},{"id":2336,"name":"LSP17Extendable","nameLocations":["8976:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":805,"src":"8976:15:24"}],"src":"8945:47:24"},"parameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"interfaceId","nameLocation":"8875:11:24","nodeType":"VariableDeclaration","scope":2356,"src":"8868:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2331,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8868:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8858:34:24"},"returnParameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2356,"src":"9010:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2338,"name":"bool","nodeType":"ElementaryTypeName","src":"9010:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9009:6:24"},"scope":2384,"src":"8832:388:24","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1668,1730],"body":{"id":2382,"nodeType":"Block","src":"9626:182:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"9640:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2368,"name":"_LSP8_TOKENID_FORMAT_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"9651:24:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9640:35:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2374,"nodeType":"IfStatement","src":"9636:103:24","trueBody":{"id":2373,"nodeType":"Block","src":"9677:62:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2370,"name":"LSP8TokenIdFormatNotEditable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"9698:28:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2372,"nodeType":"RevertStatement","src":"9691:37:24"}]}},{"expression":{"arguments":[{"id":2378,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"9782:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2379,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"9791:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2375,"name":"LSP4DigitalAssetMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"9748:24:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP4DigitalAssetMetadata_$1669_$","typeString":"type(contract LSP4DigitalAssetMetadata)"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9773:8:24","memberName":"_setData","nodeType":"MemberAccess","referencedDeclaration":1668,"src":"9748:33:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9748:53:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2381,"nodeType":"ExpressionStatement","src":"9748:53:24"}]},"documentation":{"id":2357,"nodeType":"StructuredDocumentation","src":"9226:204:24","text":" @inheritdoc LSP4DigitalAssetMetadata\n @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\n once the identifiable digital asset contract has been deployed."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"_setData","nameLocation":"9444:8:24","nodeType":"FunctionDefinition","overrides":{"id":2365,"nodeType":"OverrideSpecifier","overrides":[{"id":2363,"name":"LSP4DigitalAssetMetadata","nameLocations":["9566:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":1669,"src":"9566:24:24"},{"id":2364,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["9592:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"9592:28:24"}],"src":"9557:64:24"},"parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2359,"mutability":"mutable","name":"dataKey","nameLocation":"9470:7:24","nodeType":"VariableDeclaration","scope":2383,"src":"9462:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9462:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"dataValue","nameLocation":"9500:9:24","nodeType":"VariableDeclaration","scope":2383,"src":"9487:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2360,"name":"bytes","nodeType":"ElementaryTypeName","src":"9487:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9452:63:24"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[],"src":"9626:0:24"},"scope":2384,"src":"9435:373:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2385,"src":"1770:8040:24","usedErrors":[407,412,448,451,454,661,666,671,1736,1739,1742,2023,2032,2039,2046,2049,2052,2059,2067,2072,2077,2080,2083,2086,2089,2092,2097,2106,2115],"usedEvents":[307,468,1768,1779,1792,1801]}],"src":"39:9772:24"},"id":24},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol":{"ast":{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol","exportedSymbols":{"ERC165Checker":[3956],"EnumerableSet":[4581],"ILSP1":[544],"ILSP8IdentifiableDigitalAsset":[1963],"LSP1Utils":[643],"LSP4DigitalAssetMetadataCore":[1731],"LSP8BatchCallFailed":[2097],"LSP8CannotSendToAddressZero":[2052],"LSP8CannotUseAddressZeroAsOperator":[2049],"LSP8IdentifiableDigitalAssetCore":[3737],"LSP8InvalidTransferBatch":[2067],"LSP8NonExistentTokenId":[2023],"LSP8NonExistingOperator":[2059],"LSP8NotTokenOperator":[2039],"LSP8NotTokenOwner":[2032],"LSP8NotifyTokenReceiverContractMissingLSP1Interface":[2072],"LSP8NotifyTokenReceiverIsEOA":[2077],"LSP8OperatorAlreadyAuthorized":[2046],"LSP8RevokeOperatorNotAuthorized":[2115],"LSP8TokenIdAlreadyMinted":[2064],"LSP8TokenIdsDataEmptyArray":[2092],"LSP8TokenIdsDataLengthMismatch":[2089],"LSP8TokenOwnerCannotBeOperator":[2080],"LSP8TokenOwnerChanged":[2106],"_INTERFACEID_LSP1":[549],"_TYPEID_LSP8_TOKENOPERATOR":[1986],"_TYPEID_LSP8_TOKENSRECIPIENT":[1983],"_TYPEID_LSP8_TOKENSSENDER":[1980]},"id":3738,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":2386,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"39:24:25"},{"absolutePath":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","file":"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol","id":2388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":545,"src":"79:113:25","symbolAliases":[{"foreign":{"id":2387,"name":"ILSP1UniversalReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"92:22:25","typeDescriptions":{}},"local":"ILSP1","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol","file":"./ILSP8IdentifiableDigitalAsset.sol","id":2390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":1964,"src":"193:88:25","symbolAliases":[{"foreign":{"id":2389,"name":"ILSP8IdentifiableDigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"206:29:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","file":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol","id":2392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":1732,"src":"295:116:25","symbolAliases":[{"foreign":{"id":2391,"name":"LSP4DigitalAssetMetadataCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"308:28:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":2394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":4582,"src":"426:92:25","symbolAliases":[{"foreign":{"id":2393,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4581,"src":"439:13:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":2396,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":3957,"src":"519:98:25","symbolAliases":[{"foreign":{"id":2395,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"532:13:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","file":"@lukso/lsp1-contracts/contracts/LSP1Utils.sol","id":2398,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":644,"src":"618:72:25","symbolAliases":[{"foreign":{"id":2397,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"626:9:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Errors.sol","file":"./LSP8Errors.sol","id":2416,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":2116,"src":"702:592:25","symbolAliases":[{"foreign":{"id":2399,"name":"LSP8NonExistentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"715:22:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2400,"name":"LSP8NotTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"743:17:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2401,"name":"LSP8CannotUseAddressZeroAsOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"766:34:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2402,"name":"LSP8TokenOwnerCannotBeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"806:30:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2403,"name":"LSP8OperatorAlreadyAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"842:29:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2404,"name":"LSP8NotTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"877:20:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2405,"name":"LSP8InvalidTransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"903:24:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2406,"name":"LSP8NonExistingOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"933:23:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2407,"name":"LSP8CannotSendToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"962:27:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2408,"name":"LSP8TokenIdAlreadyMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"995:24:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2409,"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"1025:51:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2410,"name":"LSP8NotifyTokenReceiverIsEOA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"1082:28:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2411,"name":"LSP8TokenIdsDataLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"1116:30:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2412,"name":"LSP8TokenIdsDataEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"1152:26:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2413,"name":"LSP8BatchCallFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"1184:19:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2414,"name":"LSP8TokenOwnerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"1209:21:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2415,"name":"LSP8RevokeOperatorNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1236:31:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","file":"@lukso/lsp1-contracts/contracts/LSP1Constants.sol","id":2418,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":559,"src":"1309:90:25","symbolAliases":[{"foreign":{"id":2417,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"1322:17:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp8-contracts/contracts/LSP8Constants.sol","file":"./LSP8Constants.sol","id":2422,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3738,"sourceUnit":2017,"src":"1400:134:25","symbolAliases":[{"foreign":{"id":2419,"name":"_TYPEID_LSP8_TOKENOPERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"1413:26:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2420,"name":"_TYPEID_LSP8_TOKENSSENDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"1445:25:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2421,"name":"_TYPEID_LSP8_TOKENSRECIPIENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"1476:28:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2424,"name":"LSP4DigitalAssetMetadataCore","nameLocations":["1735:28:25"],"nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"1735:28:25"},"id":2425,"nodeType":"InheritanceSpecifier","src":"1735:28:25"},{"baseName":{"id":2426,"name":"ILSP8IdentifiableDigitalAsset","nameLocations":["1769:29:25"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"1769:29:25"},"id":2427,"nodeType":"InheritanceSpecifier","src":"1769:29:25"}],"canonicalName":"LSP8IdentifiableDigitalAssetCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"1536:140:25","text":" @title LSP8IdentifiableDigitalAsset contract\n @author Matthew Stevens\n @dev Core Implementation of a LSP8 compliant contract."},"fullyImplemented":true,"id":3737,"linearizedBaseContracts":[3737,1963,1731,270,505,3761,3968,402],"name":"LSP8IdentifiableDigitalAssetCore","nameLocation":"1695:32:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2431,"libraryName":{"id":2428,"name":"EnumerableSet","nameLocations":["1811:13:25"],"nodeType":"IdentifierPath","referencedDeclaration":4581,"src":"1811:13:25"},"nodeType":"UsingForDirective","src":"1805:49:25","typeName":{"id":2430,"nodeType":"UserDefinedTypeName","pathNode":{"id":2429,"name":"EnumerableSet.AddressSet","nameLocations":["1829:13:25","1843:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"1829:24:25"},"referencedDeclaration":4294,"src":"1829:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"global":false,"id":2435,"libraryName":{"id":2432,"name":"EnumerableSet","nameLocations":["1865:13:25"],"nodeType":"IdentifierPath","referencedDeclaration":4581,"src":"1865:13:25"},"nodeType":"UsingForDirective","src":"1859:49:25","typeName":{"id":2434,"nodeType":"UserDefinedTypeName","pathNode":{"id":2433,"name":"EnumerableSet.Bytes32Set","nameLocations":["1883:13:25","1897:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"1883:24:25"},"referencedDeclaration":4173,"src":"1883:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}}},{"constant":false,"id":2437,"mutability":"mutable","name":"_existingTokens","nameLocation":"1951:15:25","nodeType":"VariableDeclaration","scope":3737,"src":"1934:32:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1934:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"_tokenOwners","nameLocation":"2056:12:25","nodeType":"VariableDeclaration","scope":3737,"src":"2019:49:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"typeName":{"id":2440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2027:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2019:27:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"_ownedTokens","nameLocation":"2175:12:25","nodeType":"VariableDeclaration","scope":3737,"src":"2121:66:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set)"},"typeName":{"id":2445,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2442,"name":"address","nodeType":"ElementaryTypeName","src":"2129:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2121:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2444,"nodeType":"UserDefinedTypeName","pathNode":{"id":2443,"name":"EnumerableSet.Bytes32Set","nameLocations":["2140:13:25","2154:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"2140:24:25"},"referencedDeclaration":4173,"src":"2140:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}}},"visibility":"internal"},{"constant":false,"id":2451,"mutability":"mutable","name":"_operators","nameLocation":"2313:10:25","nodeType":"VariableDeclaration","scope":3737,"src":"2259:64:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"typeName":{"id":2450,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2267:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2259:44:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2449,"nodeType":"UserDefinedTypeName","pathNode":{"id":2448,"name":"EnumerableSet.AddressSet","nameLocations":["2278:13:25","2292:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"2278:24:25"},"referencedDeclaration":4294,"src":"2278:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"internal"},{"constant":false,"id":2457,"mutability":"mutable","name":"_tokenIdData","nameLocation":"2443:12:25","nodeType":"VariableDeclaration","scope":3737,"src":"2388:67:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => bytes))"},"typeName":{"id":2456,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2396:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2388:45:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => bytes))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2455,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2415:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2407:25:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2454,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}},"visibility":"internal"},{"baseFunctions":[1807],"body":{"id":2466,"nodeType":"Block","src":"2623:39:25","statements":[{"expression":{"id":2464,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"2640:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2463,"id":2465,"nodeType":"Return","src":"2633:22:25"}]},"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"2488:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"18160ddd","id":2467,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2562:11:25","nodeType":"FunctionDefinition","overrides":{"id":2460,"nodeType":"OverrideSpecifier","overrides":[],"src":"2596:8:25"},"parameters":{"id":2459,"nodeType":"ParameterList","parameters":[],"src":"2573:2:25"},"returnParameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2467,"src":"2614:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"2614:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2613:9:25"},"scope":3737,"src":"2553:109:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1815],"body":{"id":2482,"nodeType":"Block","src":"2865:57:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2476,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"2882:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":2478,"indexExpression":{"id":2477,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"2895:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2882:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":2479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2907:6:25","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4242,"src":"2882:31:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$4173_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2475,"id":2481,"nodeType":"Return","src":"2875:40:25"}]},"documentation":{"id":2468,"nodeType":"StructuredDocumentation","src":"2700:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"70a08231","id":2483,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2774:9:25","nodeType":"FunctionDefinition","overrides":{"id":2472,"nodeType":"OverrideSpecifier","overrides":[],"src":"2838:8:25"},"parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"tokenOwner","nameLocation":"2801:10:25","nodeType":"VariableDeclaration","scope":2483,"src":"2793:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"2793:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2783:34:25"},"returnParameters":{"id":2475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2483,"src":"2856:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"2856:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2855:9:25"},"scope":3737,"src":"2765:157:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1823],"body":{"id":2512,"nodeType":"Block","src":"3093:190:25","statements":[{"assignments":[2493],"declarations":[{"constant":false,"id":2493,"mutability":"mutable","name":"tokenOwner","nameLocation":"3111:10:25","nodeType":"VariableDeclaration","scope":2512,"src":"3103:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2492,"name":"address","nodeType":"ElementaryTypeName","src":"3103:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2497,"initialValue":{"baseExpression":{"id":2494,"name":"_tokenOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3124:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":2496,"indexExpression":{"id":2495,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"3137:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3124:21:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3103:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2498,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"3160:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3182:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3174:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2499,"name":"address","nodeType":"ElementaryTypeName","src":"3174:7:25","typeDescriptions":{}}},"id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3174:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3160:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2509,"nodeType":"IfStatement","src":"3156:93:25","trueBody":{"id":2508,"nodeType":"Block","src":"3186:63:25","statements":[{"errorCall":{"arguments":[{"id":2505,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"3230:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2504,"name":"LSP8NonExistentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"3207:22:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3207:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2507,"nodeType":"RevertStatement","src":"3200:38:25"}]}},{"expression":{"id":2510,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"3266:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2491,"id":2511,"nodeType":"Return","src":"3259:17:25"}]},"documentation":{"id":2484,"nodeType":"StructuredDocumentation","src":"2928:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"217b2270","id":2513,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOwnerOf","nameLocation":"3002:12:25","nodeType":"FunctionDefinition","overrides":{"id":2488,"nodeType":"OverrideSpecifier","overrides":[],"src":"3066:8:25"},"parameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"tokenId","nameLocation":"3032:7:25","nodeType":"VariableDeclaration","scope":2513,"src":"3024:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3024:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3014:31:25"},"returnParameters":{"id":2491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2513,"src":"3084:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2489,"name":"address","nodeType":"ElementaryTypeName","src":"3084:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3083:9:25"},"scope":3737,"src":"2993:290:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1832],"body":{"id":2529,"nodeType":"Block","src":"3464:57:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2523,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"3481:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":2525,"indexExpression":{"id":2524,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"3494:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3481:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":2526,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3506:6:25","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":4290,"src":"3481:31:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$4173_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer) view returns (bytes32[] memory)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3481:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":2522,"id":2528,"nodeType":"Return","src":"3474:40:25"}]},"documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"3289:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"a3b261f2","id":2530,"implemented":true,"kind":"function","modifiers":[],"name":"tokenIdsOf","nameLocation":"3363:10:25","nodeType":"FunctionDefinition","overrides":{"id":2518,"nodeType":"OverrideSpecifier","overrides":[],"src":"3428:8:25"},"parameters":{"id":2517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2516,"mutability":"mutable","name":"tokenOwner","nameLocation":"3391:10:25","nodeType":"VariableDeclaration","scope":2530,"src":"3383:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2515,"name":"address","nodeType":"ElementaryTypeName","src":"3383:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3373:34:25"},"returnParameters":{"id":2522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2530,"src":"3446:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2520,"nodeType":"ArrayTypeName","src":"3446:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3445:18:25"},"scope":3737,"src":"3354:167:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1842],"body":{"id":2546,"nodeType":"Block","src":"3780:60:25","statements":[{"expression":{"arguments":[{"id":2542,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"3816:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2543,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3825:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2541,"name":"_getDataForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"3797:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes32) view returns (bytes memory)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3797:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2540,"id":2545,"nodeType":"Return","src":"3790:43:25"}]},"documentation":{"id":2531,"nodeType":"StructuredDocumentation","src":"3570:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"16e023b3","id":2547,"implemented":true,"kind":"function","modifiers":[],"name":"getDataForTokenId","nameLocation":"3644:17:25","nodeType":"FunctionDefinition","overrides":{"id":2537,"nodeType":"OverrideSpecifier","overrides":[],"src":"3738:8:25"},"parameters":{"id":2536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"tokenId","nameLocation":"3679:7:25","nodeType":"VariableDeclaration","scope":2547,"src":"3671:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3671:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"dataKey","nameLocation":"3704:7:25","nodeType":"VariableDeclaration","scope":2547,"src":"3696:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2534,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3696:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:56:25"},"returnParameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2539,"mutability":"mutable","name":"dataValue","nameLocation":"3769:9:25","nodeType":"VariableDeclaration","scope":2547,"src":"3756:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2538,"name":"bytes","nodeType":"ElementaryTypeName","src":"3756:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3755:24:25"},"scope":3737,"src":"3635:205:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1855],"body":{"id":2608,"nodeType":"Block","src":"4085:463:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2561,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"4099:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4108:6:25","memberName":"length","nodeType":"MemberAccess","src":"4099:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2563,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4118:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4127:6:25","memberName":"length","nodeType":"MemberAccess","src":"4118:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4099:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2570,"nodeType":"IfStatement","src":"4095:104:25","trueBody":{"id":2569,"nodeType":"Block","src":"4135:64:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2566,"name":"LSP8TokenIdsDataLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"4156:30:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4156:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2568,"nodeType":"RevertStatement","src":"4149:39:25"}]}},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2571,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"4209:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2575,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"4234:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4243:6:25","memberName":"length","nodeType":"MemberAccess","src":"4234:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4222:11:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":2572,"name":"bytes","nodeType":"ElementaryTypeName","src":"4226:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2573,"nodeType":"ArrayTypeName","src":"4226:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4222:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"4209:41:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2579,"nodeType":"ExpressionStatement","src":"4209:41:25"},{"body":{"id":2604,"nodeType":"Block","src":"4300:214:25","statements":[{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2587,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"4314:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2589,"indexExpression":{"id":2588,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"4325:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4314:13:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":2591,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"4349:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2593,"indexExpression":{"id":2592,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"4358:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4349:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2594,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4362:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2596,"indexExpression":{"id":2595,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"4371:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4362:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2590,"name":"_getDataForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"4330:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes32) view returns (bytes memory)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4314:60:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2599,"nodeType":"ExpressionStatement","src":"4314:60:25"},{"id":2603,"nodeType":"UncheckedBlock","src":"4458:46:25","statements":[{"expression":{"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4486:3:25","subExpression":{"id":2600,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"4488:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2602,"nodeType":"ExpressionStatement","src":"4486:3:25"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"4277:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2584,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"4281:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4290:6:25","memberName":"length","nodeType":"MemberAccess","src":"4281:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4277:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2605,"initializationExpression":{"assignments":[2581],"declarations":[{"constant":false,"id":2581,"mutability":"mutable","name":"i","nameLocation":"4274:1:25","nodeType":"VariableDeclaration","scope":2605,"src":"4266:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2580,"name":"uint256","nodeType":"ElementaryTypeName","src":"4266:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2582,"nodeType":"VariableDeclarationStatement","src":"4266:9:25"},"nodeType":"ForStatement","src":"4261:253:25"},{"expression":{"id":2606,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"4531:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":2560,"id":2607,"nodeType":"Return","src":"4524:17:25"}]},"documentation":{"id":2548,"nodeType":"StructuredDocumentation","src":"3846:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"1d26fce6","id":2609,"implemented":true,"kind":"function","modifiers":[],"name":"getDataBatchForTokenIds","nameLocation":"3920:23:25","nodeType":"FunctionDefinition","overrides":{"id":2556,"nodeType":"OverrideSpecifier","overrides":[],"src":"4040:8:25"},"parameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"tokenIds","nameLocation":"3970:8:25","nodeType":"VariableDeclaration","scope":2609,"src":"3953:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3953:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2550,"nodeType":"ArrayTypeName","src":"3953:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"dataKeys","nameLocation":"4005:8:25","nodeType":"VariableDeclaration","scope":2609,"src":"3988:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3988:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2553,"nodeType":"ArrayTypeName","src":"3988:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3943:76:25"},"returnParameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"dataValues","nameLocation":"4073:10:25","nodeType":"VariableDeclaration","scope":2609,"src":"4058:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2557,"name":"bytes","nodeType":"ElementaryTypeName","src":"4058:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2558,"nodeType":"ArrayTypeName","src":"4058:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"4057:27:25"},"scope":3737,"src":"3911:637:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1865],"body":{"id":2628,"nodeType":"Block","src":"4768:64:25","statements":[{"expression":{"arguments":[{"id":2623,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2612,"src":"4797:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2624,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"4806:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2625,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"4815:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2622,"name":"_setDataForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"4778:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes32,bytes memory)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4778:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2627,"nodeType":"ExpressionStatement","src":"4778:47:25"}]},"documentation":{"id":2610,"nodeType":"StructuredDocumentation","src":"4554:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"d6c1407c","id":2629,"implemented":true,"kind":"function","modifiers":[{"id":2620,"kind":"modifierInvocation","modifierName":{"id":2619,"name":"onlyOwner","nameLocations":["4758:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"4758:9:25"},"nodeType":"ModifierInvocation","src":"4758:9:25"}],"name":"setDataForTokenId","nameLocation":"4628:17:25","nodeType":"FunctionDefinition","overrides":{"id":2618,"nodeType":"OverrideSpecifier","overrides":[],"src":"4749:8:25"},"parameters":{"id":2617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2612,"mutability":"mutable","name":"tokenId","nameLocation":"4663:7:25","nodeType":"VariableDeclaration","scope":2629,"src":"4655:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2611,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2614,"mutability":"mutable","name":"dataKey","nameLocation":"4688:7:25","nodeType":"VariableDeclaration","scope":2629,"src":"4680:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2616,"mutability":"mutable","name":"dataValue","nameLocation":"4718:9:25","nodeType":"VariableDeclaration","scope":2629,"src":"4705:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2615,"name":"bytes","nodeType":"ElementaryTypeName","src":"4705:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4645:88:25"},"returnParameters":{"id":2621,"nodeType":"ParameterList","parameters":[],"src":"4768:0:25"},"scope":3737,"src":"4619:213:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1878],"body":{"id":2695,"nodeType":"Block","src":"5081:552:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2645,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"5108:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5117:6:25","memberName":"length","nodeType":"MemberAccess","src":"5108:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2647,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"5127:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5136:6:25","memberName":"length","nodeType":"MemberAccess","src":"5127:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5108:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2650,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"5158:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5167:6:25","memberName":"length","nodeType":"MemberAccess","src":"5158:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2652,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"5177:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5188:6:25","memberName":"length","nodeType":"MemberAccess","src":"5177:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5158:36:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5108:86:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2660,"nodeType":"IfStatement","src":"5091:178:25","trueBody":{"id":2659,"nodeType":"Block","src":"5205:64:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2656,"name":"LSP8TokenIdsDataLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"5226:30:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5226:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2658,"nodeType":"RevertStatement","src":"5219:39:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2661,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"5283:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5292:6:25","memberName":"length","nodeType":"MemberAccess","src":"5283:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5302:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5283:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2669,"nodeType":"IfStatement","src":"5279:86:25","trueBody":{"id":2668,"nodeType":"Block","src":"5305:60:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2665,"name":"LSP8TokenIdsDataEmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"5326:26:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5326:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2667,"nodeType":"RevertStatement","src":"5319:35:25"}]}},{"body":{"id":2693,"nodeType":"Block","src":"5414:213:25","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2678,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"5447:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2680,"indexExpression":{"id":2679,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5456:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5447:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2681,"name":"dataKeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"5460:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2683,"indexExpression":{"id":2682,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5469:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5460:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2684,"name":"dataValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"5473:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2686,"indexExpression":{"id":2685,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5484:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5473:13:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2677,"name":"_setDataForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"5428:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes32,bytes memory)"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5428:59:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2688,"nodeType":"ExpressionStatement","src":"5428:59:25"},{"id":2692,"nodeType":"UncheckedBlock","src":"5571:46:25","statements":[{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5599:3:25","subExpression":{"id":2689,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5601:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"5599:3:25"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5391:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2674,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"5395:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5404:6:25","memberName":"length","nodeType":"MemberAccess","src":"5395:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5391:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2694,"initializationExpression":{"assignments":[2671],"declarations":[{"constant":false,"id":2671,"mutability":"mutable","name":"i","nameLocation":"5388:1:25","nodeType":"VariableDeclaration","scope":2694,"src":"5380:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"5380:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2672,"nodeType":"VariableDeclarationStatement","src":"5380:9:25"},"nodeType":"ForStatement","src":"5375:252:25"}]},"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"4838:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"be9f0e6f","id":2696,"implemented":true,"kind":"function","modifiers":[{"id":2643,"kind":"modifierInvocation","modifierName":{"id":2642,"name":"onlyOwner","nameLocations":["5071:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":324,"src":"5071:9:25"},"nodeType":"ModifierInvocation","src":"5071:9:25"}],"name":"setDataBatchForTokenIds","nameLocation":"4912:23:25","nodeType":"FunctionDefinition","overrides":{"id":2641,"nodeType":"OverrideSpecifier","overrides":[],"src":"5062:8:25"},"parameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"tokenIds","nameLocation":"4962:8:25","nodeType":"VariableDeclaration","scope":2696,"src":"4945:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4945:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2632,"nodeType":"ArrayTypeName","src":"4945:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"dataKeys","nameLocation":"4997:8:25","nodeType":"VariableDeclaration","scope":2696,"src":"4980:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4980:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2635,"nodeType":"ArrayTypeName","src":"4980:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"dataValues","nameLocation":"5030:10:25","nodeType":"VariableDeclaration","scope":2696,"src":"5015:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2637,"name":"bytes","nodeType":"ElementaryTypeName","src":"5015:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2638,"nodeType":"ArrayTypeName","src":"5015:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"4935:111:25"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[],"src":"5081:0:25"},"scope":3737,"src":"4903:730:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1962],"body":{"id":2765,"nodeType":"Block","src":"5970:967:25","statements":[{"expression":{"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2707,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"5980:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2711,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"6002:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6007:6:25","memberName":"length","nodeType":"MemberAccess","src":"6002:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5990:11:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":2708,"name":"bytes","nodeType":"ElementaryTypeName","src":"5994:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2709,"nodeType":"ArrayTypeName","src":"5994:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5990:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"5980:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2715,"nodeType":"ExpressionStatement","src":"5980:34:25"},{"body":{"id":2763,"nodeType":"Block","src":"6059:872:25","statements":[{"assignments":[2724,2726],"declarations":[{"constant":false,"id":2724,"mutability":"mutable","name":"success","nameLocation":"6079:7:25","nodeType":"VariableDeclaration","scope":2763,"src":"6074:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2723,"name":"bool","nodeType":"ElementaryTypeName","src":"6074:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"result","nameLocation":"6101:6:25","nodeType":"VariableDeclaration","scope":2763,"src":"6088:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2725,"name":"bytes","nodeType":"ElementaryTypeName","src":"6088:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2736,"initialValue":{"arguments":[{"baseExpression":{"id":2732,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"6155:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2734,"indexExpression":{"id":2733,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6160:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6155:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":2729,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6119:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_LSP8IdentifiableDigitalAssetCore_$3737","typeString":"contract LSP8IdentifiableDigitalAssetCore"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LSP8IdentifiableDigitalAssetCore_$3737","typeString":"contract LSP8IdentifiableDigitalAssetCore"}],"id":2728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2727,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:25","typeDescriptions":{}}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6125:12:25","memberName":"delegatecall","nodeType":"MemberAccess","src":"6111:26:25","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:65:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6073:103:25"},{"condition":{"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6195:8:25","subExpression":{"id":2737,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"6196:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2752,"nodeType":"IfStatement","src":"6191:636:25","trueBody":{"id":2751,"nodeType":"Block","src":"6205:622:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2739,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"6297:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6304:6:25","memberName":"length","nodeType":"MemberAccess","src":"6297:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6314:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6297:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2749,"nodeType":"Block","src":"6730:83:25","statements":[{"errorCall":{"arguments":[{"id":2746,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6791:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2745,"name":"LSP8BatchCallFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6759:19:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["6780:9:25"],"names":["callIndex"],"nodeType":"FunctionCall","src":"6759:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2748,"nodeType":"RevertStatement","src":"6752:42:25"}]},"id":2750,"nodeType":"IfStatement","src":"6293:520:25","trueBody":{"id":2744,"nodeType":"Block","src":"6317:407:25","statements":[{"AST":{"nodeType":"YulBlock","src":"6557:149:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6583:36:25","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"6612:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6606:5:25"},"nodeType":"YulFunctionCall","src":"6606:13:25"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"6587:15:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6655:2:25","type":"","value":"32"},{"name":"result","nodeType":"YulIdentifier","src":"6659:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6651:3:25"},"nodeType":"YulFunctionCall","src":"6651:15:25"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"6668:15:25"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6644:6:25"},"nodeType":"YulFunctionCall","src":"6644:40:25"},"nodeType":"YulExpressionStatement","src":"6644:40:25"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2726,"isOffset":false,"isSlot":false,"src":"6612:6:25","valueSize":1},{"declaration":2726,"isOffset":false,"isSlot":false,"src":"6659:6:25","valueSize":1}],"id":2743,"nodeType":"InlineAssembly","src":"6548:158:25"}]}}]}},{"expression":{"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2753,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"6841:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2755,"indexExpression":{"id":2754,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6849:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6841:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2756,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"6854:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"6841:19:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2758,"nodeType":"ExpressionStatement","src":"6841:19:25"},{"id":2762,"nodeType":"UncheckedBlock","src":"6875:46:25","statements":[{"expression":{"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6903:3:25","subExpression":{"id":2759,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6905:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2761,"nodeType":"ExpressionStatement","src":"6903:3:25"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2719,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6040:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2720,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"6044:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6049:6:25","memberName":"length","nodeType":"MemberAccess","src":"6044:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6040:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2764,"initializationExpression":{"assignments":[2717],"declarations":[{"constant":false,"id":2717,"mutability":"mutable","name":"i","nameLocation":"6037:1:25","nodeType":"VariableDeclaration","scope":2764,"src":"6029:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2716,"name":"uint256","nodeType":"ElementaryTypeName","src":"6029:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2718,"nodeType":"VariableDeclarationStatement","src":"6029:9:25"},"nodeType":"ForStatement","src":"6024:907:25"}]},"documentation":{"id":2697,"nodeType":"StructuredDocumentation","src":"5673:178:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset\n @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`."},"functionSelector":"6963d438","id":2766,"implemented":true,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"5865:10:25","nodeType":"FunctionDefinition","overrides":{"id":2702,"nodeType":"OverrideSpecifier","overrides":[],"src":"5928:8:25"},"parameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"data","nameLocation":"5902:4:25","nodeType":"VariableDeclaration","scope":2766,"src":"5885:21:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2698,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2699,"nodeType":"ArrayTypeName","src":"5885:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5875:37:25"},"returnParameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"results","nameLocation":"5961:7:25","nodeType":"VariableDeclaration","scope":2766,"src":"5946:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2703,"name":"bytes","nodeType":"ElementaryTypeName","src":"5946:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2704,"nodeType":"ArrayTypeName","src":"5946:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5945:24:25"},"scope":3737,"src":"5856:1081:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1888],"body":{"id":2855,"nodeType":"Block","src":"7198:907:25","statements":[{"assignments":[2778],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"tokenOwner","nameLocation":"7216:10:25","nodeType":"VariableDeclaration","scope":2855,"src":"7208:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2777,"name":"address","nodeType":"ElementaryTypeName","src":"7208:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2782,"initialValue":{"arguments":[{"id":2780,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7242:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2779,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"7229:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7229:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7208:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2783,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"7265:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2784,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7279:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:6:25","memberName":"sender","nodeType":"MemberAccess","src":"7279:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7265:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2795,"nodeType":"IfStatement","src":"7261:112:25","trueBody":{"id":2794,"nodeType":"Block","src":"7291:82:25","statements":[{"errorCall":{"arguments":[{"id":2788,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"7330:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2789,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7342:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2790,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7351:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7355:6:25","memberName":"sender","nodeType":"MemberAccess","src":"7351:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2787,"name":"LSP8NotTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"7312:17:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7312:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2793,"nodeType":"RevertStatement","src":"7305:57:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2796,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"7387:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7407:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7399:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"7399:7:25","typeDescriptions":{}}},"id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7399:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7387:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2806,"nodeType":"IfStatement","src":"7383:96:25","trueBody":{"id":2805,"nodeType":"Block","src":"7411:68:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2802,"name":"LSP8CannotUseAddressZeroAsOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"7432:34:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7432:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2804,"nodeType":"RevertStatement","src":"7425:43:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2807,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"7493:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2808,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"7507:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7493:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2814,"nodeType":"IfStatement","src":"7489:92:25","trueBody":{"id":2813,"nodeType":"Block","src":"7517:64:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2810,"name":"LSP8TokenOwnerCannotBeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7538:30:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7538:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2812,"nodeType":"RevertStatement","src":"7531:39:25"}]}},{"assignments":[2816],"declarations":[{"constant":false,"id":2816,"mutability":"mutable","name":"isAdded","nameLocation":"7596:7:25","nodeType":"VariableDeclaration","scope":2855,"src":"7591:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2815,"name":"bool","nodeType":"ElementaryTypeName","src":"7591:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2823,"initialValue":{"arguments":[{"id":2821,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"7630:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":2817,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"7606:10:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":2819,"indexExpression":{"id":2818,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7617:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7606:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7626:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4321,"src":"7606:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4294_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7606:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7591:48:25"},{"condition":{"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7653:8:25","subExpression":{"id":2824,"name":"isAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"7654:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2831,"nodeType":"IfStatement","src":"7649:69:25","trueBody":{"errorCall":{"arguments":[{"id":2827,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"7700:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7710:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2826,"name":"LSP8OperatorAlreadyAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7670:29:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:48:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2830,"nodeType":"RevertStatement","src":"7663:55:25"}},{"eventCall":{"arguments":[{"id":2833,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"7776:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2834,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"7798:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2835,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7822:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2836,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"7843:24:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2832,"name":"OperatorAuthorizationChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"7734:28:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7734:143:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2838,"nodeType":"EmitStatement","src":"7729:148:25"},{"assignments":[2840],"declarations":[{"constant":false,"id":2840,"mutability":"mutable","name":"lsp1Data","nameLocation":"7901:8:25","nodeType":"VariableDeclaration","scope":2855,"src":"7888:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2839,"name":"bytes","nodeType":"ElementaryTypeName","src":"7888:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2849,"initialValue":{"arguments":[{"expression":{"id":2843,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7936:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7940:6:25","memberName":"sender","nodeType":"MemberAccess","src":"7936:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2845,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"7960:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"74727565","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7981:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2847,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"8013:24:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2841,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7912:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7916:6:25","memberName":"encode","nodeType":"MemberAccess","src":"7912:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7912:135:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7888:159:25"},{"expression":{"arguments":[{"id":2851,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"8079:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2852,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"8089:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2850,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"8058:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8058:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2854,"nodeType":"ExpressionStatement","src":"8058:40:25"}]},"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"6978:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"86a10ddd","id":2856,"implemented":true,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"7052:17:25","nodeType":"FunctionDefinition","overrides":{"id":2775,"nodeType":"OverrideSpecifier","overrides":[],"src":"7189:8:25"},"parameters":{"id":2774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"operator","nameLocation":"7087:8:25","nodeType":"VariableDeclaration","scope":2856,"src":"7079:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"7079:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"tokenId","nameLocation":"7113:7:25","nodeType":"VariableDeclaration","scope":2856,"src":"7105:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7105:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2773,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"7143:24:25","nodeType":"VariableDeclaration","scope":2856,"src":"7130:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2772,"name":"bytes","nodeType":"ElementaryTypeName","src":"7130:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7069:104:25"},"returnParameters":{"id":2776,"nodeType":"ParameterList","parameters":[],"src":"7198:0:25"},"scope":3737,"src":"7043:1062:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1900],"body":{"id":2939,"nodeType":"Block","src":"8349:986:25","statements":[{"assignments":[2870],"declarations":[{"constant":false,"id":2870,"mutability":"mutable","name":"tokenOwner","nameLocation":"8367:10:25","nodeType":"VariableDeclaration","scope":2939,"src":"8359:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2869,"name":"address","nodeType":"ElementaryTypeName","src":"8359:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2874,"initialValue":{"arguments":[{"id":2872,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"8393:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2871,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"8380:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8380:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8359:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2875,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8416:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8420:6:25","memberName":"sender","nodeType":"MemberAccess","src":"8416:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2877,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"8430:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8416:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2893,"nodeType":"IfStatement","src":"8412:264:25","trueBody":{"id":2892,"nodeType":"Block","src":"8442:234:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2879,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"8460:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2880,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8472:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8476:6:25","memberName":"sender","nodeType":"MemberAccess","src":"8472:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8460:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2891,"nodeType":"IfStatement","src":"8456:210:25","trueBody":{"id":2890,"nodeType":"Block","src":"8484:182:25","statements":[{"errorCall":{"arguments":[{"expression":{"id":2884,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8562:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8566:6:25","memberName":"sender","nodeType":"MemberAccess","src":"8562:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2886,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"8594:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2887,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"8626:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2883,"name":"LSP8RevokeOperatorNotAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8509:31:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,address,bytes32) pure"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8509:142:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2889,"nodeType":"RevertStatement","src":"8502:149:25"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2894,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"8690:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8710:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8702:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2895,"name":"address","nodeType":"ElementaryTypeName","src":"8702:7:25","typeDescriptions":{}}},"id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8702:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8690:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2904,"nodeType":"IfStatement","src":"8686:96:25","trueBody":{"id":2903,"nodeType":"Block","src":"8714:68:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2900,"name":"LSP8CannotUseAddressZeroAsOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"8735:34:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8735:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"RevertStatement","src":"8728:43:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2905,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"8796:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2906,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"8810:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8796:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2912,"nodeType":"IfStatement","src":"8792:92:25","trueBody":{"id":2911,"nodeType":"Block","src":"8820:64:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2908,"name":"LSP8TokenOwnerCannotBeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"8841:30:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8841:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2910,"nodeType":"RevertStatement","src":"8834:39:25"}]}},{"expression":{"arguments":[{"id":2914,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"8923:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2915,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"8945:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2916,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"8969:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2917,"name":"notify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"8990:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2918,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9010:24:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2913,"name":"_revokeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"8894:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bool,bytes memory)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8894:150:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"ExpressionStatement","src":"8894:150:25"},{"condition":{"id":2921,"name":"notify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"9059:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2938,"nodeType":"IfStatement","src":"9055:274:25","trueBody":{"id":2937,"nodeType":"Block","src":"9067:262:25","statements":[{"assignments":[2923],"declarations":[{"constant":false,"id":2923,"mutability":"mutable","name":"lsp1Data","nameLocation":"9094:8:25","nodeType":"VariableDeclaration","scope":2937,"src":"9081:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2922,"name":"bytes","nodeType":"ElementaryTypeName","src":"9081:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2931,"initialValue":{"arguments":[{"id":2926,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"9133:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2927,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"9161:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"66616c7365","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9186:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":2929,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9225:24:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2924,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9105:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9109:6:25","memberName":"encode","nodeType":"MemberAccess","src":"9105:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9105:158:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9081:182:25"},{"expression":{"arguments":[{"id":2933,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"9299:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2934,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"9309:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2932,"name":"_notifyTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"9278:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9278:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2936,"nodeType":"ExpressionStatement","src":"9278:40:25"}]}}]},"documentation":{"id":2857,"nodeType":"StructuredDocumentation","src":"8111:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"db8c9663","id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"8185:14:25","nodeType":"FunctionDefinition","overrides":{"id":2867,"nodeType":"OverrideSpecifier","overrides":[],"src":"8340:8:25"},"parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2859,"mutability":"mutable","name":"operator","nameLocation":"8217:8:25","nodeType":"VariableDeclaration","scope":2940,"src":"8209:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2858,"name":"address","nodeType":"ElementaryTypeName","src":"8209:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"tokenId","nameLocation":"8243:7:25","nodeType":"VariableDeclaration","scope":2940,"src":"8235:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8235:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2863,"mutability":"mutable","name":"notify","nameLocation":"8265:6:25","nodeType":"VariableDeclaration","scope":2940,"src":"8260:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2862,"name":"bool","nodeType":"ElementaryTypeName","src":"8260:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"8294:24:25","nodeType":"VariableDeclaration","scope":2940,"src":"8281:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2864,"name":"bytes","nodeType":"ElementaryTypeName","src":"8281:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8199:125:25"},"returnParameters":{"id":2868,"nodeType":"ParameterList","parameters":[],"src":"8349:0:25"},"scope":3737,"src":"8176:1159:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1910],"body":{"id":2956,"nodeType":"Block","src":"9530:61:25","statements":[{"expression":{"arguments":[{"id":2952,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"9566:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2953,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"9576:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2951,"name":"_isOperatorOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"9547:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_bool_$","typeString":"function (address,bytes32) view returns (bool)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9547:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2950,"id":2955,"nodeType":"Return","src":"9540:44:25"}]},"documentation":{"id":2941,"nodeType":"StructuredDocumentation","src":"9341:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"2a3654a4","id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"isOperatorFor","nameLocation":"9415:13:25","nodeType":"FunctionDefinition","overrides":{"id":2947,"nodeType":"OverrideSpecifier","overrides":[],"src":"9506:8:25"},"parameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"operator","nameLocation":"9446:8:25","nodeType":"VariableDeclaration","scope":2957,"src":"9438:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"9438:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2945,"mutability":"mutable","name":"tokenId","nameLocation":"9472:7:25","nodeType":"VariableDeclaration","scope":2957,"src":"9464:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9464:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9428:57:25"},"returnParameters":{"id":2950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2949,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"9524:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2948,"name":"bool","nodeType":"ElementaryTypeName","src":"9524:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9523:6:25"},"scope":3737,"src":"9406:185:25","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1919],"body":{"id":2977,"nodeType":"Block","src":"9773:86:25","statements":[{"expression":{"arguments":[{"id":2968,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"9798:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2967,"name":"_existsOrError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"9783:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9783:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2970,"nodeType":"ExpressionStatement","src":"9783:23:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":2971,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"9824:10:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":2973,"indexExpression":{"id":2972,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"9835:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9824:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9844:6:25","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":4447,"src":"9824:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4294_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (address[] memory)"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9824:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":2966,"id":2976,"nodeType":"Return","src":"9817:35:25"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"9597:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"49a6078d","id":2978,"implemented":true,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"9671:14:25","nodeType":"FunctionDefinition","overrides":{"id":2962,"nodeType":"OverrideSpecifier","overrides":[],"src":"9737:8:25"},"parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"tokenId","nameLocation":"9703:7:25","nodeType":"VariableDeclaration","scope":2978,"src":"9695:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9695:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9685:31:25"},"returnParameters":{"id":2966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2978,"src":"9755:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2963,"name":"address","nodeType":"ElementaryTypeName","src":"9755:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2964,"nodeType":"ArrayTypeName","src":"9755:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9754:18:25"},"scope":3737,"src":"9662:197:25","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3002,"nodeType":"Block","src":"10137:109:25","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2988,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"10155:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2990,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"10178:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2989,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"10165:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10165:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10155:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2997,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"10231:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":2993,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"10202:10:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":2995,"indexExpression":{"id":2994,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"10213:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10202:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":2996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10222:8:25","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":4375,"src":"10202:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4294_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10202:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10155:83:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3000,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10154:85:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2987,"id":3001,"nodeType":"Return","src":"10147:92:25"}]},"documentation":{"id":2979,"nodeType":"StructuredDocumentation","src":"9865:147:25","text":" @dev verifies if the `caller` is operator or owner for the `tokenId`\n @return true if `caller` is either operator or owner"},"id":3003,"implemented":true,"kind":"function","modifiers":[],"name":"_isOperatorOrOwner","nameLocation":"10026:18:25","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"caller","nameLocation":"10062:6:25","nodeType":"VariableDeclaration","scope":3003,"src":"10054:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"10054:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2983,"mutability":"mutable","name":"tokenId","nameLocation":"10086:7:25","nodeType":"VariableDeclaration","scope":3003,"src":"10078:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10078:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10044:55:25"},"returnParameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3003,"src":"10131:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2985,"name":"bool","nodeType":"ElementaryTypeName","src":"10131:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10130:6:25"},"scope":3737,"src":"10017:229:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1933],"body":{"id":3040,"nodeType":"Block","src":"10514:187:25","statements":[{"condition":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10528:40:25","subExpression":{"arguments":[{"expression":{"id":3019,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10548:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10552:6:25","memberName":"sender","nodeType":"MemberAccess","src":"10548:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3021,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"10560:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3018,"name":"_isOperatorOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"10529:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_bool_$","typeString":"function (address,bytes32) view returns (bool)"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10529:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3031,"nodeType":"IfStatement","src":"10524:119:25","trueBody":{"id":3030,"nodeType":"Block","src":"10570:73:25","statements":[{"errorCall":{"arguments":[{"id":3025,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"10612:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3026,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10621:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10625:6:25","memberName":"sender","nodeType":"MemberAccess","src":"10621:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3024,"name":"LSP8NotTokenOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"10591:20:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10591:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3029,"nodeType":"RevertStatement","src":"10584:48:25"}]}},{"expression":{"arguments":[{"id":3033,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"10663:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3034,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"10669:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3035,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"10673:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3036,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"10682:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3037,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"10689:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3032,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"10653:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bool,bytes memory)"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10653:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3039,"nodeType":"ExpressionStatement","src":"10653:41:25"}]},"documentation":{"id":3004,"nodeType":"StructuredDocumentation","src":"10287:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"511b6952","id":3041,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"10361:8:25","nodeType":"FunctionDefinition","overrides":{"id":3016,"nodeType":"OverrideSpecifier","overrides":[],"src":"10505:8:25"},"parameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"from","nameLocation":"10387:4:25","nodeType":"VariableDeclaration","scope":3041,"src":"10379:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"10379:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"to","nameLocation":"10409:2:25","nodeType":"VariableDeclaration","scope":3041,"src":"10401:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3007,"name":"address","nodeType":"ElementaryTypeName","src":"10401:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3010,"mutability":"mutable","name":"tokenId","nameLocation":"10429:7:25","nodeType":"VariableDeclaration","scope":3041,"src":"10421:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3009,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10421:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3012,"mutability":"mutable","name":"force","nameLocation":"10451:5:25","nodeType":"VariableDeclaration","scope":3041,"src":"10446:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3011,"name":"bool","nodeType":"ElementaryTypeName","src":"10446:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3014,"mutability":"mutable","name":"data","nameLocation":"10479:4:25","nodeType":"VariableDeclaration","scope":3041,"src":"10466:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3013,"name":"bytes","nodeType":"ElementaryTypeName","src":"10466:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10369:120:25"},"returnParameters":{"id":3017,"nodeType":"ParameterList","parameters":[],"src":"10514:0:25"},"scope":3737,"src":"10352:349:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1952],"body":{"id":3120,"nodeType":"Block","src":"10977:478:25","statements":[{"assignments":[3062],"declarations":[{"constant":false,"id":3062,"mutability":"mutable","name":"fromLength","nameLocation":"10995:10:25","nodeType":"VariableDeclaration","scope":3120,"src":"10987:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3061,"name":"uint256","nodeType":"ElementaryTypeName","src":"10987:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3065,"initialValue":{"expression":{"id":3063,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"11008:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11013:6:25","memberName":"length","nodeType":"MemberAccess","src":"11008:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10987:32:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"11046:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3067,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"11060:2:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11063:6:25","memberName":"length","nodeType":"MemberAccess","src":"11060:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11046:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3070,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"11085:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3071,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"11099:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11107:6:25","memberName":"length","nodeType":"MemberAccess","src":"11099:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11085:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11046:67:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"11129:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3076,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"11143:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11149:6:25","memberName":"length","nodeType":"MemberAccess","src":"11143:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11129:26:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11046:109:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3080,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"11171:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3081,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"11185:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11190:6:25","memberName":"length","nodeType":"MemberAccess","src":"11185:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11171:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11046:150:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"nodeType":"IfStatement","src":"11029:236:25","trueBody":{"id":3088,"nodeType":"Block","src":"11207:58:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3085,"name":"LSP8InvalidTransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"11228:24:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11228:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3087,"nodeType":"RevertStatement","src":"11221:33:25"}]}},{"body":{"id":3118,"nodeType":"Block","src":"11309:140:25","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3097,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"11332:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3099,"indexExpression":{"id":3098,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11337:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11332:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3100,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"11341:2:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3102,"indexExpression":{"id":3101,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11344:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11341:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3103,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"11348:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3105,"indexExpression":{"id":3104,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11356:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11348:10:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":3106,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"11360:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":3108,"indexExpression":{"id":3107,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11366:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11360:8:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"baseExpression":{"id":3109,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"11370:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3111,"indexExpression":{"id":3110,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11375:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11370:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3096,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"11323:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bool,bytes memory)"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11323:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3113,"nodeType":"ExpressionStatement","src":"11323:55:25"},{"id":3117,"nodeType":"UncheckedBlock","src":"11393:46:25","statements":[{"expression":{"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"11421:3:25","subExpression":{"id":3114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11423:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3116,"nodeType":"ExpressionStatement","src":"11421:3:25"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3093,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11291:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3094,"name":"fromLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"11295:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11291:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3119,"initializationExpression":{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"i","nameLocation":"11288:1:25","nodeType":"VariableDeclaration","scope":3119,"src":"11280:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"11280:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3092,"nodeType":"VariableDeclarationStatement","src":"11280:9:25"},"nodeType":"ForStatement","src":"11275:174:25"}]},"documentation":{"id":3042,"nodeType":"StructuredDocumentation","src":"10707:60:25","text":" @inheritdoc ILSP8IdentifiableDigitalAsset"},"functionSelector":"7e87632c","id":3121,"implemented":true,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"10781:13:25","nodeType":"FunctionDefinition","overrides":{"id":3059,"nodeType":"OverrideSpecifier","overrides":[],"src":"10968:8:25"},"parameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3045,"mutability":"mutable","name":"from","nameLocation":"10821:4:25","nodeType":"VariableDeclaration","scope":3121,"src":"10804:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3043,"name":"address","nodeType":"ElementaryTypeName","src":"10804:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3044,"nodeType":"ArrayTypeName","src":"10804:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3048,"mutability":"mutable","name":"to","nameLocation":"10852:2:25","nodeType":"VariableDeclaration","scope":3121,"src":"10835:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3046,"name":"address","nodeType":"ElementaryTypeName","src":"10835:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3047,"nodeType":"ArrayTypeName","src":"10835:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"tokenId","nameLocation":"10881:7:25","nodeType":"VariableDeclaration","scope":3121,"src":"10864:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10864:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3050,"nodeType":"ArrayTypeName","src":"10864:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3054,"mutability":"mutable","name":"force","nameLocation":"10912:5:25","nodeType":"VariableDeclaration","scope":3121,"src":"10898:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3052,"name":"bool","nodeType":"ElementaryTypeName","src":"10898:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3053,"nodeType":"ArrayTypeName","src":"10898:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":3057,"mutability":"mutable","name":"data","nameLocation":"10942:4:25","nodeType":"VariableDeclaration","scope":3121,"src":"10927:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3055,"name":"bytes","nodeType":"ElementaryTypeName","src":"10927:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3056,"nodeType":"ArrayTypeName","src":"10927:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"10794:158:25"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[],"src":"10977:0:25"},"scope":3737,"src":"10772:683:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3160,"nodeType":"Block","src":"11750:313:25","statements":[{"assignments":[3136],"declarations":[{"constant":false,"id":3136,"mutability":"mutable","name":"isRemoved","nameLocation":"11765:9:25","nodeType":"VariableDeclaration","scope":3160,"src":"11760:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3135,"name":"bool","nodeType":"ElementaryTypeName","src":"11760:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3143,"initialValue":{"arguments":[{"id":3141,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11804:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":3137,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"11777:10:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":3139,"indexExpression":{"id":3138,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"11788:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11777:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":3140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11797:6:25","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4348,"src":"11777:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4294_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11777:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"11760:53:25"},{"condition":{"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11827:10:25","subExpression":{"id":3144,"name":"isRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"11828:9:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3151,"nodeType":"IfStatement","src":"11823:65:25","trueBody":{"errorCall":{"arguments":[{"id":3147,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11870:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3148,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"11880:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3146,"name":"LSP8NonExistingOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"11846:23:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11846:42:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3150,"nodeType":"RevertStatement","src":"11839:49:25"}},{"eventCall":{"arguments":[{"id":3153,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11933:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3154,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"11955:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3155,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"11979:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3156,"name":"notified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"12000:8:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3157,"name":"operatorNotificationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"12022:24:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3152,"name":"OperatorRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"11904:15:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bool,bytes memory)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11904:152:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3159,"nodeType":"EmitStatement","src":"11899:157:25"}]},"documentation":{"id":3122,"nodeType":"StructuredDocumentation","src":"11461:87:25","text":" @dev removes `operator` from the list of operators for the `tokenId`"},"id":3161,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeOperator","nameLocation":"11562:15:25","nodeType":"FunctionDefinition","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3124,"mutability":"mutable","name":"operator","nameLocation":"11595:8:25","nodeType":"VariableDeclaration","scope":3161,"src":"11587:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3123,"name":"address","nodeType":"ElementaryTypeName","src":"11587:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3126,"mutability":"mutable","name":"tokenOwner","nameLocation":"11621:10:25","nodeType":"VariableDeclaration","scope":3161,"src":"11613:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3125,"name":"address","nodeType":"ElementaryTypeName","src":"11613:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3128,"mutability":"mutable","name":"tokenId","nameLocation":"11649:7:25","nodeType":"VariableDeclaration","scope":3161,"src":"11641:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3127,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11641:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3130,"mutability":"mutable","name":"notified","nameLocation":"11671:8:25","nodeType":"VariableDeclaration","scope":3161,"src":"11666:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3129,"name":"bool","nodeType":"ElementaryTypeName","src":"11666:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"11702:24:25","nodeType":"VariableDeclaration","scope":3161,"src":"11689:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3131,"name":"bytes","nodeType":"ElementaryTypeName","src":"11689:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11577:155:25"},"returnParameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"11750:0:25"},"scope":3737,"src":"11553:510:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3214,"nodeType":"Block","src":"12445:929:25","statements":[{"assignments":[3173],"declarations":[{"constant":false,"id":3173,"mutability":"mutable","name":"operatorsForTokenId","nameLocation":"12899:19:25","nodeType":"VariableDeclaration","scope":3214,"src":"12866:52:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3172,"nodeType":"UserDefinedTypeName","pathNode":{"id":3171,"name":"EnumerableSet.AddressSet","nameLocations":["12866:13:25","12880:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"12866:24:25"},"referencedDeclaration":4294,"src":"12866:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"id":3177,"initialValue":{"baseExpression":{"id":3174,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"12921:10:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4294_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":3176,"indexExpression":{"id":3175,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3166,"src":"12945:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12921:41:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12866:96:25"},{"assignments":[3179],"declarations":[{"constant":false,"id":3179,"mutability":"mutable","name":"operatorListLength","nameLocation":"12981:18:25","nodeType":"VariableDeclaration","scope":3214,"src":"12973:26:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"12973:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3183,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3180,"name":"operatorsForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"13002:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3181,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13022:6:25","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4390,"src":"13002:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4294_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13002:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12973:57:25"},{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"operator","nameLocation":"13048:8:25","nodeType":"VariableDeclaration","scope":3214,"src":"13040:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3184,"name":"address","nodeType":"ElementaryTypeName","src":"13040:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3186,"nodeType":"VariableDeclarationStatement","src":"13040:16:25"},{"body":{"id":3212,"nodeType":"Block","src":"13108:260:25","statements":[{"expression":{"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3193,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"13190:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13224:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3194,"name":"operatorsForTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"13201:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13221:2:25","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":4417,"src":"13201:22:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4294_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$4294_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13201:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13190:36:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3199,"nodeType":"ExpressionStatement","src":"13190:36:25"},{"expression":{"arguments":[{"id":3201,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"13256:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3202,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"13266:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3203,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3166,"src":"13278:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"66616c7365","id":3204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13287:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"","id":3205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13294:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3200,"name":"_revokeOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"13240:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bool,bytes memory)"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13240:57:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3207,"nodeType":"ExpressionStatement","src":"13240:57:25"},{"id":3211,"nodeType":"UncheckedBlock","src":"13312:46:25","statements":[{"expression":{"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"13340:3:25","subExpression":{"id":3208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"13342:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3210,"nodeType":"ExpressionStatement","src":"13340:3:25"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3190,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"13082:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3191,"name":"operatorListLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"13086:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13082:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3213,"initializationExpression":{"assignments":[3188],"declarations":[{"constant":false,"id":3188,"mutability":"mutable","name":"i","nameLocation":"13079:1:25","nodeType":"VariableDeclaration","scope":3213,"src":"13071:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint256","nodeType":"ElementaryTypeName","src":"13071:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3189,"nodeType":"VariableDeclarationStatement","src":"13071:9:25"},"nodeType":"ForStatement","src":"13066:302:25"}]},"documentation":{"id":3162,"nodeType":"StructuredDocumentation","src":"12069:270:25","text":" @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\n @param tokenOwner The address that is the owner of the `tokenId`.\n @param tokenId The token to remove the associated operators for."},"id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"_clearOperators","nameLocation":"12353:15:25","nodeType":"FunctionDefinition","parameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"tokenOwner","nameLocation":"12386:10:25","nodeType":"VariableDeclaration","scope":3215,"src":"12378:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3163,"name":"address","nodeType":"ElementaryTypeName","src":"12378:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3166,"mutability":"mutable","name":"tokenId","nameLocation":"12414:7:25","nodeType":"VariableDeclaration","scope":3215,"src":"12406:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12406:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12368:59:25"},"returnParameters":{"id":3168,"nodeType":"ParameterList","parameters":[],"src":"12445:0:25"},"scope":3737,"src":"12344:1030:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3232,"nodeType":"Block","src":"13631:59:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3223,"name":"_tokenOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"13648:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":3225,"indexExpression":{"id":3224,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"13661:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13648:21:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13681:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13673:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3226,"name":"address","nodeType":"ElementaryTypeName","src":"13673:7:25","typeDescriptions":{}}},"id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13673:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13648:35:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3222,"id":3231,"nodeType":"Return","src":"13641:42:25"}]},"documentation":{"id":3216,"nodeType":"StructuredDocumentation","src":"13380:175:25","text":" @dev Returns whether `tokenId` exists.\n Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn})."},"id":3233,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"13569:7:25","nodeType":"FunctionDefinition","parameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"tokenId","nameLocation":"13585:7:25","nodeType":"VariableDeclaration","scope":3233,"src":"13577:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13577:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13576:17:25"},"returnParameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3233,"src":"13625:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3220,"name":"bool","nodeType":"ElementaryTypeName","src":"13625:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13624:6:25"},"scope":3737,"src":"13560:130:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3249,"nodeType":"Block","src":"13844:102:25","statements":[{"condition":{"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13858:17:25","subExpression":{"arguments":[{"id":3240,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"13867:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3239,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"13859:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13859:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3248,"nodeType":"IfStatement","src":"13854:86:25","trueBody":{"id":3247,"nodeType":"Block","src":"13877:63:25","statements":[{"errorCall":{"arguments":[{"id":3244,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"13921:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3243,"name":"LSP8NonExistentTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"13898:22:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13898:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3246,"nodeType":"RevertStatement","src":"13891:38:25"}]}}]},"documentation":{"id":3234,"nodeType":"StructuredDocumentation","src":"13696:80:25","text":" @dev When `tokenId` does not exist then revert with an error."},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"_existsOrError","nameLocation":"13790:14:25","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"tokenId","nameLocation":"13813:7:25","nodeType":"VariableDeclaration","scope":3250,"src":"13805:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13805:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13804:17:25"},"returnParameters":{"id":3238,"nodeType":"ParameterList","parameters":[],"src":"13844:0:25"},"scope":3737,"src":"13781:165:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3361,"nodeType":"Block","src":"15100:973:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3262,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15114:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15128:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15120:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3263,"name":"address","nodeType":"ElementaryTypeName","src":"15120:7:25","typeDescriptions":{}}},"id":3266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15120:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15114:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3272,"nodeType":"IfStatement","src":"15110:83:25","trueBody":{"id":3271,"nodeType":"Block","src":"15132:61:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3268,"name":"LSP8CannotSendToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"15153:27:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15153:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3270,"nodeType":"RevertStatement","src":"15146:36:25"}]}},{"condition":{"arguments":[{"id":3274,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15269:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3273,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"15261:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15261:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3281,"nodeType":"IfStatement","src":"15257:87:25","trueBody":{"id":3280,"nodeType":"Block","src":"15279:65:25","statements":[{"errorCall":{"arguments":[{"id":3277,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15325:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3276,"name":"LSP8TokenIdAlreadyMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"15300:24:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15300:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3279,"nodeType":"RevertStatement","src":"15293:40:25"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15383:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15375:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3283,"name":"address","nodeType":"ElementaryTypeName","src":"15375:7:25","typeDescriptions":{}}},"id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15375:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3287,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15387:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15391:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3289,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"15400:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3282,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"15354:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15354:51:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3291,"nodeType":"ExpressionStatement","src":"15354:51:25"},{"condition":{"arguments":[{"id":3293,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15514:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3292,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"15506:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15506:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3300,"nodeType":"IfStatement","src":"15502:87:25","trueBody":{"id":3299,"nodeType":"Block","src":"15524:65:25","statements":[{"errorCall":{"arguments":[{"id":3296,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15570:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3295,"name":"LSP8TokenIdAlreadyMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"15545:24:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15545:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3298,"nodeType":"RevertStatement","src":"15538:40:25"}]}},{"expression":{"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"15629:17:25","subExpression":{"id":3301,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"15631:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3303,"nodeType":"ExpressionStatement","src":"15629:17:25"},{"expression":{"arguments":[{"id":3308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15678:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"baseExpression":{"id":3304,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"15657:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":3306,"indexExpression":{"id":3305,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15670:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15657:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15674:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4191,"src":"15657:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4173_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15657:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3310,"nodeType":"ExpressionStatement","src":"15657:29:25"},{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3311,"name":"_tokenOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"15696:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":3313,"indexExpression":{"id":3312,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15709:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15696:21:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3314,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15720:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15696:26:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3316,"nodeType":"ExpressionStatement","src":"15696:26:25"},{"eventCall":{"arguments":[{"expression":{"id":3318,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15747:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15751:6:25","memberName":"sender","nodeType":"MemberAccess","src":"15747:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15767:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15759:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:25","typeDescriptions":{}}},"id":3323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15759:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3324,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15771:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3325,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15775:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3326,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"15784:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3327,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"15791:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3317,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"15738:8:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,bytes32,bool,bytes memory)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15738:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3329,"nodeType":"EmitStatement","src":"15733:63:25"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15835:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15827:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3331,"name":"address","nodeType":"ElementaryTypeName","src":"15827:7:25","typeDescriptions":{}}},"id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15827:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3335,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15839:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3336,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15843:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3337,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"15852:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3330,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"15807:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15807:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3339,"nodeType":"ExpressionStatement","src":"15807:50:25"},{"assignments":[3341],"declarations":[{"constant":false,"id":3341,"mutability":"mutable","name":"lsp1Data","nameLocation":"15881:8:25","nodeType":"VariableDeclaration","scope":3361,"src":"15868:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3340,"name":"bytes","nodeType":"ElementaryTypeName","src":"15868:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3354,"initialValue":{"arguments":[{"expression":{"id":3344,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15916:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15920:6:25","memberName":"sender","nodeType":"MemberAccess","src":"15916:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15948:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15940:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3346,"name":"address","nodeType":"ElementaryTypeName","src":"15940:7:25","typeDescriptions":{}}},"id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15940:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3350,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"15964:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3351,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"15980:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3352,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"16001:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3342,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15892:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15896:6:25","memberName":"encode","nodeType":"MemberAccess","src":"15892:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15892:123:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"15868:147:25"},{"expression":{"arguments":[{"id":3356,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"16046:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3357,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"16050:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3358,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"16057:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3355,"name":"_notifyTokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"16025:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bool,bytes memory)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16025:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3360,"nodeType":"ExpressionStatement","src":"16025:41:25"}]},"documentation":{"id":3251,"nodeType":"StructuredDocumentation","src":"13952:1013:25","text":" @dev Create `tokenId` by minting it and transfers it to `to`.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\n @param to The address that will receive the minted `tokenId`.\n @param tokenId The token ID to create (= mint).\n @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\n @custom:requirements\n - `tokenId` must not exist and not have been already minted.\n - `to` cannot be the zero address.\n @custom:events {Transfer} event with `address(0)` as `from` address."},"id":3362,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"14979:5:25","nodeType":"FunctionDefinition","parameters":{"id":3260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"to","nameLocation":"15002:2:25","nodeType":"VariableDeclaration","scope":3362,"src":"14994:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3252,"name":"address","nodeType":"ElementaryTypeName","src":"14994:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"tokenId","nameLocation":"15022:7:25","nodeType":"VariableDeclaration","scope":3362,"src":"15014:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15014:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3257,"mutability":"mutable","name":"force","nameLocation":"15044:5:25","nodeType":"VariableDeclaration","scope":3362,"src":"15039:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3256,"name":"bool","nodeType":"ElementaryTypeName","src":"15039:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3259,"mutability":"mutable","name":"data","nameLocation":"15072:4:25","nodeType":"VariableDeclaration","scope":3362,"src":"15059:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3258,"name":"bytes","nodeType":"ElementaryTypeName","src":"15059:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14984:98:25"},"returnParameters":{"id":3261,"nodeType":"ParameterList","parameters":[],"src":"15100:0:25"},"scope":3737,"src":"14970:1103:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3455,"nodeType":"Block","src":"17497:864:25","statements":[{"assignments":[3371],"declarations":[{"constant":false,"id":3371,"mutability":"mutable","name":"tokenOwner","nameLocation":"17515:10:25","nodeType":"VariableDeclaration","scope":3455,"src":"17507:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"17507:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3375,"initialValue":{"arguments":[{"id":3373,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17541:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3372,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"17528:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17528:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17507:42:25"},{"expression":{"arguments":[{"id":3377,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"17581:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17601:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17593:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3378,"name":"address","nodeType":"ElementaryTypeName","src":"17593:7:25","typeDescriptions":{}}},"id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17593:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3382,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17605:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3383,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"17614:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3376,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"17560:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17560:59:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3385,"nodeType":"ExpressionStatement","src":"17560:59:25"},{"expression":{"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3386,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"17758:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3388,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17784:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3387,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"17771:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17771:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17758:34:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3391,"nodeType":"ExpressionStatement","src":"17758:34:25"},{"expression":{"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"17833:17:25","subExpression":{"id":3392,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"17835:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3394,"nodeType":"ExpressionStatement","src":"17833:17:25"},{"expression":{"arguments":[{"id":3396,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"17877:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3397,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17889:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3395,"name":"_clearOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"17861:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32)"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17861:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3399,"nodeType":"ExpressionStatement","src":"17861:36:25"},{"expression":{"arguments":[{"id":3404,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17940:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"baseExpression":{"id":3400,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"17908:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":3402,"indexExpression":{"id":3401,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"17921:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17908:24:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17933:6:25","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4209,"src":"17908:31:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4173_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17908:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3406,"nodeType":"ExpressionStatement","src":"17908:40:25"},{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"17958:28:25","subExpression":{"baseExpression":{"id":3407,"name":"_tokenOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"17965:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":3409,"indexExpression":{"id":3408,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"17978:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17965:21:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3411,"nodeType":"ExpressionStatement","src":"17958:28:25"},{"eventCall":{"arguments":[{"expression":{"id":3413,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18011:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18015:6:25","memberName":"sender","nodeType":"MemberAccess","src":"18011:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3415,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"18023:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18043:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18035:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3416,"name":"address","nodeType":"ElementaryTypeName","src":"18035:7:25","typeDescriptions":{}}},"id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18035:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3420,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"18047:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"66616c7365","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18056:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3422,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"18063:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3412,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"18002:8:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,bytes32,bool,bytes memory)"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18002:66:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3424,"nodeType":"EmitStatement","src":"17997:71:25"},{"expression":{"arguments":[{"id":3426,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"18099:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18119:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18111:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3427,"name":"address","nodeType":"ElementaryTypeName","src":"18111:7:25","typeDescriptions":{}}},"id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18111:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3431,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"18123:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3432,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"18132:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3425,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"18079:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18079:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3434,"nodeType":"ExpressionStatement","src":"18079:58:25"},{"assignments":[3436],"declarations":[{"constant":false,"id":3436,"mutability":"mutable","name":"lsp1Data","nameLocation":"18161:8:25","nodeType":"VariableDeclaration","scope":3455,"src":"18148:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3435,"name":"bytes","nodeType":"ElementaryTypeName","src":"18148:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3449,"initialValue":{"arguments":[{"expression":{"id":3439,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18196:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18200:6:25","memberName":"sender","nodeType":"MemberAccess","src":"18196:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3441,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"18220:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18252:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18244:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3442,"name":"address","nodeType":"ElementaryTypeName","src":"18244:7:25","typeDescriptions":{}}},"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18244:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3446,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"18268:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3447,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"18289:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3437,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"18172:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18176:6:25","memberName":"encode","nodeType":"MemberAccess","src":"18172:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18172:131:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"18148:155:25"},{"expression":{"arguments":[{"id":3451,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"18333:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3452,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"18345:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3450,"name":"_notifyTokenSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"18314:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18314:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3454,"nodeType":"ExpressionStatement","src":"18314:40:25"}]},"documentation":{"id":3363,"nodeType":"StructuredDocumentation","src":"16079:1345:25","text":" @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\n This will also clear all the operators allowed to transfer the `tokenId`.\n The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\n function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\n all the parameters in the calldata packed encoded.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\n @param tokenId The token to burn.\n @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\n @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\n @custom:requirements\n - `tokenId` must exist.\n @custom:events {Transfer} event with `address(0)` as the `to` address."},"id":3456,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"17438:5:25","nodeType":"FunctionDefinition","parameters":{"id":3368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"tokenId","nameLocation":"17452:7:25","nodeType":"VariableDeclaration","scope":3456,"src":"17444:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3364,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17444:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"data","nameLocation":"17474:4:25","nodeType":"VariableDeclaration","scope":3456,"src":"17461:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3366,"name":"bytes","nodeType":"ElementaryTypeName","src":"17461:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17443:36:25"},"returnParameters":{"id":3369,"nodeType":"ParameterList","parameters":[],"src":"17497:0:25"},"scope":3737,"src":"17429:932:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3587,"nodeType":"Block","src":"19948:1135:25","statements":[{"assignments":[3471],"declarations":[{"constant":false,"id":3471,"mutability":"mutable","name":"tokenOwner","nameLocation":"19966:10:25","nodeType":"VariableDeclaration","scope":3587,"src":"19958:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3470,"name":"address","nodeType":"ElementaryTypeName","src":"19958:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3475,"initialValue":{"arguments":[{"id":3473,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"19992:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3472,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"19979:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19979:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"19958:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3476,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"20014:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3477,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20028:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20014:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3486,"nodeType":"IfStatement","src":"20010:100:25","trueBody":{"id":3485,"nodeType":"Block","src":"20034:76:25","statements":[{"errorCall":{"arguments":[{"id":3480,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"20073:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3481,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20085:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3482,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20094:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3479,"name":"LSP8NotTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"20055:17:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20055:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3484,"nodeType":"RevertStatement","src":"20048:51:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3487,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20124:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20138:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20130:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3488,"name":"address","nodeType":"ElementaryTypeName","src":"20130:7:25","typeDescriptions":{}}},"id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20130:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20124:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3497,"nodeType":"IfStatement","src":"20120:83:25","trueBody":{"id":3496,"nodeType":"Block","src":"20142:61:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3493,"name":"LSP8CannotSendToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"20163:27:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20163:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3495,"nodeType":"RevertStatement","src":"20156:36:25"}]}},{"expression":{"arguments":[{"id":3499,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20234:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3500,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20240:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3501,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20244:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3502,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"20253:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3498,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"20213:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20213:45:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3504,"nodeType":"ExpressionStatement","src":"20213:45:25"},{"assignments":[3506],"declarations":[{"constant":false,"id":3506,"mutability":"mutable","name":"currentTokenOwner","nameLocation":"20372:17:25","nodeType":"VariableDeclaration","scope":3587,"src":"20364:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3505,"name":"address","nodeType":"ElementaryTypeName","src":"20364:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3510,"initialValue":{"arguments":[{"id":3508,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20405:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3507,"name":"tokenOwnerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"20392:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view returns (address)"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20392:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20364:49:25"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3511,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"20427:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3512,"name":"currentTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"20441:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20427:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3521,"nodeType":"IfStatement","src":"20423:192:25","trueBody":{"id":3520,"nodeType":"Block","src":"20460:155:25","statements":[{"errorCall":{"arguments":[{"id":3515,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20520:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3516,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"20545:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3517,"name":"currentTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"20573:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3514,"name":"LSP8TokenOwnerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"20481:21:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address) pure"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20481:123:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3519,"nodeType":"RevertStatement","src":"20474:130:25"}]}},{"expression":{"arguments":[{"id":3523,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20641:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3524,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20647:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3522,"name":"_clearOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"20625:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20625:30:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3526,"nodeType":"ExpressionStatement","src":"20625:30:25"},{"expression":{"arguments":[{"id":3531,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20692:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"baseExpression":{"id":3527,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"20666:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":3529,"indexExpression":{"id":3528,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20679:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20666:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3530,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20685:6:25","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4209,"src":"20666:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4173_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20666:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3533,"nodeType":"ExpressionStatement","src":"20666:34:25"},{"expression":{"arguments":[{"id":3538,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20731:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"baseExpression":{"id":3534,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"20710:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bytes32Set_$4173_storage_$","typeString":"mapping(address => struct EnumerableSet.Bytes32Set storage ref)"}},"id":3536,"indexExpression":{"id":3535,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20723:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20710:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":3537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20727:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4191,"src":"20710:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$4173_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$4173_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20710:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3540,"nodeType":"ExpressionStatement","src":"20710:29:25"},{"expression":{"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3541,"name":"_tokenOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"20749:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":3543,"indexExpression":{"id":3542,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20762:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20749:21:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3544,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20773:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20749:26:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3546,"nodeType":"ExpressionStatement","src":"20749:26:25"},{"eventCall":{"arguments":[{"expression":{"id":3548,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20800:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20804:6:25","memberName":"sender","nodeType":"MemberAccess","src":"20800:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3550,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20812:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3551,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20818:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3552,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20822:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3553,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"20831:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3554,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"20838:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3547,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"20791:8:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,bytes32,bool,bytes memory)"}},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20791:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3556,"nodeType":"EmitStatement","src":"20786:57:25"},{"expression":{"arguments":[{"id":3558,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20874:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3559,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20880:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3560,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20884:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3561,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"20893:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3557,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"20854:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes32,bytes memory)"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20854:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3563,"nodeType":"ExpressionStatement","src":"20854:44:25"},{"assignments":[3565],"declarations":[{"constant":false,"id":3565,"mutability":"mutable","name":"lsp1Data","nameLocation":"20922:8:25","nodeType":"VariableDeclaration","scope":3587,"src":"20909:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3564,"name":"bytes","nodeType":"ElementaryTypeName","src":"20909:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3575,"initialValue":{"arguments":[{"expression":{"id":3568,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20944:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20948:6:25","memberName":"sender","nodeType":"MemberAccess","src":"20944:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3570,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"20956:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"20962:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3572,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"20966:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3573,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"20975:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3566,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20933:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20937:6:25","memberName":"encode","nodeType":"MemberAccess","src":"20933:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20933:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"20909:71:25"},{"expression":{"arguments":[{"id":3577,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"21010:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3578,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"21016:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3576,"name":"_notifyTokenSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"20991:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20991:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3580,"nodeType":"ExpressionStatement","src":"20991:34:25"},{"expression":{"arguments":[{"id":3582,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"21056:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3583,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"21060:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3584,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"21067:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3581,"name":"_notifyTokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"21035:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bool,bytes memory)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21035:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3586,"nodeType":"ExpressionStatement","src":"21035:41:25"}]},"documentation":{"id":3457,"nodeType":"StructuredDocumentation","src":"18367:1420:25","text":" @dev Change the owner of the `tokenId` from `from` to `to`.\n Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\n function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\n all the parameters in the calldata packed encoded.\n @custom:info Any logic in the:\n - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\n - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\n @param from The sender address.\n @param to The recipient address.\n @param tokenId The token to transfer.\n @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\n @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n @custom:requirements\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n @custom:events {Transfer} event.\n @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`."},"id":3588,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"19801:9:25","nodeType":"FunctionDefinition","parameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3459,"mutability":"mutable","name":"from","nameLocation":"19828:4:25","nodeType":"VariableDeclaration","scope":3588,"src":"19820:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3458,"name":"address","nodeType":"ElementaryTypeName","src":"19820:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3461,"mutability":"mutable","name":"to","nameLocation":"19850:2:25","nodeType":"VariableDeclaration","scope":3588,"src":"19842:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3460,"name":"address","nodeType":"ElementaryTypeName","src":"19842:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"tokenId","nameLocation":"19870:7:25","nodeType":"VariableDeclaration","scope":3588,"src":"19862:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19862:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3465,"mutability":"mutable","name":"force","nameLocation":"19892:5:25","nodeType":"VariableDeclaration","scope":3588,"src":"19887:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3464,"name":"bool","nodeType":"ElementaryTypeName","src":"19887:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3467,"mutability":"mutable","name":"data","nameLocation":"19920:4:25","nodeType":"VariableDeclaration","scope":3588,"src":"19907:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3466,"name":"bytes","nodeType":"ElementaryTypeName","src":"19907:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19810:120:25"},"returnParameters":{"id":3469,"nodeType":"ParameterList","parameters":[],"src":"19948:0:25"},"scope":3737,"src":"19792:1291:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3612,"nodeType":"Block","src":"21629:121:25","statements":[{"expression":{"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3598,"name":"_tokenIdData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"21639:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => bytes storage ref))"}},"id":3601,"indexExpression":{"id":3599,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"21652:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21639:21:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":3602,"indexExpression":{"id":3600,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"21661:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21639:30:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3603,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"21672:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"21639:42:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3605,"nodeType":"ExpressionStatement","src":"21639:42:25"},{"eventCall":{"arguments":[{"id":3607,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"21715:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3608,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"21724:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3609,"name":"dataValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"21733:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3606,"name":"TokenIdDataChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"21696:18:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes32,bytes memory)"}},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21696:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3611,"nodeType":"EmitStatement","src":"21691:52:25"}]},"documentation":{"id":3589,"nodeType":"StructuredDocumentation","src":"21089:402:25","text":" @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\n The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to set.\n @param dataValue The value to set for the given data key.\n @custom:events {TokenIdDataChanged} event."},"id":3613,"implemented":true,"kind":"function","modifiers":[],"name":"_setDataForTokenId","nameLocation":"21505:18:25","nodeType":"FunctionDefinition","parameters":{"id":3596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3591,"mutability":"mutable","name":"tokenId","nameLocation":"21541:7:25","nodeType":"VariableDeclaration","scope":3613,"src":"21533:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21533:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3593,"mutability":"mutable","name":"dataKey","nameLocation":"21566:7:25","nodeType":"VariableDeclaration","scope":3613,"src":"21558:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21558:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3595,"mutability":"mutable","name":"dataValue","nameLocation":"21596:9:25","nodeType":"VariableDeclaration","scope":3613,"src":"21583:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3594,"name":"bytes","nodeType":"ElementaryTypeName","src":"21583:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21523:88:25"},"returnParameters":{"id":3597,"nodeType":"ParameterList","parameters":[],"src":"21629:0:25"},"scope":3737,"src":"21496:254:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3629,"nodeType":"Block","src":"22292:54:25","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3623,"name":"_tokenIdData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"22309:12:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_bytes32_$_t_bytes_storage_$_$","typeString":"mapping(bytes32 => mapping(bytes32 => bytes storage ref))"}},"id":3625,"indexExpression":{"id":3624,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"22322:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22309:21:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes_storage_$","typeString":"mapping(bytes32 => bytes storage ref)"}},"id":3627,"indexExpression":{"id":3626,"name":"dataKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"22331:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22309:30:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":3622,"id":3628,"nodeType":"Return","src":"22302:37:25"}]},"documentation":{"id":3614,"nodeType":"StructuredDocumentation","src":"21756:391:25","text":" @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\n The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\n @param tokenId The unique identifier for a token.\n @param dataKey The key for the data to retrieve.\n @return dataValues The data value associated with the given `tokenId` and `dataKey`."},"id":3630,"implemented":true,"kind":"function","modifiers":[],"name":"_getDataForTokenId","nameLocation":"22161:18:25","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"mutability":"mutable","name":"tokenId","nameLocation":"22197:7:25","nodeType":"VariableDeclaration","scope":3630,"src":"22189:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22189:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"dataKey","nameLocation":"22222:7:25","nodeType":"VariableDeclaration","scope":3630,"src":"22214:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22214:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22179:56:25"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"dataValues","nameLocation":"22280:10:25","nodeType":"VariableDeclaration","scope":3630,"src":"22267:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3620,"name":"bytes","nodeType":"ElementaryTypeName","src":"22267:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22266:25:25"},"scope":3737,"src":"22152:194:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3642,"nodeType":"Block","src":"22956:2:25","statements":[]},"documentation":{"id":3631,"nodeType":"StructuredDocumentation","src":"22352:407:25","text":" @dev Hook that is called before any token transfer, including minting and burning.\n Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\n @param from The sender address\n @param to The recipient address\n @param tokenId The tokenId to transfer\n @param data The data sent alongside the transfer"},"id":3643,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"22773:20:25","nodeType":"FunctionDefinition","parameters":{"id":3640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"mutability":"mutable","name":"from","nameLocation":"22811:4:25","nodeType":"VariableDeclaration","scope":3643,"src":"22803:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"22803:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3635,"mutability":"mutable","name":"to","nameLocation":"22833:2:25","nodeType":"VariableDeclaration","scope":3643,"src":"22825:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3634,"name":"address","nodeType":"ElementaryTypeName","src":"22825:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3637,"mutability":"mutable","name":"tokenId","nameLocation":"22853:7:25","nodeType":"VariableDeclaration","scope":3643,"src":"22845:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22845:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3639,"mutability":"mutable","name":"data","nameLocation":"22883:4:25","nodeType":"VariableDeclaration","scope":3643,"src":"22870:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3638,"name":"bytes","nodeType":"ElementaryTypeName","src":"22870:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22793:145:25"},"returnParameters":{"id":3641,"nodeType":"ParameterList","parameters":[],"src":"22956:0:25"},"scope":3737,"src":"22764:194:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3655,"nodeType":"Block","src":"23586:2:25","statements":[]},"documentation":{"id":3644,"nodeType":"StructuredDocumentation","src":"22964:426:25","text":" @dev Hook that is called after any token transfer, including minting and burning.\n Allows to run custom logic after updating balances, but **before notifiying sender/recipient via LSP1** by overriding this function.\n @param from The sender address\n @param to The recipient address\n @param tokenId The tokenId to transfer\n @param data The data sent alongside the transfer"},"id":3656,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"23404:19:25","nodeType":"FunctionDefinition","parameters":{"id":3653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3646,"mutability":"mutable","name":"from","nameLocation":"23441:4:25","nodeType":"VariableDeclaration","scope":3656,"src":"23433:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3645,"name":"address","nodeType":"ElementaryTypeName","src":"23433:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3648,"mutability":"mutable","name":"to","nameLocation":"23463:2:25","nodeType":"VariableDeclaration","scope":3656,"src":"23455:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"23455:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3650,"mutability":"mutable","name":"tokenId","nameLocation":"23483:7:25","nodeType":"VariableDeclaration","scope":3656,"src":"23475:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23475:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3652,"mutability":"mutable","name":"data","nameLocation":"23513:4:25","nodeType":"VariableDeclaration","scope":3656,"src":"23500:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3651,"name":"bytes","nodeType":"ElementaryTypeName","src":"23500:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23423:145:25"},"returnParameters":{"id":3654,"nodeType":"ParameterList","parameters":[],"src":"23586:0:25"},"scope":3737,"src":"23395:193:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3672,"nodeType":"Block","src":"24311:144:25","statements":[{"expression":{"arguments":[{"id":3667,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"24368:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3668,"name":"_TYPEID_LSP8_TOKENOPERATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"24390:26:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3669,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"24430:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3664,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"24321:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP1Utils_$643_$","typeString":"type(library LSP1Utils)"}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24331:23:25","memberName":"notifyUniversalReceiver","nodeType":"MemberAccess","referencedDeclaration":599,"src":"24321:33:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory)"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24321:127:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3671,"nodeType":"ExpressionStatement","src":"24321:127:25"}]},"documentation":{"id":3657,"nodeType":"StructuredDocumentation","src":"23594:602:25","text":" @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\n If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n @param operator The address to call the {universalReceiver} function on.\n @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call."},"id":3673,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenOperator","nameLocation":"24210:20:25","nodeType":"FunctionDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3659,"mutability":"mutable","name":"operator","nameLocation":"24248:8:25","nodeType":"VariableDeclaration","scope":3673,"src":"24240:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"24240:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3661,"mutability":"mutable","name":"lsp1Data","nameLocation":"24279:8:25","nodeType":"VariableDeclaration","scope":3673,"src":"24266:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3660,"name":"bytes","nodeType":"ElementaryTypeName","src":"24266:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24230:63:25"},"returnParameters":{"id":3663,"nodeType":"ParameterList","parameters":[],"src":"24311:0:25"},"scope":3737,"src":"24201:254:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3689,"nodeType":"Block","src":"25156:139:25","statements":[{"expression":{"arguments":[{"id":3684,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3676,"src":"25213:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3685,"name":"_TYPEID_LSP8_TOKENSSENDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"25231:25:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3686,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"25270:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3681,"name":"LSP1Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"25166:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LSP1Utils_$643_$","typeString":"type(library LSP1Utils)"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25176:23:25","memberName":"notifyUniversalReceiver","nodeType":"MemberAccess","referencedDeclaration":599,"src":"25166:33:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory)"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25166:122:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3688,"nodeType":"ExpressionStatement","src":"25166:122:25"}]},"documentation":{"id":3674,"nodeType":"StructuredDocumentation","src":"24461:586:25","text":" @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\n If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\n @param from The address to call the {universalReceiver} function on.\n @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call."},"id":3690,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenSender","nameLocation":"25061:18:25","nodeType":"FunctionDefinition","parameters":{"id":3679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"from","nameLocation":"25097:4:25","nodeType":"VariableDeclaration","scope":3690,"src":"25089:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3675,"name":"address","nodeType":"ElementaryTypeName","src":"25089:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3678,"mutability":"mutable","name":"lsp1Data","nameLocation":"25124:8:25","nodeType":"VariableDeclaration","scope":3690,"src":"25111:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3677,"name":"bytes","nodeType":"ElementaryTypeName","src":"25111:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25079:59:25"},"returnParameters":{"id":3680,"nodeType":"ParameterList","parameters":[],"src":"25156:0:25"},"scope":3737,"src":"25052:243:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3735,"nodeType":"Block","src":"26309:491:25","statements":[{"condition":{"arguments":[{"id":3702,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"26400:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3703,"name":"_INTERFACEID_LSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"26420:17:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3700,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"26336:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$3956_$","typeString":"type(library ERC165Checker)"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26350:32:25","memberName":"supportsERC165InterfaceUnchecked","nodeType":"MemberAccess","referencedDeclaration":3955,"src":"26336:46:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26336:115:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"26564:6:25","subExpression":{"id":3714,"name":"force","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"26565:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3733,"nodeType":"IfStatement","src":"26560:234:25","trueBody":{"id":3732,"nodeType":"Block","src":"26572:222:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3716,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"26590:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26593:4:25","memberName":"code","nodeType":"MemberAccess","src":"26590:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26598:6:25","memberName":"length","nodeType":"MemberAccess","src":"26590:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26608:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26590:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3730,"nodeType":"Block","src":"26712:72:25","statements":[{"errorCall":{"arguments":[{"id":3727,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"26766:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3726,"name":"LSP8NotifyTokenReceiverIsEOA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"26737:28:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26737:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3729,"nodeType":"RevertStatement","src":"26730:39:25"}]},"id":3731,"nodeType":"IfStatement","src":"26586:198:25","trueBody":{"id":3725,"nodeType":"Block","src":"26611:95:25","statements":[{"errorCall":{"arguments":[{"id":3722,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"26688:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3721,"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"26636:51:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26636:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3724,"nodeType":"RevertStatement","src":"26629:62:25"}]}}]}},"id":3734,"nodeType":"IfStatement","src":"26319:475:25","trueBody":{"id":3713,"nodeType":"Block","src":"26462:92:25","statements":[{"expression":{"arguments":[{"id":3709,"name":"_TYPEID_LSP8_TOKENSRECIPIENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"26504:28:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3710,"name":"lsp1Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"26534:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3706,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"26482:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3705,"name":"ILSP1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"26476:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILSP1UniversalReceiver_$544_$","typeString":"type(contract ILSP1UniversalReceiver)"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26476:9:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILSP1UniversalReceiver_$544","typeString":"contract ILSP1UniversalReceiver"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26486:17:25","memberName":"universalReceiver","nodeType":"MemberAccess","referencedDeclaration":543,"src":"26476:27:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32,bytes memory) payable external returns (bytes memory)"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26476:67:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3712,"nodeType":"ExpressionStatement","src":"26476:67:25"}]}}]},"documentation":{"id":3691,"nodeType":"StructuredDocumentation","src":"25301:879:25","text":" @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\n This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\n If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\n - if `force` is set to `true`, nothing will happen and no notification will be sent.\n - if `force` is set to `false, the transaction will revert.\n @param to The address to call the {universalReceiver} function on.\n @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\n @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call."},"id":3736,"implemented":true,"kind":"function","modifiers":[],"name":"_notifyTokenReceiver","nameLocation":"26194:20:25","nodeType":"FunctionDefinition","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"to","nameLocation":"26232:2:25","nodeType":"VariableDeclaration","scope":3736,"src":"26224:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3692,"name":"address","nodeType":"ElementaryTypeName","src":"26224:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"force","nameLocation":"26249:5:25","nodeType":"VariableDeclaration","scope":3736,"src":"26244:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3694,"name":"bool","nodeType":"ElementaryTypeName","src":"26244:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"lsp1Data","nameLocation":"26277:8:25","nodeType":"VariableDeclaration","scope":3736,"src":"26264:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3696,"name":"bytes","nodeType":"ElementaryTypeName","src":"26264:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"26214:77:25"},"returnParameters":{"id":3699,"nodeType":"ParameterList","parameters":[],"src":"26309:0:25"},"scope":3737,"src":"26185:615:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3738,"src":"1677:25125:25","usedErrors":[407,412,448,451,454,1736,1739,1742,2023,2032,2039,2046,2049,2052,2059,2067,2072,2077,2080,2089,2092,2097,2106,2115],"usedEvents":[307,468,1768,1779,1792,1801]}],"src":"39:26764:25"},"id":25},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3761],"IERC165":[3968]},"id":3762,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3739,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:26"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3762,"sourceUnit":3969,"src":"140:38:26","symbolAliases":[{"foreign":{"id":3740,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"148:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3743,"name":"IERC165","nameLocations":["687:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":3968,"src":"687:7:26"},"id":3744,"nodeType":"InheritanceSpecifier","src":"687:7:26"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3742,"nodeType":"StructuredDocumentation","src":"180:478:26","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":3761,"linearizedBaseContracts":[3761,3968],"name":"ERC165","nameLocation":"677:6:26","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3967],"body":{"id":3759,"nodeType":"Block","src":"844:64:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3752,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3747,"src":"861:11:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3754,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"881:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3968_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3968_$","typeString":"type(contract IERC165)"}],"id":3753,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:26","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3968","typeString":"type(contract IERC165)"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:26","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3751,"id":3758,"nodeType":"Return","src":"854:47:26"}]},"documentation":{"id":3745,"nodeType":"StructuredDocumentation","src":"701:56:26","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3760,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:26","nodeType":"FunctionDefinition","parameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:26","nodeType":"VariableDeclaration","scope":3760,"src":"789:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3746,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:26"},"returnParameters":{"id":3751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3760,"src":"838:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3749,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:26"},"scope":3761,"src":"762:146:26","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3762,"src":"659:251:26","usedErrors":[],"usedEvents":[]}],"src":"114:797:26"},"id":26},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","exportedSymbols":{"ERC165Checker":[3956],"IERC165":[3968]},"id":3957,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3763,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"121:24:27"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3765,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3957,"sourceUnit":3969,"src":"147:38:27","symbolAliases":[{"foreign":{"id":3764,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"155:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC165Checker","contractDependencies":[],"contractKind":"library","documentation":{"id":3766,"nodeType":"StructuredDocumentation","src":"187:277:27","text":" @dev Library used to query support of an interface declared via {IERC165}.\n Note that these functions return the actual result of the query: they do not\n `revert` if an interface is not supported. It is up to the caller to decide\n what to do in these cases."},"fullyImplemented":true,"id":3956,"linearizedBaseContracts":[3956],"name":"ERC165Checker","nameLocation":"473:13:27","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3769,"mutability":"constant","name":"INTERFACE_ID_INVALID","nameLocation":"591:20:27","nodeType":"VariableDeclaration","scope":3956,"src":"567:57:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3767,"name":"bytes4","nodeType":"ElementaryTypeName","src":"567:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"614:10:27","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"private"},{"body":{"id":3791,"nodeType":"Block","src":"789:356:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3778,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"1023:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3780,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"1037:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3968_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3968_$","typeString":"type(contract IERC165)"}],"id":3779,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1032:4:27","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1032:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3968","typeString":"type(contract IERC165)"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1046:11:27","memberName":"interfaceId","nodeType":"MemberAccess","src":"1032:25:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3777,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"990:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"990:68:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1074:64:27","subExpression":{"arguments":[{"id":3785,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"1108:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3786,"name":"INTERFACE_ID_INVALID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"1117:20:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3784,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"1075:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1075:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"990:148:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3776,"id":3790,"nodeType":"Return","src":"971:167:27"}]},"documentation":{"id":3770,"nodeType":"StructuredDocumentation","src":"631:83:27","text":" @dev Returns true if `account` supports the {IERC165} interface."},"id":3792,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165","nameLocation":"728:14:27","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"account","nameLocation":"751:7:27","nodeType":"VariableDeclaration","scope":3792,"src":"743:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3771,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"742:17:27"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3792,"src":"783:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3774,"name":"bool","nodeType":"ElementaryTypeName","src":"783:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"782:6:27"},"scope":3956,"src":"719:426:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3811,"nodeType":"Block","src":"1456:189:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3803,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"1572:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3802,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"1557:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1557:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":3806,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"1617:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3807,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"1626:11:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3805,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"1584:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:54:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1557:81:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3801,"id":3810,"nodeType":"Return","src":"1550:88:27"}]},"documentation":{"id":3793,"nodeType":"StructuredDocumentation","src":"1151:207:27","text":" @dev Returns true if `account` supports the interface defined by\n `interfaceId`. Support for {IERC165} itself is queried automatically.\n See {IERC165-supportsInterface}."},"id":3812,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1372:17:27","nodeType":"FunctionDefinition","parameters":{"id":3798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"account","nameLocation":"1398:7:27","nodeType":"VariableDeclaration","scope":3812,"src":"1390:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3794,"name":"address","nodeType":"ElementaryTypeName","src":"1390:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"interfaceId","nameLocation":"1414:11:27","nodeType":"VariableDeclaration","scope":3812,"src":"1407:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3796,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1407:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1389:37:27"},"returnParameters":{"id":3801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3812,"src":"1450:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3799,"name":"bool","nodeType":"ElementaryTypeName","src":"1450:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1449:6:27"},"scope":3956,"src":"1363:282:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3867,"nodeType":"Block","src":"2131:560:27","statements":[{"assignments":[3828],"declarations":[{"constant":false,"id":3828,"mutability":"mutable","name":"interfaceIdsSupported","nameLocation":"2254:21:27","nodeType":"VariableDeclaration","scope":3867,"src":"2240:35:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3826,"name":"bool","nodeType":"ElementaryTypeName","src":"2240:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3827,"nodeType":"ArrayTypeName","src":"2240:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"id":3835,"initialValue":{"arguments":[{"expression":{"id":3832,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"2289:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2302:6:27","memberName":"length","nodeType":"MemberAccess","src":"2289:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2278:10:27","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bool[] memory)"},"typeName":{"baseType":{"id":3829,"name":"bool","nodeType":"ElementaryTypeName","src":"2282:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3830,"nodeType":"ArrayTypeName","src":"2282:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2278:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2240:69:27"},{"condition":{"arguments":[{"id":3837,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"2381:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3836,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"2366:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2366:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3864,"nodeType":"IfStatement","src":"2362:284:27","trueBody":{"id":3863,"nodeType":"Block","src":"2391:255:27","statements":[{"body":{"id":3861,"nodeType":"Block","src":"2518:118:27","statements":[{"expression":{"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3850,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"2536:21:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":3852,"indexExpression":{"id":3851,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2558:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2536:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3854,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"2596:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3855,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"2605:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3857,"indexExpression":{"id":3856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2618:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2605:15:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3853,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"2563:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:58:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2536:85:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3860,"nodeType":"ExpressionStatement","src":"2536:85:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3843,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2488:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3844,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"2492:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2505:6:27","memberName":"length","nodeType":"MemberAccess","src":"2492:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2488:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3862,"initializationExpression":{"assignments":[3840],"declarations":[{"constant":false,"id":3840,"mutability":"mutable","name":"i","nameLocation":"2481:1:27","nodeType":"VariableDeclaration","scope":3862,"src":"2473:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2473:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3842,"initialValue":{"hexValue":"30","id":3841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2485:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2473:13:27"},"loopExpression":{"expression":{"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2513:3:27","subExpression":{"id":3847,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2513:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3849,"nodeType":"ExpressionStatement","src":"2513:3:27"},"nodeType":"ForStatement","src":"2468:168:27"}]}},{"expression":{"id":3865,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"2663:21:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"functionReturnParameters":3823,"id":3866,"nodeType":"Return","src":"2656:28:27"}]},"documentation":{"id":3813,"nodeType":"StructuredDocumentation","src":"1651:336:27","text":" @dev Returns a boolean array where each value corresponds to the\n interfaces passed in and whether they're supported or not. This allows\n you to batch check interfaces for a contract where your expectation\n is that some interfaces may not be supported.\n See {IERC165-supportsInterface}."},"id":3868,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInterfaces","nameLocation":"2001:22:27","nodeType":"FunctionDefinition","parameters":{"id":3819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"account","nameLocation":"2041:7:27","nodeType":"VariableDeclaration","scope":3868,"src":"2033:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3814,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"interfaceIds","nameLocation":"2074:12:27","nodeType":"VariableDeclaration","scope":3868,"src":"2058:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3816,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2058:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3817,"nodeType":"ArrayTypeName","src":"2058:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"2023:69:27"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3868,"src":"2116:13:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3820,"name":"bool","nodeType":"ElementaryTypeName","src":"2116:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3821,"nodeType":"ArrayTypeName","src":"2116:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"2115:15:27"},"scope":3956,"src":"1992:699:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3913,"nodeType":"Block","src":"3133:436:27","statements":[{"condition":{"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3189:24:27","subExpression":{"arguments":[{"id":3880,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"3205:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3879,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"3190:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3886,"nodeType":"IfStatement","src":"3185:67:27","trueBody":{"id":3885,"nodeType":"Block","src":"3215:37:27","statements":[{"expression":{"hexValue":"66616c7365","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3236:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3878,"id":3884,"nodeType":"Return","src":"3229:12:27"}]}},{"body":{"id":3909,"nodeType":"Block","src":"3371:134:27","statements":[{"condition":{"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3389:59:27","subExpression":{"arguments":[{"id":3899,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"3423:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3900,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3432:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3902,"indexExpression":{"id":3901,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"3445:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3432:15:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3898,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"3390:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3390:58:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3908,"nodeType":"IfStatement","src":"3385:110:27","trueBody":{"id":3907,"nodeType":"Block","src":"3450:45:27","statements":[{"expression":{"hexValue":"66616c7365","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3475:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3878,"id":3906,"nodeType":"Return","src":"3468:12:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3891,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"3341:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3892,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3345:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3358:6:27","memberName":"length","nodeType":"MemberAccess","src":"3345:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3341:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3910,"initializationExpression":{"assignments":[3888],"declarations":[{"constant":false,"id":3888,"mutability":"mutable","name":"i","nameLocation":"3334:1:27","nodeType":"VariableDeclaration","scope":3910,"src":"3326:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"3326:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3890,"initialValue":{"hexValue":"30","id":3889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3338:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3326:13:27"},"loopExpression":{"expression":{"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3366:3:27","subExpression":{"id":3895,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"3366:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3897,"nodeType":"ExpressionStatement","src":"3366:3:27"},"nodeType":"ForStatement","src":"3321:184:27"},{"expression":{"hexValue":"74727565","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3558:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3878,"id":3912,"nodeType":"Return","src":"3551:11:27"}]},"documentation":{"id":3869,"nodeType":"StructuredDocumentation","src":"2697:324:27","text":" @dev Returns true if `account` supports all the interfaces defined in\n `interfaceIds`. Support for {IERC165} itself is queried automatically.\n Batch-querying can lead to gas savings by skipping repeated checks for\n {IERC165} support.\n See {IERC165-supportsInterface}."},"id":3914,"implemented":true,"kind":"function","modifiers":[],"name":"supportsAllInterfaces","nameLocation":"3035:21:27","nodeType":"FunctionDefinition","parameters":{"id":3875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"account","nameLocation":"3065:7:27","nodeType":"VariableDeclaration","scope":3914,"src":"3057:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3870,"name":"address","nodeType":"ElementaryTypeName","src":"3057:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3874,"mutability":"mutable","name":"interfaceIds","nameLocation":"3090:12:27","nodeType":"VariableDeclaration","scope":3914,"src":"3074:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3872,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3074:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3873,"nodeType":"ArrayTypeName","src":"3074:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3056:47:27"},"returnParameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3914,"src":"3127:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3876,"name":"bool","nodeType":"ElementaryTypeName","src":"3127:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3126:6:27"},"scope":3956,"src":"3026:543:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3954,"nodeType":"Block","src":"4505:524:27","statements":[{"assignments":[3925],"declarations":[{"constant":false,"id":3925,"mutability":"mutable","name":"encodedParams","nameLocation":"4552:13:27","nodeType":"VariableDeclaration","scope":3954,"src":"4539:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3924,"name":"bytes","nodeType":"ElementaryTypeName","src":"4539:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3933,"initialValue":{"arguments":[{"expression":{"id":3928,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"4583:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3968_$","typeString":"type(contract IERC165)"}},"id":3929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4591:17:27","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3967,"src":"4583:25:27","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"}},{"components":[{"id":3930,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"4611:11:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"id":3931,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4610:13:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3926,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4568:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4572:10:27","memberName":"encodeCall","nodeType":"MemberAccess","src":"4568:14:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:56:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4539:85:27"},{"assignments":[3935],"declarations":[{"constant":false,"id":3935,"mutability":"mutable","name":"success","nameLocation":"4671:7:27","nodeType":"VariableDeclaration","scope":3954,"src":"4666:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3934,"name":"bool","nodeType":"ElementaryTypeName","src":"4666:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3936,"nodeType":"VariableDeclarationStatement","src":"4666:12:27"},{"assignments":[3938],"declarations":[{"constant":false,"id":3938,"mutability":"mutable","name":"returnSize","nameLocation":"4696:10:27","nodeType":"VariableDeclaration","scope":3954,"src":"4688:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3939,"nodeType":"VariableDeclarationStatement","src":"4688:18:27"},{"assignments":[3941],"declarations":[{"constant":false,"id":3941,"mutability":"mutable","name":"returnValue","nameLocation":"4724:11:27","nodeType":"VariableDeclaration","scope":3954,"src":"4716:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3940,"name":"uint256","nodeType":"ElementaryTypeName","src":"4716:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3942,"nodeType":"VariableDeclarationStatement","src":"4716:19:27"},{"AST":{"nodeType":"YulBlock","src":"4754:203:27","statements":[{"nodeType":"YulAssignment","src":"4768:97:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4790:5:27","type":"","value":"30000"},{"name":"account","nodeType":"YulIdentifier","src":"4797:7:27"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4810:13:27"},{"kind":"number","nodeType":"YulLiteral","src":"4825:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:27"},"nodeType":"YulFunctionCall","src":"4806:24:27"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4838:13:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4832:5:27"},"nodeType":"YulFunctionCall","src":"4832:20:27"},{"kind":"number","nodeType":"YulLiteral","src":"4854:4:27","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"4860:4:27","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"4779:10:27"},"nodeType":"YulFunctionCall","src":"4779:86:27"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"4768:7:27"}]},{"nodeType":"YulAssignment","src":"4878:30:27","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4892:14:27"},"nodeType":"YulFunctionCall","src":"4892:16:27"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"4878:10:27"}]},{"nodeType":"YulAssignment","src":"4921:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4942:4:27","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4936:5:27"},"nodeType":"YulFunctionCall","src":"4936:11:27"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"4921:11:27"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3917,"isOffset":false,"isSlot":false,"src":"4797:7:27","valueSize":1},{"declaration":3925,"isOffset":false,"isSlot":false,"src":"4810:13:27","valueSize":1},{"declaration":3925,"isOffset":false,"isSlot":false,"src":"4838:13:27","valueSize":1},{"declaration":3938,"isOffset":false,"isSlot":false,"src":"4878:10:27","valueSize":1},{"declaration":3941,"isOffset":false,"isSlot":false,"src":"4921:11:27","valueSize":1},{"declaration":3935,"isOffset":false,"isSlot":false,"src":"4768:7:27","valueSize":1}],"id":3943,"nodeType":"InlineAssembly","src":"4745:212:27"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3944,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"4974:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3945,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"4985:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783230","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4999:4:27","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"4985:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4974:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3941,"src":"5007:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5021:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5007:15:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4974:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3923,"id":3953,"nodeType":"Return","src":"4967:55:27"}]},"documentation":{"id":3915,"nodeType":"StructuredDocumentation","src":"3575:817:27","text":" @notice Query if a contract implements an interface, does not check ERC165 support\n @param account The address of the contract to query for support of an interface\n @param interfaceId The interface identifier, as specified in ERC-165\n @return true if the contract at account indicates support of the interface with\n identifier interfaceId, false otherwise\n @dev Assumes that account contains a contract that supports ERC165, otherwise\n the behavior of this method is undefined. This precondition can be checked\n with {supportsERC165}.\n Some precompiled contracts will falsely indicate support for a given interface, so caution\n should be exercised when using this function.\n Interface identification is specified in ERC-165."},"id":3955,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165InterfaceUnchecked","nameLocation":"4406:32:27","nodeType":"FunctionDefinition","parameters":{"id":3920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3917,"mutability":"mutable","name":"account","nameLocation":"4447:7:27","nodeType":"VariableDeclaration","scope":3955,"src":"4439:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3916,"name":"address","nodeType":"ElementaryTypeName","src":"4439:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3919,"mutability":"mutable","name":"interfaceId","nameLocation":"4463:11:27","nodeType":"VariableDeclaration","scope":3955,"src":"4456:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3918,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4456:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4438:37:27"},"returnParameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3955,"src":"4499:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3921,"name":"bool","nodeType":"ElementaryTypeName","src":"4499:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4498:6:27"},"scope":3956,"src":"4397:632:27","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3957,"src":"465:4566:27","usedErrors":[],"usedEvents":[]}],"src":"121:4911:27"},"id":27},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3968]},"id":3969,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3958,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3959,"nodeType":"StructuredDocumentation","src":"141:279:28","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3968,"linearizedBaseContracts":[3968],"name":"IERC165","nameLocation":"431:7:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"445:340:28","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3967,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:28","nodeType":"FunctionDefinition","parameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:28","nodeType":"VariableDeclaration","scope":3967,"src":"817:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3961,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:28"},"returnParameters":{"id":3966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3967,"src":"860:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3964,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:28"},"scope":3968,"src":"790:76:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3969,"src":"421:447:28","usedErrors":[],"usedEvents":[]}],"src":"115:754:28"},"id":28},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[4581]},"id":4582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3970,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"205:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":3971,"nodeType":"StructuredDocumentation","src":"231:1098:29","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":4581,"linearizedBaseContracts":[4581],"name":"EnumerableSet","nameLocation":"1338:13:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":3979,"members":[{"constant":false,"id":3974,"mutability":"mutable","name":"_values","nameLocation":"1862:7:29","nodeType":"VariableDeclaration","scope":3979,"src":"1852:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1852:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3973,"nodeType":"ArrayTypeName","src":"1852:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3978,"mutability":"mutable","name":"_positions","nameLocation":"2054:10:29","nodeType":"VariableDeclaration","scope":3979,"src":"2020:44:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3977,"keyName":"value","keyNameLocation":"2036:5:29","keyType":{"id":3975,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2028:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2020:33:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1805:3:29","nodeType":"StructDefinition","scope":4581,"src":"1798:273:29","visibility":"public"},{"body":{"id":4020,"nodeType":"Block","src":"2310:337:29","statements":[{"condition":{"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2324:22:29","subExpression":{"arguments":[{"id":3991,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"2335:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":3992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2340:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3990,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"2325:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4018,"nodeType":"Block","src":"2604:37:29","statements":[{"expression":{"hexValue":"66616c7365","id":4016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2625:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3989,"id":4017,"nodeType":"Return","src":"2618:12:29"}]},"id":4019,"nodeType":"IfStatement","src":"2320:321:29","trueBody":{"id":4015,"nodeType":"Block","src":"2348:250:29","statements":[{"expression":{"arguments":[{"id":4000,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2379:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":3995,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"2362:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":3998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2366:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"2362:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:4:29","memberName":"push","nodeType":"MemberAccess","src":"2362:16:29","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2362:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4002,"nodeType":"ExpressionStatement","src":"2362:23:29"},{"expression":{"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4003,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"2520:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2524:10:29","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"2520:14:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4007,"indexExpression":{"id":4005,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2535:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2520:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4008,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"2544:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4009,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2548:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"2544:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2556:6:29","memberName":"length","nodeType":"MemberAccess","src":"2544:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2520:42:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4012,"nodeType":"ExpressionStatement","src":"2520:42:29"},{"expression":{"hexValue":"74727565","id":4013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2583:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3989,"id":4014,"nodeType":"Return","src":"2576:11:29"}]}}]},"documentation":{"id":3980,"nodeType":"StructuredDocumentation","src":"2077:159:29","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4021,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2250:4:29","nodeType":"FunctionDefinition","parameters":{"id":3986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3983,"mutability":"mutable","name":"set","nameLocation":"2267:3:29","nodeType":"VariableDeclaration","scope":4021,"src":"2255:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3982,"nodeType":"UserDefinedTypeName","pathNode":{"id":3981,"name":"Set","nameLocations":["2255:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"2255:3:29"},"referencedDeclaration":3979,"src":"2255:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":3985,"mutability":"mutable","name":"value","nameLocation":"2280:5:29","nodeType":"VariableDeclaration","scope":4021,"src":"2272:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3984,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2272:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2254:32:29"},"returnParameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4021,"src":"2304:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3987,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2303:6:29"},"scope":4581,"src":"2241:406:29","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4104,"nodeType":"Block","src":"2887:1296:29","statements":[{"assignments":[4033],"declarations":[{"constant":false,"id":4033,"mutability":"mutable","name":"position","nameLocation":"2999:8:29","nodeType":"VariableDeclaration","scope":4104,"src":"2991:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2991:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4038,"initialValue":{"baseExpression":{"expression":{"id":4034,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3010:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3014:10:29","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"3010:14:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4037,"indexExpression":{"id":4036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"3025:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3010:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2991:40:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4039,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"3046:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3058:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3046:13:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4102,"nodeType":"Block","src":"4140:37:29","statements":[{"expression":{"hexValue":"66616c7365","id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4161:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4031,"id":4101,"nodeType":"Return","src":"4154:12:29"}]},"id":4103,"nodeType":"IfStatement","src":"3042:1135:29","trueBody":{"id":4099,"nodeType":"Block","src":"3061:1073:29","statements":[{"assignments":[4043],"declarations":[{"constant":false,"id":4043,"mutability":"mutable","name":"valueIndex","nameLocation":"3421:10:29","nodeType":"VariableDeclaration","scope":4099,"src":"3413:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4042,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4047,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"3434:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3445:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3434:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3413:33:29"},{"assignments":[4049],"declarations":[{"constant":false,"id":4049,"mutability":"mutable","name":"lastIndex","nameLocation":"3468:9:29","nodeType":"VariableDeclaration","scope":4099,"src":"3460:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4048,"name":"uint256","nodeType":"ElementaryTypeName","src":"3460:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4055,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4050,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3480:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3484:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"3480:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3492:6:29","memberName":"length","nodeType":"MemberAccess","src":"3480:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3501:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3480:22:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3460:42:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4056,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"3521:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4057,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"3535:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3521:23:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4083,"nodeType":"IfStatement","src":"3517:378:29","trueBody":{"id":4082,"nodeType":"Block","src":"3546:349:29","statements":[{"assignments":[4060],"declarations":[{"constant":false,"id":4060,"mutability":"mutable","name":"lastValue","nameLocation":"3572:9:29","nodeType":"VariableDeclaration","scope":4082,"src":"3564:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4059,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4065,"initialValue":{"baseExpression":{"expression":{"id":4061,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3584:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3588:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"3584:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4064,"indexExpression":{"id":4063,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"3596:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3584:22:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3564:42:29"},{"expression":{"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4066,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3705:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3709:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"3705:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4070,"indexExpression":{"id":4068,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"3717:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3705:23:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4071,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"3731:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3705:35:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4073,"nodeType":"ExpressionStatement","src":"3705:35:29"},{"expression":{"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4074,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3844:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3848:10:29","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"3844:14:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4078,"indexExpression":{"id":4076,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"3859:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3844:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4079,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"3872:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3844:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4081,"nodeType":"ExpressionStatement","src":"3844:36:29"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4084,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"3973:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3977:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"3973:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3985:3:29","memberName":"pop","nodeType":"MemberAccess","src":"3973:15:29","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3973:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4090,"nodeType":"ExpressionStatement","src":"3973:17:29"},{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4069:28:29","subExpression":{"baseExpression":{"expression":{"id":4091,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4076:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4080:10:29","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"4076:14:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4094,"indexExpression":{"id":4093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"4091:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4076:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4096,"nodeType":"ExpressionStatement","src":"4069:28:29"},{"expression":{"hexValue":"74727565","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4119:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4031,"id":4098,"nodeType":"Return","src":"4112:11:29"}]}}]},"documentation":{"id":4022,"nodeType":"StructuredDocumentation","src":"2653:157:29","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4105,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2824:7:29","nodeType":"FunctionDefinition","parameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"set","nameLocation":"2844:3:29","nodeType":"VariableDeclaration","scope":4105,"src":"2832:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4024,"nodeType":"UserDefinedTypeName","pathNode":{"id":4023,"name":"Set","nameLocations":["2832:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"2832:3:29"},"referencedDeclaration":3979,"src":"2832:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4027,"mutability":"mutable","name":"value","nameLocation":"2857:5:29","nodeType":"VariableDeclaration","scope":4105,"src":"2849:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2849:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2831:32:29"},"returnParameters":{"id":4031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4105,"src":"2881:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4029,"name":"bool","nodeType":"ElementaryTypeName","src":"2881:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2880:6:29"},"scope":4581,"src":"2815:1368:29","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4123,"nodeType":"Block","src":"4343:50:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4116,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"4360:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4364:10:29","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":3978,"src":"4360:14:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4119,"indexExpression":{"id":4118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"4375:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4360:21:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4360:26:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4115,"id":4122,"nodeType":"Return","src":"4353:33:29"}]},"documentation":{"id":4106,"nodeType":"StructuredDocumentation","src":"4189:70:29","text":" @dev Returns true if the value is in the set. O(1)."},"id":4124,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4273:9:29","nodeType":"FunctionDefinition","parameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4109,"mutability":"mutable","name":"set","nameLocation":"4295:3:29","nodeType":"VariableDeclaration","scope":4124,"src":"4283:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4108,"nodeType":"UserDefinedTypeName","pathNode":{"id":4107,"name":"Set","nameLocations":["4283:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"4283:3:29"},"referencedDeclaration":3979,"src":"4283:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"value","nameLocation":"4308:5:29","nodeType":"VariableDeclaration","scope":4124,"src":"4300:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4300:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4282:32:29"},"returnParameters":{"id":4115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4124,"src":"4337:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4113,"name":"bool","nodeType":"ElementaryTypeName","src":"4337:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4336:6:29"},"scope":4581,"src":"4264:129:29","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4137,"nodeType":"Block","src":"4539:42:29","statements":[{"expression":{"expression":{"expression":{"id":4133,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"4556:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4134,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"4556:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:29","memberName":"length","nodeType":"MemberAccess","src":"4556:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4132,"id":4136,"nodeType":"Return","src":"4549:25:29"}]},"documentation":{"id":4125,"nodeType":"StructuredDocumentation","src":"4399:70:29","text":" @dev Returns the number of values on the set. O(1)."},"id":4138,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:29","nodeType":"FunctionDefinition","parameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"set","nameLocation":"4503:3:29","nodeType":"VariableDeclaration","scope":4138,"src":"4491:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4127,"nodeType":"UserDefinedTypeName","pathNode":{"id":4126,"name":"Set","nameLocations":["4491:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"4491:3:29"},"referencedDeclaration":3979,"src":"4491:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4490:17:29"},"returnParameters":{"id":4132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4138,"src":"4530:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4130,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:29"},"scope":4581,"src":"4474:107:29","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4154,"nodeType":"Block","src":"4999:42:29","statements":[{"expression":{"baseExpression":{"expression":{"id":4149,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"5016:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"5016:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4152,"indexExpression":{"id":4151,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"5028:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4148,"id":4153,"nodeType":"Return","src":"5009:25:29"}]},"documentation":{"id":4139,"nodeType":"StructuredDocumentation","src":"4587:331:29","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4155,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:29","nodeType":"FunctionDefinition","parameters":{"id":4145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4142,"mutability":"mutable","name":"set","nameLocation":"4948:3:29","nodeType":"VariableDeclaration","scope":4155,"src":"4936:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4141,"nodeType":"UserDefinedTypeName","pathNode":{"id":4140,"name":"Set","nameLocations":["4936:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"4936:3:29"},"referencedDeclaration":3979,"src":"4936:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4144,"mutability":"mutable","name":"index","nameLocation":"4961:5:29","nodeType":"VariableDeclaration","scope":4155,"src":"4953:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:29"},"returnParameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4155,"src":"4990:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:29"},"scope":4581,"src":"4923:118:29","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4168,"nodeType":"Block","src":"5655:35:29","statements":[{"expression":{"expression":{"id":4165,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5672:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4166,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:29","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":3974,"src":"5672:11:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":4164,"id":4167,"nodeType":"Return","src":"5665:18:29"}]},"documentation":{"id":4156,"nodeType":"StructuredDocumentation","src":"5047:529:29","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4169,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:29","nodeType":"FunctionDefinition","parameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"set","nameLocation":"5610:3:29","nodeType":"VariableDeclaration","scope":4169,"src":"5598:15:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4158,"nodeType":"UserDefinedTypeName","pathNode":{"id":4157,"name":"Set","nameLocations":["5598:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"5598:3:29"},"referencedDeclaration":3979,"src":"5598:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5597:17:29"},"returnParameters":{"id":4164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4169,"src":"5637:16:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4162,"nodeType":"ArrayTypeName","src":"5637:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:29"},"scope":4581,"src":"5581:109:29","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":4173,"members":[{"constant":false,"id":4172,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:29","nodeType":"VariableDeclaration","scope":4173,"src":"5743:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4171,"nodeType":"UserDefinedTypeName","pathNode":{"id":4170,"name":"Set","nameLocations":["5743:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"5743:3:29"},"referencedDeclaration":3979,"src":"5743:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:29","nodeType":"StructDefinition","scope":4581,"src":"5715:45:29","visibility":"public"},{"body":{"id":4190,"nodeType":"Block","src":"6006:47:29","statements":[{"expression":{"arguments":[{"expression":{"id":4185,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"6028:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4186,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"6028:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"6040:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4184,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"6023:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4183,"id":4189,"nodeType":"Return","src":"6016:30:29"}]},"documentation":{"id":4174,"nodeType":"StructuredDocumentation","src":"5766:159:29","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4191,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:29","nodeType":"FunctionDefinition","parameters":{"id":4180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4177,"mutability":"mutable","name":"set","nameLocation":"5962:3:29","nodeType":"VariableDeclaration","scope":4191,"src":"5943:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4176,"nodeType":"UserDefinedTypeName","pathNode":{"id":4175,"name":"Bytes32Set","nameLocations":["5943:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"5943:10:29"},"referencedDeclaration":4173,"src":"5943:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4179,"mutability":"mutable","name":"value","nameLocation":"5975:5:29","nodeType":"VariableDeclaration","scope":4191,"src":"5967:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:29"},"returnParameters":{"id":4183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4191,"src":"6000:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4181,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:29"},"scope":4581,"src":"5930:123:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4208,"nodeType":"Block","src":"6300:50:29","statements":[{"expression":{"arguments":[{"expression":{"id":4203,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"6325:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"6325:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"6337:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4202,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"6317:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4201,"id":4207,"nodeType":"Return","src":"6310:33:29"}]},"documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"6059:157:29","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4209,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:29","nodeType":"FunctionDefinition","parameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"set","nameLocation":"6256:3:29","nodeType":"VariableDeclaration","scope":4209,"src":"6237:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4194,"nodeType":"UserDefinedTypeName","pathNode":{"id":4193,"name":"Bytes32Set","nameLocations":["6237:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"6237:10:29"},"referencedDeclaration":4173,"src":"6237:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4197,"mutability":"mutable","name":"value","nameLocation":"6269:5:29","nodeType":"VariableDeclaration","scope":4209,"src":"6261:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:29"},"returnParameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4209,"src":"6294:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4199,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:29"},"scope":4581,"src":"6221:129:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4226,"nodeType":"Block","src":"6517:52:29","statements":[{"expression":{"arguments":[{"expression":{"id":4221,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4213,"src":"6544:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"6544:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"6556:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4220,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"6534:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4219,"id":4225,"nodeType":"Return","src":"6527:35:29"}]},"documentation":{"id":4210,"nodeType":"StructuredDocumentation","src":"6356:70:29","text":" @dev Returns true if the value is in the set. O(1)."},"id":4227,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:29","nodeType":"FunctionDefinition","parameters":{"id":4216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4213,"mutability":"mutable","name":"set","nameLocation":"6468:3:29","nodeType":"VariableDeclaration","scope":4227,"src":"6449:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4212,"nodeType":"UserDefinedTypeName","pathNode":{"id":4211,"name":"Bytes32Set","nameLocations":["6449:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"6449:10:29"},"referencedDeclaration":4173,"src":"6449:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4215,"mutability":"mutable","name":"value","nameLocation":"6481:5:29","nodeType":"VariableDeclaration","scope":4227,"src":"6473:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:29"},"returnParameters":{"id":4219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4227,"src":"6511:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4217,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:29"},"scope":4581,"src":"6431:138:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4241,"nodeType":"Block","src":"6722:43:29","statements":[{"expression":{"arguments":[{"expression":{"id":4237,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"6747:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"6747:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4236,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"6739:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4235,"id":4240,"nodeType":"Return","src":"6732:26:29"}]},"documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"6575:70:29","text":" @dev Returns the number of values in the set. O(1)."},"id":4242,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:29","nodeType":"FunctionDefinition","parameters":{"id":4232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"set","nameLocation":"6685:3:29","nodeType":"VariableDeclaration","scope":4242,"src":"6666:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4230,"nodeType":"UserDefinedTypeName","pathNode":{"id":4229,"name":"Bytes32Set","nameLocations":["6666:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"6666:10:29"},"referencedDeclaration":4173,"src":"6666:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:29"},"returnParameters":{"id":4235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4242,"src":"6713:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4233,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:29"},"scope":4581,"src":"6650:115:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4259,"nodeType":"Block","src":"7190:46:29","statements":[{"expression":{"arguments":[{"expression":{"id":4254,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4246,"src":"7211:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"7211:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4256,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"7223:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4253,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"7207:3:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4252,"id":4258,"nodeType":"Return","src":"7200:29:29"}]},"documentation":{"id":4243,"nodeType":"StructuredDocumentation","src":"6771:331:29","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4260,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:29","nodeType":"FunctionDefinition","parameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4246,"mutability":"mutable","name":"set","nameLocation":"7138:3:29","nodeType":"VariableDeclaration","scope":4260,"src":"7119:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4245,"nodeType":"UserDefinedTypeName","pathNode":{"id":4244,"name":"Bytes32Set","nameLocations":["7119:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"7119:10:29"},"referencedDeclaration":4173,"src":"7119:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4248,"mutability":"mutable","name":"index","nameLocation":"7151:5:29","nodeType":"VariableDeclaration","scope":4260,"src":"7143:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4247,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:29"},"returnParameters":{"id":4252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4260,"src":"7181:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:29"},"scope":4581,"src":"7107:129:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4289,"nodeType":"Block","src":"7857:219:29","statements":[{"assignments":[4274],"declarations":[{"constant":false,"id":4274,"mutability":"mutable","name":"store","nameLocation":"7884:5:29","nodeType":"VariableDeclaration","scope":4289,"src":"7867:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4273,"nodeType":"ArrayTypeName","src":"7867:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4279,"initialValue":{"arguments":[{"expression":{"id":4276,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"7900:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4172,"src":"7900:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4275,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"7892:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:29"},{"assignments":[4284],"declarations":[{"constant":false,"id":4284,"mutability":"mutable","name":"result","nameLocation":"7938:6:29","nodeType":"VariableDeclaration","scope":4289,"src":"7921:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4283,"nodeType":"ArrayTypeName","src":"7921:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4285,"nodeType":"VariableDeclarationStatement","src":"7921:23:29"},{"AST":{"nodeType":"YulBlock","src":"8007:39:29","statements":[{"nodeType":"YulAssignment","src":"8021:15:29","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4284,"isOffset":false,"isSlot":false,"src":"8021:6:29","valueSize":1},{"declaration":4274,"isOffset":false,"isSlot":false,"src":"8031:5:29","valueSize":1}],"id":4286,"nodeType":"InlineAssembly","src":"7998:48:29"},{"expression":{"id":4287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8063:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4269,"id":4288,"nodeType":"Return","src":"8056:13:29"}]},"documentation":{"id":4261,"nodeType":"StructuredDocumentation","src":"7242:529:29","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4290,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:29","nodeType":"FunctionDefinition","parameters":{"id":4265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4264,"mutability":"mutable","name":"set","nameLocation":"7811:3:29","nodeType":"VariableDeclaration","scope":4290,"src":"7792:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4263,"nodeType":"UserDefinedTypeName","pathNode":{"id":4262,"name":"Bytes32Set","nameLocations":["7792:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4173,"src":"7792:10:29"},"referencedDeclaration":4173,"src":"7792:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4173_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:29"},"returnParameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4290,"src":"7839:16:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4267,"nodeType":"ArrayTypeName","src":"7839:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:29"},"scope":4581,"src":"7776:300:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":4294,"members":[{"constant":false,"id":4293,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:29","nodeType":"VariableDeclaration","scope":4294,"src":"8129:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4292,"nodeType":"UserDefinedTypeName","pathNode":{"id":4291,"name":"Set","nameLocations":["8129:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"8129:3:29"},"referencedDeclaration":3979,"src":"8129:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:29","nodeType":"StructDefinition","scope":4581,"src":"8101:45:29","visibility":"public"},{"body":{"id":4320,"nodeType":"Block","src":"8392:74:29","statements":[{"expression":{"arguments":[{"expression":{"id":4306,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"8414:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"8414:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4300,"src":"8450:5:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4312,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:29","typeDescriptions":{}}},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:29","typeDescriptions":{}}},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:29","typeDescriptions":{}}},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4305,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"8409:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4304,"id":4319,"nodeType":"Return","src":"8402:57:29"}]},"documentation":{"id":4295,"nodeType":"StructuredDocumentation","src":"8152:159:29","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4321,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:29","nodeType":"FunctionDefinition","parameters":{"id":4301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4298,"mutability":"mutable","name":"set","nameLocation":"8348:3:29","nodeType":"VariableDeclaration","scope":4321,"src":"8329:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4297,"nodeType":"UserDefinedTypeName","pathNode":{"id":4296,"name":"AddressSet","nameLocations":["8329:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"8329:10:29"},"referencedDeclaration":4294,"src":"8329:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4300,"mutability":"mutable","name":"value","nameLocation":"8361:5:29","nodeType":"VariableDeclaration","scope":4321,"src":"8353:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4299,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:29"},"returnParameters":{"id":4304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4321,"src":"8386:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4302,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:29"},"scope":4581,"src":"8316:150:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4347,"nodeType":"Block","src":"8713:77:29","statements":[{"expression":{"arguments":[{"expression":{"id":4333,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4325,"src":"8738:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4334,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"8738:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4341,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4327,"src":"8774:5:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4339,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:29","typeDescriptions":{}}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4337,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:29","typeDescriptions":{}}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:29","typeDescriptions":{}}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4332,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"8730:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4331,"id":4346,"nodeType":"Return","src":"8723:60:29"}]},"documentation":{"id":4322,"nodeType":"StructuredDocumentation","src":"8472:157:29","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4348,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:29","nodeType":"FunctionDefinition","parameters":{"id":4328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4325,"mutability":"mutable","name":"set","nameLocation":"8669:3:29","nodeType":"VariableDeclaration","scope":4348,"src":"8650:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4324,"nodeType":"UserDefinedTypeName","pathNode":{"id":4323,"name":"AddressSet","nameLocations":["8650:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"8650:10:29"},"referencedDeclaration":4294,"src":"8650:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4327,"mutability":"mutable","name":"value","nameLocation":"8682:5:29","nodeType":"VariableDeclaration","scope":4348,"src":"8674:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4326,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:29"},"returnParameters":{"id":4331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4348,"src":"8707:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4329,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:29"},"scope":4581,"src":"8634:156:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4374,"nodeType":"Block","src":"8957:79:29","statements":[{"expression":{"arguments":[{"expression":{"id":4360,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"8984:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4361,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"8984:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"9020:5:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4366,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:29","typeDescriptions":{}}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4364,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:29","typeDescriptions":{}}},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:29","typeDescriptions":{}}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4359,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"8974:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4358,"id":4373,"nodeType":"Return","src":"8967:62:29"}]},"documentation":{"id":4349,"nodeType":"StructuredDocumentation","src":"8796:70:29","text":" @dev Returns true if the value is in the set. O(1)."},"id":4375,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:29","nodeType":"FunctionDefinition","parameters":{"id":4355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"mutability":"mutable","name":"set","nameLocation":"8908:3:29","nodeType":"VariableDeclaration","scope":4375,"src":"8889:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4351,"nodeType":"UserDefinedTypeName","pathNode":{"id":4350,"name":"AddressSet","nameLocations":["8889:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"8889:10:29"},"referencedDeclaration":4294,"src":"8889:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4354,"mutability":"mutable","name":"value","nameLocation":"8921:5:29","nodeType":"VariableDeclaration","scope":4375,"src":"8913:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4353,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:29"},"returnParameters":{"id":4358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4375,"src":"8951:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4356,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:29"},"scope":4581,"src":"8871:165:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4389,"nodeType":"Block","src":"9189:43:29","statements":[{"expression":{"arguments":[{"expression":{"id":4385,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"9214:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"9214:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4384,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"9206:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4383,"id":4388,"nodeType":"Return","src":"9199:26:29"}]},"documentation":{"id":4376,"nodeType":"StructuredDocumentation","src":"9042:70:29","text":" @dev Returns the number of values in the set. O(1)."},"id":4390,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:29","nodeType":"FunctionDefinition","parameters":{"id":4380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"set","nameLocation":"9152:3:29","nodeType":"VariableDeclaration","scope":4390,"src":"9133:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4378,"nodeType":"UserDefinedTypeName","pathNode":{"id":4377,"name":"AddressSet","nameLocations":["9133:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"9133:10:29"},"referencedDeclaration":4294,"src":"9133:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9132:24:29"},"returnParameters":{"id":4383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4390,"src":"9180:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4381,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:29"},"scope":4581,"src":"9117:115:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4416,"nodeType":"Block","src":"9657:73:29","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":4408,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4394,"src":"9702:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4409,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"9702:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4410,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9714:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4407,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"9698:3:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4405,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:29","typeDescriptions":{}}},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4403,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:29","typeDescriptions":{}}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4401,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:29","typeDescriptions":{}}},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4400,"id":4415,"nodeType":"Return","src":"9667:56:29"}]},"documentation":{"id":4391,"nodeType":"StructuredDocumentation","src":"9238:331:29","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4417,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:29","nodeType":"FunctionDefinition","parameters":{"id":4397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4394,"mutability":"mutable","name":"set","nameLocation":"9605:3:29","nodeType":"VariableDeclaration","scope":4417,"src":"9586:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4393,"nodeType":"UserDefinedTypeName","pathNode":{"id":4392,"name":"AddressSet","nameLocations":["9586:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"9586:10:29"},"referencedDeclaration":4294,"src":"9586:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4396,"mutability":"mutable","name":"index","nameLocation":"9618:5:29","nodeType":"VariableDeclaration","scope":4417,"src":"9610:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4395,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:29"},"returnParameters":{"id":4400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4417,"src":"9648:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4398,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:29"},"scope":4581,"src":"9574:156:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4446,"nodeType":"Block","src":"10351:219:29","statements":[{"assignments":[4431],"declarations":[{"constant":false,"id":4431,"mutability":"mutable","name":"store","nameLocation":"10378:5:29","nodeType":"VariableDeclaration","scope":4446,"src":"10361:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4430,"nodeType":"ArrayTypeName","src":"10361:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4436,"initialValue":{"arguments":[{"expression":{"id":4433,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"10394:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"10394:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4432,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"10386:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:29"},{"assignments":[4441],"declarations":[{"constant":false,"id":4441,"mutability":"mutable","name":"result","nameLocation":"10432:6:29","nodeType":"VariableDeclaration","scope":4446,"src":"10415:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4439,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4440,"nodeType":"ArrayTypeName","src":"10415:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4442,"nodeType":"VariableDeclarationStatement","src":"10415:23:29"},{"AST":{"nodeType":"YulBlock","src":"10501:39:29","statements":[{"nodeType":"YulAssignment","src":"10515:15:29","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4441,"isOffset":false,"isSlot":false,"src":"10515:6:29","valueSize":1},{"declaration":4431,"isOffset":false,"isSlot":false,"src":"10525:5:29","valueSize":1}],"id":4443,"nodeType":"InlineAssembly","src":"10492:48:29"},{"expression":{"id":4444,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"10557:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":4426,"id":4445,"nodeType":"Return","src":"10550:13:29"}]},"documentation":{"id":4418,"nodeType":"StructuredDocumentation","src":"9736:529:29","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4447,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:29","nodeType":"FunctionDefinition","parameters":{"id":4422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4421,"mutability":"mutable","name":"set","nameLocation":"10305:3:29","nodeType":"VariableDeclaration","scope":4447,"src":"10286:22:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4420,"nodeType":"UserDefinedTypeName","pathNode":{"id":4419,"name":"AddressSet","nameLocations":["10286:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"10286:10:29"},"referencedDeclaration":4294,"src":"10286:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4294_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10285:24:29"},"returnParameters":{"id":4426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4447,"src":"10333:16:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4423,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4424,"nodeType":"ArrayTypeName","src":"10333:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:29"},"scope":4581,"src":"10270:300:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":4451,"members":[{"constant":false,"id":4450,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:29","nodeType":"VariableDeclaration","scope":4451,"src":"10617:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4449,"nodeType":"UserDefinedTypeName","pathNode":{"id":4448,"name":"Set","nameLocations":["10617:3:29"],"nodeType":"IdentifierPath","referencedDeclaration":3979,"src":"10617:3:29"},"referencedDeclaration":3979,"src":"10617:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:29","nodeType":"StructDefinition","scope":4581,"src":"10592:42:29","visibility":"public"},{"body":{"id":4471,"nodeType":"Block","src":"10877:56:29","statements":[{"expression":{"arguments":[{"expression":{"id":4463,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4455,"src":"10899:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"10899:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"10919:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:29","typeDescriptions":{}}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4462,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"10894:4:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4461,"id":4470,"nodeType":"Return","src":"10887:39:29"}]},"documentation":{"id":4452,"nodeType":"StructuredDocumentation","src":"10640:159:29","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4472,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:29","nodeType":"FunctionDefinition","parameters":{"id":4458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"set","nameLocation":"10833:3:29","nodeType":"VariableDeclaration","scope":4472,"src":"10817:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4454,"nodeType":"UserDefinedTypeName","pathNode":{"id":4453,"name":"UintSet","nameLocations":["10817:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"10817:7:29"},"referencedDeclaration":4451,"src":"10817:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4457,"mutability":"mutable","name":"value","nameLocation":"10846:5:29","nodeType":"VariableDeclaration","scope":4472,"src":"10838:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4456,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:29"},"returnParameters":{"id":4461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4472,"src":"10871:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4459,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:29"},"scope":4581,"src":"10804:129:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4492,"nodeType":"Block","src":"11177:59:29","statements":[{"expression":{"arguments":[{"expression":{"id":4484,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"11202:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4485,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"11202:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"11222:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:29","typeDescriptions":{}}},"id":4489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4483,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"11194:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4482,"id":4491,"nodeType":"Return","src":"11187:42:29"}]},"documentation":{"id":4473,"nodeType":"StructuredDocumentation","src":"10939:157:29","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4493,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:29","nodeType":"FunctionDefinition","parameters":{"id":4479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4476,"mutability":"mutable","name":"set","nameLocation":"11133:3:29","nodeType":"VariableDeclaration","scope":4493,"src":"11117:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4475,"nodeType":"UserDefinedTypeName","pathNode":{"id":4474,"name":"UintSet","nameLocations":["11117:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"11117:7:29"},"referencedDeclaration":4451,"src":"11117:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4478,"mutability":"mutable","name":"value","nameLocation":"11146:5:29","nodeType":"VariableDeclaration","scope":4493,"src":"11138:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4477,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:29"},"returnParameters":{"id":4482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4493,"src":"11171:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4480,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:29"},"scope":4581,"src":"11101:135:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4513,"nodeType":"Block","src":"11400:61:29","statements":[{"expression":{"arguments":[{"expression":{"id":4505,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"11427:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"11427:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":4509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"11447:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:29","typeDescriptions":{}}},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4504,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"11417:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4503,"id":4512,"nodeType":"Return","src":"11410:44:29"}]},"documentation":{"id":4494,"nodeType":"StructuredDocumentation","src":"11242:70:29","text":" @dev Returns true if the value is in the set. O(1)."},"id":4514,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:29","nodeType":"FunctionDefinition","parameters":{"id":4500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"set","nameLocation":"11351:3:29","nodeType":"VariableDeclaration","scope":4514,"src":"11335:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4496,"nodeType":"UserDefinedTypeName","pathNode":{"id":4495,"name":"UintSet","nameLocations":["11335:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"11335:7:29"},"referencedDeclaration":4451,"src":"11335:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4499,"mutability":"mutable","name":"value","nameLocation":"11364:5:29","nodeType":"VariableDeclaration","scope":4514,"src":"11356:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4498,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:29"},"returnParameters":{"id":4503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4514,"src":"11394:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4501,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:29"},"scope":4581,"src":"11317:144:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4528,"nodeType":"Block","src":"11611:43:29","statements":[{"expression":{"arguments":[{"expression":{"id":4524,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"11636:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"11636:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4523,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"11628:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4522,"id":4527,"nodeType":"Return","src":"11621:26:29"}]},"documentation":{"id":4515,"nodeType":"StructuredDocumentation","src":"11467:70:29","text":" @dev Returns the number of values in the set. O(1)."},"id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:29","nodeType":"FunctionDefinition","parameters":{"id":4519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4518,"mutability":"mutable","name":"set","nameLocation":"11574:3:29","nodeType":"VariableDeclaration","scope":4529,"src":"11558:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4517,"nodeType":"UserDefinedTypeName","pathNode":{"id":4516,"name":"UintSet","nameLocations":["11558:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"11558:7:29"},"referencedDeclaration":4451,"src":"11558:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11557:21:29"},"returnParameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"11602:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4520,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:29"},"scope":4581,"src":"11542:112:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4549,"nodeType":"Block","src":"12076:55:29","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4543,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4533,"src":"12105:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"12105:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4545,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"12117:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4542,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"12101:3:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4540,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:29","typeDescriptions":{}}},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4539,"id":4548,"nodeType":"Return","src":"12086:38:29"}]},"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"11660:331:29","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4550,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:29","nodeType":"FunctionDefinition","parameters":{"id":4536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4533,"mutability":"mutable","name":"set","nameLocation":"12024:3:29","nodeType":"VariableDeclaration","scope":4550,"src":"12008:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4532,"nodeType":"UserDefinedTypeName","pathNode":{"id":4531,"name":"UintSet","nameLocations":["12008:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"12008:7:29"},"referencedDeclaration":4451,"src":"12008:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":4535,"mutability":"mutable","name":"index","nameLocation":"12037:5:29","nodeType":"VariableDeclaration","scope":4550,"src":"12029:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4534,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:29"},"returnParameters":{"id":4539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4550,"src":"12067:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4537,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:29"},"scope":4581,"src":"11996:135:29","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4579,"nodeType":"Block","src":"12749:219:29","statements":[{"assignments":[4564],"declarations":[{"constant":false,"id":4564,"mutability":"mutable","name":"store","nameLocation":"12776:5:29","nodeType":"VariableDeclaration","scope":4579,"src":"12759:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4563,"nodeType":"ArrayTypeName","src":"12759:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4569,"initialValue":{"arguments":[{"expression":{"id":4566,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"12792:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":4567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:29","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"12792:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$3979_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4565,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"12784:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$3979_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:29"},{"assignments":[4574],"declarations":[{"constant":false,"id":4574,"mutability":"mutable","name":"result","nameLocation":"12830:6:29","nodeType":"VariableDeclaration","scope":4579,"src":"12813:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4572,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4573,"nodeType":"ArrayTypeName","src":"12813:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4575,"nodeType":"VariableDeclarationStatement","src":"12813:23:29"},{"AST":{"nodeType":"YulBlock","src":"12899:39:29","statements":[{"nodeType":"YulAssignment","src":"12913:15:29","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4574,"isOffset":false,"isSlot":false,"src":"12913:6:29","valueSize":1},{"declaration":4564,"isOffset":false,"isSlot":false,"src":"12923:5:29","valueSize":1}],"id":4576,"nodeType":"InlineAssembly","src":"12890:48:29"},{"expression":{"id":4577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"12955:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4559,"id":4578,"nodeType":"Return","src":"12948:13:29"}]},"documentation":{"id":4551,"nodeType":"StructuredDocumentation","src":"12137:529:29","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4580,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:29","nodeType":"FunctionDefinition","parameters":{"id":4555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4554,"mutability":"mutable","name":"set","nameLocation":"12703:3:29","nodeType":"VariableDeclaration","scope":4580,"src":"12687:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":4553,"nodeType":"UserDefinedTypeName","pathNode":{"id":4552,"name":"UintSet","nameLocations":["12687:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"12687:7:29"},"referencedDeclaration":4451,"src":"12687:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4451_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12686:21:29"},"returnParameters":{"id":4559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4580,"src":"12731:16:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4556,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4557,"nodeType":"ArrayTypeName","src":"12731:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:29"},"scope":4581,"src":"12671:297:29","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4582,"src":"1330:11640:29","usedErrors":[],"usedEvents":[]}],"src":"205:12766:29"},"id":29},"contracts/interfaces/IShirts.sol":{"ast":{"absolutePath":"contracts/interfaces/IShirts.sol","exportedSymbols":{"ILSP8":[1963],"IShirts":[4611]},"id":4612,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4583,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol","id":4585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4612,"sourceUnit":512,"src":"57:155:30","symbolAliases":[{"foreign":{"id":4584,"name":"ILSP8IdentifiableDigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"65:29:30","typeDescriptions":{}},"local":"ILSP8","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4586,"name":"ILSP8","nameLocations":["234:5:30"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"234:5:30"},"id":4587,"nodeType":"InheritanceSpecifier","src":"234:5:30"}],"canonicalName":"IShirts","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4611,"linearizedBaseContracts":[4611,1963,505,3968],"name":"IShirts","nameLocation":"223:7:30","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2d6f147bcef20580d606c930254442a27952b0caec97caaba61b00b5dd67bba9","id":4593,"name":"ShirtsMinted","nameLocation":"252:12:30","nodeType":"EventDefinition","parameters":{"id":4592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4589,"indexed":false,"mutability":"mutable","name":"_recipient","nameLocation":"273:10:30","nodeType":"VariableDeclaration","scope":4593,"src":"265:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4588,"name":"address","nodeType":"ElementaryTypeName","src":"265:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4591,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"293:7:30","nodeType":"VariableDeclaration","scope":4593,"src":"285:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4590,"name":"uint256","nodeType":"ElementaryTypeName","src":"285:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"264:37:30"},"src":"246:56:30"},{"functionSelector":"40c10f19","id":4600,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"317:4:30","nodeType":"FunctionDefinition","parameters":{"id":4598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4595,"mutability":"mutable","name":"_recipient","nameLocation":"339:10:30","nodeType":"VariableDeclaration","scope":4600,"src":"331:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4594,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4597,"mutability":"mutable","name":"_amount","nameLocation":"367:7:30","nodeType":"VariableDeclaration","scope":4600,"src":"359:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4596,"name":"uint256","nodeType":"ElementaryTypeName","src":"359:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"321:59:30"},"returnParameters":{"id":4599,"nodeType":"ParameterList","parameters":[],"src":"397:0:30"},"scope":4611,"src":"308:90:30","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"884bf67c","id":4605,"implemented":false,"kind":"function","modifiers":[],"name":"getPrizePool","nameLocation":"417:12:30","nodeType":"FunctionDefinition","parameters":{"id":4601,"nodeType":"ParameterList","parameters":[],"src":"429:2:30"},"returnParameters":{"id":4604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4603,"mutability":"mutable","name":"prizePool","nameLocation":"463:9:30","nodeType":"VariableDeclaration","scope":4605,"src":"455:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4602,"name":"address","nodeType":"ElementaryTypeName","src":"455:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"454:19:30"},"scope":4611,"src":"408:66:30","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"98d5fdca","id":4610,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"489:8:30","nodeType":"FunctionDefinition","parameters":{"id":4606,"nodeType":"ParameterList","parameters":[],"src":"497:2:30"},"returnParameters":{"id":4609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4608,"mutability":"mutable","name":"price","nameLocation":"531:5:30","nodeType":"VariableDeclaration","scope":4610,"src":"523:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4607,"name":"uint256","nodeType":"ElementaryTypeName","src":"523:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:15:30"},"scope":4611,"src":"480:58:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4612,"src":"213:327:30","usedErrors":[],"usedEvents":[468,1768,1779,1792,1801,4593]}],"src":"32:508:30"},"id":30},"contracts/tokens/Shirts.sol":{"ast":{"absolutePath":"contracts/tokens/Shirts.sol","exportedSymbols":{"AlreadyClaimedPrize":[4779],"FeeTransferFailed":[4793],"IShirts":[4611],"InvalidMintPrice":[4775],"LSP8":[2384],"MintClosed":[4797],"MintLimitExceeded":[4773],"NoPrizeForThisTicket":[4777],"NoTickets":[4781],"NoWinnersYet":[4795],"Shirts":[4769],"TransferFailed":[4787],"ZeroAddress":[4783],"ZeroAmount":[4785],"_LSP4_TOKEN_TYPE_NFT":[1550],"_LSP8_TOKENID_FORMAT_NUMBER":[1989],"_LSP8_TOKEN_METADATA_BASE_URI":[1974]},"id":4770,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4613,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol","id":4615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4770,"sourceUnit":518,"src":"57:152:31","symbolAliases":[{"foreign":{"id":4614,"name":"LSP8IdentifiableDigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"65:28:31","typeDescriptions":{}},"local":"LSP8","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol","id":4617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4770,"sourceUnit":509,"src":"210:117:31","symbolAliases":[{"foreign":{"id":4616,"name":"_LSP4_TOKEN_TYPE_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"218:20:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol","file":"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol","id":4620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4770,"sourceUnit":515,"src":"328:159:31","symbolAliases":[{"foreign":{"id":4618,"name":"_LSP8_TOKENID_FORMAT_NUMBER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"336:27:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4619,"name":"_LSP8_TOKEN_METADATA_BASE_URI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"365:29:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IShirts.sol","file":"../interfaces/IShirts.sol","id":4622,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4770,"sourceUnit":4612,"src":"488:50:31","symbolAliases":[{"foreign":{"id":4621,"name":"IShirts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"496:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"../utils/Errors.sol","id":4623,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4770,"sourceUnit":4798,"src":"539:29:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4624,"name":"IShirts","nameLocations":["589:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":4611,"src":"589:7:31"},"id":4625,"nodeType":"InheritanceSpecifier","src":"589:7:31"},{"baseName":{"id":4626,"name":"LSP8","nameLocations":["598:4:31"],"nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"598:4:31"},"id":4627,"nodeType":"InheritanceSpecifier","src":"598:4:31"}],"canonicalName":"Shirts","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4769,"internalFunctionIDs":{"3760":1},"linearizedBaseContracts":[4769,2384,805,3737,4611,1963,1669,1731,35,270,505,3761,3968,402],"name":"Shirts","nameLocation":"579:6:31","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"32cb6b0c","id":4630,"mutability":"constant","name":"MAX_SUPPLY","nameLocation":"633:10:31","nodeType":"VariableDeclaration","scope":4769,"src":"609:40:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4628,"name":"uint256","nodeType":"ElementaryTypeName","src":"609:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":4629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"646:3:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"f0292a03","id":4633,"mutability":"constant","name":"MAX_MINT","nameLocation":"679:8:31","nodeType":"VariableDeclaration","scope":4769,"src":"655:36:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4631,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":4632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"690:1:31","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":false,"id":4635,"mutability":"immutable","name":"i_prizePool","nameLocation":"723:11:31","nodeType":"VariableDeclaration","scope":4769,"src":"697:37:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4634,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":4637,"mutability":"immutable","name":"i_price","nameLocation":"766:7:31","nodeType":"VariableDeclaration","scope":4769,"src":"740:33:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4636,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":4665,"nodeType":"Block","src":"1065:67:31","statements":[{"expression":{"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4657,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"1075:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4658,"name":"_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"1089:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1075:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4660,"nodeType":"ExpressionStatement","src":"1075:24:31"},{"expression":{"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4661,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"1109:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4662,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"1119:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1109:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4664,"nodeType":"ExpressionStatement","src":"1109:16:31"}]},"id":4666,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4650,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"953:5:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4651,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"968:7:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4652,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"985:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4653,"name":"_LSP4_TOKEN_TYPE_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"1001:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4654,"name":"_LSP8_TOKENID_FORMAT_NUMBER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"1031:27:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4655,"kind":"baseConstructorSpecifier","modifierName":{"id":4649,"name":"LSP8","nameLocations":["939:4:31"],"nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"939:4:31"},"nodeType":"ModifierInvocation","src":"939:125:31"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"_name","nameLocation":"820:5:31","nodeType":"VariableDeclaration","scope":4666,"src":"806:19:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4638,"name":"string","nodeType":"ElementaryTypeName","src":"806:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4641,"mutability":"mutable","name":"_symbol","nameLocation":"849:7:31","nodeType":"VariableDeclaration","scope":4666,"src":"835:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4640,"name":"string","nodeType":"ElementaryTypeName","src":"835:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4643,"mutability":"mutable","name":"_owner","nameLocation":"874:6:31","nodeType":"VariableDeclaration","scope":4666,"src":"866:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4642,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4645,"mutability":"mutable","name":"_prizePool","nameLocation":"898:10:31","nodeType":"VariableDeclaration","scope":4666,"src":"890:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4644,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4647,"mutability":"mutable","name":"_price","nameLocation":"926:6:31","nodeType":"VariableDeclaration","scope":4666,"src":"918:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4646,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"796:142:31"},"returnParameters":{"id":4656,"nodeType":"ParameterList","parameters":[],"src":"1065:0:31"},"scope":4769,"src":"785:347:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4600],"body":{"id":4751,"nodeType":"Block","src":"1228:566:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4673,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"1241:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4674,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1259:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1241:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4676,"name":"MAX_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"1269:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1241:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4681,"nodeType":"IfStatement","src":"1238:69:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4678,"name":"MintLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4773,"src":"1288:17:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1288:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4680,"nodeType":"RevertStatement","src":"1281:26:31"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4683,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"1330:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4682,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"1320:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1320:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4685,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1344:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1320:31:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4687,"name":"MAX_MINT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"1354:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1320:42:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4692,"nodeType":"IfStatement","src":"1317:73:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4689,"name":"MintLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4773,"src":"1371:17:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1371:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4691,"nodeType":"RevertStatement","src":"1364:26:31"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4693,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1403:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1407:5:31","memberName":"value","nodeType":"MemberAccess","src":"1403:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"1416:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4696,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1426:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1416:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1403:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4702,"nodeType":"IfStatement","src":"1400:60:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4699,"name":"InvalidMintPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"1442:16:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1442:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4701,"nodeType":"RevertStatement","src":"1435:25:31"}},{"body":{"id":4728,"nodeType":"Block","src":"1504:122:31","statements":[{"assignments":[4713],"declarations":[{"constant":false,"id":4713,"mutability":"mutable","name":"tokenId","nameLocation":"1526:7:31","nodeType":"VariableDeclaration","scope":4728,"src":"1518:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4712,"name":"uint256","nodeType":"ElementaryTypeName","src":"1518:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4717,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4714,"name":"_existingTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"1536:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1554:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1536:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1518:37:31"},{"expression":{"arguments":[{"id":4719,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"1575:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"1595:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1587:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1587:7:31","typeDescriptions":{}}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"66616c7365","id":4724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1605:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1612:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4718,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"1569:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bool_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bool,bytes memory)"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1569:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4727,"nodeType":"ExpressionStatement","src":"1569:46:31"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4706,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"1486:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4707,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1490:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1486:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4729,"initializationExpression":{"assignments":[4704],"declarations":[{"constant":false,"id":4704,"mutability":"mutable","name":"i","nameLocation":"1483:1:31","nodeType":"VariableDeclaration","scope":4729,"src":"1475:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1475:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4705,"nodeType":"VariableDeclarationStatement","src":"1475:9:31"},"loopExpression":{"expression":{"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1499:3:31","subExpression":{"id":4709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"1499:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4711,"nodeType":"ExpressionStatement","src":"1499:3:31"},"nodeType":"ForStatement","src":"1471:155:31"},{"assignments":[4731,null],"declarations":[{"constant":false,"id":4731,"mutability":"mutable","name":"success","nameLocation":"1642:7:31","nodeType":"VariableDeclaration","scope":4751,"src":"1637:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4730,"name":"bool","nodeType":"ElementaryTypeName","src":"1637:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4739,"initialValue":{"arguments":[{"hexValue":"","id":4737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1689:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4732,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"1654:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1666:4:31","memberName":"call","nodeType":"MemberAccess","src":"1654:16:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":4734,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1678:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1682:5:31","memberName":"value","nodeType":"MemberAccess","src":"1678:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1654:34:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:38:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1636:56:31"},{"condition":{"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1705:8:31","subExpression":{"id":4740,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1706:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4745,"nodeType":"IfStatement","src":"1702:36:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4742,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4787,"src":"1722:14:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4744,"nodeType":"RevertStatement","src":"1715:23:31"}},{"eventCall":{"arguments":[{"id":4747,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"1767:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4748,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"1779:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4746,"name":"ShirtsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"1754:12:31","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1754:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4750,"nodeType":"EmitStatement","src":"1749:38:31"}]},"functionSelector":"40c10f19","id":4752,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1147:4:31","nodeType":"FunctionDefinition","parameters":{"id":4671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4668,"mutability":"mutable","name":"_recipient","nameLocation":"1169:10:31","nodeType":"VariableDeclaration","scope":4752,"src":"1161:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4667,"name":"address","nodeType":"ElementaryTypeName","src":"1161:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4670,"mutability":"mutable","name":"_amount","nameLocation":"1197:7:31","nodeType":"VariableDeclaration","scope":4752,"src":"1189:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1189:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1151:59:31"},"returnParameters":{"id":4672,"nodeType":"ParameterList","parameters":[],"src":"1228:0:31"},"scope":4769,"src":"1138:656:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[4605],"body":{"id":4759,"nodeType":"Block","src":"1866:35:31","statements":[{"expression":{"id":4757,"name":"i_prizePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"1883:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4756,"id":4758,"nodeType":"Return","src":"1876:18:31"}]},"functionSelector":"884bf67c","id":4760,"implemented":true,"kind":"function","modifiers":[],"name":"getPrizePool","nameLocation":"1809:12:31","nodeType":"FunctionDefinition","parameters":{"id":4753,"nodeType":"ParameterList","parameters":[],"src":"1821:2:31"},"returnParameters":{"id":4756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4755,"mutability":"mutable","name":"prizePool","nameLocation":"1855:9:31","nodeType":"VariableDeclaration","scope":4760,"src":"1847:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4754,"name":"address","nodeType":"ElementaryTypeName","src":"1847:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1846:19:31"},"scope":4769,"src":"1800:101:31","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4610],"body":{"id":4767,"nodeType":"Block","src":"1965:31:31","statements":[{"expression":{"id":4765,"name":"i_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"1982:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4764,"id":4766,"nodeType":"Return","src":"1975:14:31"}]},"functionSelector":"98d5fdca","id":4768,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"1916:8:31","nodeType":"FunctionDefinition","parameters":{"id":4761,"nodeType":"ParameterList","parameters":[],"src":"1924:2:31"},"returnParameters":{"id":4764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4763,"mutability":"mutable","name":"price","nameLocation":"1958:5:31","nodeType":"VariableDeclaration","scope":4768,"src":"1950:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4762,"name":"uint256","nodeType":"ElementaryTypeName","src":"1950:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1949:15:31"},"scope":4769,"src":"1907:89:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4770,"src":"570:1428:31","usedErrors":[407,412,448,451,454,661,666,671,1736,1739,1742,2023,2032,2039,2046,2049,2052,2059,2064,2067,2072,2077,2080,2083,2086,2089,2092,2097,2106,2115,4773,4775,4787],"usedEvents":[307,468,1768,1779,1792,1801,4593]}],"src":"32:1966:31"},"id":31},"contracts/utils/Errors.sol":{"ast":{"absolutePath":"contracts/utils/Errors.sol","exportedSymbols":{"AlreadyClaimedPrize":[4779],"FeeTransferFailed":[4793],"InvalidMintPrice":[4775],"MintClosed":[4797],"MintLimitExceeded":[4773],"NoPrizeForThisTicket":[4777],"NoTickets":[4781],"NoWinnersYet":[4795],"TransferFailed":[4787],"ZeroAddress":[4783],"ZeroAmount":[4785]},"id":4798,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4771,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:32"},{"errorSelector":"b643bfa6","id":4773,"name":"MintLimitExceeded","nameLocation":"63:17:32","nodeType":"ErrorDefinition","parameters":{"id":4772,"nodeType":"ParameterList","parameters":[],"src":"80:2:32"},"src":"57:26:32"},{"errorSelector":"0416bc16","id":4775,"name":"InvalidMintPrice","nameLocation":"91:16:32","nodeType":"ErrorDefinition","parameters":{"id":4774,"nodeType":"ParameterList","parameters":[],"src":"107:2:32"},"src":"85:25:32"},{"errorSelector":"d937573f","id":4777,"name":"NoPrizeForThisTicket","nameLocation":"118:20:32","nodeType":"ErrorDefinition","parameters":{"id":4776,"nodeType":"ParameterList","parameters":[],"src":"138:2:32"},"src":"112:29:32"},{"errorSelector":"48798a90","id":4779,"name":"AlreadyClaimedPrize","nameLocation":"149:19:32","nodeType":"ErrorDefinition","parameters":{"id":4778,"nodeType":"ParameterList","parameters":[],"src":"168:2:32"},"src":"143:28:32"},{"errorSelector":"66f3ef9b","id":4781,"name":"NoTickets","nameLocation":"179:9:32","nodeType":"ErrorDefinition","parameters":{"id":4780,"nodeType":"ParameterList","parameters":[],"src":"188:2:32"},"src":"173:18:32"},{"errorSelector":"d92e233d","id":4783,"name":"ZeroAddress","nameLocation":"199:11:32","nodeType":"ErrorDefinition","parameters":{"id":4782,"nodeType":"ParameterList","parameters":[],"src":"210:2:32"},"src":"193:20:32"},{"errorSelector":"1f2a2005","id":4785,"name":"ZeroAmount","nameLocation":"221:10:32","nodeType":"ErrorDefinition","parameters":{"id":4784,"nodeType":"ParameterList","parameters":[],"src":"231:2:32"},"src":"215:19:32"},{"errorSelector":"90b8ec18","id":4787,"name":"TransferFailed","nameLocation":"242:14:32","nodeType":"ErrorDefinition","parameters":{"id":4786,"nodeType":"ParameterList","parameters":[],"src":"256:2:32"},"src":"236:23:32"},{"errorSelector":"6e74fa86","id":4793,"name":"FeeTransferFailed","nameLocation":"267:17:32","nodeType":"ErrorDefinition","parameters":{"id":4792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"_creators","nameLocation":"293:9:32","nodeType":"VariableDeclaration","scope":4793,"src":"285:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4788,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4791,"mutability":"mutable","name":"_amount","nameLocation":"312:7:32","nodeType":"VariableDeclaration","scope":4793,"src":"304:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"304:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"284:36:32"},"src":"261:60:32"},{"errorSelector":"1bb8ccd6","id":4795,"name":"NoWinnersYet","nameLocation":"329:12:32","nodeType":"ErrorDefinition","parameters":{"id":4794,"nodeType":"ParameterList","parameters":[],"src":"341:2:32"},"src":"323:21:32"},{"errorSelector":"589ed34b","id":4797,"name":"MintClosed","nameLocation":"352:10:32","nodeType":"ErrorDefinition","parameters":{"id":4796,"nodeType":"ParameterList","parameters":[],"src":"362:2:32"},"src":"346:19:32"}],"src":"32:333:32"},"id":32}},"contracts":{"@erc725/smart-contracts/contracts/ERC725Y.sol":{"ERC725Y":{"abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Fabian Vogelsteller <fabian@lukso.network>","details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"constructor":{"custom:requirements":"- `initialOwner` CANNOT be the zero address.","details":"Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.","params":{"initialOwner":"the owner of the contract."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{"@_34":{"entryPoint":null,"id":34,"parameterSlots":1,"returnSlots":0},"@_setOwner_401":{"entryPoint":88,"id":401,"parameterSlots":1,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":197,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:33","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:33"},"nodeType":"YulFunctionCall","src":"143:12:33"},"nodeType":"YulExpressionStatement","src":"143:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:33"},"nodeType":"YulFunctionCall","src":"112:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:33"},"nodeType":"YulFunctionCall","src":"108:32:33"},"nodeType":"YulIf","src":"105:52:33"},{"nodeType":"YulVariableDeclaration","src":"166:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:33"},"nodeType":"YulFunctionCall","src":"179:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:33"},"nodeType":"YulFunctionCall","src":"260:12:33"},"nodeType":"YulExpressionStatement","src":"260:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:33"},"nodeType":"YulFunctionCall","src":"239:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:33"},"nodeType":"YulFunctionCall","src":"235:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:33"},"nodeType":"YulFunctionCall","src":"224:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:33"},"nodeType":"YulFunctionCall","src":"214:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:33"},"nodeType":"YulFunctionCall","src":"207:50:33"},"nodeType":"YulIf","src":"204:70:33"},{"nodeType":"YulAssignment","src":"283:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:33"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:33","type":""}],"src":"14:290:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052604051610bc9380380610bc9833981016040819052610022916100c5565b6001600160a01b038116610049576040516306b620db60e21b815260040160405180910390fd5b61005281610058565b506100f5565b6000546001600160a01b038281169116146100c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0383161790555b50565b6000602082840312156100d757600080fd5b81516001600160a01b03811681146100ee57600080fd5b9392505050565b610ac5806101046000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461010c5780639790242114610134578063dedff9c614610147578063f2fde38b1461017457600080fd5b806301ffc9a71461008057806354f6127f146100b5578063715018a6146100e25780637f23690c146100f9575b600080fd5b34801561008c57600080fd5b506100a061009b36600461056a565b610194565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461059b565b6101cb565b6040516100ac91906105fa565b3480156100ee57600080fd5b506100f76101d6565b005b6100f76101073660046106c4565b6101ea565b34801561011857600080fd5b506000546040516001600160a01b0390911681526020016100ac565b6100f761014236600461079a565b61021f565b34801561015357600080fd5b5061016761016236600461086f565b6102df565b6040516100ac91906108ac565b34801561018057600080fd5b506100f761018f36600461090e565b61038a565b60006001600160e01b031982166318a6a9a560e21b14806101c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606101c5826103c5565b6101de610467565b6101e860006104a7565b565b6101f2610467565b34156102115760405163f36ba73760e01b815260040160405180910390fd5b61021b8282610515565b5050565b610227610467565b34156102465760405163f36ba73760e01b815260040160405180910390fd5b805182511461026857604051633bcc897960e01b815260040160405180910390fd5b815160000361028a576040516397da5f9560e01b815260040160405180910390fd5b60005b82518110156102da576102d28382815181106102ab576102ab610937565b60200260200101518383815181106102c5576102c5610937565b6020026020010151610515565b60010161028d565b505050565b6060815167ffffffffffffffff8111156102fb576102fb61060d565b60405190808252806020026020018201604052801561032e57816020015b60608152602001906001900390816103195790505b50905060005b82518110156103845761035f83828151811061035257610352610937565b60200260200101516103c5565b82828151811061037157610371610937565b6020908102919091010152600101610334565b50919050565b610392610467565b6001600160a01b0381166103b9576040516306b620db60e21b815260040160405180910390fd5b6103c2816104a7565b50565b60008181526001602052604090208054606091906103e29061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461040e9061094d565b801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b50505050509050919050565b3361047a6000546001600160a01b031690565b6001600160a01b0316146101e85760405163bf1169c560e01b815233600482015260240160405180910390fd5b6000546001600160a01b038281169116146103c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b600082815260016020526040902061052d82826109cf565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161055e91906105fa565b60405180910390a25050565b60006020828403121561057c57600080fd5b81356001600160e01b03198116811461059457600080fd5b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b6000815180845260005b818110156105da576020818501810151868301820152016105be565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061059460208301846105b4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064c5761064c61060d565b604052919050565b600082601f83011261066557600080fd5b813567ffffffffffffffff81111561067f5761067f61060d565b610692601f8201601f1916602001610623565b8181528460208386010111156106a757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156106d757600080fd5b82359150602083013567ffffffffffffffff8111156106f557600080fd5b61070185828601610654565b9150509250929050565b600067ffffffffffffffff8211156107255761072561060d565b5060051b60200190565b600082601f83011261074057600080fd5b813560206107556107508361070b565b610623565b82815260059290921b8401810191818101908684111561077457600080fd5b8286015b8481101561078f5780358352918301918301610778565b509695505050505050565b600080604083850312156107ad57600080fd5b823567ffffffffffffffff808211156107c557600080fd5b6107d18683870161072f565b93506020915081850135818111156107e857600080fd5b8501601f810187136107f957600080fd5b80356108076107508261070b565b81815260059190911b8201840190848101908983111561082657600080fd5b8584015b8381101561085e578035868111156108425760008081fd5b6108508c8983890101610654565b84525091860191860161082a565b508096505050505050509250929050565b60006020828403121561088157600080fd5b813567ffffffffffffffff81111561089857600080fd5b6108a48482850161072f565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561090157603f198886030184526108ef8583516105b4565b945092850192908501906001016108d3565b5092979650505050505050565b60006020828403121561092057600080fd5b81356001600160a01b038116811461059457600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061096157607f821691505b60208210810361038457634e487b7160e01b600052602260045260246000fd5b601f8211156102da57600081815260208120601f850160051c810160208610156109a85750805b601f850160051c820191505b818110156109c7578281556001016109b4565b505050505050565b815167ffffffffffffffff8111156109e9576109e961060d565b6109fd816109f7845461094d565b84610981565b602080601f831160018114610a325760008415610a1a5750858301515b600019600386901b1c1916600185901b1785556109c7565b600085815260208120601f198616915b82811015610a6157888601518255948401946001909101908401610a42565b5085821015610a7f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d3480b52e272571da9c53056302564ddf6b57499f51eba25a844439f5d05283f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xBC9 CODESIZE SUB DUP1 PUSH2 0xBC9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x49 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52 DUP2 PUSH2 0x58 JUMP JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xAC5 DUP1 PUSH2 0x104 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x59B JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x8AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1C5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C5 DUP3 PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x0 PUSH2 0x4A7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x515 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x227 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2D2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI PUSH2 0x2AB PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x515 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x28D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FB JUMPI PUSH2 0x2FB PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x319 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x35F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x334 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x392 PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C2 DUP2 PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x3E2 SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40E SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x45B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x430 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x45B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x47A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x52D DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5BE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x594 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH2 0x67F PUSH2 0x60D JUMP JUMPDEST PUSH2 0x692 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x623 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x701 DUP6 DUP3 DUP7 ADD PUSH2 0x654 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0x60D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x755 PUSH2 0x750 DUP4 PUSH2 0x70B JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x78F JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D1 DUP7 DUP4 DUP8 ADD PUSH2 0x72F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x807 PUSH2 0x750 DUP3 PUSH2 0x70B JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x826 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x85E JUMPI DUP1 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x850 DUP13 DUP10 DUP4 DUP10 ADD ADD PUSH2 0x654 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x82A JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A4 DUP5 DUP3 DUP6 ADD PUSH2 0x72F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x901 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x8EF DUP6 DUP4 MLOAD PUSH2 0x5B4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8D3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x961 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x9A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9C7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x9FD DUP2 PUSH2 0x9F7 DUP5 SLOAD PUSH2 0x94D JUMP JUMPDEST DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xA1A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA61 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xA42 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xA7F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 BASEFEE SIGNEXTEND MSTORE 0xE2 PUSH19 0x571DA9C53056302564DDF6B57499F51EBA25A8 PREVRANDAO NUMBER SWAP16 0x5D SDIV 0x28 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"649:610:0:-:0;;;1053:204;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1109:26:0;;1105:100;;1158:36;;-1:-1:-1;;;1158:36:0;;;;;;;;;;;1105:100;1214:36;1237:12;1214:22;:36::i;:::-;1053:204;649:610;;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;;2293:17:3;-1:-1:-1;;;;;2293:17:3;;;;;2197:124;2133:194;:::o;14:290:33:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:33;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:33:o;:::-;649:610:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_379":{"entryPoint":1127,"id":379,"parameterSlots":0,"returnSlots":0},"@_getData_228":{"entryPoint":965,"id":228,"parameterSlots":1,"returnSlots":1},"@_setData_248":{"entryPoint":1301,"id":248,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":1191,"id":401,"parameterSlots":1,"returnSlots":0},"@getDataBatch_126":{"entryPoint":735,"id":126,"parameterSlots":1,"returnSlots":1},"@getData_79":{"entryPoint":459,"id":79,"parameterSlots":1,"returnSlots":1},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_338":{"entryPoint":470,"id":338,"parameterSlots":0,"returnSlots":0},"@setDataBatch_215":{"entryPoint":543,"id":215,"parameterSlots":2,"returnSlots":0},"@setData_151":{"entryPoint":490,"id":151,"parameterSlots":2,"returnSlots":0},"@supportsInterface_269":{"entryPoint":404,"id":269,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3760":{"entryPoint":null,"id":3760,"parameterSlots":1,"returnSlots":1},"@transferOwnership_362":{"entryPoint":906,"id":362,"parameterSlots":1,"returnSlots":0},"abi_decode_array_bytes32_dyn":{"entryPoint":1839,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":1620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2318,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":2159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":1946,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":1435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":1732,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":1386,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":1460,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1530,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1571,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":1803,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":2433,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":2511,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2381,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":2359,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1549,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9257:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:33","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:33"},"nodeType":"YulFunctionCall","src":"131:12:33"},"nodeType":"YulExpressionStatement","src":"131:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:33"},"nodeType":"YulFunctionCall","src":"100:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:33"},"nodeType":"YulFunctionCall","src":"96:32:33"},"nodeType":"YulIf","src":"93:52:33"},{"nodeType":"YulVariableDeclaration","src":"154:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:33"},"nodeType":"YulFunctionCall","src":"167:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:33"},"nodeType":"YulFunctionCall","src":"256:12:33"},"nodeType":"YulExpressionStatement","src":"256:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:33"},"nodeType":"YulFunctionCall","src":"230:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:33"},"nodeType":"YulFunctionCall","src":"219:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:33"},"nodeType":"YulFunctionCall","src":"209:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:33"},"nodeType":"YulFunctionCall","src":"202:51:33"},"nodeType":"YulIf","src":"199:71:33"},{"nodeType":"YulAssignment","src":"279:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:33","type":""}],"src":"14:286:33"},{"body":{"nodeType":"YulBlock","src":"400:92:33","statements":[{"nodeType":"YulAssignment","src":"410:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:33"},"nodeType":"YulFunctionCall","src":"418:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:33"},"nodeType":"YulFunctionCall","src":"470:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:33"},"nodeType":"YulFunctionCall","src":"463:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:33"},"nodeType":"YulFunctionCall","src":"445:41:33"},"nodeType":"YulExpressionStatement","src":"445:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:33","type":""}],"src":"305:187:33"},{"body":{"nodeType":"YulBlock","src":"567:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"613:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"625:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"615:6:33"},"nodeType":"YulFunctionCall","src":"615:12:33"},"nodeType":"YulExpressionStatement","src":"615:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"588:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"584:3:33"},"nodeType":"YulFunctionCall","src":"584:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"609:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"580:3:33"},"nodeType":"YulFunctionCall","src":"580:32:33"},"nodeType":"YulIf","src":"577:52:33"},{"nodeType":"YulAssignment","src":"638:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:33"},"nodeType":"YulFunctionCall","src":"648:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"638:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"533:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"544:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"556:6:33","type":""}],"src":"497:180:33"},{"body":{"nodeType":"YulBlock","src":"731:373:33","statements":[{"nodeType":"YulVariableDeclaration","src":"741:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"761:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"755:5:33"},"nodeType":"YulFunctionCall","src":"755:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"745:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"783:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"788:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"776:6:33"},"nodeType":"YulFunctionCall","src":"776:19:33"},"nodeType":"YulExpressionStatement","src":"776:19:33"},{"nodeType":"YulVariableDeclaration","src":"804:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"813:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"808:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"875:110:33","statements":[{"nodeType":"YulVariableDeclaration","src":"889:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"899:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"893:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"931:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"936:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"927:3:33"},"nodeType":"YulFunctionCall","src":"927:11:33"},{"name":"_1","nodeType":"YulIdentifier","src":"940:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"923:3:33"},"nodeType":"YulFunctionCall","src":"923:20:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"959:5:33"},{"name":"i","nodeType":"YulIdentifier","src":"966:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:33"},"nodeType":"YulFunctionCall","src":"955:13:33"},{"name":"_1","nodeType":"YulIdentifier","src":"970:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"951:3:33"},"nodeType":"YulFunctionCall","src":"951:22:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"945:5:33"},"nodeType":"YulFunctionCall","src":"945:29:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"916:6:33"},"nodeType":"YulFunctionCall","src":"916:59:33"},"nodeType":"YulExpressionStatement","src":"916:59:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"834:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"837:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"831:2:33"},"nodeType":"YulFunctionCall","src":"831:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"845:21:33","statements":[{"nodeType":"YulAssignment","src":"847:17:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"856:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"859:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"852:3:33"},"nodeType":"YulFunctionCall","src":"852:12:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"847:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"827:3:33","statements":[]},"src":"823:162:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1009:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1014:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:33"},"nodeType":"YulFunctionCall","src":"1005:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"1023:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1001:3:33"},"nodeType":"YulFunctionCall","src":"1001:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"1030:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"994:6:33"},"nodeType":"YulFunctionCall","src":"994:38:33"},"nodeType":"YulExpressionStatement","src":"994:38:33"},{"nodeType":"YulAssignment","src":"1041:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1056:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1069:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1077:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1065:3:33"},"nodeType":"YulFunctionCall","src":"1065:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1086:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1082:3:33"},"nodeType":"YulFunctionCall","src":"1082:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1061:3:33"},"nodeType":"YulFunctionCall","src":"1061:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1052:3:33"},"nodeType":"YulFunctionCall","src":"1052:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"1093:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1048:3:33"},"nodeType":"YulFunctionCall","src":"1048:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1041:3:33"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"708:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"715:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"723:3:33","type":""}],"src":"682:422:33"},{"body":{"nodeType":"YulBlock","src":"1228:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1256:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1238:6:33"},"nodeType":"YulFunctionCall","src":"1238:21:33"},"nodeType":"YulExpressionStatement","src":"1238:21:33"},{"nodeType":"YulAssignment","src":"1268:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1293:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1305:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1316:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1301:3:33"},"nodeType":"YulFunctionCall","src":"1301:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"1276:16:33"},"nodeType":"YulFunctionCall","src":"1276:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1268:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1197:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1208:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1219:4:33","type":""}],"src":"1109:217:33"},{"body":{"nodeType":"YulBlock","src":"1363:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1380:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1387:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1392:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1383:3:33"},"nodeType":"YulFunctionCall","src":"1383:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1373:6:33"},"nodeType":"YulFunctionCall","src":"1373:31:33"},"nodeType":"YulExpressionStatement","src":"1373:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1420:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1423:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1413:6:33"},"nodeType":"YulFunctionCall","src":"1413:15:33"},"nodeType":"YulExpressionStatement","src":"1413:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1444:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1447:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1437:6:33"},"nodeType":"YulFunctionCall","src":"1437:15:33"},"nodeType":"YulExpressionStatement","src":"1437:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1331:127:33"},{"body":{"nodeType":"YulBlock","src":"1508:230:33","statements":[{"nodeType":"YulAssignment","src":"1518:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1534:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1528:5:33"},"nodeType":"YulFunctionCall","src":"1528:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1518:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1546:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1568:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1584:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1590:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1580:3:33"},"nodeType":"YulFunctionCall","src":"1580:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1599:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1595:3:33"},"nodeType":"YulFunctionCall","src":"1595:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1576:3:33"},"nodeType":"YulFunctionCall","src":"1576:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1564:3:33"},"nodeType":"YulFunctionCall","src":"1564:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1550:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1679:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1681:16:33"},"nodeType":"YulFunctionCall","src":"1681:18:33"},"nodeType":"YulExpressionStatement","src":"1681:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1622:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1634:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1619:2:33"},"nodeType":"YulFunctionCall","src":"1619:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1658:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1670:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1655:2:33"},"nodeType":"YulFunctionCall","src":"1655:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1616:2:33"},"nodeType":"YulFunctionCall","src":"1616:62:33"},"nodeType":"YulIf","src":"1613:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1721:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1710:6:33"},"nodeType":"YulFunctionCall","src":"1710:22:33"},"nodeType":"YulExpressionStatement","src":"1710:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1488:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1497:6:33","type":""}],"src":"1463:275:33"},{"body":{"nodeType":"YulBlock","src":"1795:478:33","statements":[{"body":{"nodeType":"YulBlock","src":"1844:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1856:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1846:6:33"},"nodeType":"YulFunctionCall","src":"1846:12:33"},"nodeType":"YulExpressionStatement","src":"1846:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1823:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1831:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:33"},"nodeType":"YulFunctionCall","src":"1819:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"1838:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1815:3:33"},"nodeType":"YulFunctionCall","src":"1815:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1808:6:33"},"nodeType":"YulFunctionCall","src":"1808:35:33"},"nodeType":"YulIf","src":"1805:55:33"},{"nodeType":"YulVariableDeclaration","src":"1869:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1892:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1879:12:33"},"nodeType":"YulFunctionCall","src":"1879:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1873:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1938:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1940:16:33"},"nodeType":"YulFunctionCall","src":"1940:18:33"},"nodeType":"YulExpressionStatement","src":"1940:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1914:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"1918:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1911:2:33"},"nodeType":"YulFunctionCall","src":"1911:26:33"},"nodeType":"YulIf","src":"1908:52:33"},{"nodeType":"YulVariableDeclaration","src":"1969:70:33","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2012:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2016:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2008:3:33"},"nodeType":"YulFunctionCall","src":"2008:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2027:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2023:3:33"},"nodeType":"YulFunctionCall","src":"2023:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2004:3:33"},"nodeType":"YulFunctionCall","src":"2004:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"2033:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2000:3:33"},"nodeType":"YulFunctionCall","src":"2000:38:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1984:15:33"},"nodeType":"YulFunctionCall","src":"1984:55:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"1973:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2055:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2064:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2048:6:33"},"nodeType":"YulFunctionCall","src":"2048:19:33"},"nodeType":"YulExpressionStatement","src":"2048:19:33"},{"body":{"nodeType":"YulBlock","src":"2115:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2124:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2117:6:33"},"nodeType":"YulFunctionCall","src":"2117:12:33"},"nodeType":"YulExpressionStatement","src":"2117:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2090:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2098:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2086:3:33"},"nodeType":"YulFunctionCall","src":"2086:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2082:3:33"},"nodeType":"YulFunctionCall","src":"2082:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"2110:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2079:2:33"},"nodeType":"YulFunctionCall","src":"2079:35:33"},"nodeType":"YulIf","src":"2076:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2157:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"2166:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:33"},"nodeType":"YulFunctionCall","src":"2153:18:33"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2177:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2185:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2173:3:33"},"nodeType":"YulFunctionCall","src":"2173:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2192:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2140:12:33"},"nodeType":"YulFunctionCall","src":"2140:55:33"},"nodeType":"YulExpressionStatement","src":"2140:55:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2219:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2215:3:33"},"nodeType":"YulFunctionCall","src":"2215:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"2233:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2211:3:33"},"nodeType":"YulFunctionCall","src":"2211:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"2240:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2204:6:33"},"nodeType":"YulFunctionCall","src":"2204:38:33"},"nodeType":"YulExpressionStatement","src":"2204:38:33"},{"nodeType":"YulAssignment","src":"2251:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2260:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2251:5:33"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"1777:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1785:5:33","type":""}],"src":"1743:530:33"},{"body":{"nodeType":"YulBlock","src":"2374:292:33","statements":[{"body":{"nodeType":"YulBlock","src":"2420:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2429:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2432:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2422:6:33"},"nodeType":"YulFunctionCall","src":"2422:12:33"},"nodeType":"YulExpressionStatement","src":"2422:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2395:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:33"},"nodeType":"YulFunctionCall","src":"2391:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2416:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2387:3:33"},"nodeType":"YulFunctionCall","src":"2387:32:33"},"nodeType":"YulIf","src":"2384:52:33"},{"nodeType":"YulAssignment","src":"2445:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2468:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2455:12:33"},"nodeType":"YulFunctionCall","src":"2455:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2445:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2487:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2518:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2529:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2514:3:33"},"nodeType":"YulFunctionCall","src":"2514:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2501:12:33"},"nodeType":"YulFunctionCall","src":"2501:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2491:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2576:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2585:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2588:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2578:6:33"},"nodeType":"YulFunctionCall","src":"2578:12:33"},"nodeType":"YulExpressionStatement","src":"2578:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2548:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2556:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2545:2:33"},"nodeType":"YulFunctionCall","src":"2545:30:33"},"nodeType":"YulIf","src":"2542:50:33"},{"nodeType":"YulAssignment","src":"2601:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"2643:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:33"},"nodeType":"YulFunctionCall","src":"2628:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2611:16:33"},"nodeType":"YulFunctionCall","src":"2611:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2601:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2332:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2343:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2355:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2363:6:33","type":""}],"src":"2278:388:33"},{"body":{"nodeType":"YulBlock","src":"2772:102:33","statements":[{"nodeType":"YulAssignment","src":"2782:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2794:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2805:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2790:3:33"},"nodeType":"YulFunctionCall","src":"2790:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2782:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2824:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2839:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2855:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2860:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2851:3:33"},"nodeType":"YulFunctionCall","src":"2851:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"2864:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2847:3:33"},"nodeType":"YulFunctionCall","src":"2847:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2835:3:33"},"nodeType":"YulFunctionCall","src":"2835:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2817:6:33"},"nodeType":"YulFunctionCall","src":"2817:51:33"},"nodeType":"YulExpressionStatement","src":"2817:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2741:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2752:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2763:4:33","type":""}],"src":"2671:203:33"},{"body":{"nodeType":"YulBlock","src":"2948:114:33","statements":[{"body":{"nodeType":"YulBlock","src":"2992:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2994:16:33"},"nodeType":"YulFunctionCall","src":"2994:18:33"},"nodeType":"YulExpressionStatement","src":"2994:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2964:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2972:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2961:2:33"},"nodeType":"YulFunctionCall","src":"2961:30:33"},"nodeType":"YulIf","src":"2958:56:33"},{"nodeType":"YulAssignment","src":"3023:33:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3039:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3042:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3035:3:33"},"nodeType":"YulFunctionCall","src":"3035:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"3051:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3031:3:33"},"nodeType":"YulFunctionCall","src":"3031:25:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3023:4:33"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2928:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2939:4:33","type":""}],"src":"2879:183:33"},{"body":{"nodeType":"YulBlock","src":"3131:598:33","statements":[{"body":{"nodeType":"YulBlock","src":"3180:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:33"},"nodeType":"YulFunctionCall","src":"3182:12:33"},"nodeType":"YulExpressionStatement","src":"3182:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3159:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3167:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3155:3:33"},"nodeType":"YulFunctionCall","src":"3155:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3174:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3151:3:33"},"nodeType":"YulFunctionCall","src":"3151:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:33"},"nodeType":"YulFunctionCall","src":"3144:35:33"},"nodeType":"YulIf","src":"3141:55:33"},{"nodeType":"YulVariableDeclaration","src":"3205:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3228:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3215:12:33"},"nodeType":"YulFunctionCall","src":"3215:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3209:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3244:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3254:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3248:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3267:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3334:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"3294:39:33"},"nodeType":"YulFunctionCall","src":"3294:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3278:15:33"},"nodeType":"YulFunctionCall","src":"3278:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3271:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3347:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"3360:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3351:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3379:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3384:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3372:6:33"},"nodeType":"YulFunctionCall","src":"3372:15:33"},"nodeType":"YulExpressionStatement","src":"3372:15:33"},{"nodeType":"YulAssignment","src":"3396:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3407:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3412:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3403:3:33"},"nodeType":"YulFunctionCall","src":"3403:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3396:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3424:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3446:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3458:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3461:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3454:3:33"},"nodeType":"YulFunctionCall","src":"3454:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3442:3:33"},"nodeType":"YulFunctionCall","src":"3442:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3467:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3438:3:33"},"nodeType":"YulFunctionCall","src":"3438:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3428:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3498:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3507:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3510:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3500:6:33"},"nodeType":"YulFunctionCall","src":"3500:12:33"},"nodeType":"YulExpressionStatement","src":"3500:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3485:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3493:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3482:2:33"},"nodeType":"YulFunctionCall","src":"3482:15:33"},"nodeType":"YulIf","src":"3479:35:33"},{"nodeType":"YulVariableDeclaration","src":"3523:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3538:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3546:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3534:3:33"},"nodeType":"YulFunctionCall","src":"3534:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3527:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3614:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3635:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3653:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3640:12:33"},"nodeType":"YulFunctionCall","src":"3640:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3628:6:33"},"nodeType":"YulFunctionCall","src":"3628:30:33"},"nodeType":"YulExpressionStatement","src":"3628:30:33"},{"nodeType":"YulAssignment","src":"3671:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3682:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3687:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3678:3:33"},"nodeType":"YulFunctionCall","src":"3678:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3671:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3569:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3574:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3566:2:33"},"nodeType":"YulFunctionCall","src":"3566:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3582:23:33","statements":[{"nodeType":"YulAssignment","src":"3584:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3595:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3600:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3591:3:33"},"nodeType":"YulFunctionCall","src":"3591:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3584:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3562:3:33","statements":[]},"src":"3558:142:33"},{"nodeType":"YulAssignment","src":"3709:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3718:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3709:5:33"}]}]},"name":"abi_decode_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3105:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3113:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3121:5:33","type":""}],"src":"3067:662:33"},{"body":{"nodeType":"YulBlock","src":"3880:1211:33","statements":[{"body":{"nodeType":"YulBlock","src":"3926:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3935:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3938:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3928:6:33"},"nodeType":"YulFunctionCall","src":"3928:12:33"},"nodeType":"YulExpressionStatement","src":"3928:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3901:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3910:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3897:3:33"},"nodeType":"YulFunctionCall","src":"3897:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3922:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3893:3:33"},"nodeType":"YulFunctionCall","src":"3893:32:33"},"nodeType":"YulIf","src":"3890:52:33"},{"nodeType":"YulVariableDeclaration","src":"3951:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3978:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3965:12:33"},"nodeType":"YulFunctionCall","src":"3965:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3955:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3997:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4007:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4001:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4052:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4061:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4064:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4054:6:33"},"nodeType":"YulFunctionCall","src":"4054:12:33"},"nodeType":"YulExpressionStatement","src":"4054:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4040:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4048:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4037:2:33"},"nodeType":"YulFunctionCall","src":"4037:14:33"},"nodeType":"YulIf","src":"4034:34:33"},{"nodeType":"YulAssignment","src":"4077:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4120:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4131:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4116:3:33"},"nodeType":"YulFunctionCall","src":"4116:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4140:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4087:28:33"},"nodeType":"YulFunctionCall","src":"4087:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4077:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"4157:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4167:2:33","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4161:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4178:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4222:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:33"},"nodeType":"YulFunctionCall","src":"4207:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4194:12:33"},"nodeType":"YulFunctionCall","src":"4194:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4182:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4255:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4264:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4267:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4257:6:33"},"nodeType":"YulFunctionCall","src":"4257:12:33"},"nodeType":"YulExpressionStatement","src":"4257:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4241:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4251:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4238:2:33"},"nodeType":"YulFunctionCall","src":"4238:16:33"},"nodeType":"YulIf","src":"4235:36:33"},{"nodeType":"YulVariableDeclaration","src":"4280:34:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4294:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4305:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4290:3:33"},"nodeType":"YulFunctionCall","src":"4290:24:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4284:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4362:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4371:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4374:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4364:6:33"},"nodeType":"YulFunctionCall","src":"4364:12:33"},"nodeType":"YulExpressionStatement","src":"4364:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4345:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4337:3:33"},"nodeType":"YulFunctionCall","src":"4337:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4352:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4333:3:33"},"nodeType":"YulFunctionCall","src":"4333:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4326:6:33"},"nodeType":"YulFunctionCall","src":"4326:35:33"},"nodeType":"YulIf","src":"4323:55:33"},{"nodeType":"YulVariableDeclaration","src":"4387:26:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4410:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4397:12:33"},"nodeType":"YulFunctionCall","src":"4397:16:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4391:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4422:71:33","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4489:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4449:39:33"},"nodeType":"YulFunctionCall","src":"4449:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4433:15:33"},"nodeType":"YulFunctionCall","src":"4433:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4426:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4502:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"4515:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4506:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4534:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"4539:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4527:6:33"},"nodeType":"YulFunctionCall","src":"4527:15:33"},"nodeType":"YulExpressionStatement","src":"4527:15:33"},{"nodeType":"YulAssignment","src":"4551:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4562:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4567:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4558:3:33"},"nodeType":"YulFunctionCall","src":"4558:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4551:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"4579:42:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4601:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4609:1:33","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"4612:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4605:3:33"},"nodeType":"YulFunctionCall","src":"4605:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4597:3:33"},"nodeType":"YulFunctionCall","src":"4597:19:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4618:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4593:3:33"},"nodeType":"YulFunctionCall","src":"4593:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4583:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4653:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4662:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4665:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4655:6:33"},"nodeType":"YulFunctionCall","src":"4655:12:33"},"nodeType":"YulExpressionStatement","src":"4655:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4636:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4644:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4633:2:33"},"nodeType":"YulFunctionCall","src":"4633:19:33"},"nodeType":"YulIf","src":"4630:39:33"},{"nodeType":"YulVariableDeclaration","src":"4678:22:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4693:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4697:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4689:3:33"},"nodeType":"YulFunctionCall","src":"4689:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4682:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4765:296:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4779:36:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4811:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4798:12:33"},"nodeType":"YulFunctionCall","src":"4798:17:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"4783:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4863:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4881:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4891:1:33","type":"","value":"0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"4885:2:33","type":""}]},{"expression":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4916:2:33"},{"name":"_5","nodeType":"YulIdentifier","src":"4920:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4909:6:33"},"nodeType":"YulFunctionCall","src":"4909:14:33"},"nodeType":"YulExpressionStatement","src":"4909:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"4834:11:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4847:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4831:2:33"},"nodeType":"YulFunctionCall","src":"4831:19:33"},"nodeType":"YulIf","src":"4828:109:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4957:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4987:2:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"4991:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4983:3:33"},"nodeType":"YulFunctionCall","src":"4983:20:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5005:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4979:3:33"},"nodeType":"YulFunctionCall","src":"4979:29:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5010:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4962:16:33"},"nodeType":"YulFunctionCall","src":"4962:56:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4950:6:33"},"nodeType":"YulFunctionCall","src":"4950:69:33"},"nodeType":"YulExpressionStatement","src":"4950:69:33"},{"nodeType":"YulAssignment","src":"5032:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5043:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"5048:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5039:3:33"},"nodeType":"YulFunctionCall","src":"5039:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5032:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4720:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4725:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4717:2:33"},"nodeType":"YulFunctionCall","src":"4717:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4733:23:33","statements":[{"nodeType":"YulAssignment","src":"4735:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4746:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4751:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4742:3:33"},"nodeType":"YulFunctionCall","src":"4742:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4735:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4713:3:33","statements":[]},"src":"4709:352:33"},{"nodeType":"YulAssignment","src":"5070:15:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5080:5:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5070:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3838:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3849:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3861:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3869:6:33","type":""}],"src":"3734:1357:33"},{"body":{"nodeType":"YulBlock","src":"5191:253:33","statements":[{"body":{"nodeType":"YulBlock","src":"5237:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5246:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5249:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5239:6:33"},"nodeType":"YulFunctionCall","src":"5239:12:33"},"nodeType":"YulExpressionStatement","src":"5239:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5212:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5221:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5208:3:33"},"nodeType":"YulFunctionCall","src":"5208:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5233:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5204:3:33"},"nodeType":"YulFunctionCall","src":"5204:32:33"},"nodeType":"YulIf","src":"5201:52:33"},{"nodeType":"YulVariableDeclaration","src":"5262:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5289:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5276:12:33"},"nodeType":"YulFunctionCall","src":"5276:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5266:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5342:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5351:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5354:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5344:6:33"},"nodeType":"YulFunctionCall","src":"5344:12:33"},"nodeType":"YulExpressionStatement","src":"5344:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5314:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5322:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5311:2:33"},"nodeType":"YulFunctionCall","src":"5311:30:33"},"nodeType":"YulIf","src":"5308:50:33"},{"nodeType":"YulAssignment","src":"5367:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5410:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"5421:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5406:3:33"},"nodeType":"YulFunctionCall","src":"5406:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5430:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"5377:28:33"},"nodeType":"YulFunctionCall","src":"5377:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5367:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5157:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5168:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5180:6:33","type":""}],"src":"5096:348:33"},{"body":{"nodeType":"YulBlock","src":"5618:631:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5628:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5638:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5632:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5649:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5667:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5678:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5663:3:33"},"nodeType":"YulFunctionCall","src":"5663:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5653:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5697:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5708:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5690:6:33"},"nodeType":"YulFunctionCall","src":"5690:21:33"},"nodeType":"YulExpressionStatement","src":"5690:21:33"},{"nodeType":"YulVariableDeclaration","src":"5720:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5731:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"5724:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5746:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5766:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5760:5:33"},"nodeType":"YulFunctionCall","src":"5760:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5750:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5789:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"5797:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:33"},"nodeType":"YulFunctionCall","src":"5782:22:33"},"nodeType":"YulExpressionStatement","src":"5782:22:33"},{"nodeType":"YulAssignment","src":"5813:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5824:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5835:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5820:3:33"},"nodeType":"YulFunctionCall","src":"5820:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5813:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"5847:53:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5869:9:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5884:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"5887:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5880:3:33"},"nodeType":"YulFunctionCall","src":"5880:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5865:3:33"},"nodeType":"YulFunctionCall","src":"5865:30:33"},{"kind":"number","nodeType":"YulLiteral","src":"5897:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5861:3:33"},"nodeType":"YulFunctionCall","src":"5861:39:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5851:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5909:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5927:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5935:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5923:3:33"},"nodeType":"YulFunctionCall","src":"5923:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5913:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5947:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"5956:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5951:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6015:205:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6036:3:33"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6049:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6057:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6045:3:33"},"nodeType":"YulFunctionCall","src":"6045:22:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6073:2:33","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6069:3:33"},"nodeType":"YulFunctionCall","src":"6069:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6041:3:33"},"nodeType":"YulFunctionCall","src":"6041:36:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6029:6:33"},"nodeType":"YulFunctionCall","src":"6029:49:33"},"nodeType":"YulExpressionStatement","src":"6029:49:33"},{"nodeType":"YulAssignment","src":"6091:49:33","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6124:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6118:5:33"},"nodeType":"YulFunctionCall","src":"6118:13:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"6133:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6101:16:33"},"nodeType":"YulFunctionCall","src":"6101:39:33"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6091:6:33"}]},{"nodeType":"YulAssignment","src":"6153:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6167:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6175:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6163:3:33"},"nodeType":"YulFunctionCall","src":"6163:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6153:6:33"}]},{"nodeType":"YulAssignment","src":"6191:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6202:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6207:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6198:3:33"},"nodeType":"YulFunctionCall","src":"6198:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6191:3:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5977:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"5980:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5974:2:33"},"nodeType":"YulFunctionCall","src":"5974:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5988:18:33","statements":[{"nodeType":"YulAssignment","src":"5990:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5999:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"6002:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5995:3:33"},"nodeType":"YulFunctionCall","src":"5995:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5990:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"5970:3:33","statements":[]},"src":"5966:254:33"},{"nodeType":"YulAssignment","src":"6229:14:33","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"6237:6:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6229:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5587:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5598:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5609:4:33","type":""}],"src":"5449:800:33"},{"body":{"nodeType":"YulBlock","src":"6324:216:33","statements":[{"body":{"nodeType":"YulBlock","src":"6370:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6379:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6382:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6372:6:33"},"nodeType":"YulFunctionCall","src":"6372:12:33"},"nodeType":"YulExpressionStatement","src":"6372:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6345:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6354:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6341:3:33"},"nodeType":"YulFunctionCall","src":"6341:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6366:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6337:3:33"},"nodeType":"YulFunctionCall","src":"6337:32:33"},"nodeType":"YulIf","src":"6334:52:33"},{"nodeType":"YulVariableDeclaration","src":"6395:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6421:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6408:12:33"},"nodeType":"YulFunctionCall","src":"6408:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6399:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6494:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6503:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6506:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6496:6:33"},"nodeType":"YulFunctionCall","src":"6496:12:33"},"nodeType":"YulExpressionStatement","src":"6496:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6453:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6464:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6479:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6484:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6475:3:33"},"nodeType":"YulFunctionCall","src":"6475:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"6488:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6471:3:33"},"nodeType":"YulFunctionCall","src":"6471:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6460:3:33"},"nodeType":"YulFunctionCall","src":"6460:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6450:2:33"},"nodeType":"YulFunctionCall","src":"6450:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6443:6:33"},"nodeType":"YulFunctionCall","src":"6443:50:33"},"nodeType":"YulIf","src":"6440:70:33"},{"nodeType":"YulAssignment","src":"6519:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"6529:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6519:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6290:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6301:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6313:6:33","type":""}],"src":"6254:286:33"},{"body":{"nodeType":"YulBlock","src":"6577:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6594:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6601:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6606:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6597:3:33"},"nodeType":"YulFunctionCall","src":"6597:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6587:6:33"},"nodeType":"YulFunctionCall","src":"6587:31:33"},"nodeType":"YulExpressionStatement","src":"6587:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6634:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6637:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6627:6:33"},"nodeType":"YulFunctionCall","src":"6627:15:33"},"nodeType":"YulExpressionStatement","src":"6627:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6658:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6661:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6651:6:33"},"nodeType":"YulFunctionCall","src":"6651:15:33"},"nodeType":"YulExpressionStatement","src":"6651:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6545:127:33"},{"body":{"nodeType":"YulBlock","src":"6732:325:33","statements":[{"nodeType":"YulAssignment","src":"6742:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6756:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6759:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6752:3:33"},"nodeType":"YulFunctionCall","src":"6752:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6742:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"6773:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6803:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"6809:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6799:3:33"},"nodeType":"YulFunctionCall","src":"6799:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6777:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6850:31:33","statements":[{"nodeType":"YulAssignment","src":"6852:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6866:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6874:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6862:3:33"},"nodeType":"YulFunctionCall","src":"6862:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6852:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6830:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6823:6:33"},"nodeType":"YulFunctionCall","src":"6823:26:33"},"nodeType":"YulIf","src":"6820:61:33"},{"body":{"nodeType":"YulBlock","src":"6940:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6961:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6968:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6973:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6964:3:33"},"nodeType":"YulFunctionCall","src":"6964:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6954:6:33"},"nodeType":"YulFunctionCall","src":"6954:31:33"},"nodeType":"YulExpressionStatement","src":"6954:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7005:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7008:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6998:6:33"},"nodeType":"YulFunctionCall","src":"6998:15:33"},"nodeType":"YulExpressionStatement","src":"6998:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7033:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7036:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7026:6:33"},"nodeType":"YulFunctionCall","src":"7026:15:33"},"nodeType":"YulExpressionStatement","src":"7026:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6896:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6919:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6927:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6916:2:33"},"nodeType":"YulFunctionCall","src":"6916:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6893:2:33"},"nodeType":"YulFunctionCall","src":"6893:38:33"},"nodeType":"YulIf","src":"6890:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6712:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6721:6:33","type":""}],"src":"6677:380:33"},{"body":{"nodeType":"YulBlock","src":"7117:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7134:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"7137:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7127:6:33"},"nodeType":"YulFunctionCall","src":"7127:14:33"},"nodeType":"YulExpressionStatement","src":"7127:14:33"},{"nodeType":"YulAssignment","src":"7150:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7168:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7171:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7158:9:33"},"nodeType":"YulFunctionCall","src":"7158:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7150:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"7100:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"7108:4:33","type":""}],"src":"7062:120:33"},{"body":{"nodeType":"YulBlock","src":"7267:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"7300:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"7314:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"7324:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7318:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7345:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"7349:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7338:6:33"},"nodeType":"YulFunctionCall","src":"7338:17:33"},"nodeType":"YulExpressionStatement","src":"7338:17:33"},{"nodeType":"YulVariableDeclaration","src":"7368:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7390:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"7394:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7380:9:33"},"nodeType":"YulFunctionCall","src":"7380:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"7372:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7412:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7435:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7445:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7452:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"7464:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7448:3:33"},"nodeType":"YulFunctionCall","src":"7448:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7441:3:33"},"nodeType":"YulFunctionCall","src":"7441:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7431:3:33"},"nodeType":"YulFunctionCall","src":"7431:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"7416:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7506:23:33","statements":[{"nodeType":"YulAssignment","src":"7508:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"7523:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"7508:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7488:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"7500:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7485:2:33"},"nodeType":"YulFunctionCall","src":"7485:20:33"},"nodeType":"YulIf","src":"7482:47:33"},{"nodeType":"YulVariableDeclaration","src":"7542:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7556:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7566:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7573:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7578:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7569:3:33"},"nodeType":"YulFunctionCall","src":"7569:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7562:3:33"},"nodeType":"YulFunctionCall","src":"7562:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7552:3:33"},"nodeType":"YulFunctionCall","src":"7552:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7546:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7596:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"7609:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"7600:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7694:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7703:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7710:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7696:6:33"},"nodeType":"YulFunctionCall","src":"7696:17:33"},"nodeType":"YulExpressionStatement","src":"7696:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7644:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"7651:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7641:2:33"},"nodeType":"YulFunctionCall","src":"7641:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7655:26:33","statements":[{"nodeType":"YulAssignment","src":"7657:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"7670:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"7677:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7666:3:33"},"nodeType":"YulFunctionCall","src":"7666:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"7657:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"7637:3:33","statements":[]},"src":"7633:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7283:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"7288:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7280:2:33"},"nodeType":"YulFunctionCall","src":"7280:11:33"},"nodeType":"YulIf","src":"7277:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"7239:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"7246:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"7251:10:33","type":""}],"src":"7187:544:33"},{"body":{"nodeType":"YulBlock","src":"7821:81:33","statements":[{"nodeType":"YulAssignment","src":"7831:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7846:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7864:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"7867:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7860:3:33"},"nodeType":"YulFunctionCall","src":"7860:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7877:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7873:3:33"},"nodeType":"YulFunctionCall","src":"7873:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7856:3:33"},"nodeType":"YulFunctionCall","src":"7856:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7852:3:33"},"nodeType":"YulFunctionCall","src":"7852:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7842:3:33"},"nodeType":"YulFunctionCall","src":"7842:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7888:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"7891:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7884:3:33"},"nodeType":"YulFunctionCall","src":"7884:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7839:2:33"},"nodeType":"YulFunctionCall","src":"7839:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7831:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7798:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"7804:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"7812:4:33","type":""}],"src":"7736:166:33"},{"body":{"nodeType":"YulBlock","src":"8001:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8011:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8031:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8025:5:33"},"nodeType":"YulFunctionCall","src":"8025:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"8015:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8078:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8080:16:33"},"nodeType":"YulFunctionCall","src":"8080:18:33"},"nodeType":"YulExpressionStatement","src":"8080:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8050:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8058:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8047:2:33"},"nodeType":"YulFunctionCall","src":"8047:30:33"},"nodeType":"YulIf","src":"8044:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8152:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8190:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8184:5:33"},"nodeType":"YulFunctionCall","src":"8184:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"8158:25:33"},"nodeType":"YulFunctionCall","src":"8158:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"8198:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"8109:42:33"},"nodeType":"YulFunctionCall","src":"8109:96:33"},"nodeType":"YulExpressionStatement","src":"8109:96:33"},{"nodeType":"YulVariableDeclaration","src":"8214:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8231:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"8218:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8241:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8260:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"8245:11:33","type":""}]},{"nodeType":"YulAssignment","src":"8273:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8286:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8273:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"8343:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8376:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8388:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8384:3:33"},"nodeType":"YulFunctionCall","src":"8384:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8372:3:33"},"nodeType":"YulFunctionCall","src":"8372:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"8361:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8405:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8448:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"8419:28:33"},"nodeType":"YulFunctionCall","src":"8419:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"8409:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8466:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8475:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8470:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8553:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8578:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8596:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8601:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8592:3:33"},"nodeType":"YulFunctionCall","src":"8592:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8586:5:33"},"nodeType":"YulFunctionCall","src":"8586:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8571:6:33"},"nodeType":"YulFunctionCall","src":"8571:42:33"},"nodeType":"YulExpressionStatement","src":"8571:42:33"},{"nodeType":"YulAssignment","src":"8630:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8644:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8652:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8640:3:33"},"nodeType":"YulFunctionCall","src":"8640:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8630:6:33"}]},{"nodeType":"YulAssignment","src":"8671:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8688:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8699:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8684:3:33"},"nodeType":"YulFunctionCall","src":"8684:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8671:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8500:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"8503:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8497:2:33"},"nodeType":"YulFunctionCall","src":"8497:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8512:28:33","statements":[{"nodeType":"YulAssignment","src":"8514:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8523:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"8526:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8519:3:33"},"nodeType":"YulFunctionCall","src":"8519:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8514:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"8493:3:33","statements":[]},"src":"8489:236:33"},{"body":{"nodeType":"YulBlock","src":"8773:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"8791:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8818:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8823:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8814:3:33"},"nodeType":"YulFunctionCall","src":"8814:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8808:5:33"},"nodeType":"YulFunctionCall","src":"8808:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8795:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8858:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8870:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8897:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"8900:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8893:3:33"},"nodeType":"YulFunctionCall","src":"8893:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"8909:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8889:3:33"},"nodeType":"YulFunctionCall","src":"8889:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8919:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8915:3:33"},"nodeType":"YulFunctionCall","src":"8915:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8885:3:33"},"nodeType":"YulFunctionCall","src":"8885:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8881:3:33"},"nodeType":"YulFunctionCall","src":"8881:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8866:3:33"},"nodeType":"YulFunctionCall","src":"8866:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8851:6:33"},"nodeType":"YulFunctionCall","src":"8851:74:33"},"nodeType":"YulExpressionStatement","src":"8851:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8744:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"8753:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8741:2:33"},"nodeType":"YulFunctionCall","src":"8741:19:33"},"nodeType":"YulIf","src":"8738:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8959:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8973:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"8976:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8969:3:33"},"nodeType":"YulFunctionCall","src":"8969:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"8985:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8965:3:33"},"nodeType":"YulFunctionCall","src":"8965:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8952:6:33"},"nodeType":"YulFunctionCall","src":"8952:36:33"},"nodeType":"YulExpressionStatement","src":"8952:36:33"}]},"nodeType":"YulCase","src":"8336:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8341:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"9015:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"9029:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"9042:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9033:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9078:67:33","statements":[{"nodeType":"YulAssignment","src":"9096:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9115:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9120:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9111:3:33"},"nodeType":"YulFunctionCall","src":"9111:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9105:5:33"},"nodeType":"YulFunctionCall","src":"9105:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9096:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"9059:6:33"},"nodeType":"YulIf","src":"9056:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9165:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9224:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"9231:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"9171:52:33"},"nodeType":"YulFunctionCall","src":"9171:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9158:6:33"},"nodeType":"YulFunctionCall","src":"9158:81:33"},"nodeType":"YulExpressionStatement","src":"9158:81:33"}]},"nodeType":"YulCase","src":"9007:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8316:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8324:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8313:2:33"},"nodeType":"YulFunctionCall","src":"8313:14:33"},"nodeType":"YulSwitch","src":"8306:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7986:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"7992:3:33","type":""}],"src":"7907:1348:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_bytes32_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let _2 := 32\n        let offset_1 := calldataload(add(headStart, _2))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_3, shl(5, _4)), _2)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _1)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            mstore(dst, abi_decode_bytes(add(add(_3, innerOffset), _2), dataEnd))\n            dst := add(dst, _2)\n        }\n        value1 := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461010c5780639790242114610134578063dedff9c614610147578063f2fde38b1461017457600080fd5b806301ffc9a71461008057806354f6127f146100b5578063715018a6146100e25780637f23690c146100f9575b600080fd5b34801561008c57600080fd5b506100a061009b36600461056a565b610194565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461059b565b6101cb565b6040516100ac91906105fa565b3480156100ee57600080fd5b506100f76101d6565b005b6100f76101073660046106c4565b6101ea565b34801561011857600080fd5b506000546040516001600160a01b0390911681526020016100ac565b6100f761014236600461079a565b61021f565b34801561015357600080fd5b5061016761016236600461086f565b6102df565b6040516100ac91906108ac565b34801561018057600080fd5b506100f761018f36600461090e565b61038a565b60006001600160e01b031982166318a6a9a560e21b14806101c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606101c5826103c5565b6101de610467565b6101e860006104a7565b565b6101f2610467565b34156102115760405163f36ba73760e01b815260040160405180910390fd5b61021b8282610515565b5050565b610227610467565b34156102465760405163f36ba73760e01b815260040160405180910390fd5b805182511461026857604051633bcc897960e01b815260040160405180910390fd5b815160000361028a576040516397da5f9560e01b815260040160405180910390fd5b60005b82518110156102da576102d28382815181106102ab576102ab610937565b60200260200101518383815181106102c5576102c5610937565b6020026020010151610515565b60010161028d565b505050565b6060815167ffffffffffffffff8111156102fb576102fb61060d565b60405190808252806020026020018201604052801561032e57816020015b60608152602001906001900390816103195790505b50905060005b82518110156103845761035f83828151811061035257610352610937565b60200260200101516103c5565b82828151811061037157610371610937565b6020908102919091010152600101610334565b50919050565b610392610467565b6001600160a01b0381166103b9576040516306b620db60e21b815260040160405180910390fd5b6103c2816104a7565b50565b60008181526001602052604090208054606091906103e29061094d565b80601f016020809104026020016040519081016040528092919081815260200182805461040e9061094d565b801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b50505050509050919050565b3361047a6000546001600160a01b031690565b6001600160a01b0316146101e85760405163bf1169c560e01b815233600482015260240160405180910390fd5b6000546001600160a01b038281169116146103c257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b600082815260016020526040902061052d82826109cf565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405161055e91906105fa565b60405180910390a25050565b60006020828403121561057c57600080fd5b81356001600160e01b03198116811461059457600080fd5b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b6000815180845260005b818110156105da576020818501810151868301820152016105be565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061059460208301846105b4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064c5761064c61060d565b604052919050565b600082601f83011261066557600080fd5b813567ffffffffffffffff81111561067f5761067f61060d565b610692601f8201601f1916602001610623565b8181528460208386010111156106a757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156106d757600080fd5b82359150602083013567ffffffffffffffff8111156106f557600080fd5b61070185828601610654565b9150509250929050565b600067ffffffffffffffff8211156107255761072561060d565b5060051b60200190565b600082601f83011261074057600080fd5b813560206107556107508361070b565b610623565b82815260059290921b8401810191818101908684111561077457600080fd5b8286015b8481101561078f5780358352918301918301610778565b509695505050505050565b600080604083850312156107ad57600080fd5b823567ffffffffffffffff808211156107c557600080fd5b6107d18683870161072f565b93506020915081850135818111156107e857600080fd5b8501601f810187136107f957600080fd5b80356108076107508261070b565b81815260059190911b8201840190848101908983111561082657600080fd5b8584015b8381101561085e578035868111156108425760008081fd5b6108508c8983890101610654565b84525091860191860161082a565b508096505050505050509250929050565b60006020828403121561088157600080fd5b813567ffffffffffffffff81111561089857600080fd5b6108a48482850161072f565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561090157603f198886030184526108ef8583516105b4565b945092850192908501906001016108d3565b5092979650505050505050565b60006020828403121561092057600080fd5b81356001600160a01b038116811461059457600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061096157607f821691505b60208210810361038457634e487b7160e01b600052602260045260246000fd5b601f8211156102da57600081815260208120601f850160051c810160208610156109a85750805b601f850160051c820191505b818110156109c7578281556001016109b4565b505050505050565b815167ffffffffffffffff8111156109e9576109e961060d565b6109fd816109f7845461094d565b84610981565b602080601f831160018114610a325760008415610a1a5750858301515b600019600386901b1c1916600185901b1785556109c7565b600085815260208120601f198616915b82811015610a6157888601518255948401946001909101908401610a42565b5085821015610a7f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d3480b52e272571da9c53056302564ddf6b57499f51eba25a844439f5d05283f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x59B JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x8AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1C5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C5 DUP3 PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x0 PUSH2 0x4A7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21B DUP3 DUP3 PUSH2 0x515 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x227 PUSH2 0x467 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2D2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI PUSH2 0x2AB PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x515 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x28D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FB JUMPI PUSH2 0x2FB PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x319 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x35F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x371 JUMPI PUSH2 0x371 PUSH2 0x937 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x334 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x392 PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C2 DUP2 PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x3E2 SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40E SWAP1 PUSH2 0x94D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x45B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x430 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x45B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x47A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x52D DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55E SWAP2 SWAP1 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5BE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x594 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x64C JUMPI PUSH2 0x64C PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH2 0x67F PUSH2 0x60D JUMP JUMPDEST PUSH2 0x692 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x623 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x701 DUP6 DUP3 DUP7 ADD PUSH2 0x654 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0x60D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x755 PUSH2 0x750 DUP4 PUSH2 0x70B JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x78F JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D1 DUP7 DUP4 DUP8 ADD PUSH2 0x72F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x807 PUSH2 0x750 DUP3 PUSH2 0x70B JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x826 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x85E JUMPI DUP1 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x850 DUP13 DUP10 DUP4 DUP10 ADD ADD PUSH2 0x654 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x82A JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A4 DUP5 DUP3 DUP6 ADD PUSH2 0x72F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x901 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x8EF DUP6 DUP4 MLOAD PUSH2 0x5B4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8D3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x961 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x9A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9C7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x9FD DUP2 PUSH2 0x9F7 DUP5 SLOAD PUSH2 0x94D JUMP JUMPDEST DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xA1A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA61 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xA42 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xA7F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 BASEFEE SIGNEXTEND MSTORE 0xE2 PUSH19 0x571DA9C53056302564DDF6B57499F51EBA25A8 PREVRANDAO NUMBER SWAP16 0x5D SDIV 0x28 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"649:610:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5268:245:1;;;;;;;;;;-1:-1:-1;5268:245:1;;;;;:::i;:::-;;:::i;:::-;;;470:14:33;;463:22;445:41;;433:2;418:18;5268:245:1;;;;;;;;1197:156;;;;;;;;;;-1:-1:-1;1197:156:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1313:92:3:-;;;;;;;;;;;;;:::i;:::-;;2326:232:1;;;;;;:::i;:::-;;:::i;736:85:3:-;;;;;;;;;;-1:-1:-1;782:7:3;808:6;736:85;;-1:-1:-1;;;;;808:6:3;;;2817:51:33;;2805:2;2790:18;736:85:3;2671:203:33;3076:763:1;;;;;;:::i;:::-;;:::i;1403:458::-;;;;;;;;;;-1:-1:-1;1403:458:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1554:211:3:-;;;;;;;;;;-1:-1:-1;1554:211:3;;;;;:::i;:::-;;:::i;5268:245:1:-;5384:4;-1:-1:-1;;;;;;5419:35:1;;-1:-1:-1;;;5419:35:1;;:87;;-1:-1:-1;;;;;;;;;;861:40:26;;;5470:36:1;5400:106;5268:245;-1:-1:-1;;5268:245:1:o;1197:156::-;1283:22;1329:17;1338:7;1329:8;:17::i;1313:92:3:-;940:13;:11;:13::i;:::-;1377:21:::1;1395:1;1377:9;:21::i;:::-;1313:92::o:0;2326:232:1:-;940:13:3;:11;:13::i;:::-;2462:9:1::1;:14:::0;2458:55:::1;;2485:28;;-1:-1:-1::0;;;2485:28:1::1;;;;;;;;;;;2458:55;2523:28;2532:7;2541:9;2523:8;:28::i;:::-;2326:232:::0;;:::o;3076:763::-;940:13:3;:11;:13::i;:::-;3314:9:1::1;:14:::0;3310:55:::1;;3337:28;;-1:-1:-1::0;;;3337:28:1::1;;;;;;;;;;;3310:55;3399:10;:17;3380:8;:15;:36;3376:112;;3439:38;;-1:-1:-1::0;;;3439:38:1::1;;;;;;;;;;;3376:112;3502:8;:15;3521:1;3502:20:::0;3498:92:::1;;3545:34;;-1:-1:-1::0;;;3545:34:1::1;;;;;;;;;;;3498:92;3605:9;3600:233;3624:8;:15;3620:1;:19;3600:233;;;3657:36;3666:8;3675:1;3666:11;;;;;;;;:::i;:::-;;;;;;;3679:10;3690:1;3679:13;;;;;;;;:::i;:::-;;;;;;;3657:8;:36::i;:::-;3805:3;;3600:233;;;;3076:763:::0;;:::o;1403:458::-;1504:25;1566:8;:15;1554:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1541:41;;1598:9;1593:234;1617:8;:15;1613:1;:19;1593:234;;;1666:21;1675:8;1684:1;1675:11;;;;;;;;:::i;:::-;;;;;;;1666:8;:21::i;:::-;1650:10;1661:1;1650:13;;;;;;;;:::i;:::-;;;;;;;;;;:37;1799:3;;1593:234;;;;1403:458;;;:::o;1554:211:3:-;940:13;:11;:13::i;:::-;-1:-1:-1;;;;;1638:22:3;::::1;1634:96;;1683:36;;-1:-1:-1::0;;;1683:36:3::1;;;;;;;;;;;1634:96;1739:19;1749:8;1739:9;:19::i;:::-;1554:211:::0;:::o;4335:143:1:-;4456:15;;;;:6;:15;;;;;4449:22;;4415;;4456:15;4449:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4335:143;;;:::o;1838:156:3:-;1908:10;1897:7;782;808:6;-1:-1:-1;;;;;808:6:3;;736:85;1897:7;-1:-1:-1;;;;;1897:21:3;;1893:95;;1941:36;;-1:-1:-1;;;1941:36:3;;1966:10;1941:36;;;2817:51:33;2790:18;;1941:36:3;;;;;;;2133:194;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;2293:17:3;;-1:-1:-1;;;;;;2293:17:3;;;;;;2133:194;:::o;5032:188:1:-;5140:15;;;;:6;:15;;;;;:27;5158:9;5140:15;:27;:::i;:::-;;5194:7;5182:31;5203:9;5182:31;;;;;;:::i;:::-;;;;;;;;5032:188;;:::o;14:286:33:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:33;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:33:o;497:180::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:33;;497:180;-1:-1:-1;497:180:33:o;682:422::-;723:3;761:5;755:12;788:6;783:3;776:19;813:1;823:162;837:6;834:1;831:13;823:162;;;899:4;955:13;;;951:22;;945:29;927:11;;;923:20;;916:59;852:12;823:162;;;827:3;1030:1;1023:4;1014:6;1009:3;1005:16;1001:27;994:38;1093:4;1086:2;1082:7;1077:2;1069:6;1065:15;1061:29;1056:3;1052:39;1048:50;1041:57;;;682:422;;;;:::o;1109:217::-;1256:2;1245:9;1238:21;1219:4;1276:44;1316:2;1305:9;1301:18;1293:6;1276:44;:::i;1331:127::-;1392:10;1387:3;1383:20;1380:1;1373:31;1423:4;1420:1;1413:15;1447:4;1444:1;1437:15;1463:275;1534:2;1528:9;1599:2;1580:13;;-1:-1:-1;;1576:27:33;1564:40;;1634:18;1619:34;;1655:22;;;1616:62;1613:88;;;1681:18;;:::i;:::-;1717:2;1710:22;1463:275;;-1:-1:-1;1463:275:33:o;1743:530::-;1785:5;1838:3;1831:4;1823:6;1819:17;1815:27;1805:55;;1856:1;1853;1846:12;1805:55;1892:6;1879:20;1918:18;1914:2;1911:26;1908:52;;;1940:18;;:::i;:::-;1984:55;2027:2;2008:13;;-1:-1:-1;;2004:27:33;2033:4;2000:38;1984:55;:::i;:::-;2064:2;2055:7;2048:19;2110:3;2103:4;2098:2;2090:6;2086:15;2082:26;2079:35;2076:55;;;2127:1;2124;2117:12;2076:55;2192:2;2185:4;2177:6;2173:17;2166:4;2157:7;2153:18;2140:55;2240:1;2215:16;;;2233:4;2211:27;2204:38;;;;2219:7;1743:530;-1:-1:-1;;;1743:530:33:o;2278:388::-;2355:6;2363;2416:2;2404:9;2395:7;2391:23;2387:32;2384:52;;;2432:1;2429;2422:12;2384:52;2468:9;2455:23;2445:33;;2529:2;2518:9;2514:18;2501:32;2556:18;2548:6;2545:30;2542:50;;;2588:1;2585;2578:12;2542:50;2611:49;2652:7;2643:6;2632:9;2628:22;2611:49;:::i;:::-;2601:59;;;2278:388;;;;;:::o;2879:183::-;2939:4;2972:18;2964:6;2961:30;2958:56;;;2994:18;;:::i;:::-;-1:-1:-1;3039:1:33;3035:14;3051:4;3031:25;;2879:183::o;3067:662::-;3121:5;3174:3;3167:4;3159:6;3155:17;3151:27;3141:55;;3192:1;3189;3182:12;3141:55;3228:6;3215:20;3254:4;3278:60;3294:43;3334:2;3294:43;:::i;:::-;3278:60;:::i;:::-;3372:15;;;3458:1;3454:10;;;;3442:23;;3438:32;;;3403:12;;;;3482:15;;;3479:35;;;3510:1;3507;3500:12;3479:35;3546:2;3538:6;3534:15;3558:142;3574:6;3569:3;3566:15;3558:142;;;3640:17;;3628:30;;3678:12;;;;3591;;3558:142;;;-1:-1:-1;3718:5:33;3067:662;-1:-1:-1;;;;;;3067:662:33:o;3734:1357::-;3861:6;3869;3922:2;3910:9;3901:7;3897:23;3893:32;3890:52;;;3938:1;3935;3928:12;3890:52;3978:9;3965:23;4007:18;4048:2;4040:6;4037:14;4034:34;;;4064:1;4061;4054:12;4034:34;4087:61;4140:7;4131:6;4120:9;4116:22;4087:61;:::i;:::-;4077:71;;4167:2;4157:12;;4222:2;4211:9;4207:18;4194:32;4251:2;4241:8;4238:16;4235:36;;;4267:1;4264;4257:12;4235:36;4290:24;;4345:4;4337:13;;4333:27;-1:-1:-1;4323:55:33;;4374:1;4371;4364:12;4323:55;4410:2;4397:16;4433:60;4449:43;4489:2;4449:43;:::i;4433:60::-;4527:15;;;4609:1;4605:10;;;;4597:19;;4593:28;;;4558:12;;;;4633:19;;;4630:39;;;4665:1;4662;4655:12;4630:39;4697:2;4693;4689:11;4709:352;4725:6;4720:3;4717:15;4709:352;;;4811:3;4798:17;4847:2;4834:11;4831:19;4828:109;;;4891:1;4920:2;4916;4909:14;4828:109;4962:56;5010:7;5005:2;4991:11;4987:2;4983:20;4979:29;4962:56;:::i;:::-;4950:69;;-1:-1:-1;5039:12:33;;;;4742;;4709:352;;;4713:3;5080:5;5070:15;;;;;;;;3734:1357;;;;;:::o;5096:348::-;5180:6;5233:2;5221:9;5212:7;5208:23;5204:32;5201:52;;;5249:1;5246;5239:12;5201:52;5289:9;5276:23;5322:18;5314:6;5311:30;5308:50;;;5354:1;5351;5344:12;5308:50;5377:61;5430:7;5421:6;5410:9;5406:22;5377:61;:::i;:::-;5367:71;5096:348;-1:-1:-1;;;;5096:348:33:o;5449:800::-;5609:4;5638:2;5678;5667:9;5663:18;5708:2;5697:9;5690:21;5731:6;5766;5760:13;5797:6;5789;5782:22;5835:2;5824:9;5820:18;5813:25;;5897:2;5887:6;5884:1;5880:14;5869:9;5865:30;5861:39;5847:53;;5935:2;5927:6;5923:15;5956:1;5966:254;5980:6;5977:1;5974:13;5966:254;;;6073:2;6069:7;6057:9;6049:6;6045:22;6041:36;6036:3;6029:49;6101:39;6133:6;6124;6118:13;6101:39;:::i;:::-;6091:49;-1:-1:-1;6198:12:33;;;;6163:15;;;;6002:1;5995:9;5966:254;;;-1:-1:-1;6237:6:33;;5449:800;-1:-1:-1;;;;;;;5449:800:33:o;6254:286::-;6313:6;6366:2;6354:9;6345:7;6341:23;6337:32;6334:52;;;6382:1;6379;6372:12;6334:52;6408:23;;-1:-1:-1;;;;;6460:31:33;;6450:42;;6440:70;;6506:1;6503;6496:12;6545:127;6606:10;6601:3;6597:20;6594:1;6587:31;6637:4;6634:1;6627:15;6661:4;6658:1;6651:15;6677:380;6756:1;6752:12;;;;6799;;;6820:61;;6874:4;6866:6;6862:17;6852:27;;6820:61;6927:2;6919:6;6916:14;6896:18;6893:38;6890:161;;6973:10;6968:3;6964:20;6961:1;6954:31;7008:4;7005:1;6998:15;7036:4;7033:1;7026:15;7187:544;7288:2;7283:3;7280:11;7277:448;;;7324:1;7349:5;7345:2;7338:17;7394:4;7390:2;7380:19;7464:2;7452:10;7448:19;7445:1;7441:27;7435:4;7431:38;7500:4;7488:10;7485:20;7482:47;;;-1:-1:-1;7523:4:33;7482:47;7578:2;7573:3;7569:12;7566:1;7562:20;7556:4;7552:31;7542:41;;7633:82;7651:2;7644:5;7641:13;7633:82;;;7696:17;;;7677:1;7666:13;7633:82;;;7637:3;;;7187:544;;;:::o;7907:1348::-;8031:3;8025:10;8058:18;8050:6;8047:30;8044:56;;;8080:18;;:::i;:::-;8109:96;8198:6;8158:38;8190:4;8184:11;8158:38;:::i;:::-;8152:4;8109:96;:::i;:::-;8260:4;;8324:2;8313:14;;8341:1;8336:662;;;;9042:1;9059:6;9056:89;;;-1:-1:-1;9111:19:33;;;9105:26;9056:89;-1:-1:-1;;7864:1:33;7860:11;;;7856:24;7852:29;7842:40;7888:1;7884:11;;;7839:57;9158:81;;8306:943;;8336:662;7134:1;7127:14;;;7171:4;7158:18;;-1:-1:-1;;8372:20:33;;;8489:236;8503:7;8500:1;8497:14;8489:236;;;8592:19;;;8586:26;8571:42;;8684:27;;;;8652:1;8640:14;;;;8519:19;;8489:236;;;8493:3;8753:6;8744:7;8741:19;8738:201;;;8814:19;;;8808:26;-1:-1:-1;;8897:1:33;8893:14;;;8909:3;8889:24;8885:37;8881:42;8866:58;8851:74;;8738:201;-1:-1:-1;;;;;8985:1:33;8969:14;;;8965:22;8952:36;;-1:-1:-1;7907:1348:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"551400","executionCost":"infinite","totalCost":"infinite"},"external":{"getData(bytes32)":"infinite","getDataBatch(bytes32[])":"infinite","owner()":"2301","renounceOwnership()":"infinite","setData(bytes32,bytes)":"infinite","setDataBatch(bytes32[],bytes[])":"infinite","supportsInterface(bytes4)":"427","transferOwnership(address)":"32659"}},"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <fabian@lukso.network>\",\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:requirements\":\"- `initialOwner` CANNOT be the zero address.\",\"details\":\"Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\",\"params\":{\"initialOwner\":\"the owner of the contract.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":\"ERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/ERC725Y.sol:ERC725Y","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@erc725/smart-contracts/contracts/ERC725Y.sol:ERC725Y","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"constructor":{"notice":"Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@erc725/smart-contracts/contracts/ERC725YCore.sol":{"ERC725YCore":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Fabian Vogelsteller <fabian@lukso.network>","details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"_store":{"details":"Map `bytes32` data keys to their `bytes` data values."}},"title":"Core implementation of ERC725Y sub-standard, a general data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <fabian@lukso.network>\",\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_store\":{\"details\":\"Map `bytes32` data keys to their `bytes` data values.\"}},\"title\":\"Core implementation of ERC725Y sub-standard, a general data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":\"ERC725YCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/ERC725YCore.sol:ERC725YCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@erc725/smart-contracts/contracts/ERC725YCore.sol:ERC725YCore","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol":{"OwnableUnset":{"abi":[{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"modified version of OpenZeppelin implementation, where: - _setOwner(address) function is internal, so this function can be used in constructor of contracts implementation (instead of using transferOwnership(address) - the contract does not inherit from Context contract","errors":{"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OwnableUnset","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"modified version of OpenZeppelin implementation, where: - _setOwner(address) function is internal, so this function can be used in constructor of contracts implementation (instead of using transferOwnership(address) - the contract does not inherit from Context contract\",\"errors\":{\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OwnableUnset\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":\"OwnableUnset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol:OwnableUnset","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"IERC725Y":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"The interface for ERC725Y sub-standard, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725Y sub-standard, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":\"IERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol":{"ILSP1UniversalReceiver":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"typeId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"receivedData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"returnedValue","type":"bytes"}],"name":"UniversalReceiver","type":"event"},{"inputs":[{"internalType":"bytes32","name":"typeId","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"universalReceiver","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.","events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"details":"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`","params":{"from":"The address of the EOA or smart contract that called the {universalReceiver(...)} function.","receivedData":"Any arbitrary data that was sent to the {universalReceiver(...)} function.","returnedValue":"The value returned by the {universalReceiver(...)} function.","typeId":"A `bytes32` unique identifier (= _\"hook\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.","value":"The amount sent to the {universalReceiver(...)} function."}}},"kind":"dev","methods":{"universalReceiver(bytes32,bytes)":{"custom:events":"{UniversalReceiver} event.","details":"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.","params":{"data":"The arbitrary data received with the call.","typeId":"The hash of a specific standard or a hook."}}},"title":"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"universalReceiver(bytes32,bytes)":"6bb56a14"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedValue\",\"type\":\"bytes\"}],\"name\":\"UniversalReceiver\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"universalReceiver\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\",\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"details\":\"Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\",\"params\":{\"from\":\"The address of the EOA or smart contract that called the {universalReceiver(...)} function.\",\"receivedData\":\"Any arbitrary data that was sent to the {universalReceiver(...)} function.\",\"returnedValue\":\"The value returned by the {universalReceiver(...)} function.\",\"typeId\":\"A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\",\"value\":\"The amount sent to the {universalReceiver(...)} function.\"}}},\"kind\":\"dev\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"custom:events\":\"{UniversalReceiver} event.\",\"details\":\"Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\",\"params\":{\"data\":\"The arbitrary data received with the call.\",\"typeId\":\"The hash of a specific standard or a hook.\"}}},\"title\":\"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\",\"version\":1},\"userdoc\":{\"events\":{\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\"}},\"kind\":\"user\",\"methods\":{\"universalReceiver(bytes32,bytes)\":{\"notice\":\"Reacted on received notification with `typeId` & `data`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":\"ILSP1UniversalReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"UniversalReceiver(address,uint256,bytes32,bytes,bytes)":{"notice":"Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`."}},"kind":"user","methods":{"universalReceiver(bytes32,bytes)":{"notice":"Reacted on received notification with `typeId` & `data`."}},"version":1}}},"@lukso/lsp1-contracts/contracts/LSP1Utils.sol":{"LSP1Utils":{"abi":[],"devdoc":{"author":"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>","details":"LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract that implements LSP1 and retrieve informations related to LSP1 `typeId`. Based on LSP1 Universal Receiver standard.","kind":"dev","methods":{},"title":"LSP1 Utility library.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2d28865ce76f9d55246515a16de3856430804e9070abeeb1e16682f1ecb5bc964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xD2 DUP9 PUSH6 0xCE76F9D55246 MLOAD GAS AND 0xDE CODESIZE JUMP NUMBER ADDMOD DIV 0xE9 SMOD EXP 0xBE 0xEB 0x1E AND PUSH9 0x2F1ECB5BC964736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"877:2519:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;877:2519:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2d28865ce76f9d55246515a16de3856430804e9070abeeb1e16682f1ecb5bc964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xD2 DUP9 PUSH6 0xCE76F9D55246 MLOAD GAS AND 0xDE CODESIZE JUMP NUMBER ADDMOD DIV 0xE9 SMOD EXP 0xBE 0xEB 0x1E AND PUSH9 0x2F1ECB5BC964736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"877:2519:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getLSP1DelegateValue(mapping(bytes32 => bytes storage ref))":"infinite","getLSP1DelegateValueForTypeId(mapping(bytes32 => bytes storage ref),bytes32)":"infinite","notifyUniversalReceiver(address,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\",\"details\":\"LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract that implements LSP1 and retrieve informations related to LSP1 `typeId`. Based on LSP1 Universal Receiver standard.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LSP1 Utility library.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":\"LSP1Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol":{"LSP17Extendable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard. This module can be inherited to extend the functionality of the parent contract when calling a function that doesn't exist on the parent contract via forwarding the call to an extension mapped to the function selector being called, set originally by the parent contract","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"title":"Module to add more functionalities to a contract using extensions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard. This module can be inherited to extend the functionality of the parent contract when calling a function that doesn't exist on the parent contract via forwarding the call to an extension mapped to the function selector being called, set originally by the parent contract\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Module to add more functionalities to a contract using extensions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":\"LSP17Extendable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp2-contracts/contracts/LSP2Utils.sol":{"LSP2Utils":{"abi":[],"devdoc":{"author":"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>","details":"LSP2Utils is a library of utility functions that can be used to encode data key of different key type defined on the LSP2 standard. Based on LSP2 ERC725Y JSON Schema standard.","kind":"dev","methods":{},"title":"LSP2 Utility library.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220669e34abaa23b9a6cddc6574bc8c9f89bb9042ed96575795553393175f14f1ec64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x9E34ABAA23B9A6 0xCD 0xDC PUSH6 0x74BC8C9F89BB SWAP1 TIMESTAMP 0xED SWAP7 JUMPI JUMPI SWAP6 SSTORE CALLER SWAP4 OR PUSH0 EQ CALL 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"482:15762:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:15762:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220669e34abaa23b9a6cddc6574bc8c9f89bb9042ed96575795553393175f14f1ec64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x9E34ABAA23B9A6 0xCD 0xDC PUSH6 0x74BC8C9F89BB SWAP1 TIMESTAMP 0xED SWAP7 JUMPI JUMPI SWAP6 SSTORE CALLER SWAP4 OR PUSH0 EQ CALL 0xEC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"482:15762:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"generateASSETURLValue(string memory,string memory,string memory)":"infinite","generateArrayElementKeyAtIndex(bytes32,uint128)":"infinite","generateArrayKey(string memory)":"infinite","generateJSONURLValue(string memory,string memory,string memory)":"infinite","generateMappingKey(bytes10,bytes20)":"infinite","generateMappingKey(string memory,address)":"infinite","generateMappingKey(string memory,string memory)":"infinite","generateMappingWithGroupingKey(bytes10,bytes20)":"infinite","generateMappingWithGroupingKey(bytes6,bytes4,bytes20)":"infinite","generateMappingWithGroupingKey(string memory,string memory,address)":"infinite","generateSingletonKey(string memory)":"infinite","isCompactBytesArray(bytes memory)":"infinite","isValidLSP2ArrayLengthValue(bytes memory)":"infinite","removeElementFromArrayAndMap(contract IERC725Y,bytes32,uint128,bytes32,uint128,bytes32)":"infinite","removeLastElementFromArrayAndMap(bytes32,uint128,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\",\"details\":\"LSP2Utils is a library of utility functions that can be used to encode data key of different key type defined on the LSP2 standard. Based on LSP2 ERC725Y JSON Schema standard.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LSP2 Utility library.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":\"LSP2Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol":{"LSP4DigitalAssetMetadata":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Standard Implementation of the LSP4 standard.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"constructor":{"params":{"initialOwner_":"The owner of the token contract.","lsp4TokenType_":"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).","name_":"The name of the token.","symbol_":"The symbol of the token."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Standard Implementation of the LSP4 standard.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"initialOwner_\":\"The owner of the token contract.\",\"lsp4TokenType_\":\"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\",\"name_\":\"The name of the token.\",\"symbol_\":\"The symbol of the token.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploying a digital asset `name_` with the `symbol_` symbol.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":\"LSP4DigitalAssetMetadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol:LSP4DigitalAssetMetadata","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol:LSP4DigitalAssetMetadata","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"constructor":{"notice":"Deploying a digital asset `name_` with the `symbol_` symbol."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol":{"LSP4DigitalAssetMetadataCore":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Standard Implementation of the LSP4 standard.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Standard Implementation of the LSP4 standard.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":\"LSP4DigitalAssetMetadataCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol:LSP4DigitalAssetMetadataCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol:LSP4DigitalAssetMetadataCore","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"}}},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol":{"ILSP8IdentifiableDigitalAsset":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValues","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"custom:events":"{OperatorAuthorizationChanged} event.","custom:requirements":"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValues":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"custom:info":"The tokenOwner is its own operator.","custom:requirements":"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.","details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"revokeOperator(address,bytes32,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..","custom:requirements":"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"custom:events":"{TokenIdDataChanged} event for each pair.","params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"custom:events":"{TokenIdDataChanged} event.","params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"custom:info":"if the `tokenId` is not owned by any address, the returned address will be `address(0)`","custom:requirements":"`tokenId` must exist.","details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"custom:events":"- {Transfer} event when the `tokenId` is successfully transferred.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"custom:events":"- {Transfer} events on each successful token transfer.","custom:requirements":"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.","details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}}},"title":"Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","isOperatorFor(address,bytes32)":"2a3654a4","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValues\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} event.\",\"custom:requirements\":\"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValues\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"custom:info\":\"The tokenOwner is its own operator.\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.\",\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"revokeOperator(address,bytes32,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"custom:events\":\"{TokenIdDataChanged} event for each pair.\",\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"custom:events\":\"{TokenIdDataChanged} event.\",\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"custom:info\":\"if the `tokenId` is not owned by any address, the returned address will be `address(0)`\",\"custom:requirements\":\"`tokenId` must exist.\",\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when the `tokenId` is successfully transferred.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"custom:events\":\"- {Transfer} events on each successful token transfer.\",\"custom:requirements\":\"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.\",\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}}},\"title\":\"Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":\"ILSP8IdentifiableDigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol":{"LSP8IdentifiableDigitalAsset":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"bytes","name":"storedData","type":"bytes"}],"name":"InvalidExtensionAddress","type":"error"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"InvalidFunctionSelector","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP8BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP8CannotSendToAddressZero","type":"error"},{"inputs":[],"name":"LSP8CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[],"name":"LSP8InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistentTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistingOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOperator","type":"error"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOwner","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8OperatorAlreadyAuthorized","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP8TokenContractCannotHoldValue","type":"error"},{"inputs":[],"name":"LSP8TokenIdFormatNotEditable","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataEmptyArray","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataLengthMismatch","type":"error"},{"inputs":[],"name":"LSP8TokenOwnerCannotBeOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"LSP8TokenOwnerChanged","type":"error"},{"inputs":[{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"NoExtensionFoundForFunctionSelector","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Matthew Stevens","details":"Standard implementation contract of the LSP8 standard. Minting and transferring are done by providing a unique `tokenId`. This implementation is agnostic to the way tokens are created. A supply mechanism has to be added in a derived contract using {_mint} For a generic mechanism, see {LSP7Mintable}.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"InvalidExtensionAddress(bytes)":[{"details":"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"}],"InvalidFunctionSelector(bytes)":[{"details":"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"LSP8BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP8CannotSendToAddressZero()":[{"details":"Reverts when trying to send token to the zero address."}],"LSP8CannotUseAddressZeroAsOperator()":[{"details":"Reverts when trying to set the zero address as an operator."}],"LSP8InvalidTransferBatch()":[{"details":"Reverts when the parameters used for `transferBatch` have different lengths."}],"LSP8NonExistentTokenId(bytes32)":[{"details":"Reverts when `tokenId` has not been minted."}],"LSP8NonExistingOperator(address,bytes32)":[{"details":"Reverts when `operator` is not an operator for the `tokenId`."}],"LSP8NotTokenOperator(bytes32,address)":[{"details":"Reverts when `caller` is not an allowed operator for `tokenId`."}],"LSP8NotTokenOwner(address,bytes32,address)":[{"details":"Reverts when `caller` is not the `tokenOwner` of the `tokenId`."}],"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP8NotifyTokenReceiverIsEOA(address)":[{"details":"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP8OperatorAlreadyAuthorized(address,bytes32)":[{"details":"Reverts when `operator` is already authorized for the `tokenId`."}],"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP8TokenContractCannotHoldValue()":[{"details":"Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."}],"LSP8TokenIdFormatNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed."}],"LSP8TokenIdsDataEmptyArray()":[{"details":"Reverts when empty arrays is passed to the function"}],"LSP8TokenIdsDataLengthMismatch()":[{"details":"Reverts when the length of the token IDs data arrays is not equal"}],"LSP8TokenOwnerCannotBeOperator()":[{"details":"Reverts when trying to authorize or revoke the token's owner as an operator."}],"LSP8TokenOwnerChanged(bytes32,address,address)":[{"details":"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."}],"NoExtensionFoundForFunctionSelector(bytes4)":[{"details":"reverts when there is no extension for the function selector being called with"}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"constructor":{"custom:warning":"Make sure the tokenId format provided on deployment is correct, as it can only be set once and cannot be changed in the ERC725Y storage after the contract has been deployed.","details":"Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract. This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.","params":{"lsp4TokenType_":"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).","lsp8TokenIdFormat_":"The format of tokenIds (= NFTs) that this contract will create.","name_":"The name of the token","newOwner_":"The owner of the the token-Metadata","symbol_":"The symbol of the token"}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValue":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeOperator(address,bytes32,bool,bytes)":{"details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","isOperatorFor(address,bytes32)":"2a3654a4","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"storedData\",\"type\":\"bytes\"}],\"name\":\"InvalidExtensionAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP8BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistingOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8OperatorAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenContractCannotHoldValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdFormatNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LSP8TokenOwnerChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"NoExtensionFoundForFunctionSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Standard implementation contract of the LSP8 standard. Minting and transferring are done by providing a unique `tokenId`. This implementation is agnostic to the way tokens are created. A supply mechanism has to be added in a derived contract using {_mint} For a generic mechanism, see {LSP7Mintable}.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"InvalidExtensionAddress(bytes)\":[{\"details\":\"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\"}],\"InvalidFunctionSelector(bytes)\":[{\"details\":\"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP8BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP8CannotSendToAddressZero()\":[{\"details\":\"Reverts when trying to send token to the zero address.\"}],\"LSP8CannotUseAddressZeroAsOperator()\":[{\"details\":\"Reverts when trying to set the zero address as an operator.\"}],\"LSP8InvalidTransferBatch()\":[{\"details\":\"Reverts when the parameters used for `transferBatch` have different lengths.\"}],\"LSP8NonExistentTokenId(bytes32)\":[{\"details\":\"Reverts when `tokenId` has not been minted.\"}],\"LSP8NonExistingOperator(address,bytes32)\":[{\"details\":\"Reverts when `operator` is not an operator for the `tokenId`.\"}],\"LSP8NotTokenOperator(bytes32,address)\":[{\"details\":\"Reverts when `caller` is not an allowed operator for `tokenId`.\"}],\"LSP8NotTokenOwner(address,bytes32,address)\":[{\"details\":\"Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\"}],\"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8OperatorAlreadyAuthorized(address,bytes32)\":[{\"details\":\"Reverts when `operator` is already authorized for the `tokenId`.\"}],\"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"details\":\"Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\"}],\"LSP8TokenIdFormatNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\"}],\"LSP8TokenIdsDataEmptyArray()\":[{\"details\":\"Reverts when empty arrays is passed to the function\"}],\"LSP8TokenIdsDataLengthMismatch()\":[{\"details\":\"Reverts when the length of the token IDs data arrays is not equal\"}],\"LSP8TokenOwnerCannotBeOperator()\":[{\"details\":\"Reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"LSP8TokenOwnerChanged(bytes32,address,address)\":[{\"details\":\"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\"}],\"NoExtensionFoundForFunctionSelector(bytes4)\":[{\"details\":\"reverts when there is no extension for the function selector being called with\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"constructor\":{\"custom:warning\":\"Make sure the tokenId format provided on deployment is correct, as it can only be set once and cannot be changed in the ERC725Y storage after the contract has been deployed.\",\"details\":\"Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract. This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\",\"params\":{\"lsp4TokenType_\":\"The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\",\"lsp8TokenIdFormat_\":\"The format of tokenIds (= NFTs) that this contract will create.\",\"name_\":\"The name of the token\",\"newOwner_\":\"The owner of the the token-Metadata\",\"symbol_\":\"The symbol of the token\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValue\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,bytes32,bool,bytes)\":{\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\",\"version\":1},\"userdoc\":{\"errors\":{\"LSP8BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"notice\":\"LSP8 contract cannot receive native tokens.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"constructor\":{\"notice\":\"Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_` with tokenId format `lsp8TokenIdFormat_`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\":\"LSP8IdentifiableDigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\\n\\n// --- ERC725Y Data Keys\\n\\n// keccak256('LSP8TokenIdFormat')\\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\\n\\n// keccak256('LSP8TokenMetadataBaseURI')\\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\\n\\n// keccak256('LSP8ReferenceContract')\\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\\n\\n// keccak256('LSP8Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\\n\\n// keccak256('LSP8Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\\n\\n// --- Token IDs Format\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\\n\",\"keccak256\":\"0x2372e7ec422a13ce3e7968e5fbb081b67816b5de974bd76ec61cfed787abbe1b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev Reverts when `tokenId` has not been minted.\\n */\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\\n */\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\\n */\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\\n */\\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when trying to set the zero address as an operator.\\n */\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev Reverts when trying to send token to the zero address.\\n */\\nerror LSP8CannotSendToAddressZero();\\n\\n/**\\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\\n */\\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `tokenId` has already been minted.\\n */\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\\n */\\nerror LSP8InvalidTransferBatch();\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` is an EOA\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP8TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP8 contract cannot receive native tokens.\\n */\\nerror LSP8TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\\n */\\nerror LSP8TokenIdFormatNotEditable();\\n\\n/**\\n * @dev Reverts when the length of the token IDs data arrays is not equal\\n */\\nerror LSP8TokenIdsDataLengthMismatch();\\n\\n/**\\n * @dev Reverts when empty arrays is passed to the function\\n */\\nerror LSP8TokenIdsDataEmptyArray();\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP8BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\\n */\\nerror LSP8TokenOwnerChanged(\\n    bytes32 tokenId,\\n    address oldOwner,\\n    address newOwner\\n);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP8RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    bytes32 tokenId\\n);\\n\",\"keccak256\":\"0xff2c1791043272eb4a7c05bc77fa0a0234678991b0700f84d92edbd31fefd905\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {\\n    LSP8IdentifiableDigitalAssetCore\\n} from \\\"./LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport {\\n    LSP4DigitalAssetMetadata\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\n\\nimport {\\n    LSP4DigitalAssetMetadataCore\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\\\";\\n\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP8, _LSP8_TOKENID_FORMAT_KEY} from \\\"./LSP8Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP8TokenContractCannotHoldValue,\\n    LSP8TokenIdFormatNotEditable\\n} from \\\"./LSP8Errors.sol\\\";\\n\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\n\\n// errors\\n\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Standard implementation contract of the LSP8 standard.\\n *\\n * Minting and transferring are done by providing a unique `tokenId`.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP8IdentifiableDigitalAsset is\\n    LSP4DigitalAssetMetadata,\\n    LSP8IdentifiableDigitalAssetCore,\\n    LSP17Extendable\\n{\\n    /**\\n     * @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\\n     * with tokenId format `lsp8TokenIdFormat_`.\\n     *\\n     * @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\\n     * This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\\n     *\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\\n     *\\n     * @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\\n     * and cannot be changed in the ERC725Y storage after the contract has been deployed.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        uint256 lsp8TokenIdFormat_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        LSP4DigitalAssetMetadata._setData(\\n            _LSP8_TOKENID_FORMAT_KEY,\\n            abi.encode(lsp8TokenIdFormat_)\\n        );\\n    }\\n\\n    // fallback function\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\\n     * @notice LSP8 contract cannot receive native tokens.\\n     */\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP8TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = ERC725YCore._getData(\\n            mappedExtensionDataKey\\n        );\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore, LSP17Extendable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP8 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP4DigitalAssetMetadata\\n     * @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\\n     * once the identifiable digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    )\\n        internal\\n        virtual\\n        override(LSP4DigitalAssetMetadata, LSP4DigitalAssetMetadataCore)\\n    {\\n        if (dataKey == _LSP8_TOKENID_FORMAT_KEY) {\\n            revert LSP8TokenIdFormatNotEditable();\\n        }\\n        LSP4DigitalAssetMetadata._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe8cc62169bfbf1e6472e217ab5833428dc8234a1db77f7cc65e360bea7ff89c9\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {\\n    ILSP8IdentifiableDigitalAsset\\n} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// modules\\n\\nimport {\\n    LSP4DigitalAssetMetadataCore\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP8NonExistentTokenId,\\n    LSP8NotTokenOwner,\\n    LSP8CannotUseAddressZeroAsOperator,\\n    LSP8TokenOwnerCannotBeOperator,\\n    LSP8OperatorAlreadyAuthorized,\\n    LSP8NotTokenOperator,\\n    LSP8InvalidTransferBatch,\\n    LSP8NonExistingOperator,\\n    LSP8CannotSendToAddressZero,\\n    LSP8TokenIdAlreadyMinted,\\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP8NotifyTokenReceiverIsEOA,\\n    LSP8TokenIdsDataLengthMismatch,\\n    LSP8TokenIdsDataEmptyArray,\\n    LSP8BatchCallFailed,\\n    LSP8TokenOwnerChanged,\\n    LSP8RevokeOperatorNotAuthorized\\n} from \\\"./LSP8Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP8_TOKENOPERATOR,\\n    _TYPEID_LSP8_TOKENSSENDER,\\n    _TYPEID_LSP8_TOKENSRECIPIENT\\n} from \\\"./LSP8Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetCore is\\n    LSP4DigitalAssetMetadataCore,\\n    ILSP8IdentifiableDigitalAsset\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping from `tokenId` to `dataKey` to `dataValue`\\n    mapping(bytes32 => mapping(bytes32 => bytes)) internal _tokenIdData;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getDataForTokenId(tokenId, dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        if (tokenIds.length != dataKeys.length) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        dataValues = new bytes[](tokenIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public virtual override onlyOwner {\\n        _setDataForTokenId(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public virtual override onlyOwner {\\n        if (\\n            tokenIds.length != dataKeys.length ||\\n            dataKeys.length != dataValues.length\\n        ) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        if (tokenIds.length == 0) {\\n            revert LSP8TokenIdsDataEmptyArray();\\n        }\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP8BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (tokenOwner != msg.sender) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        bool isAdded = _operators[tokenId].add(operator);\\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\\n\\n        emit OperatorAuthorizationChanged(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenId,\\n            true, // authorized\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (msg.sender != tokenOwner) {\\n            if (operator != msg.sender) {\\n                revert LSP8RevokeOperatorNotAuthorized(\\n                    msg.sender,\\n                    tokenOwner,\\n                    tokenId\\n                );\\n            }\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        _revokeOperator(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                tokenId,\\n                false, // unauthorized\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address[] memory) {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    /**\\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\\n     * @return true if `caller` is either operator or owner\\n     */\\n    function _isOperatorOrOwner(\\n        address caller,\\n        bytes32 tokenId\\n    ) internal view virtual returns (bool) {\\n        return (caller == tokenOwnerOf(tokenId) ||\\n            _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != tokenId.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes `operator` from the list of operators for the `tokenId`\\n     */\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        bool isRemoved = _operators[tokenId].remove(operator);\\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\\n\\n        emit OperatorRevoked(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notified,\\n            operatorNotificationData\\n        );\\n    }\\n\\n    /**\\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\\n     *\\n     * @param tokenOwner The address that is the owner of the `tokenId`.\\n     * @param tokenId The token to remove the associated operators for.\\n     */\\n    function _clearOperators(\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // here is a good example of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        address operator;\\n        for (uint256 i; i < operatorListLength; ) {\\n            // we are emptying the list, always remove from index 0\\n            operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId, false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address that will receive the minted `tokenId`.\\n     * @param tokenId The token ID to create (= mint).\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must not exist and not have been already minted.\\n     * - `to` cannot be the zero address.\\n\\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        // Check that `tokenId` is not already minted\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, data);\\n\\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        // token being minted\\n        ++_existingTokens;\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            tokenId,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\\n     * This will also clear all the operators allowed to transfer the `tokenId`.\\n     *\\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\\n     *\\n     * @param tokenId The token to burn.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\\n     *\\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        // Re-fetch and update `tokenOwner` in case `tokenId`\\n        // was transferred inside the `_beforeTokenTransfer` hook\\n        tokenOwner = tokenOwnerOf(tokenId);\\n\\n        // token being burned\\n        --_existingTokens;\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\\n\\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenOwner,\\n            address(0),\\n            tokenId,\\n            data\\n        );\\n\\n        _notifyTokenSender(tokenOwner, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\\n     *\\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param tokenId The token to transfer.\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * @custom:events {Transfer} event.\\n     *\\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, data);\\n\\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\\n        address currentTokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != currentTokenOwner) {\\n            revert LSP8TokenOwnerChanged(\\n                tokenId,\\n                tokenOwner,\\n                currentTokenOwner\\n            );\\n        }\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\\n\\n        _afterTokenTransfer(from, to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function _setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _tokenIdData[tokenId][dataKey] = dataValue;\\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValues) {\\n        return _tokenIdData[tokenId][dataKey];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient via LSP1** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP8_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP8_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe536b1021d51a20951a3d1446aee234c3ea558a008d023343a30c8d2fb83f4ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":2437,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_existingTokens","offset":0,"slot":"2","type":"t_uint256"},{"astId":2441,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_tokenOwners","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_address)"},{"astId":2446,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_ownedTokens","offset":0,"slot":"4","type":"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)"},{"astId":2451,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_operators","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)"},{"astId":2457,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_tokenIdData","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.Bytes32Set)","numberOfBytes":"32","value":"t_struct(Bytes32Set)4173_storage"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4294_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4294_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4293,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Bytes32Set)4173_storage":{"encoding":"inplace","label":"struct EnumerableSet.Bytes32Set","members":[{"astId":4172,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Set)3979_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3974,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3978,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol:LSP8IdentifiableDigitalAsset","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP8BatchCallFailed(uint256)":[{"notice":"Batch call failed."}],"LSP8TokenContractCannotHoldValue()":[{"notice":"LSP8 contract cannot receive native tokens."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"constructor":{"notice":"Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_` with tokenId format `lsp8TokenIdFormat_`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}},"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol":{"LSP8IdentifiableDigitalAssetCore":{"abi":[{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP8BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP8CannotSendToAddressZero","type":"error"},{"inputs":[],"name":"LSP8CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[],"name":"LSP8InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistentTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistingOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOperator","type":"error"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOwner","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8OperatorAlreadyAuthorized","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataEmptyArray","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataLengthMismatch","type":"error"},{"inputs":[],"name":"LSP8TokenOwnerCannotBeOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"LSP8TokenOwnerChanged","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Matthew Stevens","details":"Core Implementation of a LSP8 compliant contract.","errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"LSP8BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP8CannotSendToAddressZero()":[{"details":"Reverts when trying to send token to the zero address."}],"LSP8CannotUseAddressZeroAsOperator()":[{"details":"Reverts when trying to set the zero address as an operator."}],"LSP8InvalidTransferBatch()":[{"details":"Reverts when the parameters used for `transferBatch` have different lengths."}],"LSP8NonExistentTokenId(bytes32)":[{"details":"Reverts when `tokenId` has not been minted."}],"LSP8NonExistingOperator(address,bytes32)":[{"details":"Reverts when `operator` is not an operator for the `tokenId`."}],"LSP8NotTokenOperator(bytes32,address)":[{"details":"Reverts when `caller` is not an allowed operator for `tokenId`."}],"LSP8NotTokenOwner(address,bytes32,address)":[{"details":"Reverts when `caller` is not the `tokenOwner` of the `tokenId`."}],"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP8NotifyTokenReceiverIsEOA(address)":[{"details":"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP8OperatorAlreadyAuthorized(address,bytes32)":[{"details":"Reverts when `operator` is already authorized for the `tokenId`."}],"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP8TokenIdsDataEmptyArray()":[{"details":"Reverts when empty arrays is passed to the function"}],"LSP8TokenIdsDataLengthMismatch()":[{"details":"Reverts when the length of the token IDs data arrays is not equal"}],"LSP8TokenOwnerCannotBeOperator()":[{"details":"Reverts when trying to authorize or revoke the token's owner as an operator."}],"LSP8TokenOwnerChanged(bytes32,address,address)":[{"details":"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValue":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeOperator(address,bytes32,bool,bytes)":{"details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"LSP8IdentifiableDigitalAsset contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","isOperatorFor(address,bytes32)":"2a3654a4","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP8BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistingOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8OperatorAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LSP8TokenOwnerChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Matthew Stevens\",\"details\":\"Core Implementation of a LSP8 compliant contract.\",\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP8BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP8CannotSendToAddressZero()\":[{\"details\":\"Reverts when trying to send token to the zero address.\"}],\"LSP8CannotUseAddressZeroAsOperator()\":[{\"details\":\"Reverts when trying to set the zero address as an operator.\"}],\"LSP8InvalidTransferBatch()\":[{\"details\":\"Reverts when the parameters used for `transferBatch` have different lengths.\"}],\"LSP8NonExistentTokenId(bytes32)\":[{\"details\":\"Reverts when `tokenId` has not been minted.\"}],\"LSP8NonExistingOperator(address,bytes32)\":[{\"details\":\"Reverts when `operator` is not an operator for the `tokenId`.\"}],\"LSP8NotTokenOperator(bytes32,address)\":[{\"details\":\"Reverts when `caller` is not an allowed operator for `tokenId`.\"}],\"LSP8NotTokenOwner(address,bytes32,address)\":[{\"details\":\"Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\"}],\"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8OperatorAlreadyAuthorized(address,bytes32)\":[{\"details\":\"Reverts when `operator` is already authorized for the `tokenId`.\"}],\"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP8TokenIdsDataEmptyArray()\":[{\"details\":\"Reverts when empty arrays is passed to the function\"}],\"LSP8TokenIdsDataLengthMismatch()\":[{\"details\":\"Reverts when the length of the token IDs data arrays is not equal\"}],\"LSP8TokenOwnerCannotBeOperator()\":[{\"details\":\"Reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"LSP8TokenOwnerChanged(bytes32,address,address)\":[{\"details\":\"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValue\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,bytes32,bool,bytes)\":{\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LSP8IdentifiableDigitalAsset contract\",\"version\":1},\"userdoc\":{\"errors\":{\"LSP8BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol\":\"LSP8IdentifiableDigitalAssetCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\\n\\n// --- ERC725Y Data Keys\\n\\n// keccak256('LSP8TokenIdFormat')\\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\\n\\n// keccak256('LSP8TokenMetadataBaseURI')\\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\\n\\n// keccak256('LSP8ReferenceContract')\\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\\n\\n// keccak256('LSP8Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\\n\\n// keccak256('LSP8Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\\n\\n// --- Token IDs Format\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\\n\",\"keccak256\":\"0x2372e7ec422a13ce3e7968e5fbb081b67816b5de974bd76ec61cfed787abbe1b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev Reverts when `tokenId` has not been minted.\\n */\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\\n */\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\\n */\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\\n */\\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when trying to set the zero address as an operator.\\n */\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev Reverts when trying to send token to the zero address.\\n */\\nerror LSP8CannotSendToAddressZero();\\n\\n/**\\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\\n */\\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `tokenId` has already been minted.\\n */\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\\n */\\nerror LSP8InvalidTransferBatch();\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` is an EOA\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP8TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP8 contract cannot receive native tokens.\\n */\\nerror LSP8TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\\n */\\nerror LSP8TokenIdFormatNotEditable();\\n\\n/**\\n * @dev Reverts when the length of the token IDs data arrays is not equal\\n */\\nerror LSP8TokenIdsDataLengthMismatch();\\n\\n/**\\n * @dev Reverts when empty arrays is passed to the function\\n */\\nerror LSP8TokenIdsDataEmptyArray();\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP8BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\\n */\\nerror LSP8TokenOwnerChanged(\\n    bytes32 tokenId,\\n    address oldOwner,\\n    address newOwner\\n);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP8RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    bytes32 tokenId\\n);\\n\",\"keccak256\":\"0xff2c1791043272eb4a7c05bc77fa0a0234678991b0700f84d92edbd31fefd905\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {\\n    ILSP8IdentifiableDigitalAsset\\n} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// modules\\n\\nimport {\\n    LSP4DigitalAssetMetadataCore\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP8NonExistentTokenId,\\n    LSP8NotTokenOwner,\\n    LSP8CannotUseAddressZeroAsOperator,\\n    LSP8TokenOwnerCannotBeOperator,\\n    LSP8OperatorAlreadyAuthorized,\\n    LSP8NotTokenOperator,\\n    LSP8InvalidTransferBatch,\\n    LSP8NonExistingOperator,\\n    LSP8CannotSendToAddressZero,\\n    LSP8TokenIdAlreadyMinted,\\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP8NotifyTokenReceiverIsEOA,\\n    LSP8TokenIdsDataLengthMismatch,\\n    LSP8TokenIdsDataEmptyArray,\\n    LSP8BatchCallFailed,\\n    LSP8TokenOwnerChanged,\\n    LSP8RevokeOperatorNotAuthorized\\n} from \\\"./LSP8Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP8_TOKENOPERATOR,\\n    _TYPEID_LSP8_TOKENSSENDER,\\n    _TYPEID_LSP8_TOKENSRECIPIENT\\n} from \\\"./LSP8Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetCore is\\n    LSP4DigitalAssetMetadataCore,\\n    ILSP8IdentifiableDigitalAsset\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping from `tokenId` to `dataKey` to `dataValue`\\n    mapping(bytes32 => mapping(bytes32 => bytes)) internal _tokenIdData;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getDataForTokenId(tokenId, dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        if (tokenIds.length != dataKeys.length) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        dataValues = new bytes[](tokenIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public virtual override onlyOwner {\\n        _setDataForTokenId(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public virtual override onlyOwner {\\n        if (\\n            tokenIds.length != dataKeys.length ||\\n            dataKeys.length != dataValues.length\\n        ) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        if (tokenIds.length == 0) {\\n            revert LSP8TokenIdsDataEmptyArray();\\n        }\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP8BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (tokenOwner != msg.sender) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        bool isAdded = _operators[tokenId].add(operator);\\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\\n\\n        emit OperatorAuthorizationChanged(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenId,\\n            true, // authorized\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (msg.sender != tokenOwner) {\\n            if (operator != msg.sender) {\\n                revert LSP8RevokeOperatorNotAuthorized(\\n                    msg.sender,\\n                    tokenOwner,\\n                    tokenId\\n                );\\n            }\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        _revokeOperator(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                tokenId,\\n                false, // unauthorized\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address[] memory) {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    /**\\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\\n     * @return true if `caller` is either operator or owner\\n     */\\n    function _isOperatorOrOwner(\\n        address caller,\\n        bytes32 tokenId\\n    ) internal view virtual returns (bool) {\\n        return (caller == tokenOwnerOf(tokenId) ||\\n            _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != tokenId.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes `operator` from the list of operators for the `tokenId`\\n     */\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        bool isRemoved = _operators[tokenId].remove(operator);\\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\\n\\n        emit OperatorRevoked(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notified,\\n            operatorNotificationData\\n        );\\n    }\\n\\n    /**\\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\\n     *\\n     * @param tokenOwner The address that is the owner of the `tokenId`.\\n     * @param tokenId The token to remove the associated operators for.\\n     */\\n    function _clearOperators(\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // here is a good example of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        address operator;\\n        for (uint256 i; i < operatorListLength; ) {\\n            // we are emptying the list, always remove from index 0\\n            operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId, false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address that will receive the minted `tokenId`.\\n     * @param tokenId The token ID to create (= mint).\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must not exist and not have been already minted.\\n     * - `to` cannot be the zero address.\\n\\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        // Check that `tokenId` is not already minted\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, data);\\n\\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        // token being minted\\n        ++_existingTokens;\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            tokenId,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\\n     * This will also clear all the operators allowed to transfer the `tokenId`.\\n     *\\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\\n     *\\n     * @param tokenId The token to burn.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\\n     *\\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        // Re-fetch and update `tokenOwner` in case `tokenId`\\n        // was transferred inside the `_beforeTokenTransfer` hook\\n        tokenOwner = tokenOwnerOf(tokenId);\\n\\n        // token being burned\\n        --_existingTokens;\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\\n\\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenOwner,\\n            address(0),\\n            tokenId,\\n            data\\n        );\\n\\n        _notifyTokenSender(tokenOwner, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\\n     *\\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param tokenId The token to transfer.\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * @custom:events {Transfer} event.\\n     *\\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, data);\\n\\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\\n        address currentTokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != currentTokenOwner) {\\n            revert LSP8TokenOwnerChanged(\\n                tokenId,\\n                tokenOwner,\\n                currentTokenOwner\\n            );\\n        }\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\\n\\n        _afterTokenTransfer(from, to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function _setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _tokenIdData[tokenId][dataKey] = dataValue;\\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValues) {\\n        return _tokenIdData[tokenId][dataKey];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient via LSP1** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP8_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP8_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe536b1021d51a20951a3d1446aee234c3ea558a008d023343a30c8d2fb83f4ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":2437,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_existingTokens","offset":0,"slot":"2","type":"t_uint256"},{"astId":2441,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_tokenOwners","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_address)"},{"astId":2446,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_ownedTokens","offset":0,"slot":"4","type":"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)"},{"astId":2451,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_operators","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)"},{"astId":2457,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_tokenIdData","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.Bytes32Set)","numberOfBytes":"32","value":"t_struct(Bytes32Set)4173_storage"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4294_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4294_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4293,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Bytes32Set)4173_storage":{"encoding":"inplace","label":"struct EnumerableSet.Bytes32Set","members":[{"astId":4172,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Set)3979_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3974,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3978,"contract":"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol:LSP8IdentifiableDigitalAssetCore","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP8BatchCallFailed(uint256)":[{"notice":"Batch call failed."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ERC165Checker":{"abi":[],"devdoc":{"details":"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b21516727cce7562d08cee7865d5404fec3c3f7aa42f576da8eb2e75e39815bf64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 ISZERO AND PUSH19 0x7CCE7562D08CEE7865D5404FEC3C3F7AA42F57 PUSH14 0xA8EB2E75E39815BF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"465:4566:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;465:4566:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b21516727cce7562d08cee7865d5404fec3c3f7aa42f576da8eb2e75e39815bf64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 ISZERO AND PUSH19 0x7CCE7562D08CEE7865D5404FEC3C3F7AA42F57 PUSH14 0xA8EB2E75E39815BF64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"465:4566:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getSupportedInterfaces(address,bytes4[] memory)":"infinite","supportsAllInterfaces(address,bytes4[] memory)":"infinite","supportsERC165(address)":"infinite","supportsERC165InterfaceUnchecked(address,bytes4)":"infinite","supportsInterface(address,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":\"ERC165Checker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1330:11640:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b9e9464728bcc1bd52a6026bc612f4ca06e4555c52fced4ffae35fe9074948264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 SWAP15 SWAP5 PUSH5 0x728BCC1BD5 0x2A PUSH1 0x26 0xBC PUSH2 0x2F4C LOG0 PUSH15 0x4555C52FCED4FFAE35FE9074948264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1330:11640:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IShirts.sol":{"IShirts":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"ShirtsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValues","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrizePool","outputs":[{"internalType":"address","name":"prizePool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"custom:events":"{OperatorAuthorizationChanged} event.","custom:requirements":"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValues":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"custom:info":"The tokenOwner is its own operator.","custom:requirements":"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.","details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"revokeOperator(address,bytes32,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..","custom:requirements":"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.","details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"custom:events":"{TokenIdDataChanged} event for each pair.","params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"custom:events":"{TokenIdDataChanged} event.","params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"custom:info":"if the `tokenId` is not owned by any address, the returned address will be `address(0)`","custom:requirements":"`tokenId` must exist.","details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"custom:events":"- {Transfer} event when the `tokenId` is successfully transferred.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"custom:events":"- {Transfer} events on each successful token transfer.","custom:requirements":"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.","details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","getPrice()":"98d5fdca","getPrizePool()":"884bf67c","isOperatorFor(address,bytes32)":"2a3654a4","mint(address,uint256)":"40c10f19","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ShirtsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValues\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} event.\",\"custom:requirements\":\"- `tokenId` must exist. - caller MUST be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValues\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"custom:info\":\"The tokenOwner is its own operator.\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the current {tokenOwnerOf} `tokenId`.\",\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"revokeOperator(address,bytes32,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\",\"custom:requirements\":\"- `tokenId` must exist. - caller must be the {tokenOwnerOf} `tokenId`. - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address). - `operator` cannot be the zero address.\",\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"custom:events\":\"{TokenIdDataChanged} event for each pair.\",\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"custom:events\":\"{TokenIdDataChanged} event.\",\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"custom:info\":\"if the `tokenId` is not owned by any address, the returned address will be `address(0)`\",\"custom:requirements\":\"`tokenId` must exist.\",\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when the `tokenId` is successfully transferred.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself). - `from` must own the given `tokenId`. - If the caller is not `from`, it must be an operator for the `tokenId`.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"custom:events\":\"- {Transfer} events on each successful token transfer.\",\"custom:requirements\":\"- The arrays of `from`, `to` and `tokenId` must have the same length. - no values in the `from` array can be the zero address. - no values in the `to` array can be the zero address. - `from` and `to` cannot be the same address at the same index on each arrays. - each `tokenId` must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`.\",\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IShirts.sol\":\"IShirts\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0xf24c0f30ffdc2540755ae809effdba80029f8418e2b0c9f72b878aad50ba1b72\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/IShirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\ninterface IShirts is ILSP8 {\\n    event ShirtsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n    \\n    function getPrizePool() external view returns (address prizePool);\\n\\n    function getPrice() external view returns (uint256 price);\\n}\",\"keccak256\":\"0x4e3bf68e661345d6da97b438b69e498842a75f160579b20c32306eb755407a0e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}},"contracts/tokens/Shirts.sol":{"Shirts":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_prizePool","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC725Y_DataKeysValuesEmptyArray","type":"error"},{"inputs":[],"name":"ERC725Y_DataKeysValuesLengthMismatch","type":"error"},{"inputs":[],"name":"ERC725Y_MsgValueDisallowed","type":"error"},{"inputs":[{"internalType":"bytes","name":"storedData","type":"bytes"}],"name":"InvalidExtensionAddress","type":"error"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"InvalidFunctionSelector","type":"error"},{"inputs":[],"name":"InvalidMintPrice","type":"error"},{"inputs":[],"name":"LSP4TokenNameNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenSymbolNotEditable","type":"error"},{"inputs":[],"name":"LSP4TokenTypeNotEditable","type":"error"},{"inputs":[{"internalType":"uint256","name":"callIndex","type":"uint256"}],"name":"LSP8BatchCallFailed","type":"error"},{"inputs":[],"name":"LSP8CannotSendToAddressZero","type":"error"},{"inputs":[],"name":"LSP8CannotUseAddressZeroAsOperator","type":"error"},{"inputs":[],"name":"LSP8InvalidTransferBatch","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistentTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8NonExistingOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOperator","type":"error"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"}],"name":"LSP8NotTokenOwner","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverContractMissingLSP1Interface","type":"error"},{"inputs":[{"internalType":"address","name":"tokenReceiver","type":"address"}],"name":"LSP8NotifyTokenReceiverIsEOA","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8OperatorAlreadyAuthorized","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8RevokeOperatorNotAuthorized","type":"error"},{"inputs":[],"name":"LSP8TokenContractCannotHoldValue","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"LSP8TokenIdAlreadyMinted","type":"error"},{"inputs":[],"name":"LSP8TokenIdFormatNotEditable","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataEmptyArray","type":"error"},{"inputs":[],"name":"LSP8TokenIdsDataLengthMismatch","type":"error"},{"inputs":[],"name":"LSP8TokenOwnerCannotBeOperator","type":"error"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"LSP8TokenOwnerChanged","type":"error"},{"inputs":[],"name":"MintLimitExceeded","type":"error"},{"inputs":[{"internalType":"bytes4","name":"functionSelector","type":"bytes4"}],"name":"NoExtensionFoundForFunctionSelector","type":"error"},{"inputs":[{"internalType":"address","name":"callerAddress","type":"address"}],"name":"OwnableCallerNotTheOwner","type":"error"},{"inputs":[],"name":"OwnableCannotSetZeroAddressAsOwner","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"ShirtsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"TokenIdDataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"MAX_MINT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatchForTokenIds","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getDataForTokenId","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrizePool","outputs":[{"internalType":"address","name":"prizePool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"tokenIds","type":"bytes32[]"},{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatchForTokenIds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setDataForTokenId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"tokenIdsOf","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"tokenOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"bytes32[]","name":"tokenId","type":"bytes32[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"ERC725Y_DataKeysValuesEmptyArray()":[{"details":"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."}],"ERC725Y_DataKeysValuesLengthMismatch()":[{"details":"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."}],"ERC725Y_MsgValueDisallowed()":[{"details":"Reverts when sending value to the {setData} or {setDataBatch} function."}],"InvalidExtensionAddress(bytes)":[{"details":"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"}],"InvalidFunctionSelector(bytes)":[{"details":"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"}],"LSP4TokenNameNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenSymbolNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."}],"LSP4TokenTypeNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."}],"LSP8BatchCallFailed(uint256)":[{"details":"Reverts when a batch call failed."}],"LSP8CannotSendToAddressZero()":[{"details":"Reverts when trying to send token to the zero address."}],"LSP8CannotUseAddressZeroAsOperator()":[{"details":"Reverts when trying to set the zero address as an operator."}],"LSP8InvalidTransferBatch()":[{"details":"Reverts when the parameters used for `transferBatch` have different lengths."}],"LSP8NonExistentTokenId(bytes32)":[{"details":"Reverts when `tokenId` has not been minted."}],"LSP8NonExistingOperator(address,bytes32)":[{"details":"Reverts when `operator` is not an operator for the `tokenId`."}],"LSP8NotTokenOperator(bytes32,address)":[{"details":"Reverts when `caller` is not an allowed operator for `tokenId`."}],"LSP8NotTokenOwner(address,bytes32,address)":[{"details":"Reverts when `caller` is not the `tokenOwner` of the `tokenId`."}],"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)":[{"details":"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."}],"LSP8NotifyTokenReceiverIsEOA(address)":[{"details":"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."}],"LSP8OperatorAlreadyAuthorized(address,bytes32)":[{"details":"Reverts when `operator` is already authorized for the `tokenId`."}],"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)":[{"details":"Reverts when the call to revoke operator is not authorized."}],"LSP8TokenContractCannotHoldValue()":[{"details":"Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."}],"LSP8TokenIdAlreadyMinted(bytes32)":[{"details":"Reverts when `tokenId` has already been minted."}],"LSP8TokenIdFormatNotEditable()":[{"details":"Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed."}],"LSP8TokenIdsDataEmptyArray()":[{"details":"Reverts when empty arrays is passed to the function"}],"LSP8TokenIdsDataLengthMismatch()":[{"details":"Reverts when the length of the token IDs data arrays is not equal"}],"LSP8TokenOwnerCannotBeOperator()":[{"details":"Reverts when trying to authorize or revoke the token's owner as an operator."}],"LSP8TokenOwnerChanged(bytes32,address,address)":[{"details":"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."}],"NoExtensionFoundForFunctionSelector(bytes4)":[{"details":"reverts when there is no extension for the function selector being called with"}],"OwnableCallerNotTheOwner(address)":[{"details":"Reverts when only the owner is allowed to call the function.","params":{"callerAddress":"The address that tried to make the call."}}],"OwnableCannotSetZeroAddressAsOwner()":[{"details":"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."}]},"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,bytes32,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.","params":{"operator":"The address authorized as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` address has access on behalf of `tokenOwner`.","tokenOwner":"The owner of the `tokenId`."}},"OperatorRevoked(address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from the operator array ({getOperatorsOf}).","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on.","tokenOwner":"The owner of the `tokenId`."}},"TokenIdDataChanged(bytes32,bytes32,bytes)":{"details":"Emitted when setting data for `tokenId`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key.","tokenId":"The tokenId which data is set for."}},"Transfer(address,address,address,bytes32,bool,bytes)":{"details":"Emitted when `tokenId` token is transferred from the `from` to the `to` address.","params":{"data":"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.","force":"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The previous owner of the `tokenId`","operator":"The address of operator that sent the `tokenId`","to":"The new owner of `tokenId`","tokenId":"The tokenId that was transferred"}}},"kind":"dev","methods":{"authorizeOperator(address,bytes32,bytes)":{"details":"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The token ID operator has access to."}},"balanceOf(address)":{"details":"Get the number of token IDs owned by `tokenOwner`.","params":{"tokenOwner":"The address to query     *"},"returns":{"_0":"The total number of token IDs that `tokenOwner` owns."}},"batchCalls(bytes[])":{"custom:info":"It's not possible to send value along the functions call due to the use of `delegatecall`.","details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","tokenIds":"An array of token IDs."},"returns":{"dataValues":"An array of data values for each pair of `tokenId` and `dataKey`."}},"getDataForTokenId(bytes32,bytes32)":{"params":{"dataKey":"The key for the data to retrieve.","tokenId":"The unique identifier for a token."},"returns":{"dataValue":"The data value associated with the given `tokenId` and `dataKey`."}},"getOperatorsOf(bytes32)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.","params":{"tokenId":"The token ID to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."}},"isOperatorFor(address,bytes32)":{"details":"Returns whether `operator` address is an operator for a given `tokenId`.","params":{"operator":"The address to query operator status for.","tokenId":"The token ID to check if `operator` is allowed to operate on."},"returns":{"_0":"`true` if `operator` is an operator for `tokenId`, `false` otherwise."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeOperator(address,bytes32,bool,bytes)":{"details":"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.","params":{"notify":"Boolean indicating whether to notify the operator or not","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenId":"The tokenId `operator` is revoked from operating on."}},"setData(bytes32,bytes)":{"custom:events":"{DataChanged} event.","custom:requirements":"- SHOULD only be callable by the {owner}.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"custom:events":"{DataChanged} event **for each data key/value pair set**.","custom:requirements":"- SHOULD only be callable by the {owner} of the contract.","custom:warning":"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.","details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"params":{"dataKeys":"An array of data keys corresponding to the token IDs.","dataValues":"An array of values to set for the given data keys.","tokenIds":"An array of token IDs."}},"setDataForTokenId(bytes32,bytes32,bytes)":{"params":{"dataKey":"The key for the data to set.","dataValue":"The value to set for the given data key.","tokenId":"The unique identifier for a token."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenIdsOf(address)":{"details":"Returns the list of token IDs that the `tokenOwner` address owns.","params":{"tokenOwner":"The address that we want to get the list of token IDs for."},"returns":{"_0":"An array of `bytes32[] tokenIds` owned by `tokenOwner`."}},"tokenOwnerOf(bytes32)":{"details":"Returns the address that owns a given `tokenId`.","params":{"tokenId":"The token ID to query the owner for."},"returns":{"_0":"The owner address of the given `tokenId`."}},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,bytes32,bool,bytes)":{"details":"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The address that owns the given `tokenId`.","to":"The address that will receive the `tokenId`.","tokenId":"The token ID to transfer."}},"transferBatch(address[],address[],bytes32[],bool[],bytes[])":{"details":"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.","params":{"data":"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.","force":"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.","from":"An array of sending addresses.","to":"An array of recipient addresses.","tokenId":"An array of token IDs to transfer."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1649":{"entryPoint":null,"id":1649,"parameterSlots":4,"returnSlots":0},"@_2181":{"entryPoint":null,"id":2181,"parameterSlots":5,"returnSlots":0},"@_34":{"entryPoint":null,"id":34,"parameterSlots":1,"returnSlots":0},"@_4666":{"entryPoint":null,"id":4666,"parameterSlots":5,"returnSlots":0},"@_setData_1668":{"entryPoint":657,"id":1668,"parameterSlots":2,"returnSlots":0},"@_setData_1730":{"entryPoint":673,"id":1730,"parameterSlots":2,"returnSlots":0},"@_setData_248":{"entryPoint":568,"id":248,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":458,"id":401,"parameterSlots":1,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":1073,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory":{"entryPoint":1102,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1602,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":1315,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":1398,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":890,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1255,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":868,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5248:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:33"},"nodeType":"YulFunctionCall","src":"66:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:31:33"},"nodeType":"YulExpressionStatement","src":"56:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:33"},"nodeType":"YulFunctionCall","src":"96:15:33"},"nodeType":"YulExpressionStatement","src":"96:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:33"},"nodeType":"YulFunctionCall","src":"120:15:33"},"nodeType":"YulExpressionStatement","src":"120:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:33"},{"body":{"nodeType":"YulBlock","src":"212:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"222:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"231:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"226:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"316:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"321:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"312:3:33"},"nodeType":"YulFunctionCall","src":"312:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"335:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"340:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"331:3:33"},"nodeType":"YulFunctionCall","src":"331:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"325:5:33"},"nodeType":"YulFunctionCall","src":"325:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"305:6:33"},"nodeType":"YulFunctionCall","src":"305:39:33"},"nodeType":"YulExpressionStatement","src":"305:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"252:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"255:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"249:2:33"},"nodeType":"YulFunctionCall","src":"249:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"263:19:33","statements":[{"nodeType":"YulAssignment","src":"265:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"274:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"277:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"270:3:33"},"nodeType":"YulFunctionCall","src":"270:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"265:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"245:3:33","statements":[]},"src":"241:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"374:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"370:3:33"},"nodeType":"YulFunctionCall","src":"370:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"388:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"363:6:33"},"nodeType":"YulFunctionCall","src":"363:27:33"},"nodeType":"YulExpressionStatement","src":"363:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"190:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"195:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"200:6:33","type":""}],"src":"146:250:33"},{"body":{"nodeType":"YulBlock","src":"465:635:33","statements":[{"body":{"nodeType":"YulBlock","src":"514:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"523:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"526:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"516:6:33"},"nodeType":"YulFunctionCall","src":"516:12:33"},"nodeType":"YulExpressionStatement","src":"516:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"493:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"501:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:33"},"nodeType":"YulFunctionCall","src":"489:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"508:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"485:3:33"},"nodeType":"YulFunctionCall","src":"485:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"478:6:33"},"nodeType":"YulFunctionCall","src":"478:35:33"},"nodeType":"YulIf","src":"475:55:33"},{"nodeType":"YulVariableDeclaration","src":"539:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"555:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"549:5:33"},"nodeType":"YulFunctionCall","src":"549:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"543:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"571:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"589:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"593:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"585:3:33"},"nodeType":"YulFunctionCall","src":"585:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"597:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"581:3:33"},"nodeType":"YulFunctionCall","src":"581:18:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"575:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"622:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"624:16:33"},"nodeType":"YulFunctionCall","src":"624:18:33"},"nodeType":"YulExpressionStatement","src":"624:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"614:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"618:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"611:2:33"},"nodeType":"YulFunctionCall","src":"611:10:33"},"nodeType":"YulIf","src":"608:36:33"},{"nodeType":"YulVariableDeclaration","src":"653:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"667:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"663:3:33"},"nodeType":"YulFunctionCall","src":"663:7:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"657:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"679:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"699:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"693:5:33"},"nodeType":"YulFunctionCall","src":"693:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"683:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"711:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"733:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"757:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"761:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"753:3:33"},"nodeType":"YulFunctionCall","src":"753:13:33"},{"name":"_3","nodeType":"YulIdentifier","src":"768:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"749:3:33"},"nodeType":"YulFunctionCall","src":"749:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"773:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:33"},"nodeType":"YulFunctionCall","src":"745:31:33"},{"name":"_3","nodeType":"YulIdentifier","src":"778:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"741:3:33"},"nodeType":"YulFunctionCall","src":"741:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"729:3:33"},"nodeType":"YulFunctionCall","src":"729:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"715:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"841:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"843:16:33"},"nodeType":"YulFunctionCall","src":"843:18:33"},"nodeType":"YulExpressionStatement","src":"843:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"800:10:33"},{"name":"_2","nodeType":"YulIdentifier","src":"812:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"797:2:33"},"nodeType":"YulFunctionCall","src":"797:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"820:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"832:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"817:2:33"},"nodeType":"YulFunctionCall","src":"817:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"794:2:33"},"nodeType":"YulFunctionCall","src":"794:46:33"},"nodeType":"YulIf","src":"791:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"879:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"883:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"872:6:33"},"nodeType":"YulFunctionCall","src":"872:22:33"},"nodeType":"YulExpressionStatement","src":"872:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"910:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"918:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"903:6:33"},"nodeType":"YulFunctionCall","src":"903:18:33"},"nodeType":"YulExpressionStatement","src":"903:18:33"},{"body":{"nodeType":"YulBlock","src":"969:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"978:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"981:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"971:6:33"},"nodeType":"YulFunctionCall","src":"971:12:33"},"nodeType":"YulExpressionStatement","src":"971:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"944:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"952:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"940:3:33"},"nodeType":"YulFunctionCall","src":"940:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"957:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"936:3:33"},"nodeType":"YulFunctionCall","src":"936:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"964:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"933:2:33"},"nodeType":"YulFunctionCall","src":"933:35:33"},"nodeType":"YulIf","src":"930:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1033:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1041:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1029:3:33"},"nodeType":"YulFunctionCall","src":"1029:17:33"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1052:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1060:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1048:3:33"},"nodeType":"YulFunctionCall","src":"1048:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1067:2:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"994:34:33"},"nodeType":"YulFunctionCall","src":"994:76:33"},"nodeType":"YulExpressionStatement","src":"994:76:33"},{"nodeType":"YulAssignment","src":"1079:15:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1088:6:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1079:5:33"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"439:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"447:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"455:5:33","type":""}],"src":"401:699:33"},{"body":{"nodeType":"YulBlock","src":"1165:117:33","statements":[{"nodeType":"YulAssignment","src":"1175:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1190:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1184:5:33"},"nodeType":"YulFunctionCall","src":"1184:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1175:5:33"}]},{"body":{"nodeType":"YulBlock","src":"1260:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1269:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1272:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1262:6:33"},"nodeType":"YulFunctionCall","src":"1262:12:33"},"nodeType":"YulExpressionStatement","src":"1262:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1219:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1230:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1245:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1250:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1241:3:33"},"nodeType":"YulFunctionCall","src":"1241:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"1254:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1237:3:33"},"nodeType":"YulFunctionCall","src":"1237:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1226:3:33"},"nodeType":"YulFunctionCall","src":"1226:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1216:2:33"},"nodeType":"YulFunctionCall","src":"1216:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1209:6:33"},"nodeType":"YulFunctionCall","src":"1209:50:33"},"nodeType":"YulIf","src":"1206:70:33"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1144:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1155:5:33","type":""}],"src":"1105:177:33"},{"body":{"nodeType":"YulBlock","src":"1456:626:33","statements":[{"body":{"nodeType":"YulBlock","src":"1503:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1512:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1515:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1505:6:33"},"nodeType":"YulFunctionCall","src":"1505:12:33"},"nodeType":"YulExpressionStatement","src":"1505:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1477:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1486:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1473:3:33"},"nodeType":"YulFunctionCall","src":"1473:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1498:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1469:3:33"},"nodeType":"YulFunctionCall","src":"1469:33:33"},"nodeType":"YulIf","src":"1466:53:33"},{"nodeType":"YulVariableDeclaration","src":"1528:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1548:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1542:5:33"},"nodeType":"YulFunctionCall","src":"1542:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1532:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1567:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1585:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1589:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1581:3:33"},"nodeType":"YulFunctionCall","src":"1581:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1593:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1577:3:33"},"nodeType":"YulFunctionCall","src":"1577:18:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1571:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1622:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1631:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1634:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1624:6:33"},"nodeType":"YulFunctionCall","src":"1624:12:33"},"nodeType":"YulExpressionStatement","src":"1624:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1610:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1618:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1607:2:33"},"nodeType":"YulFunctionCall","src":"1607:14:33"},"nodeType":"YulIf","src":"1604:34:33"},{"nodeType":"YulAssignment","src":"1647:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1690:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"1701:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1686:3:33"},"nodeType":"YulFunctionCall","src":"1686:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1710:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1657:28:33"},"nodeType":"YulFunctionCall","src":"1657:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1647:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1727:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1753:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1764:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1749:3:33"},"nodeType":"YulFunctionCall","src":"1749:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1743:5:33"},"nodeType":"YulFunctionCall","src":"1743:25:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1731:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1797:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1806:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1809:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1799:6:33"},"nodeType":"YulFunctionCall","src":"1799:12:33"},"nodeType":"YulExpressionStatement","src":"1799:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1783:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1793:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1780:2:33"},"nodeType":"YulFunctionCall","src":"1780:16:33"},"nodeType":"YulIf","src":"1777:36:33"},{"nodeType":"YulAssignment","src":"1822:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1865:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1876:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1861:3:33"},"nodeType":"YulFunctionCall","src":"1861:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1887:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1832:28:33"},"nodeType":"YulFunctionCall","src":"1832:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1822:6:33"}]},{"nodeType":"YulAssignment","src":"1904:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1948:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1959:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1944:3:33"},"nodeType":"YulFunctionCall","src":"1944:18:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1914:29:33"},"nodeType":"YulFunctionCall","src":"1914:49:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1904:6:33"}]},{"nodeType":"YulAssignment","src":"1972:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2016:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2027:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2012:3:33"},"nodeType":"YulFunctionCall","src":"2012:18:33"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1982:29:33"},"nodeType":"YulFunctionCall","src":"1982:49:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1972:6:33"}]},{"nodeType":"YulAssignment","src":"2040:36:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2060:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2071:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2056:3:33"},"nodeType":"YulFunctionCall","src":"2056:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2050:5:33"},"nodeType":"YulFunctionCall","src":"2050:26:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2040:6:33"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1390:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1401:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1413:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1421:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1429:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1437:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1445:6:33","type":""}],"src":"1287:795:33"},{"body":{"nodeType":"YulBlock","src":"2188:76:33","statements":[{"nodeType":"YulAssignment","src":"2198:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2210:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2221:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2206:3:33"},"nodeType":"YulFunctionCall","src":"2206:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2198:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2240:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"2251:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2233:6:33"},"nodeType":"YulFunctionCall","src":"2233:25:33"},"nodeType":"YulExpressionStatement","src":"2233:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2157:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2168:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2179:4:33","type":""}],"src":"2087:177:33"},{"body":{"nodeType":"YulBlock","src":"2324:325:33","statements":[{"nodeType":"YulAssignment","src":"2334:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2348:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2351:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2344:3:33"},"nodeType":"YulFunctionCall","src":"2344:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2334:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2365:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2395:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2401:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2391:3:33"},"nodeType":"YulFunctionCall","src":"2391:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2369:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2442:31:33","statements":[{"nodeType":"YulAssignment","src":"2444:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2458:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2466:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2454:3:33"},"nodeType":"YulFunctionCall","src":"2454:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2422:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2415:6:33"},"nodeType":"YulFunctionCall","src":"2415:26:33"},"nodeType":"YulIf","src":"2412:61:33"},{"body":{"nodeType":"YulBlock","src":"2532:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2553:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2560:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2565:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2556:3:33"},"nodeType":"YulFunctionCall","src":"2556:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2546:6:33"},"nodeType":"YulFunctionCall","src":"2546:31:33"},"nodeType":"YulExpressionStatement","src":"2546:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2597:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2600:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2590:6:33"},"nodeType":"YulFunctionCall","src":"2590:15:33"},"nodeType":"YulExpressionStatement","src":"2590:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2625:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2628:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2618:6:33"},"nodeType":"YulFunctionCall","src":"2618:15:33"},"nodeType":"YulExpressionStatement","src":"2618:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2488:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2511:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2519:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2508:2:33"},"nodeType":"YulFunctionCall","src":"2508:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2485:2:33"},"nodeType":"YulFunctionCall","src":"2485:38:33"},"nodeType":"YulIf","src":"2482:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2304:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2313:6:33","type":""}],"src":"2269:380:33"},{"body":{"nodeType":"YulBlock","src":"2709:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2726:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2729:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2719:6:33"},"nodeType":"YulFunctionCall","src":"2719:14:33"},"nodeType":"YulExpressionStatement","src":"2719:14:33"},{"nodeType":"YulAssignment","src":"2742:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2763:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2750:9:33"},"nodeType":"YulFunctionCall","src":"2750:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2742:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2692:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2700:4:33","type":""}],"src":"2654:120:33"},{"body":{"nodeType":"YulBlock","src":"2859:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"2892:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"2906:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2916:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2910:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2937:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"2941:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2930:6:33"},"nodeType":"YulFunctionCall","src":"2930:17:33"},"nodeType":"YulExpressionStatement","src":"2930:17:33"},{"nodeType":"YulVariableDeclaration","src":"2960:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2982:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"2986:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2972:9:33"},"nodeType":"YulFunctionCall","src":"2972:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2964:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3004:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3027:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3037:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3044:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3056:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3040:3:33"},"nodeType":"YulFunctionCall","src":"3040:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3033:3:33"},"nodeType":"YulFunctionCall","src":"3033:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3023:3:33"},"nodeType":"YulFunctionCall","src":"3023:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"3008:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3098:23:33","statements":[{"nodeType":"YulAssignment","src":"3100:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"3115:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3100:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3080:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3092:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3077:2:33"},"nodeType":"YulFunctionCall","src":"3077:20:33"},"nodeType":"YulIf","src":"3074:47:33"},{"nodeType":"YulVariableDeclaration","src":"3134:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3148:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3158:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3165:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"3170:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3161:3:33"},"nodeType":"YulFunctionCall","src":"3161:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3154:3:33"},"nodeType":"YulFunctionCall","src":"3154:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3144:3:33"},"nodeType":"YulFunctionCall","src":"3144:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3138:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3188:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3201:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3192:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3286:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3295:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3302:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3288:6:33"},"nodeType":"YulFunctionCall","src":"3288:17:33"},"nodeType":"YulExpressionStatement","src":"3288:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3236:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3243:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3233:2:33"},"nodeType":"YulFunctionCall","src":"3233:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3247:26:33","statements":[{"nodeType":"YulAssignment","src":"3249:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3262:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"3269:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3258:3:33"},"nodeType":"YulFunctionCall","src":"3258:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3249:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3229:3:33","statements":[]},"src":"3225:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2875:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"2880:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2872:2:33"},"nodeType":"YulFunctionCall","src":"2872:11:33"},"nodeType":"YulIf","src":"2869:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2831:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"2838:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2843:10:33","type":""}],"src":"2779:544:33"},{"body":{"nodeType":"YulBlock","src":"3413:81:33","statements":[{"nodeType":"YulAssignment","src":"3423:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3438:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3456:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"3459:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3452:3:33"},"nodeType":"YulFunctionCall","src":"3452:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3465:3:33"},"nodeType":"YulFunctionCall","src":"3465:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3448:3:33"},"nodeType":"YulFunctionCall","src":"3448:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3444:3:33"},"nodeType":"YulFunctionCall","src":"3444:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3434:3:33"},"nodeType":"YulFunctionCall","src":"3434:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3480:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"3483:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3476:3:33"},"nodeType":"YulFunctionCall","src":"3476:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3431:2:33"},"nodeType":"YulFunctionCall","src":"3431:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3423:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3390:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"3396:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3404:4:33","type":""}],"src":"3328:166:33"},{"body":{"nodeType":"YulBlock","src":"3593:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3623:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3617:5:33"},"nodeType":"YulFunctionCall","src":"3617:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3607:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3670:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3672:16:33"},"nodeType":"YulFunctionCall","src":"3672:18:33"},"nodeType":"YulExpressionStatement","src":"3672:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3642:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3658:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3662:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3654:3:33"},"nodeType":"YulFunctionCall","src":"3654:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"3666:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3650:3:33"},"nodeType":"YulFunctionCall","src":"3650:18:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3639:2:33"},"nodeType":"YulFunctionCall","src":"3639:30:33"},"nodeType":"YulIf","src":"3636:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3744:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3782:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3776:5:33"},"nodeType":"YulFunctionCall","src":"3776:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3750:25:33"},"nodeType":"YulFunctionCall","src":"3750:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"3790:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"3701:42:33"},"nodeType":"YulFunctionCall","src":"3701:96:33"},"nodeType":"YulExpressionStatement","src":"3701:96:33"},{"nodeType":"YulVariableDeclaration","src":"3806:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3823:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3810:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3833:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3852:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3837:11:33","type":""}]},{"nodeType":"YulAssignment","src":"3865:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3878:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3865:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3935:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"3949:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3968:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3980:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3976:3:33"},"nodeType":"YulFunctionCall","src":"3976:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3964:3:33"},"nodeType":"YulFunctionCall","src":"3964:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3953:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3997:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4040:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"4011:28:33"},"nodeType":"YulFunctionCall","src":"4011:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4001:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4058:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4067:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4062:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4145:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4170:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4188:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4193:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:33"},"nodeType":"YulFunctionCall","src":"4184:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4178:5:33"},"nodeType":"YulFunctionCall","src":"4178:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4163:6:33"},"nodeType":"YulFunctionCall","src":"4163:42:33"},"nodeType":"YulExpressionStatement","src":"4163:42:33"},{"nodeType":"YulAssignment","src":"4222:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4236:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"4244:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4232:3:33"},"nodeType":"YulFunctionCall","src":"4232:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4222:6:33"}]},{"nodeType":"YulAssignment","src":"4263:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4280:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4291:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4276:3:33"},"nodeType":"YulFunctionCall","src":"4276:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4263:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4092:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4095:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4089:2:33"},"nodeType":"YulFunctionCall","src":"4089:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4104:28:33","statements":[{"nodeType":"YulAssignment","src":"4106:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4115:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4118:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4111:3:33"},"nodeType":"YulFunctionCall","src":"4111:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4106:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4085:3:33","statements":[]},"src":"4081:236:33"},{"body":{"nodeType":"YulBlock","src":"4365:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4383:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4410:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4415:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4406:3:33"},"nodeType":"YulFunctionCall","src":"4406:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4400:5:33"},"nodeType":"YulFunctionCall","src":"4400:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4387:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4450:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4462:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4489:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4492:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4485:3:33"},"nodeType":"YulFunctionCall","src":"4485:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"4501:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4481:3:33"},"nodeType":"YulFunctionCall","src":"4481:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4511:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4507:3:33"},"nodeType":"YulFunctionCall","src":"4507:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4477:3:33"},"nodeType":"YulFunctionCall","src":"4477:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4473:3:33"},"nodeType":"YulFunctionCall","src":"4473:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4458:3:33"},"nodeType":"YulFunctionCall","src":"4458:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4443:6:33"},"nodeType":"YulFunctionCall","src":"4443:74:33"},"nodeType":"YulExpressionStatement","src":"4443:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4336:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4333:2:33"},"nodeType":"YulFunctionCall","src":"4333:19:33"},"nodeType":"YulIf","src":"4330:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4551:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4565:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4568:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4561:3:33"},"nodeType":"YulFunctionCall","src":"4561:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"4577:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4557:3:33"},"nodeType":"YulFunctionCall","src":"4557:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4544:6:33"},"nodeType":"YulFunctionCall","src":"4544:36:33"},"nodeType":"YulExpressionStatement","src":"4544:36:33"}]},"nodeType":"YulCase","src":"3928:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3933:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4607:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4621:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4634:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4625:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4670:67:33","statements":[{"nodeType":"YulAssignment","src":"4688:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4707:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4712:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4703:3:33"},"nodeType":"YulFunctionCall","src":"4703:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4697:5:33"},"nodeType":"YulFunctionCall","src":"4697:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4688:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4651:6:33"},"nodeType":"YulIf","src":"4648:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4757:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4816:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"4823:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4763:52:33"},"nodeType":"YulFunctionCall","src":"4763:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4750:6:33"},"nodeType":"YulFunctionCall","src":"4750:81:33"},"nodeType":"YulExpressionStatement","src":"4750:81:33"}]},"nodeType":"YulCase","src":"4599:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3908:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3916:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3905:2:33"},"nodeType":"YulFunctionCall","src":"3905:14:33"},"nodeType":"YulSwitch","src":"3898:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3578:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"3584:3:33","type":""}],"src":"3499:1348:33"},{"body":{"nodeType":"YulBlock","src":"4971:275:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4988:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4999:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4981:6:33"},"nodeType":"YulFunctionCall","src":"4981:21:33"},"nodeType":"YulExpressionStatement","src":"4981:21:33"},{"nodeType":"YulVariableDeclaration","src":"5011:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5031:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5025:5:33"},"nodeType":"YulFunctionCall","src":"5025:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5015:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5058:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5069:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5054:3:33"},"nodeType":"YulFunctionCall","src":"5054:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"5074:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5047:6:33"},"nodeType":"YulFunctionCall","src":"5047:34:33"},"nodeType":"YulExpressionStatement","src":"5047:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5129:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5137:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5125:3:33"},"nodeType":"YulFunctionCall","src":"5125:15:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5146:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5157:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5142:3:33"},"nodeType":"YulFunctionCall","src":"5142:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"5162:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5090:34:33"},"nodeType":"YulFunctionCall","src":"5090:79:33"},"nodeType":"YulExpressionStatement","src":"5090:79:33"},{"nodeType":"YulAssignment","src":"5178:62:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5194:9:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5213:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"5221:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5209:3:33"},"nodeType":"YulFunctionCall","src":"5209:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5230:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5226:3:33"},"nodeType":"YulFunctionCall","src":"5226:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5205:3:33"},"nodeType":"YulFunctionCall","src":"5205:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5190:3:33"},"nodeType":"YulFunctionCall","src":"5190:45:33"},{"kind":"number","nodeType":"YulLiteral","src":"5237:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5186:3:33"},"nodeType":"YulFunctionCall","src":"5186:54:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5178:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4940:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4951:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4962:4:33","type":""}],"src":"4852:394:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b50604051620034e7380380620034e783398101604081905262000034916200044e565b8484846001600084848484816001600160a01b03811662000068576040516306b620db60e21b815260040160405180910390fd5b6200007381620001ca565b506040805180820190915260048152632936598960e21b6020820152620000bc907feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c9062000238565b620000e87fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af18562000238565b620001147f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db9327568462000238565b60408051602081018390526200015d917fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3910160408051601f1981840301815291905262000238565b50506040805160208101859052620001aa93507ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d92500160408051601f1981840301815291905262000291565b5050506001600160a01b039093166080525060a052506200067792505050565b6000546001600160a01b038281169116146200023557600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0383161790555b50565b600082815260016020526040902062000252828262000576565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b28260405162000285919062000642565b60405180910390a25050565b6200029d8282620002a1565b5050565b7f2145e1d6d074577dc71ef54c3807742b41b053a9352ae6b491331509acb9750f8201620002e2576040516385c169bd60e01b815260040160405180910390fd5b7fd0f59754f88971fe6bc5a6618cc9d5f1e859c58d16b22d1c7b2d3e2b246cd8aa82016200032357604051630eceab6760e31b815260040160405180910390fd5b7f1fd9e056a24d14c4abc642fcc325992a946906d0dbc57dd70278aaf12842024d82016200023857604051634ef6d7fb60e01b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003975781810151838201526020016200037d565b50506000910152565b600082601f830112620003b257600080fd5b81516001600160401b0380821115620003cf57620003cf62000364565b604051601f8301601f19908116603f01168101908282118183101715620003fa57620003fa62000364565b816040528381528660208588010111156200041457600080fd5b620004278460208301602089016200037a565b9695505050505050565b80516001600160a01b03811681146200044957600080fd5b919050565b600080600080600060a086880312156200046757600080fd5b85516001600160401b03808211156200047f57600080fd5b6200048d89838a01620003a0565b96506020880151915080821115620004a457600080fd5b50620004b388828901620003a0565b945050620004c46040870162000431565b9250620004d46060870162000431565b9150608086015190509295509295909350565b600181811c90821680620004fc57607f821691505b6020821081036200051d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200057157600081815260208120601f850160051c810160208610156200054c5750805b601f850160051c820191505b818110156200056d5782815560010162000558565b5050505b505050565b81516001600160401b0381111562000592576200059262000364565b620005aa81620005a38454620004e7565b8462000523565b602080601f831160018114620005e25760008415620005c95750858301515b600019600386901b1c1916600185901b1785556200056d565b600085815260208120601f198616915b828110156200061357888601518255948401946001909101908401620005f2565b5085821015620006325787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260008251806020840152620006638160408501602087016200037a565b601f01601f19169190910160400192915050565b60805160a051612e3c620006ab6000396000818161050f01526108e80152600081816104ab01526109800152612e3c6000f3fe6080604052600436106101bb5760003560e01c80637e87632c116100ec578063a3b261f21161008a578063db8c966311610064578063db8c9663146105a0578063dedff9c6146105c0578063f0292a03146105e0578063f2fde38b146105f557610216565b8063a3b261f214610533578063be9f0e6f14610560578063d6c1407c1461058057610216565b8063884bf67c116100c6578063884bf67c1461049c5780638da5cb5b146104cf57806397902421146104ed57806398d5fdca1461050057610216565b80637e87632c146104495780637f23690c1461046957806386a10ddd1461047c57610216565b806340c10f191161015957806354f6127f1161013357806354f6127f146103d45780636963d438146103f457806370a0823114610414578063715018a61461043457610216565b806340c10f191461037257806349a6078d14610387578063511b6952146103b457610216565b80631d26fce6116101955780631d26fce6146102d8578063217b2270146103055780632a3654a41461033d57806332cb6b0c1461035d57610216565b806301ffc9a71461025757806316e023b31461028c57806318160ddd146102b957610216565b3661021657346000036101fd5760405163e5099ee360e01b81526004016101f49060208082526004908201526000604082015260600190565b60405180910390fd5b6040516330fa4a2160e11b815260040160405180910390fd5b6000366060600482101561024157828260405163e5099ee360e01b81526004016101f49291906120bf565b61024b8383610615565b80519350602001915050f35b34801561026357600080fd5b506102776102723660046120ee565b61070b565b60405190151581526020015b60405180910390f35b34801561029857600080fd5b506102ac6102a7366004612118565b61073f565b604051610283919061218a565b3480156102c557600080fd5b506002545b604051908152602001610283565b3480156102e457600080fd5b506102f86102f3366004612271565b610752565b60405161028391906122d4565b34801561031157600080fd5b50610325610320366004612336565b610839565b6040516001600160a01b039091168152602001610283565b34801561034957600080fd5b5061027761035836600461236b565b610872565b34801561036957600080fd5b506102ca606481565b61038561038036600461236b565b61087e565b005b34801561039357600080fd5b506103a76103a2366004612336565b610a57565b6040516102839190612395565b3480156103c057600080fd5b506103856103cf36600461246a565b610a79565b3480156103e057600080fd5b506102ac6103ef366004612336565b610abd565b34801561040057600080fd5b506102f861040f3660046124e2565b610ac8565b34801561042057600080fd5b506102ca61042f366004612556565b610bf7565b34801561044057600080fd5b50610385610c18565b34801561045557600080fd5b506103856104643660046126b4565b610c2c565b610385610477366004612778565b610d1b565b34801561048857600080fd5b506103856104973660046127b4565b610d50565b3480156104a857600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610325565b3480156104db57600080fd5b506000546001600160a01b0316610325565b6103856104fb36600461280a565b610eca565b34801561050c57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102ca565b34801561053f57600080fd5b5061055361054e366004612556565b610f8a565b6040516102839190612863565b34801561056c57600080fd5b5061038561057b36600461289b565b610fae565b34801561058c57600080fd5b5061038561059b366004612918565b611079565b3480156105ac57600080fd5b506103856105bb366004612951565b61108c565b3480156105cc57600080fd5b506102f86105db3660046129b8565b611170565b3480156105ec57600080fd5b506102ca600581565b34801561060157600080fd5b50610385610610366004612556565b61121a565b6060600061062e6000356001600160e01b031916611255565b5090506001600160a01b0381166106665760405163bb370b2b60e01b81526001600160e01b03196000351660048201526024016101f4565b600080826001600160a01b0316348787333460405160200161068b94939291906129ec565b60408051601f19818403018152908290526106a591612a17565b60006040518083038185875af1925050503d80600081146106e2576040519150601f19603f3d011682016040523d82523d6000602084013e6106e7565b606091505b509150915081156106fc579250610705915050565b80518060208301fd5b92915050565b60006001600160e01b03198216631d138b8360e11b14806107305750610730826112d3565b806107055750610705826112f8565b606061074b838361132f565b9392505050565b60608151835114610776576040516317d38eff60e11b815260040160405180910390fd5b82516001600160401b0381111561078f5761078f61219d565b6040519080825280602002602001820160405280156107c257816020015b60608152602001906001900390816107ad5790505b50905060005b83518110156108325761080d8482815181106107e6576107e6612a33565b602002602001015184838151811061080057610800612a33565b602002602001015161132f565b82828151811061081f5761081f612a33565b60209081029190910101526001016107c8565b5092915050565b6000818152600360205260408120546001600160a01b03168061070557604051635747cd1b60e11b8152600481018490526024016101f4565b600061074b83836113dd565b60648160025461088e9190612a5f565b11156108ad57604051635b21dfd360e11b815260040160405180910390fd5b6005816108b984610bf7565b6108c39190612a5f565b11156108e257604051635b21dfd360e11b815260040160405180910390fd5b61090c817f0000000000000000000000000000000000000000000000000000000000000000612a72565b341461092b5760405163020b5e0b60e11b815260040160405180910390fd5b60005b8181101561097b57600060025460016109479190612a5f565b9050610968848260001b60006040518060200160405280600081525061141a565b508061097381612a89565b91505061092e565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163460405160006040518083038185875af1925050503d80600081146109e9576040519150601f19603f3d011682016040523d82523d6000602084013e6109ee565b606091505b5050905080610a10576040516312171d8360e31b815260040160405180910390fd5b604080516001600160a01b0385168152602081018490527f2d6f147bcef20580d606c930254442a27952b0caec97caaba61b00b5dd67bba9910160405180910390a1505050565b6060610a628261158a565b6000828152600560205260409020610705906115c2565b610a8333846113dd565b610aa957604051631294d2a960e01b8152600481018490523360248201526044016101f4565b610ab685858585856115cf565b5050505050565b6060610705826117b1565b6060816001600160401b03811115610ae257610ae261219d565b604051908082528060200260200182016040528015610b1557816020015b6060815260200190600190039081610b005790505b50905060005b828110156108325760008030868685818110610b3957610b39612a33565b9050602002810190610b4b9190612aa2565b604051610b59929190612aef565b600060405180830381855af49150503d8060008114610b94576040519150601f19603f3d011682016040523d82523d6000602084013e610b99565b606091505b509150915081610bcf57805115610bb35780518082602001fd5b60405163234eb81960e01b8152600481018490526024016101f4565b80848481518110610be257610be2612a33565b60209081029190910101525050600101610b1b565b6001600160a01b038116600090815260046020526040812061070590611853565b610c2061185d565b610c2a6000611899565b565b8451845181141580610c3f575083518114155b80610c4b575082518114155b80610c57575081518114155b15610c75576040516393a8311960e01b815260040160405180910390fd5b60005b81811015610d1257610d0a878281518110610c9557610c95612a33565b6020026020010151878381518110610caf57610caf612a33565b6020026020010151878481518110610cc957610cc9612a33565b6020026020010151878581518110610ce357610ce3612a33565b6020026020010151878681518110610cfd57610cfd612a33565b6020026020010151610a79565b600101610c78565b50505050505050565b610d2361185d565b3415610d425760405163f36ba73760e01b815260040160405180910390fd5b610d4c8282611907565b5050565b6000610d5b83610839565b90506001600160a01b0381163314610d9e57604051632d938f5160e11b81526001600160a01b0382166004820152602481018490523360448201526064016101f4565b6001600160a01b038416610dc557604051639577b8b360e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031603610df7576040516344fed6b160e11b815260040160405180910390fd5b6000838152600560205260408120610e0f9086611951565b905080610e41576040516314ec4d6d60e31b81526001600160a01b0386166004820152602481018590526044016101f4565b83826001600160a01b0316866001600160a01b03167f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc23667121586604051610e85919061218a565b60405180910390a460003385600186604051602001610ea79493929190612aff565b6040516020818303038152906040529050610ec28682611966565b505050505050565b610ed261185d565b3415610ef15760405163f36ba73760e01b815260040160405180910390fd5b8051825114610f1357604051633bcc897960e01b815260040160405180910390fd5b8151600003610f35576040516397da5f9560e01b815260040160405180910390fd5b60005b8251811015610f8557610f7d838281518110610f5657610f56612a33565b6020026020010151838381518110610f7057610f70612a33565b6020026020010151611907565b600101610f38565b505050565b6001600160a01b0381166000908152600460205260409020606090610705906115c2565b610fb661185d565b81518351141580610fc957508051825114155b15610fe7576040516317d38eff60e11b815260040160405180910390fd5b8251600003611009576040516380c9830560e01b815260040160405180910390fd5b60005b83518110156110735761106b84828151811061102a5761102a612a33565b602002602001015184838151811061104457611044612a33565b602002602001015184848151811061105e5761105e612a33565b6020026020010151611991565b60010161100c565b50505050565b61108161185d565b610f85838383611991565b600061109784610839565b9050336001600160a01b038216146110ea576001600160a01b03851633146110ea5760405163760b5acd60e01b81523360048201526001600160a01b0382166024820152604481018590526064016101f4565b6001600160a01b03851661111157604051639577b8b360e01b815260040160405180910390fd5b846001600160a01b0316816001600160a01b031603611143576040516344fed6b160e11b815260040160405180910390fd5b61115085828686866119f3565b8215610ab65760008185600085604051602001610ea79493929190612aff565b606081516001600160401b0381111561118b5761118b61219d565b6040519080825280602002602001820160405280156111be57816020015b60608152602001906001900390816111a95790505b50905060005b8251811015611214576111ef8382815181106111e2576111e2612a33565b60200260200101516117b1565b82828151811061120157611201612a33565b60209081029190910101526001016111c4565b50919050565b61122261185d565b6001600160a01b038116611249576040516306b620db60e21b815260040160405180910390fd5b61125281611899565b50565b6000808061127a696773c5a04a6d4300884b60b11b6001600160e01b03198616611a93565b90506000611287826117b1565b9050805160141415801561129b5750805115155b156112bb57806040516342bfe79f60e01b81526004016101f4919061218a565b6112c481612b38565b60601c95600195509350505050565b60006001600160e01b0319821663a918fa6b60e01b1480610705575061070582611ae7565b60008061130b6301ffc9a760e01b611255565b5090506001600160a01b0381166113255750600092915050565b61074b8184611b1c565b6000828152600660209081526040808320848452909152902080546060919061135790612b6f565b80601f016020809104026020016040519081016040528092919081815260200182805461138390612b6f565b80156113d05780601f106113a5576101008083540402835291602001916113d0565b820191906000526020600020905b8154815290600101906020018083116113b357829003601f168201915b5050505050905092915050565b60006113e882610839565b6001600160a01b0316836001600160a01b0316148061074b5750600082815260056020526040902061074b9084611ba6565b6001600160a01b038416611441576040516324ecef4d60e01b815260040160405180910390fd5b6000838152600360205260409020546001600160a01b03161561147a576040516334c7b51160e01b8152600481018490526024016101f4565b6000838152600360205260409020546001600160a01b0316156114b3576040516334c7b51160e01b8152600481018490526024016101f4565b6002600081546114c290612a89565b909155506001600160a01b03841660009081526004602052604090206114e89084611bc8565b5060008381526003602052604080822080546001600160a01b0319166001600160a01b03881690811790915590518592907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf9061154a90339088908890612ba3565b60405180910390a4600033600086868560405160200161156e959493929190612bd8565b6040516020818303038152906040529050610ab6858483611bd4565b6000818152600360205260409020546001600160a01b031661125257604051635747cd1b60e11b8152600481018290526024016101f4565b6060600061074b83611cdc565b60006115da84610839565b9050856001600160a01b0316816001600160a01b03161461162857604051632d938f5160e11b81526001600160a01b03808316600483015260248201869052871660448201526064016101f4565b6001600160a01b03851661164f576040516324ecef4d60e01b815260040160405180910390fd5b600061165a85610839565b9050806001600160a01b0316826001600160a01b0316146116a857604051635a9c31d360e01b8152600481018690526001600160a01b038084166024830152821660448201526064016101f4565b6116b28786611d37565b6001600160a01b03871660009081526004602052604090206116d49086611d8f565b506001600160a01b03861660009081526004602052604090206116f79086611bc8565b506000858152600360205260409081902080546001600160a01b0319166001600160a01b0389811691821790925591518792918a16907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf9061175e9033908a908a90612ba3565b60405180910390a460003388888887604051602001611781959493929190612bd8565b604051602081830303815290604052905061179c8882611d9b565b6117a7878683611bd4565b5050505050505050565b60008181526001602052604090208054606091906117ce90612b6f565b80601f01602080910402602001604051908101604052809291908181526020018280546117fa90612b6f565b80156118475780601f1061181c57610100808354040283529160200191611847565b820191906000526020600020905b81548152906001019060200180831161182a57829003601f168201915b50505050509050919050565b6000610705825490565b336118706000546001600160a01b031690565b6001600160a01b031614610c2a5760405163bf1169c560e01b81523360048201526024016101f4565b6000546001600160a01b0382811691161461125257600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0383166001600160a01b031990911617905550565b7f098a16c9e50e3e99b3e797305c146898d294e5aec55a47e213cb3611ccf17e73820161194757604051631b32400560e11b815260040160405180910390fd5b610d4c8282611dc6565b600061074b836001600160a01b038416611dd0565b610d4c827f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f0097083611e1f565b600083815260066020908152604080832085845290915290206119b48282612c59565b5081837fa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb836040516119e6919061218a565b60405180910390a3505050565b6000838152600560205260408120611a0b9087611e6c565b905080611a3d576040516312a8c6a360e21b81526001600160a01b0387166004820152602481018590526044016101f4565b83856001600160a01b0316876001600160a01b03167fc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c8686604051611a83929190612d18565b60405180910390a4505050505050565b604080516001600160b01b0319841660208201526000602a82018190526001600160601b03198416602c83015291829101604051602081830303815290604052905080611adf90612d33565b949350505050565b60006001600160e01b031982166318a6a9a560e21b148061070557506301ffc9a760e01b6001600160e01b0319831614610705565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180516001600160e01b03166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015611b8f575060208210155b8015611b9b5750600081115b979650505050505050565b6001600160a01b0381166000908152600183016020526040812054151561074b565b600061074b8383611dd0565b611be583631aed5a8560e21b611b1c565b15611c7f57604051631aed5a8560e21b81526001600160a01b03841690636bb56a1490611c38907f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d908590600401612d57565b6000604051808303816000875af1158015611c57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110739190810190612d70565b81610f85576001600160a01b0383163b15611cb857604051634349776d60e01b81526001600160a01b03841660048201526024016101f4565b604051630317313760e01b81526001600160a01b03841660048201526024016101f4565b60608160000180548060200260200160405190810160405280929190818152602001828054801561184757602002820191906000526020600020905b815481526020019060010190808311611d185750505050509050919050565b600081815260056020526040812090611d4f82611853565b90506000805b82811015610ec257611d68846000611e81565b9150611d878287876000604051806020016040528060008152506119f3565b600101611d55565b600061074b8383611e8d565b610d4c827fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab0083611e1f565b610d4c8282611f80565b6000818152600183016020526040812054611e1757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610705565b506000610705565b611e396001600160a01b038416631aed5a8560e21b611b1c565b15610f8557604051631aed5a8560e21b81526001600160a01b03841690636bb56a1490611c389085908590600401612d57565b600061074b836001600160a01b038416611e8d565b600061074b8383612095565b60008181526001830160205260408120548015611f76576000611eb1600183612ddd565b8554909150600090611ec590600190612ddd565b9050808214611f2a576000866000018281548110611ee557611ee5612a33565b9060005260206000200154905080876000018481548110611f0857611f08612a33565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f3b57611f3b612df0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610705565b6000915050610705565b7f2145e1d6d074577dc71ef54c3807742b41b053a9352ae6b491331509acb9750f8201611fc0576040516385c169bd60e01b815260040160405180910390fd5b7fd0f59754f88971fe6bc5a6618cc9d5f1e859c58d16b22d1c7b2d3e2b246cd8aa820161200057604051630eceab6760e31b815260040160405180910390fd5b7f1fd9e056a24d14c4abc642fcc325992a946906d0dbc57dd70278aaf12842024d820161204057604051634ef6d7fb60e01b815260040160405180910390fd5b60008281526001602052604090206120588282612c59565b50817fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b282604051612089919061218a565b60405180910390a25050565b60008260000182815481106120ac576120ac612a33565b9060005260206000200154905092915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561210057600080fd5b81356001600160e01b03198116811461074b57600080fd5b6000806040838503121561212b57600080fd5b50508035926020909101359150565b60005b8381101561215557818101518382015260200161213d565b50506000910152565b6000815180845261217681602086016020860161213a565b601f01601f19169290920160200192915050565b60208152600061074b602083018461215e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156121db576121db61219d565b604052919050565b60006001600160401b038211156121fc576121fc61219d565b5060051b60200190565b600082601f83011261221757600080fd5b8135602061222c612227836121e3565b6121b3565b82815260059290921b8401810191818101908684111561224b57600080fd5b8286015b84811015612266578035835291830191830161224f565b509695505050505050565b6000806040838503121561228457600080fd5b82356001600160401b038082111561229b57600080fd5b6122a786838701612206565b935060208501359150808211156122bd57600080fd5b506122ca85828601612206565b9150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561232957603f1988860301845261231785835161215e565b945092850192908501906001016122fb565b5092979650505050505050565b60006020828403121561234857600080fd5b5035919050565b80356001600160a01b038116811461236657600080fd5b919050565b6000806040838503121561237e57600080fd5b6123878361234f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156123d65783516001600160a01b0316835292840192918401916001016123b1565b50909695505050505050565b8035801515811461236657600080fd5b60006001600160401b0382111561240b5761240b61219d565b50601f01601f191660200190565b600082601f83011261242a57600080fd5b8135612438612227826123f2565b81815284602083860101111561244d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561248257600080fd5b61248b8661234f565b94506124996020870161234f565b9350604086013592506124ae606087016123e2565b915060808601356001600160401b038111156124c957600080fd5b6124d588828901612419565b9150509295509295909350565b600080602083850312156124f557600080fd5b82356001600160401b038082111561250c57600080fd5b818501915085601f83011261252057600080fd5b81358181111561252f57600080fd5b8660208260051b850101111561254457600080fd5b60209290920196919550909350505050565b60006020828403121561256857600080fd5b61074b8261234f565b600082601f83011261258257600080fd5b81356020612592612227836121e3565b82815260059290921b840181019181810190868411156125b157600080fd5b8286015b84811015612266576125c68161234f565b83529183019183016125b5565b600082601f8301126125e457600080fd5b813560206125f4612227836121e3565b82815260059290921b8401810191818101908684111561261357600080fd5b8286015b8481101561226657612628816123e2565b8352918301918301612617565b600082601f83011261264657600080fd5b81356020612656612227836121e3565b82815260059290921b8401810191818101908684111561267557600080fd5b8286015b848110156122665780356001600160401b038111156126985760008081fd5b6126a68986838b0101612419565b845250918301918301612679565b600080600080600060a086880312156126cc57600080fd5b85356001600160401b03808211156126e357600080fd5b6126ef89838a01612571565b9650602088013591508082111561270557600080fd5b61271189838a01612571565b9550604088013591508082111561272757600080fd5b61273389838a01612206565b9450606088013591508082111561274957600080fd5b61275589838a016125d3565b9350608088013591508082111561276b57600080fd5b506124d588828901612635565b6000806040838503121561278b57600080fd5b8235915060208301356001600160401b038111156127a857600080fd5b6122ca85828601612419565b6000806000606084860312156127c957600080fd5b6127d28461234f565b92506020840135915060408401356001600160401b038111156127f457600080fd5b61280086828701612419565b9150509250925092565b6000806040838503121561281d57600080fd5b82356001600160401b038082111561283457600080fd5b61284086838701612206565b9350602085013591508082111561285657600080fd5b506122ca85828601612635565b6020808252825182820181905260009190848201906040850190845b818110156123d65783518352928401929184019160010161287f565b6000806000606084860312156128b057600080fd5b83356001600160401b03808211156128c757600080fd5b6128d387838801612206565b945060208601359150808211156128e957600080fd5b6128f587838801612206565b9350604086013591508082111561290b57600080fd5b5061280086828701612635565b60008060006060848603121561292d57600080fd5b833592506020840135915060408401356001600160401b038111156127f457600080fd5b6000806000806080858703121561296757600080fd5b6129708561234f565b935060208501359250612985604086016123e2565b915060608501356001600160401b038111156129a057600080fd5b6129ac87828801612419565b91505092959194509250565b6000602082840312156129ca57600080fd5b81356001600160401b038111156129e057600080fd5b611adf84828501612206565b8385823760609290921b6001600160601b031916919092019081526014810191909152603401919050565b60008251612a2981846020870161213a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561070557610705612a49565b808202811582820484141761070557610705612a49565b600060018201612a9b57612a9b612a49565b5060010190565b6000808335601e19843603018112612ab957600080fd5b8301803591506001600160401b03821115612ad357600080fd5b602001915036819003821315612ae857600080fd5b9250929050565b8183823760009101908152919050565b60018060a01b03851681528360208201528215156040820152608060608201526000612b2e608083018461215e565b9695505050505050565b805160208201516001600160601b03198082169291906014831015612b675780818460140360031b1b83161693505b505050919050565b600181811c90821680612b8357607f821691505b60208210810361121457634e487b7160e01b600052602260045260246000fd5b6001600160a01b03841681528215156020820152606060408201819052600090612bcf9083018461215e565b95945050505050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090611b9b9083018461215e565b601f821115610f8557600081815260208120601f850160051c81016020861015612c3a5750805b601f850160051c820191505b81811015610ec257828155600101612c46565b81516001600160401b03811115612c7257612c7261219d565b612c8681612c808454612b6f565b84612c13565b602080601f831160018114612cbb5760008415612ca35750858301515b600019600386901b1c1916600185901b178555610ec2565b600085815260208120601f198616915b82811015612cea57888601518255948401946001909101908401612ccb565b5085821015612d085787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8215158152604060208201526000611adf604083018461215e565b805160208083015191908110156112145760001960209190910360031b1b16919050565b828152604060208201526000611adf604083018461215e565b600060208284031215612d8257600080fd5b81516001600160401b03811115612d9857600080fd5b8201601f81018413612da957600080fd5b8051612db7612227826123f2565b818152856020838501011115612dcc57600080fd5b612bcf82602083016020860161213a565b8181038181111561070557610705612a49565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206699b3ee96a2d42b6ed9d4502aebe41a8a79c1684969afe0ba5e90bea54ffff864736f6c63430008140033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x34E7 CODESIZE SUB DUP1 PUSH3 0x34E7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x44E JUMP JUMPDEST DUP5 DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x73 DUP2 PUSH3 0x1CA JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x29365989 PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xBC SWAP1 PUSH32 0xEAFEC4D89FA9619884B60000A4D96624A38F7AC2D8D9A604ECF07C12C77E480C SWAP1 PUSH3 0x238 JUMP JUMPDEST PUSH3 0xE8 PUSH32 0xDEBA1E292F8BA88238E10AB3C7F88BD4BE4FAC56CAD5194B6ECCEAF653468AF1 DUP6 PUSH3 0x238 JUMP JUMPDEST PUSH3 0x114 PUSH32 0x2F0A68AB07768E01943A599E73362A0E17A63A72E94DD2E384D2C1D4DB932756 DUP5 PUSH3 0x238 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH3 0x15D SWAP2 PUSH32 0xE0261FA95DB2EB3B5439BD033CDA66D56B96F92F243A8228FD87550ED7BDFDB3 SWAP2 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH3 0x238 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH3 0x1AA SWAP4 POP PUSH32 0xF675E9361AF1C1664C1868CFA3EB97672D6B1A513AA5B81DEC34C9EE330E818D SWAP3 POP ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH3 0x291 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x80 MSTORE POP PUSH1 0xA0 MSTORE POP PUSH3 0x677 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH3 0x235 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x252 DUP3 DUP3 PUSH3 0x576 JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH3 0x285 SWAP2 SWAP1 PUSH3 0x642 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH3 0x29D DUP3 DUP3 PUSH3 0x2A1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x2145E1D6D074577DC71EF54C3807742B41B053A9352AE6B491331509ACB9750F DUP3 ADD PUSH3 0x2E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xD0F59754F88971FE6BC5A6618CC9D5F1E859C58D16B22D1C7B2D3E2B246CD8AA DUP3 ADD PUSH3 0x323 JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1FD9E056A24D14C4ABC642FCC325992A946906D0DBC57DD70278AAF12842024D DUP3 ADD PUSH3 0x238 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x397 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x37D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3CF JUMPI PUSH3 0x3CF PUSH3 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x3FA JUMPI PUSH3 0x3FA PUSH3 0x364 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x427 DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH3 0x37A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x48D DUP10 DUP4 DUP11 ADD PUSH3 0x3A0 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x4B3 DUP9 DUP3 DUP10 ADD PUSH3 0x3A0 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x4C4 PUSH1 0x40 DUP8 ADD PUSH3 0x431 JUMP JUMPDEST SWAP3 POP PUSH3 0x4D4 PUSH1 0x60 DUP8 ADD PUSH3 0x431 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x4FC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x51D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x571 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x54C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x56D JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x558 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x592 JUMPI PUSH3 0x592 PUSH3 0x364 JUMP JUMPDEST PUSH3 0x5AA DUP2 PUSH3 0x5A3 DUP5 SLOAD PUSH3 0x4E7 JUMP JUMPDEST DUP5 PUSH3 0x523 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x5E2 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x5C9 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x56D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x613 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x5F2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x632 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x663 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x37A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x2E3C PUSH3 0x6AB PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x50F ADD MSTORE PUSH2 0x8E8 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x4AB ADD MSTORE PUSH2 0x980 ADD MSTORE PUSH2 0x2E3C PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E87632C GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xA3B261F2 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDB8C9663 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDB8C9663 EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xF0292A03 EQ PUSH2 0x5E0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F5 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0xA3B261F2 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0xBE9F0E6F EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xD6C1407C EQ PUSH2 0x580 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x884BF67C GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x884BF67C EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x500 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x7E87632C EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0x86A10DDD EQ PUSH2 0x47C JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x54F6127F GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x434 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x49A6078D EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x511B6952 EQ PUSH2 0x3B4 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x1D26FCE6 GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x1D26FCE6 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x217B2270 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x2A3654A4 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x35D JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x16E023B3 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2B9 JUMPI PUSH2 0x216 JUMP JUMPDEST CALLDATASIZE PUSH2 0x216 JUMPI CALLVALUE PUSH1 0x0 SUB PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x30FA4A21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x60 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x241 JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP3 SWAP2 SWAP1 PUSH2 0x20BF JUMP JUMPDEST PUSH2 0x24B DUP4 DUP4 PUSH2 0x615 JUMP JUMPDEST DUP1 MLOAD SWAP4 POP PUSH1 0x20 ADD SWAP2 POP POP RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AC PUSH2 0x2A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2118 JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x283 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x752 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x22D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x325 PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x283 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x872 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x2395 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x3CF CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0xA79 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AC PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x24E2 JUMP JUMPDEST PUSH2 0xAC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0xBF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0xC18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x26B4 JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST PUSH2 0x385 PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xD1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x27B4 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x325 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x325 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x280A JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0xF8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x2863 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x289B JUMP JUMPDEST PUSH2 0xFAE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x2918 JUMP JUMPDEST PUSH2 0x1079 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2951 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x29B8 JUMP JUMPDEST PUSH2 0x1170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0x121A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x62E PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x1255 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x666 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 CALLDATALOAD AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP8 DUP8 CALLER CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x68B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x6A5 SWAP2 PUSH2 0x2A17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6FC JUMPI SWAP3 POP PUSH2 0x705 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH1 0x20 DUP4 ADD REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1D138B83 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x730 JUMPI POP PUSH2 0x730 DUP3 PUSH2 0x12D3 JUMP JUMPDEST DUP1 PUSH2 0x705 JUMPI POP PUSH2 0x705 DUP3 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x74B DUP4 DUP4 PUSH2 0x132F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x776 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C2 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7AD JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x832 JUMPI PUSH2 0x80D DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x800 JUMPI PUSH2 0x800 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x132F JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x81F JUMPI PUSH2 0x81F PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7C8 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x13DD JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH1 0x2 SLOAD PUSH2 0x88E SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST GT ISZERO PUSH2 0x8AD JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 PUSH2 0x8B9 DUP5 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x8C3 SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST GT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90C DUP2 PUSH32 0x0 PUSH2 0x2A72 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x92B JUMPI PUSH1 0x40 MLOAD PUSH4 0x20B5E0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x97B JUMPI PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH2 0x947 SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST SWAP1 POP PUSH2 0x968 DUP5 DUP3 PUSH1 0x0 SHL PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x141A JUMP JUMPDEST POP DUP1 PUSH2 0x973 DUP2 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x92E JUMP JUMPDEST POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9E9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x2D6F147BCEF20580D606C930254442A27952B0CAEC97CAABA61B00B5DD67BBA9 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA62 DUP3 PUSH2 0x158A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x705 SWAP1 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xA83 CALLER DUP5 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0xAA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1294D2A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0xAB6 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x15CF JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x705 DUP3 PUSH2 0x17B1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAE2 JUMPI PUSH2 0xAE2 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB15 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB00 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x832 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0xB39 JUMPI PUSH2 0xB39 PUSH2 0x2A33 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB4B SWAP2 SWAP1 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB59 SWAP3 SWAP2 SWAP1 PUSH2 0x2AEF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB94 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xBCF JUMPI DUP1 MLOAD ISZERO PUSH2 0xBB3 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x234EB819 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBE2 JUMPI PUSH2 0xBE2 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x705 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xC20 PUSH2 0x185D JUMP JUMPDEST PUSH2 0xC2A PUSH1 0x0 PUSH2 0x1899 JUMP JUMPDEST JUMP JUMPDEST DUP5 MLOAD DUP5 MLOAD DUP2 EQ ISZERO DUP1 PUSH2 0xC3F JUMPI POP DUP4 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0xC4B JUMPI POP DUP3 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0xC57 JUMPI POP DUP2 MLOAD DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x93A83119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD12 JUMPI PUSH2 0xD0A DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC95 JUMPI PUSH2 0xC95 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCAF JUMPI PUSH2 0xCAF PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCC9 JUMPI PUSH2 0xCC9 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCE3 JUMPI PUSH2 0xCE3 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCFD JUMPI PUSH2 0xCFD PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xC78 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD23 PUSH2 0x185D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1907 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5B DUP4 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE CALLER PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xDF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xE0F SWAP1 DUP7 PUSH2 0x1951 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xE41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x14EC4D6D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x1B1B58AA2EC0CEC2228B2D37124556D41F5A1F7B12F089171F896CC236671215 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE85 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP6 PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEA7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xEC2 DUP7 DUP3 PUSH2 0x1966 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x185D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xF13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xF85 JUMPI PUSH2 0xF7D DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF56 JUMPI PUSH2 0xF56 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF38 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0x705 SWAP1 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xFB6 PUSH2 0x185D JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ ISZERO DUP1 PUSH2 0xFC9 JUMPI POP DUP1 MLOAD DUP3 MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1009 JUMPI PUSH1 0x40 MLOAD PUSH4 0x80C98305 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1073 JUMPI PUSH2 0x106B DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x102A JUMPI PUSH2 0x102A PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1044 JUMPI PUSH2 0x1044 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x105E JUMPI PUSH2 0x105E PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1991 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x100C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x185D JUMP JUMPDEST PUSH2 0xF85 DUP4 DUP4 DUP4 PUSH2 0x1991 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1097 DUP5 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x10EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x760B5ACD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1143 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1150 DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x19F3 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP2 DUP6 PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEA7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AFF JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x118B JUMPI PUSH2 0x118B PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11BE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x11A9 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1214 JUMPI PUSH2 0x11EF DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11E2 JUMPI PUSH2 0x11E2 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x17B1 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1201 JUMPI PUSH2 0x1201 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x11C4 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1222 PUSH2 0x185D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1249 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1252 DUP2 PUSH2 0x1899 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x127A PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND PUSH2 0x1A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1287 DUP3 PUSH2 0x17B1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x14 EQ ISZERO DUP1 ISZERO PUSH2 0x129B JUMPI POP DUP1 MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x12BB JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH2 0x12C4 DUP2 PUSH2 0x2B38 JUMP JUMPDEST PUSH1 0x60 SHR SWAP6 PUSH1 0x1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA918FA6B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x705 JUMPI POP PUSH2 0x705 DUP3 PUSH2 0x1AE7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x130B PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x1255 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1325 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x74B DUP2 DUP5 PUSH2 0x1B1C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1357 SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1383 SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13E8 DUP3 PUSH2 0x839 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x74B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x74B SWAP1 DUP5 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1441 JUMPI PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SLOAD PUSH2 0x14C2 SWAP1 PUSH2 0x2A89 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x14E8 SWAP1 DUP5 PUSH2 0x1BC8 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP6 SWAP3 SWAP1 PUSH32 0xB333C813A7426A7A11E2B190CAD52C44119421594B47F6F32ACE6D8C7207B2BF SWAP1 PUSH2 0x154A SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x2BA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER PUSH1 0x0 DUP7 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x156E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xAB6 DUP6 DUP5 DUP4 PUSH2 0x1BD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1252 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x74B DUP4 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA DUP5 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1628 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP8 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x164F JUMPI PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x165A DUP6 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5A9C31D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x16B2 DUP8 DUP7 PUSH2 0x1D37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x16D4 SWAP1 DUP7 PUSH2 0x1D8F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x16F7 SWAP1 DUP7 PUSH2 0x1BC8 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP3 SWAP2 DUP11 AND SWAP1 PUSH32 0xB333C813A7426A7A11E2B190CAD52C44119421594B47F6F32ACE6D8C7207B2BF SWAP1 PUSH2 0x175E SWAP1 CALLER SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH2 0x2BA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP9 DUP9 DUP9 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1781 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x179C DUP9 DUP3 PUSH2 0x1D9B JUMP JUMPDEST PUSH2 0x17A7 DUP8 DUP7 DUP4 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x17CE SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17FA SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1847 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x181C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1847 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x182A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x705 DUP3 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH2 0x1870 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC2A JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH32 0x98A16C9E50E3E99B3E797305C146898D294E5AEC55A47E213CB3611CCF17E73 DUP3 ADD PUSH2 0x1947 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1B324005 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1DD0 JUMP JUMPDEST PUSH2 0xD4C DUP3 PUSH32 0x8A1C15A8799F71B547E08E2BCB2E85257E81B0A07EEE2CE6712549EEF1F00970 DUP4 PUSH2 0x1E1F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x19B4 DUP3 DUP3 PUSH2 0x2C59 JUMP JUMPDEST POP DUP2 DUP4 PUSH32 0xA6E4251F855F750545FE414F120DB91C76B88DEF14D120969E5BB2D3F05DEBBB DUP4 PUSH1 0x40 MLOAD PUSH2 0x19E6 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x1A0B SWAP1 DUP8 PUSH2 0x1E6C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC78CD419D6136F9F1C1C6AEC1D3FAE098CFFAF8BC86314A8F2685E32FE574E3C DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1A83 SWAP3 SWAP2 SWAP1 PUSH2 0x2D18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP5 AND PUSH1 0x2C DUP4 ADD MSTORE SWAP2 DUP3 SWAP2 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x1ADF SWAP1 PUSH2 0x2D33 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x705 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x705 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 DUP11 PUSH2 0x7530 STATICCALL SWAP3 POP RETURNDATASIZE SWAP2 POP PUSH1 0x0 MLOAD SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x1B8F JUMPI POP PUSH1 0x20 DUP3 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x74B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x1DD0 JUMP JUMPDEST PUSH2 0x1BE5 DUP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x1B1C JUMP JUMPDEST ISZERO PUSH2 0x1C7F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x1C38 SWAP1 PUSH32 0xB084A55EBF70FD3C06FD755269DAC2212C4D3F0F4D09079780BFA50C1B2984D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1073 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D70 JUMP JUMPDEST DUP2 PUSH2 0xF85 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x1CB8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4349776D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3173137 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1847 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1D18 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x1D4F DUP3 PUSH2 0x1853 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEC2 JUMPI PUSH2 0x1D68 DUP5 PUSH1 0x0 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D87 DUP3 DUP8 DUP8 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0xD4C DUP3 PUSH32 0xB23EAE7E6D1564B295B4C3E3BE402D9A2F0776C57BDF365903496F6FA481AB00 DUP4 PUSH2 0x1E1F JUMP JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1E17 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x705 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x705 JUMP JUMPDEST PUSH2 0x1E39 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x1B1C JUMP JUMPDEST ISZERO PUSH2 0xF85 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x1C38 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1E8D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x2095 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1F76 JUMPI PUSH1 0x0 PUSH2 0x1EB1 PUSH1 0x1 DUP4 PUSH2 0x2DDD JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1EC5 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1F2A JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1EE5 JUMPI PUSH2 0x1EE5 PUSH2 0x2A33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1F08 JUMPI PUSH2 0x1F08 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1F3B JUMPI PUSH2 0x1F3B PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x705 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x705 JUMP JUMPDEST PUSH32 0x2145E1D6D074577DC71EF54C3807742B41B053A9352AE6B491331509ACB9750F DUP3 ADD PUSH2 0x1FC0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xD0F59754F88971FE6BC5A6618CC9D5F1E859C58D16B22D1C7B2D3E2B246CD8AA DUP3 ADD PUSH2 0x2000 JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1FD9E056A24D14C4ABC642FCC325992A946906D0DBC57DD70278AAF12842024D DUP3 ADD PUSH2 0x2040 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2058 DUP3 DUP3 PUSH2 0x2C59 JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2089 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x20AC JUMPI PUSH2 0x20AC PUSH2 0x2A33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x74B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2155 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x213D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2176 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x74B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x21DB JUMPI PUSH2 0x21DB PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x21FC JUMPI PUSH2 0x21FC PUSH2 0x219D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x222C PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST PUSH2 0x21B3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x224B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x224F JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x229B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22A7 DUP7 DUP4 DUP8 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x22BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2329 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2317 DUP6 DUP4 MLOAD PUSH2 0x215E JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x22FB JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x237E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2387 DUP4 PUSH2 0x234F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23D6 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23B1 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x240B JUMPI PUSH2 0x240B PUSH2 0x219D JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x242A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2438 PUSH2 0x2227 DUP3 PUSH2 0x23F2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x248B DUP7 PUSH2 0x234F JUMP JUMPDEST SWAP5 POP PUSH2 0x2499 PUSH1 0x20 DUP8 ADD PUSH2 0x234F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x24AE PUSH1 0x60 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24D5 DUP9 DUP3 DUP10 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x250C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x252F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74B DUP3 PUSH2 0x234F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2592 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI PUSH2 0x25C6 DUP2 PUSH2 0x234F JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x25B5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x25F4 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI PUSH2 0x2628 DUP2 PUSH2 0x23E2 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2617 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2656 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2698 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x26A6 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2419 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2679 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x26CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x26E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26EF DUP10 DUP4 DUP11 ADD PUSH2 0x2571 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2711 DUP10 DUP4 DUP11 ADD PUSH2 0x2571 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2733 DUP10 DUP4 DUP11 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2755 DUP10 DUP4 DUP11 ADD PUSH2 0x25D3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x276B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D5 DUP9 DUP3 DUP10 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x278B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x27C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27D2 DUP5 PUSH2 0x234F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2800 DUP7 DUP3 DUP8 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x281D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2840 DUP7 DUP4 DUP8 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23D6 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x287F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x28C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28D3 DUP8 DUP4 DUP9 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F5 DUP8 DUP4 DUP9 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x290B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2800 DUP7 DUP3 DUP8 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2970 DUP6 PUSH2 0x234F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x2985 PUSH1 0x40 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29AC DUP8 DUP3 DUP9 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ADF DUP5 DUP3 DUP6 ADD PUSH2 0x2206 JUMP JUMPDEST DUP4 DUP6 DUP3 CALLDATACOPY PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2A29 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x213A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2A9B JUMPI PUSH2 0x2A9B PUSH2 0x2A49 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2AE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2B2E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x2B67 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2B83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1214 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2BCF SWAP1 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B9B SWAP1 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2C3A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEC2 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2C46 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2C72 JUMPI PUSH2 0x2C72 PUSH2 0x219D JUMP JUMPDEST PUSH2 0x2C86 DUP2 PUSH2 0x2C80 DUP5 SLOAD PUSH2 0x2B6F JUMP JUMPDEST DUP5 PUSH2 0x2C13 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2CBB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2CA3 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEC2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2CEA JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2CCB JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2D08 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ADF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1214 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ADF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2DA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x2DB7 PUSH2 0x2227 DUP3 PUSH2 0x23F2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x2DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BCF DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x213A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x99B3EE96A2D42B PUSH15 0xD9D4502AEBE41A8A79C1684969AFE0 0xBA 0x5E SWAP1 0xBE 0xA5 0x4F SELFDESTRUCT 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"570:1428:31:-:0;;;785:347;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;953:5;968:7;985:6;164:1:17;1205::22;953:5:31;968:7;985:6;164:1:17;985:6:31;-1:-1:-1;;;;;1109:26:0;;1105:100;;1158:36;;-1:-1:-1;;;1158:36:0;;;;;;;;;;;1105:100;1214:36;1237:12;1214:22;:36::i;:::-;-1:-1:-1;1555:31:18::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1555:31:18::1;::::0;::::1;::::0;1478:118:::1;::::0;388:66:17::1;::::0;1478:20:18::1;:118::i;:::-;1607:56;633:66:17;1656:5:18::0;1607:20:::1;:56::i;:::-;1673:60;776:66:17;1724:7:18::0;1673:20:::1;:60::i;:::-;1786:26;::::0;;::::1;::::0;::::1;2233:25:33::0;;;1743:70:18::1;::::0;915:66:17::1;::::0;2206:18:33;1786:26:18::1;::::0;;-1:-1:-1;;1786:26:18;;::::1;::::0;;;;;;1743:20:::1;:70::i;:::-;-1:-1:-1::0;;3294:30:24::1;::::0;;::::1;::::0;::::1;2233:25:33::0;;;3209:125:24::1;::::0;-1:-1:-1;245:66:22::1;::::0;-1:-1:-1;2206:18:33;3294:30:24::1;::::0;;-1:-1:-1;;3294:30:24;;::::1;::::0;;;;;;3209:33:::1;:125::i;:::-;-1:-1:-1::0;;;;;;;;1075:24:31;;::::1;;::::0;-1:-1:-1;1109:16:31::1;::::0;-1:-1:-1;570:1428:31;;-1:-1:-1;;;570:1428:31;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;;2293:17:3;-1:-1:-1;;;;;2293:17:3;;;;;2197:124;2133:194;:::o;5032:188:1:-;5140:15;;;;:6;:15;;;;;:27;5158:9;5140:15;:27;:::i;:::-;;5194:7;5182:31;5203:9;5182:31;;;;;;:::i;:::-;;;;;;;;5032:188;;:::o;2008:224:18:-;2168:57;2206:7;2215:9;2168:37;:57::i;:::-;2008:224;;:::o;930:533:19:-;1051:31;;;1047:410;;1105:26;;-1:-1:-1;;;1105:26:19;;;;;;;;;;;1047:410;1152:33;;;1148:309;;1208:28;;-1:-1:-1;;;1208:28:19;;;;;;;;;;;1148:309;1257:31;;;1253:204;;1311:26;;-1:-1:-1;;;1311:26:19;;;;;;;;;;;14:127:33;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;231:1;241:113;255:6;252:1;249:13;241:113;;;331:11;;;325:18;312:11;;;305:39;277:2;270:10;241:113;;;-1:-1:-1;;388:1:33;370:16;;363:27;146:250::o;401:699::-;455:5;508:3;501:4;493:6;489:17;485:27;475:55;;526:1;523;516:12;475:55;549:13;;-1:-1:-1;;;;;611:10:33;;;608:36;;;624:18;;:::i;:::-;699:2;693:9;667:2;753:13;;-1:-1:-1;;749:22:33;;;773:2;745:31;741:40;729:53;;;797:18;;;817:22;;;794:46;791:72;;;843:18;;:::i;:::-;883:10;879:2;872:22;918:2;910:6;903:18;964:3;957:4;952:2;944:6;940:15;936:26;933:35;930:55;;;981:1;978;971:12;930:55;994:76;1067:2;1060:4;1052:6;1048:17;1041:4;1033:6;1029:17;994:76;:::i;:::-;1088:6;401:699;-1:-1:-1;;;;;;401:699:33:o;1105:177::-;1184:13;;-1:-1:-1;;;;;1226:31:33;;1216:42;;1206:70;;1272:1;1269;1262:12;1206:70;1105:177;;;:::o;1287:795::-;1413:6;1421;1429;1437;1445;1498:3;1486:9;1477:7;1473:23;1469:33;1466:53;;;1515:1;1512;1505:12;1466:53;1542:16;;-1:-1:-1;;;;;1607:14:33;;;1604:34;;;1634:1;1631;1624:12;1604:34;1657:61;1710:7;1701:6;1690:9;1686:22;1657:61;:::i;:::-;1647:71;;1764:2;1753:9;1749:18;1743:25;1727:41;;1793:2;1783:8;1780:16;1777:36;;;1809:1;1806;1799:12;1777:36;;1832:63;1887:7;1876:8;1865:9;1861:24;1832:63;:::i;:::-;1822:73;;;1914:49;1959:2;1948:9;1944:18;1914:49;:::i;:::-;1904:59;;1982:49;2027:2;2016:9;2012:18;1982:49;:::i;:::-;1972:59;;2071:3;2060:9;2056:19;2050:26;2040:36;;1287:795;;;;;;;;:::o;2269:380::-;2348:1;2344:12;;;;2391;;;2412:61;;2466:4;2458:6;2454:17;2444:27;;2412:61;2519:2;2511:6;2508:14;2488:18;2485:38;2482:161;;2565:10;2560:3;2556:20;2553:1;2546:31;2600:4;2597:1;2590:15;2628:4;2625:1;2618:15;2482:161;;2269:380;;;:::o;2779:544::-;2880:2;2875:3;2872:11;2869:448;;;2916:1;2941:5;2937:2;2930:17;2986:4;2982:2;2972:19;3056:2;3044:10;3040:19;3037:1;3033:27;3027:4;3023:38;3092:4;3080:10;3077:20;3074:47;;;-1:-1:-1;3115:4:33;3074:47;3170:2;3165:3;3161:12;3158:1;3154:20;3148:4;3144:31;3134:41;;3225:82;3243:2;3236:5;3233:13;3225:82;;;3288:17;;;3269:1;3258:13;3225:82;;;3229:3;;;2869:448;2779:544;;;:::o;3499:1348::-;3617:10;;-1:-1:-1;;;;;3639:30:33;;3636:56;;;3672:18;;:::i;:::-;3701:96;3790:6;3750:38;3782:4;3776:11;3750:38;:::i;:::-;3744:4;3701:96;:::i;:::-;3852:4;;3916:2;3905:14;;3933:1;3928:662;;;;4634:1;4651:6;4648:89;;;-1:-1:-1;4703:19:33;;;4697:26;4648:89;-1:-1:-1;;3456:1:33;3452:11;;;3448:24;3444:29;3434:40;3480:1;3476:11;;;3431:57;4750:81;;3898:943;;3928:662;2726:1;2719:14;;;2763:4;2750:18;;-1:-1:-1;;3964:20:33;;;4081:236;4095:7;4092:1;4089:14;4081:236;;;4184:19;;;4178:26;4163:42;;4276:27;;;;4244:1;4232:14;;;;4111:19;;4081:236;;;4085:3;4345:6;4336:7;4333:19;4330:201;;;4406:19;;;4400:26;-1:-1:-1;;4489:1:33;4485:14;;;4501:3;4481:24;4477:37;4473:42;4458:58;4443:74;;4330:201;-1:-1:-1;;;;;4577:1:33;4561:14;;;4557:22;4544:36;;-1:-1:-1;3499:1348:33:o;4852:394::-;4999:2;4988:9;4981:21;4962:4;5031:6;5025:13;5074:6;5069:2;5058:9;5054:18;5047:34;5090:79;5162:6;5157:2;5146:9;5142:18;5137:2;5129:6;5125:15;5090:79;:::i;:::-;5230:2;5209:15;-1:-1:-1;;5205:29:33;5190:45;;;;5237:2;5186:54;;4852:394;-1:-1:-1;;4852:394:33:o;:::-;570:1428:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MAX_MINT_4633":{"entryPoint":null,"id":4633,"parameterSlots":0,"returnSlots":0},"@MAX_SUPPLY_4630":{"entryPoint":null,"id":4630,"parameterSlots":0,"returnSlots":0},"@_2205":{"entryPoint":null,"id":2205,"parameterSlots":2,"returnSlots":1},"@_2223":{"entryPoint":null,"id":2223,"parameterSlots":0,"returnSlots":0},"@_add_4021":{"entryPoint":7632,"id":4021,"parameterSlots":2,"returnSlots":1},"@_afterTokenTransfer_3656":{"entryPoint":null,"id":3656,"parameterSlots":4,"returnSlots":0},"@_at_4155":{"entryPoint":8341,"id":4155,"parameterSlots":2,"returnSlots":1},"@_beforeTokenTransfer_3643":{"entryPoint":null,"id":3643,"parameterSlots":4,"returnSlots":0},"@_checkOwner_379":{"entryPoint":6237,"id":379,"parameterSlots":0,"returnSlots":0},"@_clearOperators_3215":{"entryPoint":7479,"id":3215,"parameterSlots":2,"returnSlots":0},"@_contains_4124":{"entryPoint":null,"id":4124,"parameterSlots":2,"returnSlots":1},"@_existsOrError_3250":{"entryPoint":5514,"id":3250,"parameterSlots":1,"returnSlots":0},"@_exists_3233":{"entryPoint":null,"id":3233,"parameterSlots":1,"returnSlots":1},"@_fallbackLSP17Extendable_2278":{"entryPoint":1557,"id":2278,"parameterSlots":2,"returnSlots":1},"@_getDataForTokenId_3630":{"entryPoint":4911,"id":3630,"parameterSlots":2,"returnSlots":1},"@_getData_228":{"entryPoint":6065,"id":228,"parameterSlots":1,"returnSlots":1},"@_getExtensionAndForwardValue_2329":{"entryPoint":4693,"id":2329,"parameterSlots":1,"returnSlots":2},"@_isOperatorOrOwner_3003":{"entryPoint":5085,"id":3003,"parameterSlots":2,"returnSlots":1},"@_length_4138":{"entryPoint":null,"id":4138,"parameterSlots":1,"returnSlots":1},"@_mint_3362":{"entryPoint":5146,"id":3362,"parameterSlots":4,"returnSlots":0},"@_notifyTokenOperator_3673":{"entryPoint":6502,"id":3673,"parameterSlots":2,"returnSlots":0},"@_notifyTokenReceiver_3736":{"entryPoint":7124,"id":3736,"parameterSlots":3,"returnSlots":0},"@_notifyTokenSender_3690":{"entryPoint":7579,"id":3690,"parameterSlots":2,"returnSlots":0},"@_remove_4105":{"entryPoint":7821,"id":4105,"parameterSlots":2,"returnSlots":1},"@_revokeOperator_3161":{"entryPoint":6643,"id":3161,"parameterSlots":5,"returnSlots":0},"@_setDataForTokenId_3613":{"entryPoint":6545,"id":3613,"parameterSlots":3,"returnSlots":0},"@_setData_1668":{"entryPoint":7622,"id":1668,"parameterSlots":2,"returnSlots":0},"@_setData_1730":{"entryPoint":8064,"id":1730,"parameterSlots":2,"returnSlots":0},"@_setData_2383":{"entryPoint":6407,"id":2383,"parameterSlots":2,"returnSlots":0},"@_setOwner_401":{"entryPoint":6297,"id":401,"parameterSlots":1,"returnSlots":0},"@_supportsInterfaceInERC165Extension_735":{"entryPoint":4856,"id":735,"parameterSlots":1,"returnSlots":1},"@_transfer_3588":{"entryPoint":5583,"id":3588,"parameterSlots":5,"returnSlots":0},"@_values_4169":{"entryPoint":7388,"id":4169,"parameterSlots":1,"returnSlots":1},"@add_4191":{"entryPoint":7112,"id":4191,"parameterSlots":2,"returnSlots":1},"@add_4321":{"entryPoint":6481,"id":4321,"parameterSlots":2,"returnSlots":1},"@at_4417":{"entryPoint":7809,"id":4417,"parameterSlots":2,"returnSlots":1},"@authorizeOperator_2856":{"entryPoint":3408,"id":2856,"parameterSlots":3,"returnSlots":0},"@balanceOf_2483":{"entryPoint":3063,"id":2483,"parameterSlots":1,"returnSlots":1},"@batchCalls_2766":{"entryPoint":2760,"id":2766,"parameterSlots":2,"returnSlots":1},"@contains_4375":{"entryPoint":7078,"id":4375,"parameterSlots":2,"returnSlots":1},"@generateMappingKey_1032":{"entryPoint":6803,"id":1032,"parameterSlots":2,"returnSlots":1},"@getDataBatchForTokenIds_2609":{"entryPoint":1874,"id":2609,"parameterSlots":2,"returnSlots":1},"@getDataBatch_126":{"entryPoint":4464,"id":126,"parameterSlots":1,"returnSlots":1},"@getDataForTokenId_2547":{"entryPoint":1855,"id":2547,"parameterSlots":2,"returnSlots":1},"@getData_79":{"entryPoint":2749,"id":79,"parameterSlots":1,"returnSlots":1},"@getOperatorsOf_2978":{"entryPoint":2647,"id":2978,"parameterSlots":1,"returnSlots":1},"@getPrice_4768":{"entryPoint":null,"id":4768,"parameterSlots":0,"returnSlots":1},"@getPrizePool_4760":{"entryPoint":null,"id":4760,"parameterSlots":0,"returnSlots":1},"@isOperatorFor_2957":{"entryPoint":2162,"id":2957,"parameterSlots":2,"returnSlots":1},"@length_4242":{"entryPoint":6227,"id":4242,"parameterSlots":1,"returnSlots":1},"@length_4390":{"entryPoint":null,"id":4390,"parameterSlots":1,"returnSlots":1},"@mint_4752":{"entryPoint":2174,"id":4752,"parameterSlots":2,"returnSlots":0},"@notifyUniversalReceiver_599":{"entryPoint":7711,"id":599,"parameterSlots":3,"returnSlots":0},"@owner_316":{"entryPoint":null,"id":316,"parameterSlots":0,"returnSlots":1},"@remove_4209":{"entryPoint":7567,"id":4209,"parameterSlots":2,"returnSlots":1},"@remove_4348":{"entryPoint":7788,"id":4348,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_338":{"entryPoint":3096,"id":338,"parameterSlots":0,"returnSlots":0},"@revokeOperator_2940":{"entryPoint":4236,"id":2940,"parameterSlots":4,"returnSlots":0},"@setDataBatchForTokenIds_2696":{"entryPoint":4014,"id":2696,"parameterSlots":3,"returnSlots":0},"@setDataBatch_215":{"entryPoint":3786,"id":215,"parameterSlots":2,"returnSlots":0},"@setDataForTokenId_2629":{"entryPoint":4217,"id":2629,"parameterSlots":3,"returnSlots":0},"@setData_151":{"entryPoint":3355,"id":151,"parameterSlots":2,"returnSlots":0},"@supportsERC165InterfaceUnchecked_3955":{"entryPoint":6940,"id":3955,"parameterSlots":2,"returnSlots":1},"@supportsInterface_2356":{"entryPoint":1803,"id":2356,"parameterSlots":1,"returnSlots":1},"@supportsInterface_269":{"entryPoint":6887,"id":269,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3760":{"entryPoint":null,"id":3760,"parameterSlots":1,"returnSlots":1},"@supportsInterface_703":{"entryPoint":4819,"id":703,"parameterSlots":1,"returnSlots":1},"@tokenIdsOf_2530":{"entryPoint":3978,"id":2530,"parameterSlots":1,"returnSlots":1},"@tokenOwnerOf_2513":{"entryPoint":2105,"id":2513,"parameterSlots":1,"returnSlots":1},"@totalSupply_2467":{"entryPoint":null,"id":2467,"parameterSlots":0,"returnSlots":1},"@transferBatch_3121":{"entryPoint":3116,"id":3121,"parameterSlots":5,"returnSlots":0},"@transferOwnership_362":{"entryPoint":4634,"id":362,"parameterSlots":1,"returnSlots":0},"@transfer_3041":{"entryPoint":2681,"id":3041,"parameterSlots":5,"returnSlots":0},"@values_4290":{"entryPoint":null,"id":4290,"parameterSlots":1,"returnSlots":1},"@values_4447":{"entryPoint":5570,"id":4447,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":9039,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn":{"entryPoint":9585,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bool_dyn":{"entryPoint":9683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bytes32_dyn":{"entryPoint":8710,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bytes_dyn":{"entryPoint":9781,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool":{"entryPoint":9186,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":9241,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9558,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_bytes32t_boolt_bytes_memory_ptr":{"entryPoint":9322,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bytes32":{"entryPoint":9067,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes32t_boolt_bytes_memory_ptr":{"entryPoint":10577,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bytes32t_bytes_memory_ptr":{"entryPoint":10164,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":9908,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":10680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":8817,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":10395,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":10250,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":9442,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":9014,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":8472,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes_memory_ptr":{"entryPoint":10520,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":10104,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr_fromMemory":{"entryPoint":11632,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":8542,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10991,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":10732,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11224,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_bool_t_bytes_memory_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11171,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32_t_address__to_t_address_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__to_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11007,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9109,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8916,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11544,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11607,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8383,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8586,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":10914,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":8627,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":8675,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":9202,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":10847,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":10866,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11741,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":11283,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20":{"entryPoint":11064,"id":null,"parameterSlots":1,"returnSlots":1},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":11571,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":11353,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8506,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":11119,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":10889,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10825,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11760,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8605,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:28324:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"187:148:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"204:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"215:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"197:6:33"},"nodeType":"YulFunctionCall","src":"197:21:33"},"nodeType":"YulExpressionStatement","src":"197:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"238:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"249:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:33"},"nodeType":"YulFunctionCall","src":"234:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"254:1:33","type":"","value":"4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"227:6:33"},"nodeType":"YulFunctionCall","src":"227:29:33"},"nodeType":"YulExpressionStatement","src":"227:29:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"276:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"287:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"272:3:33"},"nodeType":"YulFunctionCall","src":"272:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"292:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"265:6:33"},"nodeType":"YulFunctionCall","src":"265:29:33"},"nodeType":"YulExpressionStatement","src":"265:29:33"},{"nodeType":"YulAssignment","src":"303:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"315:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"326:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:33"},"nodeType":"YulFunctionCall","src":"311:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"303:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"164:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"178:4:33","type":""}],"src":"14:321:33"},{"body":{"nodeType":"YulBlock","src":"469:259:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"486:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"497:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"479:6:33"},"nodeType":"YulFunctionCall","src":"479:21:33"},"nodeType":"YulExpressionStatement","src":"479:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"520:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"531:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"516:3:33"},"nodeType":"YulFunctionCall","src":"516:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"536:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"509:6:33"},"nodeType":"YulFunctionCall","src":"509:34:33"},"nodeType":"YulExpressionStatement","src":"509:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"569:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"580:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"565:3:33"},"nodeType":"YulFunctionCall","src":"565:18:33"},{"name":"value0","nodeType":"YulIdentifier","src":"585:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"593:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"552:12:33"},"nodeType":"YulFunctionCall","src":"552:48:33"},"nodeType":"YulExpressionStatement","src":"552:48:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"624:9:33"},{"name":"value1","nodeType":"YulIdentifier","src":"635:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"620:3:33"},"nodeType":"YulFunctionCall","src":"620:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"644:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:33"},"nodeType":"YulFunctionCall","src":"616:31:33"},{"kind":"number","nodeType":"YulLiteral","src":"649:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"609:6:33"},"nodeType":"YulFunctionCall","src":"609:42:33"},"nodeType":"YulExpressionStatement","src":"609:42:33"},{"nodeType":"YulAssignment","src":"660:62:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"676:9:33"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"695:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"703:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"691:3:33"},"nodeType":"YulFunctionCall","src":"691:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"712:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"687:3:33"},"nodeType":"YulFunctionCall","src":"687:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:33"},"nodeType":"YulFunctionCall","src":"672:45:33"},{"kind":"number","nodeType":"YulLiteral","src":"719:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"668:3:33"},"nodeType":"YulFunctionCall","src":"668:54:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"660:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"430:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"441:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"449:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"460:4:33","type":""}],"src":"340:388:33"},{"body":{"nodeType":"YulBlock","src":"802:217:33","statements":[{"body":{"nodeType":"YulBlock","src":"848:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"857:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"860:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"850:6:33"},"nodeType":"YulFunctionCall","src":"850:12:33"},"nodeType":"YulExpressionStatement","src":"850:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"823:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"832:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"819:3:33"},"nodeType":"YulFunctionCall","src":"819:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"844:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"815:3:33"},"nodeType":"YulFunctionCall","src":"815:32:33"},"nodeType":"YulIf","src":"812:52:33"},{"nodeType":"YulVariableDeclaration","src":"873:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"899:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"886:12:33"},"nodeType":"YulFunctionCall","src":"886:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"877:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"973:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"982:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"985:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"975:6:33"},"nodeType":"YulFunctionCall","src":"975:12:33"},"nodeType":"YulExpressionStatement","src":"975:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"931:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"942:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"953:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"958:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"949:3:33"},"nodeType":"YulFunctionCall","src":"949:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"938:3:33"},"nodeType":"YulFunctionCall","src":"938:32:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"928:2:33"},"nodeType":"YulFunctionCall","src":"928:43:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"921:6:33"},"nodeType":"YulFunctionCall","src":"921:51:33"},"nodeType":"YulIf","src":"918:71:33"},{"nodeType":"YulAssignment","src":"998:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"1008:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"998:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"768:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"779:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"791:6:33","type":""}],"src":"733:286:33"},{"body":{"nodeType":"YulBlock","src":"1119:92:33","statements":[{"nodeType":"YulAssignment","src":"1129:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1141:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1152:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:33"},"nodeType":"YulFunctionCall","src":"1137:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1129:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1171:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1196:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1189:6:33"},"nodeType":"YulFunctionCall","src":"1189:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1182:6:33"},"nodeType":"YulFunctionCall","src":"1182:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1164:6:33"},"nodeType":"YulFunctionCall","src":"1164:41:33"},"nodeType":"YulExpressionStatement","src":"1164:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1088:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1099:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1110:4:33","type":""}],"src":"1024:187:33"},{"body":{"nodeType":"YulBlock","src":"1303:161:33","statements":[{"body":{"nodeType":"YulBlock","src":"1349:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1358:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1361:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1351:6:33"},"nodeType":"YulFunctionCall","src":"1351:12:33"},"nodeType":"YulExpressionStatement","src":"1351:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1324:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1333:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1320:3:33"},"nodeType":"YulFunctionCall","src":"1320:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1345:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1316:3:33"},"nodeType":"YulFunctionCall","src":"1316:32:33"},"nodeType":"YulIf","src":"1313:52:33"},{"nodeType":"YulAssignment","src":"1374:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1397:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1384:12:33"},"nodeType":"YulFunctionCall","src":"1384:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1374:6:33"}]},{"nodeType":"YulAssignment","src":"1416:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1454:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1439:3:33"},"nodeType":"YulFunctionCall","src":"1439:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1426:12:33"},"nodeType":"YulFunctionCall","src":"1426:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1416:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1261:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1272:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1284:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1292:6:33","type":""}],"src":"1216:248:33"},{"body":{"nodeType":"YulBlock","src":"1535:184:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1545:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"1554:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1549:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1614:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1639:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"1644:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1635:3:33"},"nodeType":"YulFunctionCall","src":"1635:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1658:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"1663:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1654:3:33"},"nodeType":"YulFunctionCall","src":"1654:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1648:5:33"},"nodeType":"YulFunctionCall","src":"1648:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1628:6:33"},"nodeType":"YulFunctionCall","src":"1628:39:33"},"nodeType":"YulExpressionStatement","src":"1628:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1575:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"1578:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1572:2:33"},"nodeType":"YulFunctionCall","src":"1572:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1586:19:33","statements":[{"nodeType":"YulAssignment","src":"1588:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1597:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"1600:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1593:3:33"},"nodeType":"YulFunctionCall","src":"1593:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1588:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"1568:3:33","statements":[]},"src":"1564:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1697:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1693:3:33"},"nodeType":"YulFunctionCall","src":"1693:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"1711:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1686:6:33"},"nodeType":"YulFunctionCall","src":"1686:27:33"},"nodeType":"YulExpressionStatement","src":"1686:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1513:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1518:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"1523:6:33","type":""}],"src":"1469:250:33"},{"body":{"nodeType":"YulBlock","src":"1773:221:33","statements":[{"nodeType":"YulVariableDeclaration","src":"1783:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1803:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1797:5:33"},"nodeType":"YulFunctionCall","src":"1797:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1787:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1825:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"1830:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1818:6:33"},"nodeType":"YulFunctionCall","src":"1818:19:33"},"nodeType":"YulExpressionStatement","src":"1818:19:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1885:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"1892:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:33"},"nodeType":"YulFunctionCall","src":"1881:16:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1903:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"1908:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1899:3:33"},"nodeType":"YulFunctionCall","src":"1899:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"1915:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1846:34:33"},"nodeType":"YulFunctionCall","src":"1846:76:33"},"nodeType":"YulExpressionStatement","src":"1846:76:33"},{"nodeType":"YulAssignment","src":"1931:57:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1946:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1959:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1967:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1955:3:33"},"nodeType":"YulFunctionCall","src":"1955:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1976:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1972:3:33"},"nodeType":"YulFunctionCall","src":"1972:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1951:3:33"},"nodeType":"YulFunctionCall","src":"1951:29:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1942:3:33"},"nodeType":"YulFunctionCall","src":"1942:39:33"},{"kind":"number","nodeType":"YulLiteral","src":"1983:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1938:3:33"},"nodeType":"YulFunctionCall","src":"1938:50:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1931:3:33"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1750:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1757:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1765:3:33","type":""}],"src":"1724:270:33"},{"body":{"nodeType":"YulBlock","src":"2118:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2135:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2146:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2128:6:33"},"nodeType":"YulFunctionCall","src":"2128:21:33"},"nodeType":"YulExpressionStatement","src":"2128:21:33"},{"nodeType":"YulAssignment","src":"2158:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2183:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2195:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2206:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2191:3:33"},"nodeType":"YulFunctionCall","src":"2191:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"2166:16:33"},"nodeType":"YulFunctionCall","src":"2166:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2158:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2087:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2098:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2109:4:33","type":""}],"src":"1999:217:33"},{"body":{"nodeType":"YulBlock","src":"2322:76:33","statements":[{"nodeType":"YulAssignment","src":"2332:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2344:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2355:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:33"},"nodeType":"YulFunctionCall","src":"2340:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2332:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2374:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"2385:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2367:6:33"},"nodeType":"YulFunctionCall","src":"2367:25:33"},"nodeType":"YulExpressionStatement","src":"2367:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2291:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2302:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2313:4:33","type":""}],"src":"2221:177:33"},{"body":{"nodeType":"YulBlock","src":"2435:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2452:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2459:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2464:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2455:3:33"},"nodeType":"YulFunctionCall","src":"2455:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2445:6:33"},"nodeType":"YulFunctionCall","src":"2445:31:33"},"nodeType":"YulExpressionStatement","src":"2445:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2492:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2495:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2485:6:33"},"nodeType":"YulFunctionCall","src":"2485:15:33"},"nodeType":"YulExpressionStatement","src":"2485:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2516:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2519:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2509:6:33"},"nodeType":"YulFunctionCall","src":"2509:15:33"},"nodeType":"YulExpressionStatement","src":"2509:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2403:127:33"},{"body":{"nodeType":"YulBlock","src":"2580:230:33","statements":[{"nodeType":"YulAssignment","src":"2590:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2606:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:33"},"nodeType":"YulFunctionCall","src":"2600:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2590:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2618:58:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2640:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2656:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2662:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2652:3:33"},"nodeType":"YulFunctionCall","src":"2652:13:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2671:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2667:3:33"},"nodeType":"YulFunctionCall","src":"2667:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2648:3:33"},"nodeType":"YulFunctionCall","src":"2648:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2636:3:33"},"nodeType":"YulFunctionCall","src":"2636:40:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2622:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2751:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2753:16:33"},"nodeType":"YulFunctionCall","src":"2753:18:33"},"nodeType":"YulExpressionStatement","src":"2753:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2694:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"2706:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2691:2:33"},"nodeType":"YulFunctionCall","src":"2691:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2730:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2742:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2727:2:33"},"nodeType":"YulFunctionCall","src":"2727:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2688:2:33"},"nodeType":"YulFunctionCall","src":"2688:62:33"},"nodeType":"YulIf","src":"2685:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2789:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2793:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2782:6:33"},"nodeType":"YulFunctionCall","src":"2782:22:33"},"nodeType":"YulExpressionStatement","src":"2782:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2560:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2569:6:33","type":""}],"src":"2535:275:33"},{"body":{"nodeType":"YulBlock","src":"2884:114:33","statements":[{"body":{"nodeType":"YulBlock","src":"2928:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2930:16:33"},"nodeType":"YulFunctionCall","src":"2930:18:33"},"nodeType":"YulExpressionStatement","src":"2930:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2900:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2908:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2897:2:33"},"nodeType":"YulFunctionCall","src":"2897:30:33"},"nodeType":"YulIf","src":"2894:56:33"},{"nodeType":"YulAssignment","src":"2959:33:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2975:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2978:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2971:3:33"},"nodeType":"YulFunctionCall","src":"2971:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"2987:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2967:3:33"},"nodeType":"YulFunctionCall","src":"2967:25:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2959:4:33"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2864:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2875:4:33","type":""}],"src":"2815:183:33"},{"body":{"nodeType":"YulBlock","src":"3067:598:33","statements":[{"body":{"nodeType":"YulBlock","src":"3116:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3125:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3128:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3118:6:33"},"nodeType":"YulFunctionCall","src":"3118:12:33"},"nodeType":"YulExpressionStatement","src":"3118:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3095:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3103:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3091:3:33"},"nodeType":"YulFunctionCall","src":"3091:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3110:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3087:3:33"},"nodeType":"YulFunctionCall","src":"3087:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3080:6:33"},"nodeType":"YulFunctionCall","src":"3080:35:33"},"nodeType":"YulIf","src":"3077:55:33"},{"nodeType":"YulVariableDeclaration","src":"3141:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3164:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3151:12:33"},"nodeType":"YulFunctionCall","src":"3151:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3145:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3180:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3190:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3184:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3203:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3270:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"3230:39:33"},"nodeType":"YulFunctionCall","src":"3230:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3214:15:33"},"nodeType":"YulFunctionCall","src":"3214:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3207:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3283:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"3296:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3287:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3315:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3320:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3308:6:33"},"nodeType":"YulFunctionCall","src":"3308:15:33"},"nodeType":"YulExpressionStatement","src":"3308:15:33"},{"nodeType":"YulAssignment","src":"3332:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3343:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3348:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3339:3:33"},"nodeType":"YulFunctionCall","src":"3339:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3332:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3360:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3382:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3394:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3397:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3390:3:33"},"nodeType":"YulFunctionCall","src":"3390:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3378:3:33"},"nodeType":"YulFunctionCall","src":"3378:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3403:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3374:3:33"},"nodeType":"YulFunctionCall","src":"3374:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3364:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3434:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3443:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3446:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3436:6:33"},"nodeType":"YulFunctionCall","src":"3436:12:33"},"nodeType":"YulExpressionStatement","src":"3436:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3421:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3429:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3418:2:33"},"nodeType":"YulFunctionCall","src":"3418:15:33"},"nodeType":"YulIf","src":"3415:35:33"},{"nodeType":"YulVariableDeclaration","src":"3459:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3474:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3482:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3470:3:33"},"nodeType":"YulFunctionCall","src":"3470:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3463:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3550:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3571:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3589:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3576:12:33"},"nodeType":"YulFunctionCall","src":"3576:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3564:6:33"},"nodeType":"YulFunctionCall","src":"3564:30:33"},"nodeType":"YulExpressionStatement","src":"3564:30:33"},{"nodeType":"YulAssignment","src":"3607:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3618:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3623:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3614:3:33"},"nodeType":"YulFunctionCall","src":"3614:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3607:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3505:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3510:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3502:2:33"},"nodeType":"YulFunctionCall","src":"3502:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3518:23:33","statements":[{"nodeType":"YulAssignment","src":"3520:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3531:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3536:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:33"},"nodeType":"YulFunctionCall","src":"3527:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3520:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"3498:3:33","statements":[]},"src":"3494:142:33"},{"nodeType":"YulAssignment","src":"3645:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3654:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3645:5:33"}]}]},"name":"abi_decode_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3041:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3049:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3057:5:33","type":""}],"src":"3003:662:33"},{"body":{"nodeType":"YulBlock","src":"3807:458:33","statements":[{"body":{"nodeType":"YulBlock","src":"3853:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3862:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3865:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3855:6:33"},"nodeType":"YulFunctionCall","src":"3855:12:33"},"nodeType":"YulExpressionStatement","src":"3855:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3828:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3824:3:33"},"nodeType":"YulFunctionCall","src":"3824:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"3849:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3820:3:33"},"nodeType":"YulFunctionCall","src":"3820:32:33"},"nodeType":"YulIf","src":"3817:52:33"},{"nodeType":"YulVariableDeclaration","src":"3878:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3905:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3892:12:33"},"nodeType":"YulFunctionCall","src":"3892:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3882:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3924:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3934:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3928:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3979:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3988:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3991:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3981:6:33"},"nodeType":"YulFunctionCall","src":"3981:12:33"},"nodeType":"YulExpressionStatement","src":"3981:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3967:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3975:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3964:2:33"},"nodeType":"YulFunctionCall","src":"3964:14:33"},"nodeType":"YulIf","src":"3961:34:33"},{"nodeType":"YulAssignment","src":"4004:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4047:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4058:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4043:3:33"},"nodeType":"YulFunctionCall","src":"4043:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4067:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4014:28:33"},"nodeType":"YulFunctionCall","src":"4014:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4004:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"4084:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4117:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4128:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4113:3:33"},"nodeType":"YulFunctionCall","src":"4113:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4100:12:33"},"nodeType":"YulFunctionCall","src":"4100:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4088:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4161:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4170:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4173:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4163:6:33"},"nodeType":"YulFunctionCall","src":"4163:12:33"},"nodeType":"YulExpressionStatement","src":"4163:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4147:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4157:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4144:2:33"},"nodeType":"YulFunctionCall","src":"4144:16:33"},"nodeType":"YulIf","src":"4141:36:33"},{"nodeType":"YulAssignment","src":"4186:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4229:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4240:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4225:3:33"},"nodeType":"YulFunctionCall","src":"4225:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4251:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4196:28:33"},"nodeType":"YulFunctionCall","src":"4196:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4186:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3765:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3776:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3788:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3796:6:33","type":""}],"src":"3670:595:33"},{"body":{"nodeType":"YulBlock","src":"4439:631:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4449:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4459:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4453:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4470:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4488:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4499:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4484:3:33"},"nodeType":"YulFunctionCall","src":"4484:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4474:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4518:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4529:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4511:6:33"},"nodeType":"YulFunctionCall","src":"4511:21:33"},"nodeType":"YulExpressionStatement","src":"4511:21:33"},{"nodeType":"YulVariableDeclaration","src":"4541:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"4552:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4545:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4567:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4587:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4581:5:33"},"nodeType":"YulFunctionCall","src":"4581:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4571:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4610:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"4618:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4603:6:33"},"nodeType":"YulFunctionCall","src":"4603:22:33"},"nodeType":"YulExpressionStatement","src":"4603:22:33"},{"nodeType":"YulAssignment","src":"4634:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4645:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4656:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4641:3:33"},"nodeType":"YulFunctionCall","src":"4641:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4634:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"4668:53:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4690:9:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4705:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"4708:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4701:3:33"},"nodeType":"YulFunctionCall","src":"4701:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4686:3:33"},"nodeType":"YulFunctionCall","src":"4686:30:33"},{"kind":"number","nodeType":"YulLiteral","src":"4718:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4682:3:33"},"nodeType":"YulFunctionCall","src":"4682:39:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"4672:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4730:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4748:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4756:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4744:3:33"},"nodeType":"YulFunctionCall","src":"4744:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4734:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4768:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4777:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4772:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4836:205:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4857:3:33"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4870:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4878:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4866:3:33"},"nodeType":"YulFunctionCall","src":"4866:22:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4894:2:33","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4890:3:33"},"nodeType":"YulFunctionCall","src":"4890:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4862:3:33"},"nodeType":"YulFunctionCall","src":"4862:36:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4850:6:33"},"nodeType":"YulFunctionCall","src":"4850:49:33"},"nodeType":"YulExpressionStatement","src":"4850:49:33"},{"nodeType":"YulAssignment","src":"4912:49:33","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4945:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4939:5:33"},"nodeType":"YulFunctionCall","src":"4939:13:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"4954:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"4922:16:33"},"nodeType":"YulFunctionCall","src":"4922:39:33"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4912:6:33"}]},{"nodeType":"YulAssignment","src":"4974:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4988:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4996:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4984:3:33"},"nodeType":"YulFunctionCall","src":"4984:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4974:6:33"}]},{"nodeType":"YulAssignment","src":"5012:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5023:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5028:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5019:3:33"},"nodeType":"YulFunctionCall","src":"5019:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5012:3:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4798:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"4801:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4795:2:33"},"nodeType":"YulFunctionCall","src":"4795:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4809:18:33","statements":[{"nodeType":"YulAssignment","src":"4811:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4820:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"4823:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4816:3:33"},"nodeType":"YulFunctionCall","src":"4816:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4811:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4791:3:33","statements":[]},"src":"4787:254:33"},{"nodeType":"YulAssignment","src":"5050:14:33","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"5058:6:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5050:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4408:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4419:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4430:4:33","type":""}],"src":"4270:800:33"},{"body":{"nodeType":"YulBlock","src":"5145:110:33","statements":[{"body":{"nodeType":"YulBlock","src":"5191:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5200:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5203:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5193:6:33"},"nodeType":"YulFunctionCall","src":"5193:12:33"},"nodeType":"YulExpressionStatement","src":"5193:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5166:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5175:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5162:3:33"},"nodeType":"YulFunctionCall","src":"5162:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5187:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5158:3:33"},"nodeType":"YulFunctionCall","src":"5158:32:33"},"nodeType":"YulIf","src":"5155:52:33"},{"nodeType":"YulAssignment","src":"5216:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5239:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5226:12:33"},"nodeType":"YulFunctionCall","src":"5226:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5216:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5111:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5122:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5134:6:33","type":""}],"src":"5075:180:33"},{"body":{"nodeType":"YulBlock","src":"5361:102:33","statements":[{"nodeType":"YulAssignment","src":"5371:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5383:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5394:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5379:3:33"},"nodeType":"YulFunctionCall","src":"5379:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5371:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5413:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5428:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5444:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5449:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5440:3:33"},"nodeType":"YulFunctionCall","src":"5440:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"5453:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5436:3:33"},"nodeType":"YulFunctionCall","src":"5436:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5424:3:33"},"nodeType":"YulFunctionCall","src":"5424:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5406:6:33"},"nodeType":"YulFunctionCall","src":"5406:51:33"},"nodeType":"YulExpressionStatement","src":"5406:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5330:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5341:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5352:4:33","type":""}],"src":"5260:203:33"},{"body":{"nodeType":"YulBlock","src":"5517:124:33","statements":[{"nodeType":"YulAssignment","src":"5527:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5549:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5536:12:33"},"nodeType":"YulFunctionCall","src":"5536:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5527:5:33"}]},{"body":{"nodeType":"YulBlock","src":"5619:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5628:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5631:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5621:6:33"},"nodeType":"YulFunctionCall","src":"5621:12:33"},"nodeType":"YulExpressionStatement","src":"5621:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5578:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5589:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5604:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5609:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5600:3:33"},"nodeType":"YulFunctionCall","src":"5600:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"5613:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5596:3:33"},"nodeType":"YulFunctionCall","src":"5596:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5585:3:33"},"nodeType":"YulFunctionCall","src":"5585:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5575:2:33"},"nodeType":"YulFunctionCall","src":"5575:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5568:6:33"},"nodeType":"YulFunctionCall","src":"5568:50:33"},"nodeType":"YulIf","src":"5565:70:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5496:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5507:5:33","type":""}],"src":"5468:173:33"},{"body":{"nodeType":"YulBlock","src":"5733:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"5779:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5788:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5791:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5781:6:33"},"nodeType":"YulFunctionCall","src":"5781:12:33"},"nodeType":"YulExpressionStatement","src":"5781:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5754:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"5763:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5750:3:33"},"nodeType":"YulFunctionCall","src":"5750:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"5775:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5746:3:33"},"nodeType":"YulFunctionCall","src":"5746:32:33"},"nodeType":"YulIf","src":"5743:52:33"},{"nodeType":"YulAssignment","src":"5804:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5833:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5814:18:33"},"nodeType":"YulFunctionCall","src":"5814:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5804:6:33"}]},{"nodeType":"YulAssignment","src":"5852:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5879:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5890:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5875:3:33"},"nodeType":"YulFunctionCall","src":"5875:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5862:12:33"},"nodeType":"YulFunctionCall","src":"5862:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5852:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5691:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5702:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5714:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5722:6:33","type":""}],"src":"5646:254:33"},{"body":{"nodeType":"YulBlock","src":"5992:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"6038:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6047:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6050:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6040:6:33"},"nodeType":"YulFunctionCall","src":"6040:12:33"},"nodeType":"YulExpressionStatement","src":"6040:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6013:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6022:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6009:3:33"},"nodeType":"YulFunctionCall","src":"6009:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6034:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6005:3:33"},"nodeType":"YulFunctionCall","src":"6005:32:33"},"nodeType":"YulIf","src":"6002:52:33"},{"nodeType":"YulAssignment","src":"6063:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6092:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6073:18:33"},"nodeType":"YulFunctionCall","src":"6073:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6063:6:33"}]},{"nodeType":"YulAssignment","src":"6111:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6138:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6149:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6134:3:33"},"nodeType":"YulFunctionCall","src":"6134:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6121:12:33"},"nodeType":"YulFunctionCall","src":"6121:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6111:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5950:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5961:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5973:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5981:6:33","type":""}],"src":"5905:254:33"},{"body":{"nodeType":"YulBlock","src":"6315:507:33","statements":[{"nodeType":"YulVariableDeclaration","src":"6325:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6335:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6329:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6346:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6364:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6375:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6360:3:33"},"nodeType":"YulFunctionCall","src":"6360:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6350:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6394:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6405:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6387:6:33"},"nodeType":"YulFunctionCall","src":"6387:21:33"},"nodeType":"YulExpressionStatement","src":"6387:21:33"},{"nodeType":"YulVariableDeclaration","src":"6417:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"6428:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6421:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6443:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6463:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6457:5:33"},"nodeType":"YulFunctionCall","src":"6457:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6447:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"6486:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"6494:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6479:6:33"},"nodeType":"YulFunctionCall","src":"6479:22:33"},"nodeType":"YulExpressionStatement","src":"6479:22:33"},{"nodeType":"YulAssignment","src":"6510:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6521:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6532:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6517:3:33"},"nodeType":"YulFunctionCall","src":"6517:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6510:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"6544:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6562:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6570:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6558:3:33"},"nodeType":"YulFunctionCall","src":"6558:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6548:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6582:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"6591:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6586:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"6650:146:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6671:3:33"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6686:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6680:5:33"},"nodeType":"YulFunctionCall","src":"6680:13:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6703:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6708:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6699:3:33"},"nodeType":"YulFunctionCall","src":"6699:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"6712:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6695:3:33"},"nodeType":"YulFunctionCall","src":"6695:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6676:3:33"},"nodeType":"YulFunctionCall","src":"6676:39:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6664:6:33"},"nodeType":"YulFunctionCall","src":"6664:52:33"},"nodeType":"YulExpressionStatement","src":"6664:52:33"},{"nodeType":"YulAssignment","src":"6729:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6740:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6745:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6736:3:33"},"nodeType":"YulFunctionCall","src":"6736:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6729:3:33"}]},{"nodeType":"YulAssignment","src":"6761:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6775:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"6783:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6771:3:33"},"nodeType":"YulFunctionCall","src":"6771:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6761:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6612:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"6615:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6609:2:33"},"nodeType":"YulFunctionCall","src":"6609:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6623:18:33","statements":[{"nodeType":"YulAssignment","src":"6625:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6634:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"6637:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6630:3:33"},"nodeType":"YulFunctionCall","src":"6630:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6625:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"6605:3:33","statements":[]},"src":"6601:195:33"},{"nodeType":"YulAssignment","src":"6805:11:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"6813:3:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6805:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6284:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6295:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6306:4:33","type":""}],"src":"6164:658:33"},{"body":{"nodeType":"YulBlock","src":"6873:114:33","statements":[{"nodeType":"YulAssignment","src":"6883:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6905:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6892:12:33"},"nodeType":"YulFunctionCall","src":"6892:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6883:5:33"}]},{"body":{"nodeType":"YulBlock","src":"6965:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6974:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6977:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6967:6:33"},"nodeType":"YulFunctionCall","src":"6967:12:33"},"nodeType":"YulExpressionStatement","src":"6967:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6934:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6955:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6948:6:33"},"nodeType":"YulFunctionCall","src":"6948:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6941:6:33"},"nodeType":"YulFunctionCall","src":"6941:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6931:2:33"},"nodeType":"YulFunctionCall","src":"6931:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6924:6:33"},"nodeType":"YulFunctionCall","src":"6924:40:33"},"nodeType":"YulIf","src":"6921:60:33"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6852:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6863:5:33","type":""}],"src":"6827:160:33"},{"body":{"nodeType":"YulBlock","src":"7049:129:33","statements":[{"body":{"nodeType":"YulBlock","src":"7093:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7095:16:33"},"nodeType":"YulFunctionCall","src":"7095:18:33"},"nodeType":"YulExpressionStatement","src":"7095:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7065:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7073:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7062:2:33"},"nodeType":"YulFunctionCall","src":"7062:30:33"},"nodeType":"YulIf","src":"7059:56:33"},{"nodeType":"YulAssignment","src":"7124:48:33","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7144:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7152:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7140:3:33"},"nodeType":"YulFunctionCall","src":"7140:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7161:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7157:3:33"},"nodeType":"YulFunctionCall","src":"7157:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7136:3:33"},"nodeType":"YulFunctionCall","src":"7136:29:33"},{"kind":"number","nodeType":"YulLiteral","src":"7167:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7132:3:33"},"nodeType":"YulFunctionCall","src":"7132:40:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7124:4:33"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7029:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7040:4:33","type":""}],"src":"6992:186:33"},{"body":{"nodeType":"YulBlock","src":"7235:410:33","statements":[{"body":{"nodeType":"YulBlock","src":"7284:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7293:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7296:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7286:6:33"},"nodeType":"YulFunctionCall","src":"7286:12:33"},"nodeType":"YulExpressionStatement","src":"7286:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7263:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7271:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7259:3:33"},"nodeType":"YulFunctionCall","src":"7259:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"7278:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7255:3:33"},"nodeType":"YulFunctionCall","src":"7255:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7248:6:33"},"nodeType":"YulFunctionCall","src":"7248:35:33"},"nodeType":"YulIf","src":"7245:55:33"},{"nodeType":"YulVariableDeclaration","src":"7309:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7332:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7319:12:33"},"nodeType":"YulFunctionCall","src":"7319:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7313:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7348:63:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7407:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"7379:27:33"},"nodeType":"YulFunctionCall","src":"7379:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7363:15:33"},"nodeType":"YulFunctionCall","src":"7363:48:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"7352:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"7427:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7436:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7420:6:33"},"nodeType":"YulFunctionCall","src":"7420:19:33"},"nodeType":"YulExpressionStatement","src":"7420:19:33"},{"body":{"nodeType":"YulBlock","src":"7487:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7496:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7499:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7489:6:33"},"nodeType":"YulFunctionCall","src":"7489:12:33"},"nodeType":"YulExpressionStatement","src":"7489:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7462:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7470:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7458:3:33"},"nodeType":"YulFunctionCall","src":"7458:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"7475:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7454:3:33"},"nodeType":"YulFunctionCall","src":"7454:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"7482:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7451:2:33"},"nodeType":"YulFunctionCall","src":"7451:35:33"},"nodeType":"YulIf","src":"7448:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"7529:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"7538:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7525:3:33"},"nodeType":"YulFunctionCall","src":"7525:18:33"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7549:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7557:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7545:3:33"},"nodeType":"YulFunctionCall","src":"7545:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7564:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7512:12:33"},"nodeType":"YulFunctionCall","src":"7512:55:33"},"nodeType":"YulExpressionStatement","src":"7512:55:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"7591:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"7600:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7587:3:33"},"nodeType":"YulFunctionCall","src":"7587:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"7605:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7583:3:33"},"nodeType":"YulFunctionCall","src":"7583:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"7612:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7576:6:33"},"nodeType":"YulFunctionCall","src":"7576:38:33"},"nodeType":"YulExpressionStatement","src":"7576:38:33"},{"nodeType":"YulAssignment","src":"7623:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"7632:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7623:5:33"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7209:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"7217:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7225:5:33","type":""}],"src":"7183:462:33"},{"body":{"nodeType":"YulBlock","src":"7794:462:33","statements":[{"body":{"nodeType":"YulBlock","src":"7841:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7850:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7853:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7843:6:33"},"nodeType":"YulFunctionCall","src":"7843:12:33"},"nodeType":"YulExpressionStatement","src":"7843:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7815:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"7824:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7811:3:33"},"nodeType":"YulFunctionCall","src":"7811:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"7836:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7807:3:33"},"nodeType":"YulFunctionCall","src":"7807:33:33"},"nodeType":"YulIf","src":"7804:53:33"},{"nodeType":"YulAssignment","src":"7866:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7895:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7876:18:33"},"nodeType":"YulFunctionCall","src":"7876:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7866:6:33"}]},{"nodeType":"YulAssignment","src":"7914:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7947:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7958:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7943:3:33"},"nodeType":"YulFunctionCall","src":"7943:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7924:18:33"},"nodeType":"YulFunctionCall","src":"7924:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7914:6:33"}]},{"nodeType":"YulAssignment","src":"7971:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7998:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8009:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7994:3:33"},"nodeType":"YulFunctionCall","src":"7994:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7981:12:33"},"nodeType":"YulFunctionCall","src":"7981:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7971:6:33"}]},{"nodeType":"YulAssignment","src":"8022:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8052:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8063:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8048:3:33"},"nodeType":"YulFunctionCall","src":"8048:18:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"8032:15:33"},"nodeType":"YulFunctionCall","src":"8032:35:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8022:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"8076:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8107:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8118:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8103:3:33"},"nodeType":"YulFunctionCall","src":"8103:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8090:12:33"},"nodeType":"YulFunctionCall","src":"8090:33:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8080:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8166:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8175:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8178:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8168:6:33"},"nodeType":"YulFunctionCall","src":"8168:12:33"},"nodeType":"YulExpressionStatement","src":"8168:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8138:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8146:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8135:2:33"},"nodeType":"YulFunctionCall","src":"8135:30:33"},"nodeType":"YulIf","src":"8132:50:33"},{"nodeType":"YulAssignment","src":"8191:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8222:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"8233:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8218:3:33"},"nodeType":"YulFunctionCall","src":"8218:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8242:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8201:16:33"},"nodeType":"YulFunctionCall","src":"8201:49:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8191:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes32t_boolt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7728:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7739:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7751:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7759:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7767:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7775:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7783:6:33","type":""}],"src":"7650:606:33"},{"body":{"nodeType":"YulBlock","src":"8377:510:33","statements":[{"body":{"nodeType":"YulBlock","src":"8423:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8432:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8435:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8425:6:33"},"nodeType":"YulFunctionCall","src":"8425:12:33"},"nodeType":"YulExpressionStatement","src":"8425:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8398:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8407:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8394:3:33"},"nodeType":"YulFunctionCall","src":"8394:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8419:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8390:3:33"},"nodeType":"YulFunctionCall","src":"8390:32:33"},"nodeType":"YulIf","src":"8387:52:33"},{"nodeType":"YulVariableDeclaration","src":"8448:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8475:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8462:12:33"},"nodeType":"YulFunctionCall","src":"8462:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8452:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8494:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8504:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8498:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8549:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8558:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8561:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8551:6:33"},"nodeType":"YulFunctionCall","src":"8551:12:33"},"nodeType":"YulExpressionStatement","src":"8551:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8537:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"8545:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8534:2:33"},"nodeType":"YulFunctionCall","src":"8534:14:33"},"nodeType":"YulIf","src":"8531:34:33"},{"nodeType":"YulVariableDeclaration","src":"8574:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8588:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"8599:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8584:3:33"},"nodeType":"YulFunctionCall","src":"8584:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8578:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8654:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8663:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8666:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8656:6:33"},"nodeType":"YulFunctionCall","src":"8656:12:33"},"nodeType":"YulExpressionStatement","src":"8656:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8633:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"8637:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8629:3:33"},"nodeType":"YulFunctionCall","src":"8629:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8644:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8625:3:33"},"nodeType":"YulFunctionCall","src":"8625:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8618:6:33"},"nodeType":"YulFunctionCall","src":"8618:35:33"},"nodeType":"YulIf","src":"8615:55:33"},{"nodeType":"YulVariableDeclaration","src":"8679:30:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8706:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8693:12:33"},"nodeType":"YulFunctionCall","src":"8693:16:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8683:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8736:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8745:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8748:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8738:6:33"},"nodeType":"YulFunctionCall","src":"8738:12:33"},"nodeType":"YulExpressionStatement","src":"8738:12:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8724:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"8732:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8721:2:33"},"nodeType":"YulFunctionCall","src":"8721:14:33"},"nodeType":"YulIf","src":"8718:34:33"},{"body":{"nodeType":"YulBlock","src":"8810:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8819:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8822:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8812:6:33"},"nodeType":"YulFunctionCall","src":"8812:12:33"},"nodeType":"YulExpressionStatement","src":"8812:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8775:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8783:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"8786:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8779:3:33"},"nodeType":"YulFunctionCall","src":"8779:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8771:3:33"},"nodeType":"YulFunctionCall","src":"8771:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8796:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8767:3:33"},"nodeType":"YulFunctionCall","src":"8767:32:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8801:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8764:2:33"},"nodeType":"YulFunctionCall","src":"8764:45:33"},"nodeType":"YulIf","src":"8761:65:33"},{"nodeType":"YulAssignment","src":"8835:21:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8849:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"8853:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8845:3:33"},"nodeType":"YulFunctionCall","src":"8845:11:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8835:6:33"}]},{"nodeType":"YulAssignment","src":"8865:16:33","value":{"name":"length","nodeType":"YulIdentifier","src":"8875:6:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8865:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8335:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8346:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8358:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8366:6:33","type":""}],"src":"8261:626:33"},{"body":{"nodeType":"YulBlock","src":"8962:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"9008:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9017:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9020:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9010:6:33"},"nodeType":"YulFunctionCall","src":"9010:12:33"},"nodeType":"YulExpressionStatement","src":"9010:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8983:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8992:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8979:3:33"},"nodeType":"YulFunctionCall","src":"8979:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"9004:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8975:3:33"},"nodeType":"YulFunctionCall","src":"8975:32:33"},"nodeType":"YulIf","src":"8972:52:33"},{"nodeType":"YulAssignment","src":"9033:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9062:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9043:18:33"},"nodeType":"YulFunctionCall","src":"9043:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9033:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8928:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8939:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8951:6:33","type":""}],"src":"8892:186:33"},{"body":{"nodeType":"YulBlock","src":"9147:604:33","statements":[{"body":{"nodeType":"YulBlock","src":"9196:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9205:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9208:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9198:6:33"},"nodeType":"YulFunctionCall","src":"9198:12:33"},"nodeType":"YulExpressionStatement","src":"9198:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9175:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9183:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9171:3:33"},"nodeType":"YulFunctionCall","src":"9171:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"9190:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9167:3:33"},"nodeType":"YulFunctionCall","src":"9167:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9160:6:33"},"nodeType":"YulFunctionCall","src":"9160:35:33"},"nodeType":"YulIf","src":"9157:55:33"},{"nodeType":"YulVariableDeclaration","src":"9221:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9244:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9231:12:33"},"nodeType":"YulFunctionCall","src":"9231:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9225:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9260:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"9270:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9264:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9283:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9350:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"9310:39:33"},"nodeType":"YulFunctionCall","src":"9310:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9294:15:33"},"nodeType":"YulFunctionCall","src":"9294:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"9287:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9363:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"9376:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"9367:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9395:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"9400:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9388:6:33"},"nodeType":"YulFunctionCall","src":"9388:15:33"},"nodeType":"YulExpressionStatement","src":"9388:15:33"},{"nodeType":"YulAssignment","src":"9412:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9423:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"9428:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9419:3:33"},"nodeType":"YulFunctionCall","src":"9419:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"9412:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"9440:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9462:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9474:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"9477:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9470:3:33"},"nodeType":"YulFunctionCall","src":"9470:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9458:3:33"},"nodeType":"YulFunctionCall","src":"9458:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"9483:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9454:3:33"},"nodeType":"YulFunctionCall","src":"9454:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"9444:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9514:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9523:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9526:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9516:6:33"},"nodeType":"YulFunctionCall","src":"9516:12:33"},"nodeType":"YulExpressionStatement","src":"9516:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"9501:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"9509:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9498:2:33"},"nodeType":"YulFunctionCall","src":"9498:15:33"},"nodeType":"YulIf","src":"9495:35:33"},{"nodeType":"YulVariableDeclaration","src":"9539:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9554:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"9562:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9550:3:33"},"nodeType":"YulFunctionCall","src":"9550:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"9543:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9630:92:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9651:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9675:3:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9656:18:33"},"nodeType":"YulFunctionCall","src":"9656:23:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9644:6:33"},"nodeType":"YulFunctionCall","src":"9644:36:33"},"nodeType":"YulExpressionStatement","src":"9644:36:33"},{"nodeType":"YulAssignment","src":"9693:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9704:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"9709:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9700:3:33"},"nodeType":"YulFunctionCall","src":"9700:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"9693:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9585:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"9590:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9582:2:33"},"nodeType":"YulFunctionCall","src":"9582:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9598:23:33","statements":[{"nodeType":"YulAssignment","src":"9600:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9611:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"9616:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9607:3:33"},"nodeType":"YulFunctionCall","src":"9607:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"9600:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"9578:3:33","statements":[]},"src":"9574:148:33"},{"nodeType":"YulAssignment","src":"9731:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"9740:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"9731:5:33"}]}]},"name":"abi_decode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9121:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"9129:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9137:5:33","type":""}],"src":"9083:668:33"},{"body":{"nodeType":"YulBlock","src":"9817:601:33","statements":[{"body":{"nodeType":"YulBlock","src":"9866:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9875:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9878:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9868:6:33"},"nodeType":"YulFunctionCall","src":"9868:12:33"},"nodeType":"YulExpressionStatement","src":"9868:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9845:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9853:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9841:3:33"},"nodeType":"YulFunctionCall","src":"9841:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"9860:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9837:3:33"},"nodeType":"YulFunctionCall","src":"9837:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9830:6:33"},"nodeType":"YulFunctionCall","src":"9830:35:33"},"nodeType":"YulIf","src":"9827:55:33"},{"nodeType":"YulVariableDeclaration","src":"9891:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9914:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9901:12:33"},"nodeType":"YulFunctionCall","src":"9901:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9895:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9930:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"9940:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9934:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9953:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10020:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"9980:39:33"},"nodeType":"YulFunctionCall","src":"9980:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9964:15:33"},"nodeType":"YulFunctionCall","src":"9964:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"9957:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10033:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"10046:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"10037:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10065:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10070:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10058:6:33"},"nodeType":"YulFunctionCall","src":"10058:15:33"},"nodeType":"YulExpressionStatement","src":"10058:15:33"},{"nodeType":"YulAssignment","src":"10082:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10093:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10098:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10089:3:33"},"nodeType":"YulFunctionCall","src":"10089:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10082:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"10110:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10132:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10144:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"10147:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10140:3:33"},"nodeType":"YulFunctionCall","src":"10140:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10128:3:33"},"nodeType":"YulFunctionCall","src":"10128:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10153:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10124:3:33"},"nodeType":"YulFunctionCall","src":"10124:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10114:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10184:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10193:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10196:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10186:6:33"},"nodeType":"YulFunctionCall","src":"10186:12:33"},"nodeType":"YulExpressionStatement","src":"10186:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10171:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"10179:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10168:2:33"},"nodeType":"YulFunctionCall","src":"10168:15:33"},"nodeType":"YulIf","src":"10165:35:33"},{"nodeType":"YulVariableDeclaration","src":"10209:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10224:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10232:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10220:3:33"},"nodeType":"YulFunctionCall","src":"10220:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"10213:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10300:89:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10321:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10342:3:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"10326:15:33"},"nodeType":"YulFunctionCall","src":"10326:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10314:6:33"},"nodeType":"YulFunctionCall","src":"10314:33:33"},"nodeType":"YulExpressionStatement","src":"10314:33:33"},{"nodeType":"YulAssignment","src":"10360:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10371:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10376:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10367:3:33"},"nodeType":"YulFunctionCall","src":"10367:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10360:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10255:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"10260:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10252:2:33"},"nodeType":"YulFunctionCall","src":"10252:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10268:23:33","statements":[{"nodeType":"YulAssignment","src":"10270:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10281:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10286:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10277:3:33"},"nodeType":"YulFunctionCall","src":"10277:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"10270:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"10248:3:33","statements":[]},"src":"10244:145:33"},{"nodeType":"YulAssignment","src":"10398:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"10407:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10398:5:33"}]}]},"name":"abi_decode_array_bool_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9791:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"9799:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9807:5:33","type":""}],"src":"9756:662:33"},{"body":{"nodeType":"YulBlock","src":"10485:824:33","statements":[{"body":{"nodeType":"YulBlock","src":"10534:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10543:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10546:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10536:6:33"},"nodeType":"YulFunctionCall","src":"10536:12:33"},"nodeType":"YulExpressionStatement","src":"10536:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10513:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"10521:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10509:3:33"},"nodeType":"YulFunctionCall","src":"10509:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"10528:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10505:3:33"},"nodeType":"YulFunctionCall","src":"10505:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10498:6:33"},"nodeType":"YulFunctionCall","src":"10498:35:33"},"nodeType":"YulIf","src":"10495:55:33"},{"nodeType":"YulVariableDeclaration","src":"10559:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10582:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10569:12:33"},"nodeType":"YulFunctionCall","src":"10569:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10563:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10598:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"10608:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10602:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10621:71:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10688:2:33"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"10648:39:33"},"nodeType":"YulFunctionCall","src":"10648:43:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10632:15:33"},"nodeType":"YulFunctionCall","src":"10632:60:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10625:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10701:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"10714:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"10705:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10733:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"10738:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10726:6:33"},"nodeType":"YulFunctionCall","src":"10726:15:33"},"nodeType":"YulExpressionStatement","src":"10726:15:33"},{"nodeType":"YulAssignment","src":"10750:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10761:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10766:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10757:3:33"},"nodeType":"YulFunctionCall","src":"10757:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10750:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"10778:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10800:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10812:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"10815:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10808:3:33"},"nodeType":"YulFunctionCall","src":"10808:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10796:3:33"},"nodeType":"YulFunctionCall","src":"10796:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10821:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10792:3:33"},"nodeType":"YulFunctionCall","src":"10792:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10782:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10852:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10861:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10864:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10854:6:33"},"nodeType":"YulFunctionCall","src":"10854:12:33"},"nodeType":"YulExpressionStatement","src":"10854:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10839:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"10847:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10836:2:33"},"nodeType":"YulFunctionCall","src":"10836:15:33"},"nodeType":"YulIf","src":"10833:35:33"},{"nodeType":"YulVariableDeclaration","src":"10877:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10892:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10900:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10888:3:33"},"nodeType":"YulFunctionCall","src":"10888:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"10881:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"10968:312:33","statements":[{"nodeType":"YulVariableDeclaration","src":"10982:36:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11014:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11001:12:33"},"nodeType":"YulFunctionCall","src":"11001:17:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"10986:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"11082:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"11100:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11110:1:33","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"11104:2:33","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"11135:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"11139:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11128:6:33"},"nodeType":"YulFunctionCall","src":"11128:14:33"},"nodeType":"YulExpressionStatement","src":"11128:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"11037:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"11050:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11034:2:33"},"nodeType":"YulFunctionCall","src":"11034:35:33"},"nodeType":"YulIf","src":"11031:125:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11176:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11206:6:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"11214:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11202:3:33"},"nodeType":"YulFunctionCall","src":"11202:24:33"},{"name":"_2","nodeType":"YulIdentifier","src":"11228:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11198:3:33"},"nodeType":"YulFunctionCall","src":"11198:33:33"},{"name":"end","nodeType":"YulIdentifier","src":"11233:3:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"11181:16:33"},"nodeType":"YulFunctionCall","src":"11181:56:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11169:6:33"},"nodeType":"YulFunctionCall","src":"11169:69:33"},"nodeType":"YulExpressionStatement","src":"11169:69:33"},{"nodeType":"YulAssignment","src":"11251:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11262:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"11267:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11258:3:33"},"nodeType":"YulFunctionCall","src":"11258:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"11251:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10923:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"10928:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10920:2:33"},"nodeType":"YulFunctionCall","src":"10920:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10936:23:33","statements":[{"nodeType":"YulAssignment","src":"10938:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10949:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"10954:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10945:3:33"},"nodeType":"YulFunctionCall","src":"10945:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"10938:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"10916:3:33","statements":[]},"src":"10912:368:33"},{"nodeType":"YulAssignment","src":"11289:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"11298:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11289:5:33"}]}]},"name":"abi_decode_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10459:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"10467:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10475:5:33","type":""}],"src":"10423:886:33"},{"body":{"nodeType":"YulBlock","src":"11583:1007:33","statements":[{"body":{"nodeType":"YulBlock","src":"11630:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11639:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11642:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11632:6:33"},"nodeType":"YulFunctionCall","src":"11632:12:33"},"nodeType":"YulExpressionStatement","src":"11632:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11604:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11613:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11600:3:33"},"nodeType":"YulFunctionCall","src":"11600:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11625:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11596:3:33"},"nodeType":"YulFunctionCall","src":"11596:33:33"},"nodeType":"YulIf","src":"11593:53:33"},{"nodeType":"YulVariableDeclaration","src":"11655:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11682:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11669:12:33"},"nodeType":"YulFunctionCall","src":"11669:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11659:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11701:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11711:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11705:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"11756:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11765:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11768:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11758:6:33"},"nodeType":"YulFunctionCall","src":"11758:12:33"},"nodeType":"YulExpressionStatement","src":"11758:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11744:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11752:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11741:2:33"},"nodeType":"YulFunctionCall","src":"11741:14:33"},"nodeType":"YulIf","src":"11738:34:33"},{"nodeType":"YulAssignment","src":"11781:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11824:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"11835:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11820:3:33"},"nodeType":"YulFunctionCall","src":"11820:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11844:7:33"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"11791:28:33"},"nodeType":"YulFunctionCall","src":"11791:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11781:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"11861:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11894:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11905:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11890:3:33"},"nodeType":"YulFunctionCall","src":"11890:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11877:12:33"},"nodeType":"YulFunctionCall","src":"11877:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"11865:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"11938:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11947:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11950:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11940:6:33"},"nodeType":"YulFunctionCall","src":"11940:12:33"},"nodeType":"YulExpressionStatement","src":"11940:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"11924:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11934:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11921:2:33"},"nodeType":"YulFunctionCall","src":"11921:16:33"},"nodeType":"YulIf","src":"11918:36:33"},{"nodeType":"YulAssignment","src":"11963:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12006:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"12017:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12002:3:33"},"nodeType":"YulFunctionCall","src":"12002:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12028:7:33"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"11973:28:33"},"nodeType":"YulFunctionCall","src":"11973:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11963:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12045:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12078:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12089:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12074:3:33"},"nodeType":"YulFunctionCall","src":"12074:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12061:12:33"},"nodeType":"YulFunctionCall","src":"12061:32:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"12049:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12122:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12131:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12134:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12124:6:33"},"nodeType":"YulFunctionCall","src":"12124:12:33"},"nodeType":"YulExpressionStatement","src":"12124:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"12108:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"12118:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12105:2:33"},"nodeType":"YulFunctionCall","src":"12105:16:33"},"nodeType":"YulIf","src":"12102:36:33"},{"nodeType":"YulAssignment","src":"12147:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12190:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"12201:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12186:3:33"},"nodeType":"YulFunctionCall","src":"12186:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12212:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"12157:28:33"},"nodeType":"YulFunctionCall","src":"12157:63:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12147:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12229:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12262:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12273:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12258:3:33"},"nodeType":"YulFunctionCall","src":"12258:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12245:12:33"},"nodeType":"YulFunctionCall","src":"12245:32:33"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"12233:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12306:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12315:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12318:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12308:6:33"},"nodeType":"YulFunctionCall","src":"12308:12:33"},"nodeType":"YulExpressionStatement","src":"12308:12:33"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"12292:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"12302:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12289:2:33"},"nodeType":"YulFunctionCall","src":"12289:16:33"},"nodeType":"YulIf","src":"12286:36:33"},{"nodeType":"YulAssignment","src":"12331:70:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12371:9:33"},{"name":"offset_3","nodeType":"YulIdentifier","src":"12382:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12367:3:33"},"nodeType":"YulFunctionCall","src":"12367:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12393:7:33"}],"functionName":{"name":"abi_decode_array_bool_dyn","nodeType":"YulIdentifier","src":"12341:25:33"},"nodeType":"YulFunctionCall","src":"12341:60:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12331:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12410:49:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12443:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12454:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12439:3:33"},"nodeType":"YulFunctionCall","src":"12439:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12426:12:33"},"nodeType":"YulFunctionCall","src":"12426:33:33"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"12414:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12488:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12497:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12500:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12490:6:33"},"nodeType":"YulFunctionCall","src":"12490:12:33"},"nodeType":"YulExpressionStatement","src":"12490:12:33"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"12474:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"12484:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12471:2:33"},"nodeType":"YulFunctionCall","src":"12471:16:33"},"nodeType":"YulIf","src":"12468:36:33"},{"nodeType":"YulAssignment","src":"12513:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12554:9:33"},{"name":"offset_4","nodeType":"YulIdentifier","src":"12565:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12550:3:33"},"nodeType":"YulFunctionCall","src":"12550:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12576:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"12523:26:33"},"nodeType":"YulFunctionCall","src":"12523:61:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12513:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11517:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11528:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11540:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11548:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11556:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11564:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11572:6:33","type":""}],"src":"11314:1276:33"},{"body":{"nodeType":"YulBlock","src":"12691:292:33","statements":[{"body":{"nodeType":"YulBlock","src":"12737:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12746:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12749:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12739:6:33"},"nodeType":"YulFunctionCall","src":"12739:12:33"},"nodeType":"YulExpressionStatement","src":"12739:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12712:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12721:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12708:3:33"},"nodeType":"YulFunctionCall","src":"12708:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12733:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12704:3:33"},"nodeType":"YulFunctionCall","src":"12704:32:33"},"nodeType":"YulIf","src":"12701:52:33"},{"nodeType":"YulAssignment","src":"12762:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12785:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12772:12:33"},"nodeType":"YulFunctionCall","src":"12772:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12762:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12804:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12835:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12846:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12831:3:33"},"nodeType":"YulFunctionCall","src":"12831:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12818:12:33"},"nodeType":"YulFunctionCall","src":"12818:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12808:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"12893:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12902:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12905:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12895:6:33"},"nodeType":"YulFunctionCall","src":"12895:12:33"},"nodeType":"YulExpressionStatement","src":"12895:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12865:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"12873:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12862:2:33"},"nodeType":"YulFunctionCall","src":"12862:30:33"},"nodeType":"YulIf","src":"12859:50:33"},{"nodeType":"YulAssignment","src":"12918:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12949:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"12960:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12945:3:33"},"nodeType":"YulFunctionCall","src":"12945:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12969:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12928:16:33"},"nodeType":"YulFunctionCall","src":"12928:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12918:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12649:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12660:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12672:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12680:6:33","type":""}],"src":"12595:388:33"},{"body":{"nodeType":"YulBlock","src":"13101:349:33","statements":[{"body":{"nodeType":"YulBlock","src":"13147:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13156:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13159:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13149:6:33"},"nodeType":"YulFunctionCall","src":"13149:12:33"},"nodeType":"YulExpressionStatement","src":"13149:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13122:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13131:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13118:3:33"},"nodeType":"YulFunctionCall","src":"13118:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"13143:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13114:3:33"},"nodeType":"YulFunctionCall","src":"13114:32:33"},"nodeType":"YulIf","src":"13111:52:33"},{"nodeType":"YulAssignment","src":"13172:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13201:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"13182:18:33"},"nodeType":"YulFunctionCall","src":"13182:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13172:6:33"}]},{"nodeType":"YulAssignment","src":"13220:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13247:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13258:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13243:3:33"},"nodeType":"YulFunctionCall","src":"13243:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13230:12:33"},"nodeType":"YulFunctionCall","src":"13230:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13220:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"13271:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13302:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13313:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13298:3:33"},"nodeType":"YulFunctionCall","src":"13298:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13285:12:33"},"nodeType":"YulFunctionCall","src":"13285:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13275:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"13360:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13369:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13372:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13362:6:33"},"nodeType":"YulFunctionCall","src":"13362:12:33"},"nodeType":"YulExpressionStatement","src":"13362:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13332:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"13340:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13329:2:33"},"nodeType":"YulFunctionCall","src":"13329:30:33"},"nodeType":"YulIf","src":"13326:50:33"},{"nodeType":"YulAssignment","src":"13385:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13416:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"13427:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13412:3:33"},"nodeType":"YulFunctionCall","src":"13412:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13436:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"13395:16:33"},"nodeType":"YulFunctionCall","src":"13395:49:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"13385:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13051:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13062:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13074:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13082:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13090:6:33","type":""}],"src":"12988:462:33"},{"body":{"nodeType":"YulBlock","src":"13601:456:33","statements":[{"body":{"nodeType":"YulBlock","src":"13647:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13656:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13659:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13649:6:33"},"nodeType":"YulFunctionCall","src":"13649:12:33"},"nodeType":"YulExpressionStatement","src":"13649:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13622:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13631:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13618:3:33"},"nodeType":"YulFunctionCall","src":"13618:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"13643:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13614:3:33"},"nodeType":"YulFunctionCall","src":"13614:32:33"},"nodeType":"YulIf","src":"13611:52:33"},{"nodeType":"YulVariableDeclaration","src":"13672:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13699:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13686:12:33"},"nodeType":"YulFunctionCall","src":"13686:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13676:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13718:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"13728:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13722:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"13773:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13782:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13785:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13775:6:33"},"nodeType":"YulFunctionCall","src":"13775:12:33"},"nodeType":"YulExpressionStatement","src":"13775:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13761:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"13769:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13758:2:33"},"nodeType":"YulFunctionCall","src":"13758:14:33"},"nodeType":"YulIf","src":"13755:34:33"},{"nodeType":"YulAssignment","src":"13798:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13841:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"13852:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13837:3:33"},"nodeType":"YulFunctionCall","src":"13837:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13861:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"13808:28:33"},"nodeType":"YulFunctionCall","src":"13808:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13798:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"13878:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13911:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13922:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13907:3:33"},"nodeType":"YulFunctionCall","src":"13907:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13894:12:33"},"nodeType":"YulFunctionCall","src":"13894:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"13882:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"13955:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13964:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13967:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13957:6:33"},"nodeType":"YulFunctionCall","src":"13957:12:33"},"nodeType":"YulExpressionStatement","src":"13957:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"13941:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"13951:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13938:2:33"},"nodeType":"YulFunctionCall","src":"13938:16:33"},"nodeType":"YulIf","src":"13935:36:33"},{"nodeType":"YulAssignment","src":"13980:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14021:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"14032:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14017:3:33"},"nodeType":"YulFunctionCall","src":"14017:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14043:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"13990:26:33"},"nodeType":"YulFunctionCall","src":"13990:61:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13980:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13559:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13570:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13582:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13590:6:33","type":""}],"src":"13455:602:33"},{"body":{"nodeType":"YulBlock","src":"14213:481:33","statements":[{"nodeType":"YulVariableDeclaration","src":"14223:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14233:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14227:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14244:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14262:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14273:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14258:3:33"},"nodeType":"YulFunctionCall","src":"14258:18:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14248:6:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14292:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14303:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14285:6:33"},"nodeType":"YulFunctionCall","src":"14285:21:33"},"nodeType":"YulExpressionStatement","src":"14285:21:33"},{"nodeType":"YulVariableDeclaration","src":"14315:17:33","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"14326:6:33"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"14319:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14341:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14361:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14355:5:33"},"nodeType":"YulFunctionCall","src":"14355:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14345:6:33","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14384:6:33"},{"name":"length","nodeType":"YulIdentifier","src":"14392:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14377:6:33"},"nodeType":"YulFunctionCall","src":"14377:22:33"},"nodeType":"YulExpressionStatement","src":"14377:22:33"},{"nodeType":"YulAssignment","src":"14408:25:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14419:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14430:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14415:3:33"},"nodeType":"YulFunctionCall","src":"14415:18:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14408:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"14442:29:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14460:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14468:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14456:3:33"},"nodeType":"YulFunctionCall","src":"14456:15:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"14446:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14480:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14489:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14484:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14548:120:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14569:3:33"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14580:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14574:5:33"},"nodeType":"YulFunctionCall","src":"14574:13:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14562:6:33"},"nodeType":"YulFunctionCall","src":"14562:26:33"},"nodeType":"YulExpressionStatement","src":"14562:26:33"},{"nodeType":"YulAssignment","src":"14601:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14612:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14617:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14608:3:33"},"nodeType":"YulFunctionCall","src":"14608:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14601:3:33"}]},{"nodeType":"YulAssignment","src":"14633:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14647:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14655:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14643:3:33"},"nodeType":"YulFunctionCall","src":"14643:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"14633:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14510:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"14513:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14507:2:33"},"nodeType":"YulFunctionCall","src":"14507:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14521:18:33","statements":[{"nodeType":"YulAssignment","src":"14523:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14532:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"14535:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14528:3:33"},"nodeType":"YulFunctionCall","src":"14528:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14523:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"14503:3:33","statements":[]},"src":"14499:169:33"},{"nodeType":"YulAssignment","src":"14677:11:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"14685:3:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14677:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14182:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14193:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14204:4:33","type":""}],"src":"14062:632:33"},{"body":{"nodeType":"YulBlock","src":"14887:640:33","statements":[{"body":{"nodeType":"YulBlock","src":"14933:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14942:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14945:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14935:6:33"},"nodeType":"YulFunctionCall","src":"14935:12:33"},"nodeType":"YulExpressionStatement","src":"14935:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14908:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14917:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14904:3:33"},"nodeType":"YulFunctionCall","src":"14904:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"14929:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14900:3:33"},"nodeType":"YulFunctionCall","src":"14900:32:33"},"nodeType":"YulIf","src":"14897:52:33"},{"nodeType":"YulVariableDeclaration","src":"14958:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14985:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14972:12:33"},"nodeType":"YulFunctionCall","src":"14972:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14962:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15004:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"15014:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15008:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15059:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15068:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15071:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15061:6:33"},"nodeType":"YulFunctionCall","src":"15061:12:33"},"nodeType":"YulExpressionStatement","src":"15061:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15047:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15055:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15044:2:33"},"nodeType":"YulFunctionCall","src":"15044:14:33"},"nodeType":"YulIf","src":"15041:34:33"},{"nodeType":"YulAssignment","src":"15084:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15127:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"15138:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15123:3:33"},"nodeType":"YulFunctionCall","src":"15123:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15147:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"15094:28:33"},"nodeType":"YulFunctionCall","src":"15094:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15084:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"15164:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15197:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15208:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15193:3:33"},"nodeType":"YulFunctionCall","src":"15193:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15180:12:33"},"nodeType":"YulFunctionCall","src":"15180:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"15168:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15241:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15250:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15253:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15243:6:33"},"nodeType":"YulFunctionCall","src":"15243:12:33"},"nodeType":"YulExpressionStatement","src":"15243:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"15227:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15237:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15224:2:33"},"nodeType":"YulFunctionCall","src":"15224:16:33"},"nodeType":"YulIf","src":"15221:36:33"},{"nodeType":"YulAssignment","src":"15266:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15309:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"15320:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15305:3:33"},"nodeType":"YulFunctionCall","src":"15305:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15331:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"15276:28:33"},"nodeType":"YulFunctionCall","src":"15276:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15266:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"15348:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15381:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15392:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15377:3:33"},"nodeType":"YulFunctionCall","src":"15377:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15364:12:33"},"nodeType":"YulFunctionCall","src":"15364:32:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"15352:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15425:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15434:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15437:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15427:6:33"},"nodeType":"YulFunctionCall","src":"15427:12:33"},"nodeType":"YulExpressionStatement","src":"15427:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"15411:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15421:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15408:2:33"},"nodeType":"YulFunctionCall","src":"15408:16:33"},"nodeType":"YulIf","src":"15405:36:33"},{"nodeType":"YulAssignment","src":"15450:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15491:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"15502:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15487:3:33"},"nodeType":"YulFunctionCall","src":"15487:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15513:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"15460:26:33"},"nodeType":"YulFunctionCall","src":"15460:61:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15450:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14837:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14848:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14860:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14868:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14876:6:33","type":""}],"src":"14699:828:33"},{"body":{"nodeType":"YulBlock","src":"15645:343:33","statements":[{"body":{"nodeType":"YulBlock","src":"15691:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15700:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15703:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15693:6:33"},"nodeType":"YulFunctionCall","src":"15693:12:33"},"nodeType":"YulExpressionStatement","src":"15693:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15666:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"15675:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15662:3:33"},"nodeType":"YulFunctionCall","src":"15662:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"15687:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15658:3:33"},"nodeType":"YulFunctionCall","src":"15658:32:33"},"nodeType":"YulIf","src":"15655:52:33"},{"nodeType":"YulAssignment","src":"15716:33:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15739:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15726:12:33"},"nodeType":"YulFunctionCall","src":"15726:23:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15716:6:33"}]},{"nodeType":"YulAssignment","src":"15758:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15785:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15796:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15781:3:33"},"nodeType":"YulFunctionCall","src":"15781:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15768:12:33"},"nodeType":"YulFunctionCall","src":"15768:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15758:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"15809:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15840:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15851:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15836:3:33"},"nodeType":"YulFunctionCall","src":"15836:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15823:12:33"},"nodeType":"YulFunctionCall","src":"15823:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15813:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15898:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15907:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15910:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15900:6:33"},"nodeType":"YulFunctionCall","src":"15900:12:33"},"nodeType":"YulExpressionStatement","src":"15900:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15870:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"15878:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15867:2:33"},"nodeType":"YulFunctionCall","src":"15867:30:33"},"nodeType":"YulIf","src":"15864:50:33"},{"nodeType":"YulAssignment","src":"15923:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15954:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"15965:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15950:3:33"},"nodeType":"YulFunctionCall","src":"15950:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15974:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"15933:16:33"},"nodeType":"YulFunctionCall","src":"15933:49:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15923:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15595:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15606:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15618:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15626:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15634:6:33","type":""}],"src":"15532:456:33"},{"body":{"nodeType":"YulBlock","src":"16120:404:33","statements":[{"body":{"nodeType":"YulBlock","src":"16167:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16176:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16179:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16169:6:33"},"nodeType":"YulFunctionCall","src":"16169:12:33"},"nodeType":"YulExpressionStatement","src":"16169:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16141:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"16150:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16137:3:33"},"nodeType":"YulFunctionCall","src":"16137:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"16162:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16133:3:33"},"nodeType":"YulFunctionCall","src":"16133:33:33"},"nodeType":"YulIf","src":"16130:53:33"},{"nodeType":"YulAssignment","src":"16192:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16221:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"16202:18:33"},"nodeType":"YulFunctionCall","src":"16202:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16192:6:33"}]},{"nodeType":"YulAssignment","src":"16240:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16267:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16278:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16263:3:33"},"nodeType":"YulFunctionCall","src":"16263:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16250:12:33"},"nodeType":"YulFunctionCall","src":"16250:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"16240:6:33"}]},{"nodeType":"YulAssignment","src":"16291:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16321:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16332:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16317:3:33"},"nodeType":"YulFunctionCall","src":"16317:18:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"16301:15:33"},"nodeType":"YulFunctionCall","src":"16301:35:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"16291:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"16345:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16376:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"16387:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16372:3:33"},"nodeType":"YulFunctionCall","src":"16372:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16359:12:33"},"nodeType":"YulFunctionCall","src":"16359:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16349:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16434:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16443:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16446:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16436:6:33"},"nodeType":"YulFunctionCall","src":"16436:12:33"},"nodeType":"YulExpressionStatement","src":"16436:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16406:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16414:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16403:2:33"},"nodeType":"YulFunctionCall","src":"16403:30:33"},"nodeType":"YulIf","src":"16400:50:33"},{"nodeType":"YulAssignment","src":"16459:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16490:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"16501:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16486:3:33"},"nodeType":"YulFunctionCall","src":"16486:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16510:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"16469:16:33"},"nodeType":"YulFunctionCall","src":"16469:49:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"16459:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32t_boolt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16062:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16073:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16085:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16093:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16101:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16109:6:33","type":""}],"src":"15993:531:33"},{"body":{"nodeType":"YulBlock","src":"16624:253:33","statements":[{"body":{"nodeType":"YulBlock","src":"16670:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16679:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16682:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16672:6:33"},"nodeType":"YulFunctionCall","src":"16672:12:33"},"nodeType":"YulExpressionStatement","src":"16672:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16645:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"16654:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16641:3:33"},"nodeType":"YulFunctionCall","src":"16641:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"16666:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16637:3:33"},"nodeType":"YulFunctionCall","src":"16637:32:33"},"nodeType":"YulIf","src":"16634:52:33"},{"nodeType":"YulVariableDeclaration","src":"16695:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16722:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16709:12:33"},"nodeType":"YulFunctionCall","src":"16709:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16699:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16775:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16784:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16787:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16777:6:33"},"nodeType":"YulFunctionCall","src":"16777:12:33"},"nodeType":"YulExpressionStatement","src":"16777:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16747:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16755:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16744:2:33"},"nodeType":"YulFunctionCall","src":"16744:30:33"},"nodeType":"YulIf","src":"16741:50:33"},{"nodeType":"YulAssignment","src":"16800:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16843:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"16854:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16839:3:33"},"nodeType":"YulFunctionCall","src":"16839:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16863:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn","nodeType":"YulIdentifier","src":"16810:28:33"},"nodeType":"YulFunctionCall","src":"16810:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16800:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16590:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16601:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16613:6:33","type":""}],"src":"16529:348:33"},{"body":{"nodeType":"YulBlock","src":"16981:103:33","statements":[{"nodeType":"YulAssignment","src":"16991:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17003:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"17014:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16999:3:33"},"nodeType":"YulFunctionCall","src":"16999:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16991:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17033:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17048:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17060:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17065:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17056:3:33"},"nodeType":"YulFunctionCall","src":"17056:20:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17044:3:33"},"nodeType":"YulFunctionCall","src":"17044:33:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17026:6:33"},"nodeType":"YulFunctionCall","src":"17026:52:33"},"nodeType":"YulExpressionStatement","src":"17026:52:33"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16950:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16961:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16972:4:33","type":""}],"src":"16882:202:33"},{"body":{"nodeType":"YulBlock","src":"17292:221:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17315:3:33"},{"name":"value0","nodeType":"YulIdentifier","src":"17320:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"17328:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17302:12:33"},"nodeType":"YulFunctionCall","src":"17302:33:33"},"nodeType":"YulExpressionStatement","src":"17302:33:33"},{"nodeType":"YulVariableDeclaration","src":"17344:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17358:3:33"},{"name":"value1","nodeType":"YulIdentifier","src":"17363:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17354:3:33"},"nodeType":"YulFunctionCall","src":"17354:16:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17348:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17386:2:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17398:2:33","type":"","value":"96"},{"name":"value2","nodeType":"YulIdentifier","src":"17402:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17394:3:33"},"nodeType":"YulFunctionCall","src":"17394:15:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17415:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17411:3:33"},"nodeType":"YulFunctionCall","src":"17411:31:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17390:3:33"},"nodeType":"YulFunctionCall","src":"17390:53:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17379:6:33"},"nodeType":"YulFunctionCall","src":"17379:65:33"},"nodeType":"YulExpressionStatement","src":"17379:65:33"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17464:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"17468:2:33","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17460:3:33"},"nodeType":"YulFunctionCall","src":"17460:11:33"},{"name":"value3","nodeType":"YulIdentifier","src":"17473:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17453:6:33"},"nodeType":"YulFunctionCall","src":"17453:27:33"},"nodeType":"YulExpressionStatement","src":"17453:27:33"},{"nodeType":"YulAssignment","src":"17489:18:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17500:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"17504:2:33","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17496:3:33"},"nodeType":"YulFunctionCall","src":"17496:11:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17489:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17244:3:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17249:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17257:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17265:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17273:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17284:3:33","type":""}],"src":"17089:424:33"},{"body":{"nodeType":"YulBlock","src":"17655:150:33","statements":[{"nodeType":"YulVariableDeclaration","src":"17665:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17685:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17679:5:33"},"nodeType":"YulFunctionCall","src":"17679:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17669:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17740:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"17748:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17736:3:33"},"nodeType":"YulFunctionCall","src":"17736:17:33"},{"name":"pos","nodeType":"YulIdentifier","src":"17755:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"17760:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17701:34:33"},"nodeType":"YulFunctionCall","src":"17701:66:33"},"nodeType":"YulExpressionStatement","src":"17701:66:33"},{"nodeType":"YulAssignment","src":"17776:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17787:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"17792:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17783:3:33"},"nodeType":"YulFunctionCall","src":"17783:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17776:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17631:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17636:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17647:3:33","type":""}],"src":"17518:287:33"},{"body":{"nodeType":"YulBlock","src":"17842:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17859:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17866:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17871:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17862:3:33"},"nodeType":"YulFunctionCall","src":"17862:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17852:6:33"},"nodeType":"YulFunctionCall","src":"17852:31:33"},"nodeType":"YulExpressionStatement","src":"17852:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17899:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17902:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17892:6:33"},"nodeType":"YulFunctionCall","src":"17892:15:33"},"nodeType":"YulExpressionStatement","src":"17892:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17923:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17926:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17916:6:33"},"nodeType":"YulFunctionCall","src":"17916:15:33"},"nodeType":"YulExpressionStatement","src":"17916:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"17810:127:33"},{"body":{"nodeType":"YulBlock","src":"18043:76:33","statements":[{"nodeType":"YulAssignment","src":"18053:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18065:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"18076:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18061:3:33"},"nodeType":"YulFunctionCall","src":"18061:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18053:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18095:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"18106:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18088:6:33"},"nodeType":"YulFunctionCall","src":"18088:25:33"},"nodeType":"YulExpressionStatement","src":"18088:25:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18012:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18023:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18034:4:33","type":""}],"src":"17942:177:33"},{"body":{"nodeType":"YulBlock","src":"18156:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18173:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18180:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18185:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18176:3:33"},"nodeType":"YulFunctionCall","src":"18176:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18166:6:33"},"nodeType":"YulFunctionCall","src":"18166:31:33"},"nodeType":"YulExpressionStatement","src":"18166:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18213:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18216:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18206:6:33"},"nodeType":"YulFunctionCall","src":"18206:15:33"},"nodeType":"YulExpressionStatement","src":"18206:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18237:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18240:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18230:6:33"},"nodeType":"YulFunctionCall","src":"18230:15:33"},"nodeType":"YulExpressionStatement","src":"18230:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18124:127:33"},{"body":{"nodeType":"YulBlock","src":"18304:77:33","statements":[{"nodeType":"YulAssignment","src":"18314:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18325:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"18328:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18321:3:33"},"nodeType":"YulFunctionCall","src":"18321:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"18314:3:33"}]},{"body":{"nodeType":"YulBlock","src":"18353:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18355:16:33"},"nodeType":"YulFunctionCall","src":"18355:18:33"},"nodeType":"YulExpressionStatement","src":"18355:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18345:1:33"},{"name":"sum","nodeType":"YulIdentifier","src":"18348:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18342:2:33"},"nodeType":"YulFunctionCall","src":"18342:10:33"},"nodeType":"YulIf","src":"18339:36:33"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18287:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"18290:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"18296:3:33","type":""}],"src":"18256:125:33"},{"body":{"nodeType":"YulBlock","src":"18438:116:33","statements":[{"nodeType":"YulAssignment","src":"18448:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18463:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"18466:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18459:3:33"},"nodeType":"YulFunctionCall","src":"18459:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"18448:7:33"}]},{"body":{"nodeType":"YulBlock","src":"18526:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18528:16:33"},"nodeType":"YulFunctionCall","src":"18528:18:33"},"nodeType":"YulExpressionStatement","src":"18528:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18497:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18490:6:33"},"nodeType":"YulFunctionCall","src":"18490:9:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18504:1:33"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"18511:7:33"},{"name":"x","nodeType":"YulIdentifier","src":"18520:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18507:3:33"},"nodeType":"YulFunctionCall","src":"18507:15:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18501:2:33"},"nodeType":"YulFunctionCall","src":"18501:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18487:2:33"},"nodeType":"YulFunctionCall","src":"18487:37:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18480:6:33"},"nodeType":"YulFunctionCall","src":"18480:45:33"},"nodeType":"YulIf","src":"18477:71:33"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18417:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"18420:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"18426:7:33","type":""}],"src":"18386:168:33"},{"body":{"nodeType":"YulBlock","src":"18606:88:33","statements":[{"body":{"nodeType":"YulBlock","src":"18637:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18639:16:33"},"nodeType":"YulFunctionCall","src":"18639:18:33"},"nodeType":"YulExpressionStatement","src":"18639:18:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18622:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18633:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18629:3:33"},"nodeType":"YulFunctionCall","src":"18629:6:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18619:2:33"},"nodeType":"YulFunctionCall","src":"18619:17:33"},"nodeType":"YulIf","src":"18616:43:33"},{"nodeType":"YulAssignment","src":"18668:20:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18679:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"18686:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18675:3:33"},"nodeType":"YulFunctionCall","src":"18675:13:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18668:3:33"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18588:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18598:3:33","type":""}],"src":"18559:135:33"},{"body":{"nodeType":"YulBlock","src":"18890:14:33","statements":[{"nodeType":"YulAssignment","src":"18892:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"18899:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18892:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18874:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18882:3:33","type":""}],"src":"18699:205:33"},{"body":{"nodeType":"YulBlock","src":"19038:145:33","statements":[{"nodeType":"YulAssignment","src":"19048:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19060:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19071:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19056:3:33"},"nodeType":"YulFunctionCall","src":"19056:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19048:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19090:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19105:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19121:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19126:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19117:3:33"},"nodeType":"YulFunctionCall","src":"19117:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"19130:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19113:3:33"},"nodeType":"YulFunctionCall","src":"19113:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19101:3:33"},"nodeType":"YulFunctionCall","src":"19101:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19083:6:33"},"nodeType":"YulFunctionCall","src":"19083:51:33"},"nodeType":"YulExpressionStatement","src":"19083:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19154:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19165:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19150:3:33"},"nodeType":"YulFunctionCall","src":"19150:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"19170:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19143:6:33"},"nodeType":"YulFunctionCall","src":"19143:34:33"},"nodeType":"YulExpressionStatement","src":"19143:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18999:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19010:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19018:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19029:4:33","type":""}],"src":"18909:274:33"},{"body":{"nodeType":"YulBlock","src":"19317:145:33","statements":[{"nodeType":"YulAssignment","src":"19327:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19339:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19350:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19335:3:33"},"nodeType":"YulFunctionCall","src":"19335:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19327:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19369:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"19380:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19362:6:33"},"nodeType":"YulFunctionCall","src":"19362:25:33"},"nodeType":"YulExpressionStatement","src":"19362:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19407:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"19418:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19403:3:33"},"nodeType":"YulFunctionCall","src":"19403:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19427:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19443:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19448:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19439:3:33"},"nodeType":"YulFunctionCall","src":"19439:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"19452:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19435:3:33"},"nodeType":"YulFunctionCall","src":"19435:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19423:3:33"},"nodeType":"YulFunctionCall","src":"19423:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19396:6:33"},"nodeType":"YulFunctionCall","src":"19396:60:33"},"nodeType":"YulExpressionStatement","src":"19396:60:33"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19278:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19289:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19297:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19308:4:33","type":""}],"src":"19188:274:33"},{"body":{"nodeType":"YulBlock","src":"19561:427:33","statements":[{"nodeType":"YulVariableDeclaration","src":"19571:51:33","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"19610:11:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19597:12:33"},"nodeType":"YulFunctionCall","src":"19597:25:33"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"19575:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"19711:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19720:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19723:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19713:6:33"},"nodeType":"YulFunctionCall","src":"19713:12:33"},"nodeType":"YulExpressionStatement","src":"19713:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"19645:18:33"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"19673:12:33"},"nodeType":"YulFunctionCall","src":"19673:14:33"},{"name":"base_ref","nodeType":"YulIdentifier","src":"19689:8:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19669:3:33"},"nodeType":"YulFunctionCall","src":"19669:29:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19704:2:33","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19700:3:33"},"nodeType":"YulFunctionCall","src":"19700:7:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19665:3:33"},"nodeType":"YulFunctionCall","src":"19665:43:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19641:3:33"},"nodeType":"YulFunctionCall","src":"19641:68:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19634:6:33"},"nodeType":"YulFunctionCall","src":"19634:76:33"},"nodeType":"YulIf","src":"19631:96:33"},{"nodeType":"YulVariableDeclaration","src":"19736:47:33","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"19754:8:33"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"19764:18:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19750:3:33"},"nodeType":"YulFunctionCall","src":"19750:33:33"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"19740:6:33","type":""}]},{"nodeType":"YulAssignment","src":"19792:30:33","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"19815:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19802:12:33"},"nodeType":"YulFunctionCall","src":"19802:20:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19792:6:33"}]},{"body":{"nodeType":"YulBlock","src":"19865:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19874:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19877:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19867:6:33"},"nodeType":"YulFunctionCall","src":"19867:12:33"},"nodeType":"YulExpressionStatement","src":"19867:12:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19837:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19845:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19834:2:33"},"nodeType":"YulFunctionCall","src":"19834:30:33"},"nodeType":"YulIf","src":"19831:50:33"},{"nodeType":"YulAssignment","src":"19890:25:33","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"19902:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"19910:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19898:3:33"},"nodeType":"YulFunctionCall","src":"19898:17:33"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"19890:4:33"}]},{"body":{"nodeType":"YulBlock","src":"19966:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19975:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19978:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19968:6:33"},"nodeType":"YulFunctionCall","src":"19968:12:33"},"nodeType":"YulExpressionStatement","src":"19968:12:33"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"19931:4:33"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"19941:12:33"},"nodeType":"YulFunctionCall","src":"19941:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"19957:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19937:3:33"},"nodeType":"YulFunctionCall","src":"19937:27:33"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"19927:3:33"},"nodeType":"YulFunctionCall","src":"19927:38:33"},"nodeType":"YulIf","src":"19924:58:33"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"19518:8:33","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"19528:11:33","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"19544:4:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"19550:6:33","type":""}],"src":"19467:521:33"},{"body":{"nodeType":"YulBlock","src":"20140:124:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20163:3:33"},{"name":"value0","nodeType":"YulIdentifier","src":"20168:6:33"},{"name":"value1","nodeType":"YulIdentifier","src":"20176:6:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"20150:12:33"},"nodeType":"YulFunctionCall","src":"20150:33:33"},"nodeType":"YulExpressionStatement","src":"20150:33:33"},{"nodeType":"YulVariableDeclaration","src":"20192:26:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20206:3:33"},{"name":"value1","nodeType":"YulIdentifier","src":"20211:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20202:3:33"},"nodeType":"YulFunctionCall","src":"20202:16:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20196:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20234:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"20238:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20227:6:33"},"nodeType":"YulFunctionCall","src":"20227:13:33"},"nodeType":"YulExpressionStatement","src":"20227:13:33"},{"nodeType":"YulAssignment","src":"20249:9:33","value":{"name":"_1","nodeType":"YulIdentifier","src":"20256:2:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20249:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20108:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20113:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20121:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20132:3:33","type":""}],"src":"19993:271:33"},{"body":{"nodeType":"YulBlock","src":"20426:218:33","statements":[{"nodeType":"YulAssignment","src":"20436:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20448:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20459:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20444:3:33"},"nodeType":"YulFunctionCall","src":"20444:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20436:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"20471:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20489:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20494:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20485:3:33"},"nodeType":"YulFunctionCall","src":"20485:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"20498:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20481:3:33"},"nodeType":"YulFunctionCall","src":"20481:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20475:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20516:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20531:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20539:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20527:3:33"},"nodeType":"YulFunctionCall","src":"20527:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20509:6:33"},"nodeType":"YulFunctionCall","src":"20509:34:33"},"nodeType":"YulExpressionStatement","src":"20509:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20563:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20574:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20559:3:33"},"nodeType":"YulFunctionCall","src":"20559:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"20579:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20552:6:33"},"nodeType":"YulFunctionCall","src":"20552:34:33"},"nodeType":"YulExpressionStatement","src":"20552:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20606:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20617:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20602:3:33"},"nodeType":"YulFunctionCall","src":"20602:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20626:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20634:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20622:3:33"},"nodeType":"YulFunctionCall","src":"20622:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20595:6:33"},"nodeType":"YulFunctionCall","src":"20595:43:33"},"nodeType":"YulExpressionStatement","src":"20595:43:33"}]},"name":"abi_encode_tuple_t_address_t_bytes32_t_address__to_t_address_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20379:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20390:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20398:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20406:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20417:4:33","type":""}],"src":"20269:375:33"},{"body":{"nodeType":"YulBlock","src":"20778:145:33","statements":[{"nodeType":"YulAssignment","src":"20788:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20800:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20811:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20796:3:33"},"nodeType":"YulFunctionCall","src":"20796:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20788:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20830:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20845:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20861:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20866:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20857:3:33"},"nodeType":"YulFunctionCall","src":"20857:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"20870:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20853:3:33"},"nodeType":"YulFunctionCall","src":"20853:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20841:3:33"},"nodeType":"YulFunctionCall","src":"20841:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20823:6:33"},"nodeType":"YulFunctionCall","src":"20823:51:33"},"nodeType":"YulExpressionStatement","src":"20823:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20894:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"20905:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20890:3:33"},"nodeType":"YulFunctionCall","src":"20890:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"20910:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20883:6:33"},"nodeType":"YulFunctionCall","src":"20883:34:33"},"nodeType":"YulExpressionStatement","src":"20883:34:33"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20739:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20750:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20758:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20769:4:33","type":""}],"src":"20649:274:33"},{"body":{"nodeType":"YulBlock","src":"21125:271:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21142:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21157:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21173:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"21178:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21169:3:33"},"nodeType":"YulFunctionCall","src":"21169:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"21182:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21165:3:33"},"nodeType":"YulFunctionCall","src":"21165:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21153:3:33"},"nodeType":"YulFunctionCall","src":"21153:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21135:6:33"},"nodeType":"YulFunctionCall","src":"21135:51:33"},"nodeType":"YulExpressionStatement","src":"21135:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21206:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21217:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21202:3:33"},"nodeType":"YulFunctionCall","src":"21202:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"21222:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21195:6:33"},"nodeType":"YulFunctionCall","src":"21195:34:33"},"nodeType":"YulExpressionStatement","src":"21195:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21249:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21260:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21245:3:33"},"nodeType":"YulFunctionCall","src":"21245:18:33"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21279:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21272:6:33"},"nodeType":"YulFunctionCall","src":"21272:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21265:6:33"},"nodeType":"YulFunctionCall","src":"21265:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21238:6:33"},"nodeType":"YulFunctionCall","src":"21238:50:33"},"nodeType":"YulExpressionStatement","src":"21238:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21308:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21319:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21304:3:33"},"nodeType":"YulFunctionCall","src":"21304:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"21324:3:33","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21297:6:33"},"nodeType":"YulFunctionCall","src":"21297:31:33"},"nodeType":"YulExpressionStatement","src":"21297:31:33"},{"nodeType":"YulAssignment","src":"21337:53:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"21362:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21374:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21385:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21370:3:33"},"nodeType":"YulFunctionCall","src":"21370:19:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"21345:16:33"},"nodeType":"YulFunctionCall","src":"21345:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21337:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__to_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21070:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21081:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21089:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21097:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21105:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21116:4:33","type":""}],"src":"20928:468:33"},{"body":{"nodeType":"YulBlock","src":"21558:218:33","statements":[{"nodeType":"YulAssignment","src":"21568:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21580:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21591:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21576:3:33"},"nodeType":"YulFunctionCall","src":"21576:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21568:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"21603:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21621:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"21626:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21617:3:33"},"nodeType":"YulFunctionCall","src":"21617:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"21630:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21613:3:33"},"nodeType":"YulFunctionCall","src":"21613:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21607:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21648:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21663:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"21671:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21659:3:33"},"nodeType":"YulFunctionCall","src":"21659:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21641:6:33"},"nodeType":"YulFunctionCall","src":"21641:34:33"},"nodeType":"YulExpressionStatement","src":"21641:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21695:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21706:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21691:3:33"},"nodeType":"YulFunctionCall","src":"21691:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21715:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"21723:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21711:3:33"},"nodeType":"YulFunctionCall","src":"21711:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21684:6:33"},"nodeType":"YulFunctionCall","src":"21684:43:33"},"nodeType":"YulExpressionStatement","src":"21684:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21747:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"21758:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21743:3:33"},"nodeType":"YulFunctionCall","src":"21743:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"21763:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21736:6:33"},"nodeType":"YulFunctionCall","src":"21736:34:33"},"nodeType":"YulExpressionStatement","src":"21736:34:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21511:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21522:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21530:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21538:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21549:4:33","type":""}],"src":"21401:375:33"},{"body":{"nodeType":"YulBlock","src":"21875:281:33","statements":[{"nodeType":"YulVariableDeclaration","src":"21885:26:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"21905:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21899:5:33"},"nodeType":"YulFunctionCall","src":"21899:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21889:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21920:33:33","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"21940:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"21947:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21936:3:33"},"nodeType":"YulFunctionCall","src":"21936:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21930:5:33"},"nodeType":"YulFunctionCall","src":"21930:23:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21924:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21962:41:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21976:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21972:3:33"},"nodeType":"YulFunctionCall","src":"21972:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"21966:2:33","type":""}]},{"nodeType":"YulAssignment","src":"22012:20:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"22025:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"22029:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22021:3:33"},"nodeType":"YulFunctionCall","src":"22021:11:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22012:5:33"}]},{"body":{"nodeType":"YulBlock","src":"22067:83:33","statements":[{"nodeType":"YulAssignment","src":"22081:59:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"22098:2:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22110:1:33","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22117:2:33","type":"","value":"20"},{"name":"length","nodeType":"YulIdentifier","src":"22121:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22113:3:33"},"nodeType":"YulFunctionCall","src":"22113:15:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22106:3:33"},"nodeType":"YulFunctionCall","src":"22106:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"22131:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22102:3:33"},"nodeType":"YulFunctionCall","src":"22102:32:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22094:3:33"},"nodeType":"YulFunctionCall","src":"22094:41:33"},{"name":"_2","nodeType":"YulIdentifier","src":"22137:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22090:3:33"},"nodeType":"YulFunctionCall","src":"22090:50:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22081:5:33"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22047:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22055:2:33","type":"","value":"20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22044:2:33"},"nodeType":"YulFunctionCall","src":"22044:14:33"},"nodeType":"YulIf","src":"22041:109:33"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"21855:5:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"21865:5:33","type":""}],"src":"21781:375:33"},{"body":{"nodeType":"YulBlock","src":"22216:325:33","statements":[{"nodeType":"YulAssignment","src":"22226:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22240:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"22243:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22236:3:33"},"nodeType":"YulFunctionCall","src":"22236:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22226:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"22257:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22287:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"22293:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22283:3:33"},"nodeType":"YulFunctionCall","src":"22283:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"22261:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22334:31:33","statements":[{"nodeType":"YulAssignment","src":"22336:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22350:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22358:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22346:3:33"},"nodeType":"YulFunctionCall","src":"22346:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22336:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"22314:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22307:6:33"},"nodeType":"YulFunctionCall","src":"22307:26:33"},"nodeType":"YulIf","src":"22304:61:33"},{"body":{"nodeType":"YulBlock","src":"22424:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22445:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22452:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"22457:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22448:3:33"},"nodeType":"YulFunctionCall","src":"22448:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22438:6:33"},"nodeType":"YulFunctionCall","src":"22438:31:33"},"nodeType":"YulExpressionStatement","src":"22438:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22489:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22492:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22482:6:33"},"nodeType":"YulFunctionCall","src":"22482:15:33"},"nodeType":"YulExpressionStatement","src":"22482:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22517:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22520:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22510:6:33"},"nodeType":"YulFunctionCall","src":"22510:15:33"},"nodeType":"YulExpressionStatement","src":"22510:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"22380:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22403:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"22411:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22400:2:33"},"nodeType":"YulFunctionCall","src":"22400:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22377:2:33"},"nodeType":"YulFunctionCall","src":"22377:38:33"},"nodeType":"YulIf","src":"22374:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"22196:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"22205:6:33","type":""}],"src":"22161:380:33"},{"body":{"nodeType":"YulBlock","src":"22715:226:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22732:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22747:6:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22763:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"22768:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22759:3:33"},"nodeType":"YulFunctionCall","src":"22759:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"22772:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22755:3:33"},"nodeType":"YulFunctionCall","src":"22755:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22743:3:33"},"nodeType":"YulFunctionCall","src":"22743:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22725:6:33"},"nodeType":"YulFunctionCall","src":"22725:51:33"},"nodeType":"YulExpressionStatement","src":"22725:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22796:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22807:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22792:3:33"},"nodeType":"YulFunctionCall","src":"22792:18:33"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22826:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22819:6:33"},"nodeType":"YulFunctionCall","src":"22819:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22812:6:33"},"nodeType":"YulFunctionCall","src":"22812:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22785:6:33"},"nodeType":"YulFunctionCall","src":"22785:50:33"},"nodeType":"YulExpressionStatement","src":"22785:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22855:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22866:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22851:3:33"},"nodeType":"YulFunctionCall","src":"22851:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"22871:2:33","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22844:6:33"},"nodeType":"YulFunctionCall","src":"22844:30:33"},"nodeType":"YulExpressionStatement","src":"22844:30:33"},{"nodeType":"YulAssignment","src":"22883:52:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22908:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22920:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"22931:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22916:3:33"},"nodeType":"YulFunctionCall","src":"22916:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"22891:16:33"},"nodeType":"YulFunctionCall","src":"22891:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22883:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_bool_t_bytes_memory_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22668:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22679:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22687:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22695:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22706:4:33","type":""}],"src":"22546:395:33"},{"body":{"nodeType":"YulBlock","src":"23177:338:33","statements":[{"nodeType":"YulVariableDeclaration","src":"23187:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23205:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"23210:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23201:3:33"},"nodeType":"YulFunctionCall","src":"23201:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"23214:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23197:3:33"},"nodeType":"YulFunctionCall","src":"23197:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23191:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23232:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23247:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23255:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23243:3:33"},"nodeType":"YulFunctionCall","src":"23243:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23225:6:33"},"nodeType":"YulFunctionCall","src":"23225:34:33"},"nodeType":"YulExpressionStatement","src":"23225:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23279:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23290:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23275:3:33"},"nodeType":"YulFunctionCall","src":"23275:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23299:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23307:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23295:3:33"},"nodeType":"YulFunctionCall","src":"23295:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23268:6:33"},"nodeType":"YulFunctionCall","src":"23268:43:33"},"nodeType":"YulExpressionStatement","src":"23268:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23331:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23342:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23327:3:33"},"nodeType":"YulFunctionCall","src":"23327:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23351:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23359:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23347:3:33"},"nodeType":"YulFunctionCall","src":"23347:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23320:6:33"},"nodeType":"YulFunctionCall","src":"23320:43:33"},"nodeType":"YulExpressionStatement","src":"23320:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23383:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23394:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23379:3:33"},"nodeType":"YulFunctionCall","src":"23379:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"23399:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23372:6:33"},"nodeType":"YulFunctionCall","src":"23372:34:33"},"nodeType":"YulExpressionStatement","src":"23372:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23426:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23437:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23422:3:33"},"nodeType":"YulFunctionCall","src":"23422:19:33"},{"kind":"number","nodeType":"YulLiteral","src":"23443:3:33","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23415:6:33"},"nodeType":"YulFunctionCall","src":"23415:32:33"},"nodeType":"YulExpressionStatement","src":"23415:32:33"},{"nodeType":"YulAssignment","src":"23456:53:33","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"23481:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23493:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23504:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23489:3:33"},"nodeType":"YulFunctionCall","src":"23489:19:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"23464:16:33"},"nodeType":"YulFunctionCall","src":"23464:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23456:4:33"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23114:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"23125:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23133:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23141:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23149:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23157:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23168:4:33","type":""}],"src":"22946:569:33"},{"body":{"nodeType":"YulBlock","src":"23677:218:33","statements":[{"nodeType":"YulAssignment","src":"23687:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23699:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23710:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23695:3:33"},"nodeType":"YulFunctionCall","src":"23695:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23687:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23729:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"23740:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23722:6:33"},"nodeType":"YulFunctionCall","src":"23722:25:33"},"nodeType":"YulExpressionStatement","src":"23722:25:33"},{"nodeType":"YulVariableDeclaration","src":"23756:29:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23774:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"23779:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23770:3:33"},"nodeType":"YulFunctionCall","src":"23770:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"23783:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23766:3:33"},"nodeType":"YulFunctionCall","src":"23766:19:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23760:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23805:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23816:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23801:3:33"},"nodeType":"YulFunctionCall","src":"23801:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23825:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23833:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23821:3:33"},"nodeType":"YulFunctionCall","src":"23821:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23794:6:33"},"nodeType":"YulFunctionCall","src":"23794:43:33"},"nodeType":"YulExpressionStatement","src":"23794:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23857:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"23868:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23853:3:33"},"nodeType":"YulFunctionCall","src":"23853:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23877:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23885:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23873:3:33"},"nodeType":"YulFunctionCall","src":"23873:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23846:6:33"},"nodeType":"YulFunctionCall","src":"23846:43:33"},"nodeType":"YulExpressionStatement","src":"23846:43:33"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23630:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23641:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23649:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23657:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23668:4:33","type":""}],"src":"23520:375:33"},{"body":{"nodeType":"YulBlock","src":"23955:65:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23972:1:33","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"23975:3:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23965:6:33"},"nodeType":"YulFunctionCall","src":"23965:14:33"},"nodeType":"YulExpressionStatement","src":"23965:14:33"},{"nodeType":"YulAssignment","src":"23988:26:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24006:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24009:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"23996:9:33"},"nodeType":"YulFunctionCall","src":"23996:18:33"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"23988:4:33"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"23938:3:33","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"23946:4:33","type":""}],"src":"23900:120:33"},{"body":{"nodeType":"YulBlock","src":"24105:464:33","statements":[{"body":{"nodeType":"YulBlock","src":"24138:425:33","statements":[{"nodeType":"YulVariableDeclaration","src":"24152:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"24162:1:33","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24156:2:33","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24183:2:33"},{"name":"array","nodeType":"YulIdentifier","src":"24187:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24176:6:33"},"nodeType":"YulFunctionCall","src":"24176:17:33"},"nodeType":"YulExpressionStatement","src":"24176:17:33"},{"nodeType":"YulVariableDeclaration","src":"24206:31:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24228:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"24232:4:33","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"24218:9:33"},"nodeType":"YulFunctionCall","src":"24218:19:33"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"24210:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24250:57:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24273:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24283:1:33","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"24290:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"24302:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24286:3:33"},"nodeType":"YulFunctionCall","src":"24286:19:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24279:3:33"},"nodeType":"YulFunctionCall","src":"24279:27:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24269:3:33"},"nodeType":"YulFunctionCall","src":"24269:38:33"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"24254:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24344:23:33","statements":[{"nodeType":"YulAssignment","src":"24346:19:33","value":{"name":"data","nodeType":"YulIdentifier","src":"24361:4:33"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"24346:11:33"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"24326:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"24338:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24323:2:33"},"nodeType":"YulFunctionCall","src":"24323:20:33"},"nodeType":"YulIf","src":"24320:47:33"},{"nodeType":"YulVariableDeclaration","src":"24380:41:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24394:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24404:1:33","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"24411:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24416:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24407:3:33"},"nodeType":"YulFunctionCall","src":"24407:12:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24400:3:33"},"nodeType":"YulFunctionCall","src":"24400:20:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24390:3:33"},"nodeType":"YulFunctionCall","src":"24390:31:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"24384:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24434:24:33","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"24447:11:33"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"24438:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24532:21:33","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24541:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"24548:2:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24534:6:33"},"nodeType":"YulFunctionCall","src":"24534:17:33"},"nodeType":"YulExpressionStatement","src":"24534:17:33"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24482:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24489:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24479:2:33"},"nodeType":"YulFunctionCall","src":"24479:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24493:26:33","statements":[{"nodeType":"YulAssignment","src":"24495:22:33","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"24508:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"24515:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24504:3:33"},"nodeType":"YulFunctionCall","src":"24504:13:33"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"24495:5:33"}]}]},"pre":{"nodeType":"YulBlock","src":"24475:3:33","statements":[]},"src":"24471:82:33"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"24121:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"24126:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24118:2:33"},"nodeType":"YulFunctionCall","src":"24118:11:33"},"nodeType":"YulIf","src":"24115:448:33"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"24077:5:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"24084:3:33","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"24089:10:33","type":""}],"src":"24025:544:33"},{"body":{"nodeType":"YulBlock","src":"24659:81:33","statements":[{"nodeType":"YulAssignment","src":"24669:65:33","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24684:4:33"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24702:1:33","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"24705:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24698:3:33"},"nodeType":"YulFunctionCall","src":"24698:11:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24715:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24711:3:33"},"nodeType":"YulFunctionCall","src":"24711:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24694:3:33"},"nodeType":"YulFunctionCall","src":"24694:24:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24690:3:33"},"nodeType":"YulFunctionCall","src":"24690:29:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24680:3:33"},"nodeType":"YulFunctionCall","src":"24680:40:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24726:1:33","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"24729:3:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24722:3:33"},"nodeType":"YulFunctionCall","src":"24722:11:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24677:2:33"},"nodeType":"YulFunctionCall","src":"24677:57:33"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"24669:4:33"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"24636:4:33","type":""},{"name":"len","nodeType":"YulTypedName","src":"24642:3:33","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"24650:4:33","type":""}],"src":"24574:166:33"},{"body":{"nodeType":"YulBlock","src":"24839:1254:33","statements":[{"nodeType":"YulVariableDeclaration","src":"24849:24:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24869:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24863:5:33"},"nodeType":"YulFunctionCall","src":"24863:10:33"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"24853:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24916:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24918:16:33"},"nodeType":"YulFunctionCall","src":"24918:18:33"},"nodeType":"YulExpressionStatement","src":"24918:18:33"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"24888:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24896:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24885:2:33"},"nodeType":"YulFunctionCall","src":"24885:30:33"},"nodeType":"YulIf","src":"24882:56:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24990:4:33"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25028:4:33"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"25022:5:33"},"nodeType":"YulFunctionCall","src":"25022:11:33"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"24996:25:33"},"nodeType":"YulFunctionCall","src":"24996:38:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"25036:6:33"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"24947:42:33"},"nodeType":"YulFunctionCall","src":"24947:96:33"},"nodeType":"YulExpressionStatement","src":"24947:96:33"},{"nodeType":"YulVariableDeclaration","src":"25052:18:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25069:1:33","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"25056:9:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25079:23:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25098:4:33","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"25083:11:33","type":""}]},{"nodeType":"YulAssignment","src":"25111:24:33","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25124:11:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25111:9:33"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"25181:655:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25195:35:33","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"25214:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25226:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25222:3:33"},"nodeType":"YulFunctionCall","src":"25222:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25210:3:33"},"nodeType":"YulFunctionCall","src":"25210:20:33"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"25199:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25243:48:33","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25286:4:33"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"25257:28:33"},"nodeType":"YulFunctionCall","src":"25257:34:33"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"25247:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25304:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25313:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"25308:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25391:172:33","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25416:6:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25434:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25439:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25430:3:33"},"nodeType":"YulFunctionCall","src":"25430:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25424:5:33"},"nodeType":"YulFunctionCall","src":"25424:26:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25409:6:33"},"nodeType":"YulFunctionCall","src":"25409:42:33"},"nodeType":"YulExpressionStatement","src":"25409:42:33"},{"nodeType":"YulAssignment","src":"25468:24:33","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25482:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25490:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25478:3:33"},"nodeType":"YulFunctionCall","src":"25478:14:33"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25468:6:33"}]},{"nodeType":"YulAssignment","src":"25509:40:33","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25526:9:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25537:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25522:3:33"},"nodeType":"YulFunctionCall","src":"25522:27:33"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"25509:9:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25338:1:33"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"25341:7:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25335:2:33"},"nodeType":"YulFunctionCall","src":"25335:14:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25350:28:33","statements":[{"nodeType":"YulAssignment","src":"25352:24:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25361:1:33"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"25364:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25357:3:33"},"nodeType":"YulFunctionCall","src":"25357:19:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"25352:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"25331:3:33","statements":[]},"src":"25327:236:33"},{"body":{"nodeType":"YulBlock","src":"25611:166:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25629:43:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25656:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25661:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25652:3:33"},"nodeType":"YulFunctionCall","src":"25652:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25646:5:33"},"nodeType":"YulFunctionCall","src":"25646:26:33"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"25633:9:33","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"25696:6:33"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"25708:9:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25735:1:33","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"25738:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25731:3:33"},"nodeType":"YulFunctionCall","src":"25731:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"25747:3:33","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25727:3:33"},"nodeType":"YulFunctionCall","src":"25727:24:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25757:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25753:3:33"},"nodeType":"YulFunctionCall","src":"25753:6:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25723:3:33"},"nodeType":"YulFunctionCall","src":"25723:37:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25719:3:33"},"nodeType":"YulFunctionCall","src":"25719:42:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25704:3:33"},"nodeType":"YulFunctionCall","src":"25704:58:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25689:6:33"},"nodeType":"YulFunctionCall","src":"25689:74:33"},"nodeType":"YulExpressionStatement","src":"25689:74:33"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"25582:7:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"25591:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25579:2:33"},"nodeType":"YulFunctionCall","src":"25579:19:33"},"nodeType":"YulIf","src":"25576:201:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25797:4:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25811:1:33","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"25814:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25807:3:33"},"nodeType":"YulFunctionCall","src":"25807:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"25823:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25803:3:33"},"nodeType":"YulFunctionCall","src":"25803:22:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25790:6:33"},"nodeType":"YulFunctionCall","src":"25790:36:33"},"nodeType":"YulExpressionStatement","src":"25790:36:33"}]},"nodeType":"YulCase","src":"25174:662:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25179:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"25853:234:33","statements":[{"nodeType":"YulVariableDeclaration","src":"25867:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25880:1:33","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"25871:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25916:67:33","statements":[{"nodeType":"YulAssignment","src":"25934:35:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25953:3:33"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"25958:9:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25949:3:33"},"nodeType":"YulFunctionCall","src":"25949:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25943:5:33"},"nodeType":"YulFunctionCall","src":"25943:26:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25934:5:33"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"25897:6:33"},"nodeType":"YulIf","src":"25894:89:33"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26003:4:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26062:5:33"},{"name":"newLen","nodeType":"YulIdentifier","src":"26069:6:33"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"26009:52:33"},"nodeType":"YulFunctionCall","src":"26009:67:33"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25996:6:33"},"nodeType":"YulFunctionCall","src":"25996:81:33"},"nodeType":"YulExpressionStatement","src":"25996:81:33"}]},"nodeType":"YulCase","src":"25845:242:33","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"25154:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25162:2:33","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25151:2:33"},"nodeType":"YulFunctionCall","src":"25151:14:33"},"nodeType":"YulSwitch","src":"25144:943:33"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"24824:4:33","type":""},{"name":"src","nodeType":"YulTypedName","src":"24830:3:33","type":""}],"src":"24745:1348:33"},{"body":{"nodeType":"YulBlock","src":"26239:157:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26256:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26281:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26274:6:33"},"nodeType":"YulFunctionCall","src":"26274:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26267:6:33"},"nodeType":"YulFunctionCall","src":"26267:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26249:6:33"},"nodeType":"YulFunctionCall","src":"26249:41:33"},"nodeType":"YulExpressionStatement","src":"26249:41:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26310:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26321:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26306:3:33"},"nodeType":"YulFunctionCall","src":"26306:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"26326:2:33","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26299:6:33"},"nodeType":"YulFunctionCall","src":"26299:30:33"},"nodeType":"YulExpressionStatement","src":"26299:30:33"},{"nodeType":"YulAssignment","src":"26338:52:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26363:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26375:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"26386:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26371:3:33"},"nodeType":"YulFunctionCall","src":"26371:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"26346:16:33"},"nodeType":"YulFunctionCall","src":"26346:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26338:4:33"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26200:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26211:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26219:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26230:4:33","type":""}],"src":"26098:298:33"},{"body":{"nodeType":"YulBlock","src":"26574:236:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26591:3:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26600:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26612:3:33","type":"","value":"176"},{"kind":"number","nodeType":"YulLiteral","src":"26617:22:33","type":"","value":"0xffffffffffffffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26608:3:33"},"nodeType":"YulFunctionCall","src":"26608:32:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26596:3:33"},"nodeType":"YulFunctionCall","src":"26596:45:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26584:6:33"},"nodeType":"YulFunctionCall","src":"26584:58:33"},"nodeType":"YulExpressionStatement","src":"26584:58:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26662:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26667:2:33","type":"","value":"10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26658:3:33"},"nodeType":"YulFunctionCall","src":"26658:12:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26676:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26688:3:33","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"26693:5:33","type":"","value":"65535"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26684:3:33"},"nodeType":"YulFunctionCall","src":"26684:15:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26672:3:33"},"nodeType":"YulFunctionCall","src":"26672:28:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26651:6:33"},"nodeType":"YulFunctionCall","src":"26651:50:33"},"nodeType":"YulExpressionStatement","src":"26651:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26721:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26726:2:33","type":"","value":"12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26717:3:33"},"nodeType":"YulFunctionCall","src":"26717:12:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26735:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26747:26:33","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26743:3:33"},"nodeType":"YulFunctionCall","src":"26743:31:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26731:3:33"},"nodeType":"YulFunctionCall","src":"26731:44:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26710:6:33"},"nodeType":"YulFunctionCall","src":"26710:66:33"},"nodeType":"YulExpressionStatement","src":"26710:66:33"},{"nodeType":"YulAssignment","src":"26785:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26796:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"26801:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26792:3:33"},"nodeType":"YulFunctionCall","src":"26792:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26785:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26534:3:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26539:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26547:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26555:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26566:3:33","type":""}],"src":"26401:409:33"},{"body":{"nodeType":"YulBlock","src":"26909:203:33","statements":[{"nodeType":"YulVariableDeclaration","src":"26919:26:33","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"26939:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26933:5:33"},"nodeType":"YulFunctionCall","src":"26933:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26923:6:33","type":""}]},{"nodeType":"YulAssignment","src":"26954:32:33","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"26973:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"26980:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26969:3:33"},"nodeType":"YulFunctionCall","src":"26969:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26963:5:33"},"nodeType":"YulFunctionCall","src":"26963:23:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26954:5:33"}]},{"body":{"nodeType":"YulBlock","src":"27023:83:33","statements":[{"nodeType":"YulAssignment","src":"27037:59:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27050:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27065:1:33","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27072:4:33","type":"","value":"0x20"},{"name":"length","nodeType":"YulIdentifier","src":"27078:6:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27068:3:33"},"nodeType":"YulFunctionCall","src":"27068:17:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"27061:3:33"},"nodeType":"YulFunctionCall","src":"27061:25:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27092:1:33","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27088:3:33"},"nodeType":"YulFunctionCall","src":"27088:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"27057:3:33"},"nodeType":"YulFunctionCall","src":"27057:38:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27046:3:33"},"nodeType":"YulFunctionCall","src":"27046:50:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27037:5:33"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27001:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"27009:4:33","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26998:2:33"},"nodeType":"YulFunctionCall","src":"26998:16:33"},"nodeType":"YulIf","src":"26995:111:33"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"26889:5:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26899:5:33","type":""}],"src":"26815:297:33"},{"body":{"nodeType":"YulBlock","src":"27264:141:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27281:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"27292:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27274:6:33"},"nodeType":"YulFunctionCall","src":"27274:25:33"},"nodeType":"YulExpressionStatement","src":"27274:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27319:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27330:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27315:3:33"},"nodeType":"YulFunctionCall","src":"27315:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"27335:2:33","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27308:6:33"},"nodeType":"YulFunctionCall","src":"27308:30:33"},"nodeType":"YulExpressionStatement","src":"27308:30:33"},{"nodeType":"YulAssignment","src":"27347:52:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27372:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27384:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27395:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27380:3:33"},"nodeType":"YulFunctionCall","src":"27380:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"27355:16:33"},"nodeType":"YulFunctionCall","src":"27355:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27347:4:33"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27225:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27236:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27244:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27255:4:33","type":""}],"src":"27117:288:33"},{"body":{"nodeType":"YulBlock","src":"27500:557:33","statements":[{"body":{"nodeType":"YulBlock","src":"27546:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27555:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27558:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27548:6:33"},"nodeType":"YulFunctionCall","src":"27548:12:33"},"nodeType":"YulExpressionStatement","src":"27548:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27521:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"27530:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27517:3:33"},"nodeType":"YulFunctionCall","src":"27517:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"27542:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27513:3:33"},"nodeType":"YulFunctionCall","src":"27513:32:33"},"nodeType":"YulIf","src":"27510:52:33"},{"nodeType":"YulVariableDeclaration","src":"27571:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27591:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27585:5:33"},"nodeType":"YulFunctionCall","src":"27585:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27575:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"27644:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27653:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27656:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27646:6:33"},"nodeType":"YulFunctionCall","src":"27646:12:33"},"nodeType":"YulExpressionStatement","src":"27646:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27616:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"27624:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27613:2:33"},"nodeType":"YulFunctionCall","src":"27613:30:33"},"nodeType":"YulIf","src":"27610:50:33"},{"nodeType":"YulVariableDeclaration","src":"27669:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27683:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"27694:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27679:3:33"},"nodeType":"YulFunctionCall","src":"27679:22:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"27673:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"27749:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27758:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27761:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27751:6:33"},"nodeType":"YulFunctionCall","src":"27751:12:33"},"nodeType":"YulExpressionStatement","src":"27751:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27728:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"27732:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27724:3:33"},"nodeType":"YulFunctionCall","src":"27724:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27739:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27720:3:33"},"nodeType":"YulFunctionCall","src":"27720:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27713:6:33"},"nodeType":"YulFunctionCall","src":"27713:35:33"},"nodeType":"YulIf","src":"27710:55:33"},{"nodeType":"YulVariableDeclaration","src":"27774:19:33","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27790:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27784:5:33"},"nodeType":"YulFunctionCall","src":"27784:9:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"27778:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27802:61:33","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"27859:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"27831:27:33"},"nodeType":"YulFunctionCall","src":"27831:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"27815:15:33"},"nodeType":"YulFunctionCall","src":"27815:48:33"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"27806:5:33","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"27879:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"27886:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27872:6:33"},"nodeType":"YulFunctionCall","src":"27872:17:33"},"nodeType":"YulExpressionStatement","src":"27872:17:33"},{"body":{"nodeType":"YulBlock","src":"27935:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27944:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27947:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27937:6:33"},"nodeType":"YulFunctionCall","src":"27937:12:33"},"nodeType":"YulExpressionStatement","src":"27937:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27912:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"27916:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27908:3:33"},"nodeType":"YulFunctionCall","src":"27908:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"27921:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27904:3:33"},"nodeType":"YulFunctionCall","src":"27904:20:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27926:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27901:2:33"},"nodeType":"YulFunctionCall","src":"27901:33:33"},"nodeType":"YulIf","src":"27898:53:33"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27999:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"28003:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27995:3:33"},"nodeType":"YulFunctionCall","src":"27995:11:33"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"28012:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"28019:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28008:3:33"},"nodeType":"YulFunctionCall","src":"28008:14:33"},{"name":"_2","nodeType":"YulIdentifier","src":"28024:2:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27960:34:33"},"nodeType":"YulFunctionCall","src":"27960:67:33"},"nodeType":"YulExpressionStatement","src":"27960:67:33"},{"nodeType":"YulAssignment","src":"28036:15:33","value":{"name":"array","nodeType":"YulIdentifier","src":"28046:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"28036:6:33"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27466:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27477:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27489:6:33","type":""}],"src":"27410:647:33"},{"body":{"nodeType":"YulBlock","src":"28111:79:33","statements":[{"nodeType":"YulAssignment","src":"28121:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28133:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"28136:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28129:3:33"},"nodeType":"YulFunctionCall","src":"28129:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"28121:4:33"}]},{"body":{"nodeType":"YulBlock","src":"28162:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28164:16:33"},"nodeType":"YulFunctionCall","src":"28164:18:33"},"nodeType":"YulExpressionStatement","src":"28164:18:33"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"28153:4:33"},{"name":"x","nodeType":"YulIdentifier","src":"28159:1:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28150:2:33"},"nodeType":"YulFunctionCall","src":"28150:11:33"},"nodeType":"YulIf","src":"28147:37:33"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28093:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"28096:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"28102:4:33","type":""}],"src":"28062:128:33"},{"body":{"nodeType":"YulBlock","src":"28227:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28244:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28251:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"28256:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28247:3:33"},"nodeType":"YulFunctionCall","src":"28247:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28237:6:33"},"nodeType":"YulFunctionCall","src":"28237:31:33"},"nodeType":"YulExpressionStatement","src":"28237:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28284:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28287:4:33","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28277:6:33"},"nodeType":"YulFunctionCall","src":"28277:15:33"},"nodeType":"YulExpressionStatement","src":"28277:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28308:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28311:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28301:6:33"},"nodeType":"YulFunctionCall","src":"28301:15:33"},"nodeType":"YulExpressionStatement","src":"28301:15:33"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"28195:127:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c__to_t_bytes_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 4)\n        mstore(add(headStart, 64), 0)\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_bytes32_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_bytes32_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes32t_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_bool(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bool_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_bool(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bool_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes32_dyn(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value3 := abi_decode_array_bool_dyn(add(headStart, offset_3), dataEnd)\n        let offset_4 := calldataload(add(headStart, 128))\n        if gt(offset_4, _1) { revert(0, 0) }\n        value4 := abi_decode_array_bytes_dyn(add(headStart, offset_4), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_bytes_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes32_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_bytes32_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_bool(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_bytes32_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address_t_uint256__to_t_bytes_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, and(shl(96, value2), not(0xffffffffffffffffffffffff)))\n        mstore(add(_1, 20), value3)\n        end := add(_1, 52)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_address_t_bytes32_t_address__to_t_address_t_bytes32_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__to_t_address_t_bytes32_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20(array) -> value\n    {\n        let length := mload(array)\n        let _1 := mload(add(array, 0x20))\n        let _2 := not(0xffffffffffffffffffffffff)\n        value := and(_1, _2)\n        if lt(length, 20)\n        {\n            value := and(and(_1, shl(shl(3, sub(20, length)), _2)), _2)\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_bool_t_bytes_memory_ptr__to_t_address_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__to_t_address_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_packed_t_bytes10_t_bytes2_t_bytes20__to_t_bytes10_t_bytes2_t_bytes20__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(value0, shl(176, 0xffffffffffffffffffff)))\n        mstore(add(pos, 10), and(value1, shl(240, 65535)))\n        mstore(add(pos, 12), and(value2, not(0xffffffffffffffffffffffff)))\n        end := add(pos, 32)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4635":[{"length":32,"start":1195},{"length":32,"start":2432}],"4637":[{"length":32,"start":1295},{"length":32,"start":2280}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E87632C GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xA3B261F2 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xDB8C9663 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDB8C9663 EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xF0292A03 EQ PUSH2 0x5E0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F5 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0xA3B261F2 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0xBE9F0E6F EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xD6C1407C EQ PUSH2 0x580 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x884BF67C GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x884BF67C EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x500 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x7E87632C EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0x86A10DDD EQ PUSH2 0x47C JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x54F6127F GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x434 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x49A6078D EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x511B6952 EQ PUSH2 0x3B4 JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x1D26FCE6 GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x1D26FCE6 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x217B2270 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x2A3654A4 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x35D JUMPI PUSH2 0x216 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x16E023B3 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2B9 JUMPI PUSH2 0x216 JUMP JUMPDEST CALLDATASIZE PUSH2 0x216 JUMPI CALLVALUE PUSH1 0x0 SUB PUSH2 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x30FA4A21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x60 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x241 JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP3 SWAP2 SWAP1 PUSH2 0x20BF JUMP JUMPDEST PUSH2 0x24B DUP4 DUP4 PUSH2 0x615 JUMP JUMPDEST DUP1 MLOAD SWAP4 POP PUSH1 0x20 ADD SWAP2 POP POP RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AC PUSH2 0x2A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2118 JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x283 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x752 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x22D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x325 PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x283 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x872 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH1 0x64 DUP2 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x2395 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x3CF CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0xA79 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AC PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x2336 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x24E2 JUMP JUMPDEST PUSH2 0xAC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0xBF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0xC18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x26B4 JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST PUSH2 0x385 PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xD1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x27B4 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x325 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x325 JUMP JUMPDEST PUSH2 0x385 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x280A JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0xF8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x2863 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x289B JUMP JUMPDEST PUSH2 0xFAE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x2918 JUMP JUMPDEST PUSH2 0x1079 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2951 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x29B8 JUMP JUMPDEST PUSH2 0x1170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CA PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x2556 JUMP JUMPDEST PUSH2 0x121A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x62E PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x1255 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x666 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 CALLDATALOAD AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP8 DUP8 CALLER CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x68B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x6A5 SWAP2 PUSH2 0x2A17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6FC JUMPI SWAP3 POP PUSH2 0x705 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH1 0x20 DUP4 ADD REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1D138B83 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x730 JUMPI POP PUSH2 0x730 DUP3 PUSH2 0x12D3 JUMP JUMPDEST DUP1 PUSH2 0x705 JUMPI POP PUSH2 0x705 DUP3 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x74B DUP4 DUP4 PUSH2 0x132F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x776 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C2 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7AD JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x832 JUMPI PUSH2 0x80D DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x800 JUMPI PUSH2 0x800 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x132F JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x81F JUMPI PUSH2 0x81F PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7C8 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x13DD JUMP JUMPDEST PUSH1 0x64 DUP2 PUSH1 0x2 SLOAD PUSH2 0x88E SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST GT ISZERO PUSH2 0x8AD JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 PUSH2 0x8B9 DUP5 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x8C3 SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST GT ISZERO PUSH2 0x8E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5B21DFD3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90C DUP2 PUSH32 0x0 PUSH2 0x2A72 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x92B JUMPI PUSH1 0x40 MLOAD PUSH4 0x20B5E0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x97B JUMPI PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH2 0x947 SWAP2 SWAP1 PUSH2 0x2A5F JUMP JUMPDEST SWAP1 POP PUSH2 0x968 DUP5 DUP3 PUSH1 0x0 SHL PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x141A JUMP JUMPDEST POP DUP1 PUSH2 0x973 DUP2 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x92E JUMP JUMPDEST POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9E9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9EE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x2D6F147BCEF20580D606C930254442A27952B0CAEC97CAABA61B00B5DD67BBA9 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA62 DUP3 PUSH2 0x158A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x705 SWAP1 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xA83 CALLER DUP5 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0xAA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1294D2A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0xAB6 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x15CF JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x705 DUP3 PUSH2 0x17B1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAE2 JUMPI PUSH2 0xAE2 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB15 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB00 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x832 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0xB39 JUMPI PUSH2 0xB39 PUSH2 0x2A33 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB4B SWAP2 SWAP1 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB59 SWAP3 SWAP2 SWAP1 PUSH2 0x2AEF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB94 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xBCF JUMPI DUP1 MLOAD ISZERO PUSH2 0xBB3 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x234EB819 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBE2 JUMPI PUSH2 0xBE2 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x705 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH2 0xC20 PUSH2 0x185D JUMP JUMPDEST PUSH2 0xC2A PUSH1 0x0 PUSH2 0x1899 JUMP JUMPDEST JUMP JUMPDEST DUP5 MLOAD DUP5 MLOAD DUP2 EQ ISZERO DUP1 PUSH2 0xC3F JUMPI POP DUP4 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0xC4B JUMPI POP DUP3 MLOAD DUP2 EQ ISZERO JUMPDEST DUP1 PUSH2 0xC57 JUMPI POP DUP2 MLOAD DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x93A83119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD12 JUMPI PUSH2 0xD0A DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC95 JUMPI PUSH2 0xC95 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCAF JUMPI PUSH2 0xCAF PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCC9 JUMPI PUSH2 0xCC9 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCE3 JUMPI PUSH2 0xCE3 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCFD JUMPI PUSH2 0xCFD PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xC78 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD23 PUSH2 0x185D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1907 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5B DUP4 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xD9E JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE CALLER PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xDC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xDF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xE0F SWAP1 DUP7 PUSH2 0x1951 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xE41 JUMPI PUSH1 0x40 MLOAD PUSH4 0x14EC4D6D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x1B1B58AA2EC0CEC2228B2D37124556D41F5A1F7B12F089171F896CC236671215 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE85 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP6 PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEA7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xEC2 DUP7 DUP3 PUSH2 0x1966 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x185D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xF13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xF85 JUMPI PUSH2 0xF7D DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF56 JUMPI PUSH2 0xF56 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF38 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0x705 SWAP1 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xFB6 PUSH2 0x185D JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ ISZERO DUP1 PUSH2 0xFC9 JUMPI POP DUP1 MLOAD DUP3 MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1009 JUMPI PUSH1 0x40 MLOAD PUSH4 0x80C98305 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1073 JUMPI PUSH2 0x106B DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x102A JUMPI PUSH2 0x102A PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1044 JUMPI PUSH2 0x1044 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x105E JUMPI PUSH2 0x105E PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1991 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x100C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x185D JUMP JUMPDEST PUSH2 0xF85 DUP4 DUP4 DUP4 PUSH2 0x1991 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1097 DUP5 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x10EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ PUSH2 0x10EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x760B5ACD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1143 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1150 DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x19F3 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP2 DUP6 PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEA7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AFF JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x118B JUMPI PUSH2 0x118B PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11BE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x11A9 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1214 JUMPI PUSH2 0x11EF DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11E2 JUMPI PUSH2 0x11E2 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x17B1 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1201 JUMPI PUSH2 0x1201 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x11C4 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1222 PUSH2 0x185D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1249 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1252 DUP2 PUSH2 0x1899 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x127A PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND PUSH2 0x1A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1287 DUP3 PUSH2 0x17B1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x14 EQ ISZERO DUP1 ISZERO PUSH2 0x129B JUMPI POP DUP1 MLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x12BB JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH2 0x12C4 DUP2 PUSH2 0x2B38 JUMP JUMPDEST PUSH1 0x60 SHR SWAP6 PUSH1 0x1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA918FA6B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x705 JUMPI POP PUSH2 0x705 DUP3 PUSH2 0x1AE7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x130B PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x1255 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1325 JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x74B DUP2 DUP5 PUSH2 0x1B1C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1357 SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1383 SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13E8 DUP3 PUSH2 0x839 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x74B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x74B SWAP1 DUP5 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1441 JUMPI PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SLOAD PUSH2 0x14C2 SWAP1 PUSH2 0x2A89 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x14E8 SWAP1 DUP5 PUSH2 0x1BC8 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP6 SWAP3 SWAP1 PUSH32 0xB333C813A7426A7A11E2B190CAD52C44119421594B47F6F32ACE6D8C7207B2BF SWAP1 PUSH2 0x154A SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x2BA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER PUSH1 0x0 DUP7 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x156E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xAB6 DUP6 DUP5 DUP4 PUSH2 0x1BD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1252 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x74B DUP4 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA DUP5 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1628 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP8 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x164F JUMPI PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x165A DUP6 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x16A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5A9C31D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x16B2 DUP8 DUP7 PUSH2 0x1D37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x16D4 SWAP1 DUP7 PUSH2 0x1D8F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x16F7 SWAP1 DUP7 PUSH2 0x1BC8 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP3 SWAP2 DUP11 AND SWAP1 PUSH32 0xB333C813A7426A7A11E2B190CAD52C44119421594B47F6F32ACE6D8C7207B2BF SWAP1 PUSH2 0x175E SWAP1 CALLER SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH2 0x2BA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 CALLER DUP9 DUP9 DUP9 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1781 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x179C DUP9 DUP3 PUSH2 0x1D9B JUMP JUMPDEST PUSH2 0x17A7 DUP8 DUP7 DUP4 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x17CE SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17FA SWAP1 PUSH2 0x2B6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1847 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x181C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1847 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x182A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x705 DUP3 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH2 0x1870 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC2A JUMPI PUSH1 0x40 MLOAD PUSH4 0xBF1169C5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH32 0x98A16C9E50E3E99B3E797305C146898D294E5AEC55A47E213CB3611CCF17E73 DUP3 ADD PUSH2 0x1947 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1B324005 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1DD0 JUMP JUMPDEST PUSH2 0xD4C DUP3 PUSH32 0x8A1C15A8799F71B547E08E2BCB2E85257E81B0A07EEE2CE6712549EEF1F00970 DUP4 PUSH2 0x1E1F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x19B4 DUP3 DUP3 PUSH2 0x2C59 JUMP JUMPDEST POP DUP2 DUP4 PUSH32 0xA6E4251F855F750545FE414F120DB91C76B88DEF14D120969E5BB2D3F05DEBBB DUP4 PUSH1 0x40 MLOAD PUSH2 0x19E6 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x1A0B SWAP1 DUP8 PUSH2 0x1E6C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x1F4 JUMP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC78CD419D6136F9F1C1C6AEC1D3FAE098CFFAF8BC86314A8F2685E32FE574E3C DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1A83 SWAP3 SWAP2 SWAP1 PUSH2 0x2D18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP5 AND PUSH1 0x2C DUP4 ADD MSTORE SWAP2 DUP3 SWAP2 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x1ADF SWAP1 PUSH2 0x2D33 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x705 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x705 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 DUP11 PUSH2 0x7530 STATICCALL SWAP3 POP RETURNDATASIZE SWAP2 POP PUSH1 0x0 MLOAD SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x1B8F JUMPI POP PUSH1 0x20 DUP3 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x74B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x1DD0 JUMP JUMPDEST PUSH2 0x1BE5 DUP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x1B1C JUMP JUMPDEST ISZERO PUSH2 0x1C7F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x1C38 SWAP1 PUSH32 0xB084A55EBF70FD3C06FD755269DAC2212C4D3F0F4D09079780BFA50C1B2984D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1073 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2D70 JUMP JUMPDEST DUP2 PUSH2 0xF85 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x1CB8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4349776D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3173137 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1847 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1D18 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x1D4F DUP3 PUSH2 0x1853 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEC2 JUMPI PUSH2 0x1D68 DUP5 PUSH1 0x0 PUSH2 0x1E81 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D87 DUP3 DUP8 DUP8 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x19F3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0xD4C DUP3 PUSH32 0xB23EAE7E6D1564B295B4C3E3BE402D9A2F0776C57BDF365903496F6FA481AB00 DUP4 PUSH2 0x1E1F JUMP JUMPDEST PUSH2 0xD4C DUP3 DUP3 PUSH2 0x1F80 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1E17 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x705 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x705 JUMP JUMPDEST PUSH2 0x1E39 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH2 0x1B1C JUMP JUMPDEST ISZERO PUSH2 0xF85 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6BB56A14 SWAP1 PUSH2 0x1C38 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1E8D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74B DUP4 DUP4 PUSH2 0x2095 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1F76 JUMPI PUSH1 0x0 PUSH2 0x1EB1 PUSH1 0x1 DUP4 PUSH2 0x2DDD JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1EC5 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0x1F2A JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1EE5 JUMPI PUSH2 0x1EE5 PUSH2 0x2A33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1F08 JUMPI PUSH2 0x1F08 PUSH2 0x2A33 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1F3B JUMPI PUSH2 0x1F3B PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x705 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x705 JUMP JUMPDEST PUSH32 0x2145E1D6D074577DC71EF54C3807742B41B053A9352AE6B491331509ACB9750F DUP3 ADD PUSH2 0x1FC0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xD0F59754F88971FE6BC5A6618CC9D5F1E859C58D16B22D1C7B2D3E2B246CD8AA DUP3 ADD PUSH2 0x2000 JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1FD9E056A24D14C4ABC642FCC325992A946906D0DBC57DD70278AAF12842024D DUP3 ADD PUSH2 0x2040 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2058 DUP3 DUP3 PUSH2 0x2C59 JUMP JUMPDEST POP DUP2 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2089 SWAP2 SWAP1 PUSH2 0x218A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x20AC JUMPI PUSH2 0x20AC PUSH2 0x2A33 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x74B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2155 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x213D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2176 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x74B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x21DB JUMPI PUSH2 0x21DB PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x21FC JUMPI PUSH2 0x21FC PUSH2 0x219D JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x222C PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST PUSH2 0x21B3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x224B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x224F JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x229B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22A7 DUP7 DUP4 DUP8 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x22BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2329 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2317 DUP6 DUP4 MLOAD PUSH2 0x215E JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x22FB JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x237E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2387 DUP4 PUSH2 0x234F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23D6 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23B1 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x240B JUMPI PUSH2 0x240B PUSH2 0x219D JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x242A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2438 PUSH2 0x2227 DUP3 PUSH2 0x23F2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x248B DUP7 PUSH2 0x234F JUMP JUMPDEST SWAP5 POP PUSH2 0x2499 PUSH1 0x20 DUP8 ADD PUSH2 0x234F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x24AE PUSH1 0x60 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24D5 DUP9 DUP3 DUP10 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x250C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x252F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74B DUP3 PUSH2 0x234F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2592 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI PUSH2 0x25C6 DUP2 PUSH2 0x234F JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x25B5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x25F4 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI PUSH2 0x2628 DUP2 PUSH2 0x23E2 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2617 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2656 PUSH2 0x2227 DUP4 PUSH2 0x21E3 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2266 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2698 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x26A6 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2419 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2679 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x26CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x26E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26EF DUP10 DUP4 DUP11 ADD PUSH2 0x2571 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2711 DUP10 DUP4 DUP11 ADD PUSH2 0x2571 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2733 DUP10 DUP4 DUP11 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2755 DUP10 DUP4 DUP11 ADD PUSH2 0x25D3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x276B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D5 DUP9 DUP3 DUP10 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x278B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x27C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27D2 DUP5 PUSH2 0x234F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2800 DUP7 DUP3 DUP8 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x281D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2840 DUP7 DUP4 DUP8 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22CA DUP6 DUP3 DUP7 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23D6 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x287F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x28C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28D3 DUP8 DUP4 DUP9 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F5 DUP8 DUP4 DUP9 ADD PUSH2 0x2206 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x290B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2800 DUP7 DUP3 DUP8 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x292D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2970 DUP6 PUSH2 0x234F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x2985 PUSH1 0x40 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29AC DUP8 DUP3 DUP9 ADD PUSH2 0x2419 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ADF DUP5 DUP3 DUP6 ADD PUSH2 0x2206 JUMP JUMPDEST DUP4 DUP6 DUP3 CALLDATACOPY PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2A29 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x213A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2A9B JUMPI PUSH2 0x2A9B PUSH2 0x2A49 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2AE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2B2E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x2B67 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2B83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1214 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2BCF SWAP1 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B9B SWAP1 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF85 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2C3A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEC2 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2C46 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2C72 JUMPI PUSH2 0x2C72 PUSH2 0x219D JUMP JUMPDEST PUSH2 0x2C86 DUP2 PUSH2 0x2C80 DUP5 SLOAD PUSH2 0x2B6F JUMP JUMPDEST DUP5 PUSH2 0x2C13 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2CBB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2CA3 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEC2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2CEA JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2CCB JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2D08 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ADF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1214 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ADF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x215E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2DA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x2DB7 PUSH2 0x2227 DUP3 PUSH2 0x23F2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x2DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BCF DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x213A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x705 JUMPI PUSH2 0x705 PUSH2 0x2A49 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x99B3EE96A2D42B PUSH15 0xD9D4502AEBE41A8A79C1684969AFE0 0xBA 0x5E SWAP1 0xBE 0xA5 0x4F SELFDESTRUCT 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"570:1428:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5593:9:24;5606:1;5593:14;5589:90;;5630:38;;-1:-1:-1;;;5630:38:24;;;;;;215:2:33;197:21;;;254:1;234:18;;;227:29;-1:-1:-1;287:2:33;272:18;;265:29;326:2;311:18;;14:321;5630:38:24;;;;;;;;5589:90;5696:34;;-1:-1:-1;;;5696:34:24;;;;;;;;;;;570:1428:31;;;5160:12:24;5206:1;5188:19;;5184:90;;;5254:8;;5230:33;;-1:-1:-1;;;5230:33:24;;;;;;;;;:::i;5184:90::-;5290:34;5315:8;;5290:24;:34::i;:::-;570:1428:31;;;-1:-1:-1;570:1428:31;;;-1:-1:-1;;570:1428:31;8832:388:24;;;;;;;;;;-1:-1:-1;8832:388:24;;;;;:::i;:::-;;:::i;:::-;;;1189:14:33;;1182:22;1164:41;;1152:2;1137:18;8832:388:24;;;;;;;;3635:205:25;;;;;;;;;;-1:-1:-1;3635:205:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2553:109::-;;;;;;;;;;-1:-1:-1;2640:15:25;;2553:109;;;2367:25:33;;;2355:2;2340:18;2553:109:25;2221:177:33;3911:637:25;;;;;;;;;;-1:-1:-1;3911:637:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2993:290::-;;;;;;;;;;-1:-1:-1;2993:290:25;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;5424:32:33;;;5406:51;;5394:2;5379:18;2993:290:25;5260:203:33;9406:185:25;;;;;;;;;;-1:-1:-1;9406:185:25;;;;;:::i;:::-;;:::i;609:40:31:-;;;;;;;;;;;;646:3;609:40;;1138:656;;;;;;:::i;:::-;;:::i;:::-;;9662:197:25;;;;;;;;;;-1:-1:-1;9662:197:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10352:349::-;;;;;;;;;;-1:-1:-1;10352:349:25;;;;;:::i;:::-;;:::i;1197:156:1:-;;;;;;;;;;-1:-1:-1;1197:156:1;;;;;:::i;:::-;;:::i;5856:1081:25:-;;;;;;;;;;-1:-1:-1;5856:1081:25;;;;;:::i;:::-;;:::i;2765:157::-;;;;;;;;;;-1:-1:-1;2765:157:25;;;;;:::i;:::-;;:::i;1313:92:3:-;;;;;;;;;;;;;:::i;10772:683:25:-;;;;;;;;;;-1:-1:-1;10772:683:25;;;;;:::i;:::-;;:::i;2326:232:1:-;;;;;;:::i;:::-;;:::i;7043:1062:25:-;;;;;;;;;;-1:-1:-1;7043:1062:25;;;;;:::i;:::-;;:::i;1800:101:31:-;;;;;;;;;;-1:-1:-1;1883:11:31;1800:101;;736:85:3;;;;;;;;;;-1:-1:-1;782:7:3;808:6;-1:-1:-1;;;;;808:6:3;736:85;;3076:763:1;;;;;;:::i;:::-;;:::i;1907:89:31:-;;;;;;;;;;-1:-1:-1;1982:7:31;1907:89;;3354:167:25;;;;;;;;;;-1:-1:-1;3354:167:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4903:730::-;;;;;;;;;;-1:-1:-1;4903:730:25;;;;;:::i;:::-;;:::i;4619:213::-;;;;;;;;;;-1:-1:-1;4619:213:25;;;;;:::i;:::-;;:::i;8176:1159::-;;;;;;;;;;-1:-1:-1;8176:1159:25;;;;;:::i;:::-;;:::i;1403:458:1:-;;;;;;;;;;-1:-1:-1;1403:458:1;;;;;:::i;:::-;;:::i;655:36:31:-;;;;;;;;;;;;690:1;655:36;;1554:211:3;;;;;;;;;;-1:-1:-1;1554:211:3;;;;;:::i;:::-;;:::i;6732:1031:24:-;6840:12;6908:17;6931:37;6960:7;;-1:-1:-1;;;;;;6960:7:24;6931:28;:37::i;:::-;-1:-1:-1;6907:61:24;-1:-1:-1;;;;;;7028:23:24;;7024:92;;7072:44;;-1:-1:-1;;;7072:44:24;;-1:-1:-1;;;;;;7108:7:24;;;7072:44;;;17026:52:33;16999:18;;7072:44:24;16882:202:33;7024:92:24;7128:12;7142:19;7165:9;-1:-1:-1;;;;;7165:14:24;7187:9;7228:8;;7238:10;7250:9;7211:49;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7211:49:24;;;;;;;;;;7165:105;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7127:143;;;;7285:7;7281:476;;;7315:6;-1:-1:-1;7308:13:24;;-1:-1:-1;;7308:13:24;7281:476;7669:6;7663:13;7717:15;7712:2;7704:6;7700:15;7693:40;6732:1031;;;;;:::o;8832:388::-;9010:4;-1:-1:-1;;;;;;9049:32:24;;-1:-1:-1;;;9049:32:24;;:84;;;9097:36;9121:11;9097:23;:36::i;:::-;9049:164;;;;9149:64;9201:11;9149:51;:64::i;3635:205:25:-;3756:22;3797:36;3816:7;3825;3797:18;:36::i;:::-;3790:43;3635:205;-1:-1:-1;;;3635:205:25:o;3911:637::-;4058:25;4118:8;:15;4099:8;:15;:34;4095:104;;4156:32;;-1:-1:-1;;;4156:32:25;;;;;;;;;;;4095:104;4234:8;:15;-1:-1:-1;;;;;4222:28:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4209:41;;4266:9;4261:253;4281:8;:15;4277:1;:19;4261:253;;;4330:44;4349:8;4358:1;4349:11;;;;;;;;:::i;:::-;;;;;;;4362:8;4371:1;4362:11;;;;;;;;:::i;:::-;;;;;;;4330:18;:44::i;:::-;4314:10;4325:1;4314:13;;;;;;;;:::i;:::-;;;;;;;;;;:60;4486:3;;4261:253;;;;3911:637;;;;:::o;2993:290::-;3084:7;3124:21;;;:12;:21;;;;;;-1:-1:-1;;;;;3124:21:25;;3156:93;;3207:31;;-1:-1:-1;;;3207:31:25;;;;;2367:25:33;;;2340:18;;3207:31:25;2221:177:33;9406:185:25;9524:4;9547:37;9566:8;9576:7;9547:18;:37::i;1138:656:31:-;646:3;1259:7;1241:15;;:25;;;;:::i;:::-;:38;1238:69;;;1288:19;;-1:-1:-1;;;1288:19:31;;;;;;;;;;;1238:69;690:1;1344:7;1320:21;1330:10;1320:9;:21::i;:::-;:31;;;;:::i;:::-;:42;1317:73;;;1371:19;;-1:-1:-1;;;1371:19:31;;;;;;;;;;;1317:73;1416:17;1426:7;1416;:17;:::i;:::-;1403:9;:30;1400:60;;1442:18;;-1:-1:-1;;;1442:18:31;;;;;;;;;;;1400:60;1475:9;1471:155;1490:7;1486:1;:11;1471:155;;;1518:15;1536;;1554:1;1536:19;;;;:::i;:::-;1518:37;;1569:46;1575:10;1595:7;1587:16;;1605:5;1569:46;;;;;;;;;;;;:5;:46::i;:::-;-1:-1:-1;1499:3:31;;;;:::i;:::-;;;;1471:155;;;;1637:12;1654:11;-1:-1:-1;;;;;1654:16:31;1678:9;1654:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1636:56;;;1706:7;1702:36;;1722:16;;-1:-1:-1;;;1722:16:31;;;;;;;;;;;1702:36;1754:33;;;-1:-1:-1;;;;;19101:32:33;;19083:51;;19165:2;19150:18;;19143:34;;;1754:33:31;;19056:18:33;1754:33:31;;;;;;;1228:566;1138:656;;:::o;9662:197:25:-;9755:16;9783:23;9798:7;9783:14;:23::i;:::-;9824:19;;;;:10;:19;;;;;:28;;:26;:28::i;10352:349::-;10529:39;10548:10;10560:7;10529:18;:39::i;:::-;10524:119;;10591:41;;-1:-1:-1;;;10591:41:25;;;;;19362:25:33;;;10621:10:25;19403:18:33;;;19396:60;19335:18;;10591:41:25;19188:274:33;10524:119:25;10653:41;10663:4;10669:2;10673:7;10682:5;10689:4;10653:9;:41::i;:::-;10352:349;;;;;:::o;1197:156:1:-;1283:22;1329:17;1338:7;1329:8;:17::i;5856:1081:25:-;5946:22;6002:4;-1:-1:-1;;;;;5990:24:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5980:34;;6029:9;6024:907;6040:15;;;6024:907;;;6074:12;;6119:4;6155;;6160:1;6155:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;6111:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6073:103;;;;6196:7;6191:636;;6297:13;;:18;6293:520;;6612:6;6606:13;6668:15;6659:6;6655:2;6651:15;6644:40;6293:520;6759:35;;-1:-1:-1;;;6759:35:25;;;;;2367:25:33;;;2340:18;;6759:35:25;2221:177:33;6293:520:25;6854:6;6841:7;6849:1;6841:10;;;;;;;;:::i;:::-;;;;;;;;;;:19;-1:-1:-1;;6903:3:25;;6024:907;;2765:157;-1:-1:-1;;;;;2882:24:25;;2856:7;2882:24;;;:12;:24;;;;;:33;;:31;:33::i;1313:92:3:-;940:13;:11;:13::i;:::-;1377:21:::1;1395:1;1377:9;:21::i;:::-;1313:92::o:0;10772:683:25:-;11008:11;;11060:9;;11046:23;;;;:67;;;11099:7;:14;11085:10;:28;;11046:67;:109;;;;11143:5;:12;11129:10;:26;;11046:109;:150;;;;11185:4;:11;11171:10;:25;;11046:150;11029:236;;;11228:26;;-1:-1:-1;;;11228:26:25;;;;;;;;;;;11029:236;11280:9;11275:174;11295:10;11291:1;:14;11275:174;;;11323:55;11332:4;11337:1;11332:7;;;;;;;;:::i;:::-;;;;;;;11341:2;11344:1;11341:5;;;;;;;;:::i;:::-;;;;;;;11348:7;11356:1;11348:10;;;;;;;;:::i;:::-;;;;;;;11360:5;11366:1;11360:8;;;;;;;;:::i;:::-;;;;;;;11370:4;11375:1;11370:7;;;;;;;;:::i;:::-;;;;;;;11323:8;:55::i;:::-;11421:3;;11275:174;;;;10977:478;10772:683;;;;;:::o;2326:232:1:-;940:13:3;:11;:13::i;:::-;2462:9:1::1;:14:::0;2458:55:::1;;2485:28;;-1:-1:-1::0;;;2485:28:1::1;;;;;;;;;;;2458:55;2523:28;2532:7;2541:9;2523:8;:28::i;:::-;2326:232:::0;;:::o;7043:1062:25:-;7208:18;7229:21;7242:7;7229:12;:21::i;:::-;7208:42;-1:-1:-1;;;;;;7265:24:25;;7279:10;7265:24;7261:112;;7312:50;;-1:-1:-1;;;7312:50:25;;-1:-1:-1;;;;;20527:15:33;;7312:50:25;;;20509:34:33;20559:18;;;20552:34;;;7351:10:25;20602:18:33;;;20595:43;20444:18;;7312:50:25;20269:375:33;7261:112:25;-1:-1:-1;;;;;7387:22:25;;7383:96;;7432:36;;-1:-1:-1;;;7432:36:25;;;;;;;;;;;7383:96;7507:8;-1:-1:-1;;;;;7493:22:25;:10;-1:-1:-1;;;;;7493:22:25;;7489:92;;7538:32;;-1:-1:-1;;;7538:32:25;;;;;;;;;;;7489:92;7591:12;7606:19;;;:10;:19;;;;;:33;;7630:8;7606:23;:33::i;:::-;7591:48;;7654:7;7649:69;;7670:48;;-1:-1:-1;;;7670:48:25;;-1:-1:-1;;;;;19101:32:33;;7670:48:25;;;19083:51:33;19150:18;;;19143:34;;;19056:18;;7670:48:25;18909:274:33;7649:69:25;7822:7;7798:10;-1:-1:-1;;;;;7734:143:25;7776:8;-1:-1:-1;;;;;7734:143:25;;7843:24;7734:143;;;;;;:::i;:::-;;;;;;;;7888:21;7936:10;7960:7;7981:4;8013:24;7912:135;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7888:159;;8058:40;8079:8;8089;8058:20;:40::i;:::-;7198:907;;;7043:1062;;;:::o;3076:763:1:-;940:13:3;:11;:13::i;:::-;3314:9:1::1;:14:::0;3310:55:::1;;3337:28;;-1:-1:-1::0;;;3337:28:1::1;;;;;;;;;;;3310:55;3399:10;:17;3380:8;:15;:36;3376:112;;3439:38;;-1:-1:-1::0;;;3439:38:1::1;;;;;;;;;;;3376:112;3502:8;:15;3521:1;3502:20:::0;3498:92:::1;;3545:34;;-1:-1:-1::0;;;3545:34:1::1;;;;;;;;;;;3498:92;3605:9;3600:233;3624:8;:15;3620:1;:19;3600:233;;;3657:36;3666:8;3675:1;3666:11;;;;;;;;:::i;:::-;;;;;;;3679:10;3690:1;3679:13;;;;;;;;:::i;:::-;;;;;;;3657:8;:36::i;:::-;3805:3;;3600:233;;;;3076:763:::0;;:::o;3354:167:25:-;-1:-1:-1;;;;;3481:24:25;;;;;;:12;:24;;;;;3446:16;;3481:33;;:31;:33::i;4903:730::-;940:13:3;:11;:13::i;:::-;5127:8:25::1;:15;5108:8;:15;:34;;:86;;;;5177:10;:17;5158:8;:15;:36;;5108:86;5091:178;;;5226:32;;-1:-1:-1::0;;;5226:32:25::1;;;;;;;;;;;5091:178;5283:8;:15;5302:1;5283:20:::0;5279:86:::1;;5326:28;;-1:-1:-1::0;;;5326:28:25::1;;;;;;;;;;;5279:86;5380:9;5375:252;5395:8;:15;5391:1;:19;5375:252;;;5428:59;5447:8;5456:1;5447:11;;;;;;;;:::i;:::-;;;;;;;5460:8;5469:1;5460:11;;;;;;;;:::i;:::-;;;;;;;5473:10;5484:1;5473:13;;;;;;;;:::i;:::-;;;;;;;5428:18;:59::i;:::-;5599:3;;5375:252;;;;4903:730:::0;;;:::o;4619:213::-;940:13:3;:11;:13::i;:::-;4778:47:25::1;4797:7;4806;4815:9;4778:18;:47::i;8176:1159::-:0;8359:18;8380:21;8393:7;8380:12;:21::i;:::-;8359:42;-1:-1:-1;8416:10:25;-1:-1:-1;;;;;8416:24:25;;;8412:264;;-1:-1:-1;;;;;8460:22:25;;8472:10;8460:22;8456:210;;8509:142;;-1:-1:-1;;;8509:142:25;;8562:10;8509:142;;;21641:34:33;-1:-1:-1;;;;;21711:15:33;;21691:18;;;21684:43;21743:18;;;21736:34;;;21576:18;;8509:142:25;21401:375:33;8456:210:25;-1:-1:-1;;;;;8690:22:25;;8686:96;;8735:36;;-1:-1:-1;;;8735:36:25;;;;;;;;;;;8686:96;8810:8;-1:-1:-1;;;;;8796:22:25;:10;-1:-1:-1;;;;;8796:22:25;;8792:92;;8841:32;;-1:-1:-1;;;8841:32:25;;;;;;;;;;;8792:92;8894:150;8923:8;8945:10;8969:7;8990:6;9010:24;8894:15;:150::i;:::-;9059:6;9055:274;;;9081:21;9133:10;9161:7;9186:5;9225:24;9105:158;;;;;;;;;;;:::i;1403:458:1:-;1504:25;1566:8;:15;-1:-1:-1;;;;;1554:28:1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1541:41;;1598:9;1593:234;1617:8;:15;1613:1;:19;1593:234;;;1666:21;1675:8;1684:1;1675:11;;;;;;;;:::i;:::-;;;;;;;1666:8;:21::i;:::-;1650:10;1661:1;1650:13;;;;;;;;:::i;:::-;;;;;;;;;;:37;1799:3;;1593:234;;;;1403:458;;;:::o;1554:211:3:-;940:13;:11;:13::i;:::-;-1:-1:-1;;;;;1638:22:3;::::1;1634:96;;1683:36;;-1:-1:-1::0;;;1683:36:3::1;;;;;;;;;;;1634:96;1739:19;1749:8;1739:9;:19::i;:::-;1554:211:::0;:::o;8032:751:24:-;8149:7;;;8287:105;-1:-1:-1;;;;;;;;;8287:105:24;;:28;:105::i;:::-;8254:138;;8481:29;8513:66;8547:22;8513:20;:66::i;:::-;8481:98;;8593:16;:23;8620:2;8593:29;;:61;;;;-1:-1:-1;8626:23:24;;:28;;8593:61;8589:127;;;8699:16;8675:41;;-1:-1:-1;;;8675:41:24;;;;;;;;:::i;8589:127::-;8743:25;8751:16;8743:25;:::i;:::-;8735:34;;;8771:4;;-1:-1:-1;8032:751:24;-1:-1:-1;;;;8032:751:24:o;998:237:15:-;1097:4;-1:-1:-1;;;;;;1132:44:15;;-1:-1:-1;;;1132:44:15;;:96;;;1192:36;1216:11;1192:23;:36::i;1658:457::-;1768:4;;1814:85;-1:-1:-1;;;1814:28:15;:85::i;:::-;-1:-1:-1;1784:115:15;-1:-1:-1;;;;;;1913:29:15;;1909:47;;-1:-1:-1;1951:5:15;;1658:457;-1:-1:-1;;1658:457:15:o;1909:47::-;1986:122;2050:15;2083:11;1986:46;:122::i;22152:194:25:-;22309:21;;;;:12;:21;;;;;;;;:30;;;;;;;;22302:37;;22267:23;;22309:30;22302:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22152:194;;;;:::o;10017:229::-;10131:4;10165:21;10178:7;10165:12;:21::i;:::-;-1:-1:-1;;;;;10155:31:25;:6;-1:-1:-1;;;;;10155:31:25;;:83;;;-1:-1:-1;10202:19:25;;;;:10;:19;;;;;:36;;10231:6;10202:28;:36::i;14970:1103::-;-1:-1:-1;;;;;15114:16:25;;15110:83;;15153:29;;-1:-1:-1;;;15153:29:25;;;;;;;;;;;15110:83;13625:4;13648:21;;;:12;:21;;;;;;-1:-1:-1;;;;;13648:21:25;:35;15257:87;;15300:33;;-1:-1:-1;;;15300:33:25;;;;;2367:25:33;;;2340:18;;15300:33:25;2221:177:33;15257:87:25;13625:4;13648:21;;;:12;:21;;;;;;-1:-1:-1;;;;;13648:21:25;:35;15502:87;;15545:33;;-1:-1:-1;;;15545:33:25;;;;;2367:25:33;;;2340:18;;15545:33:25;2221:177:33;15502:87:25;15631:15;;15629:17;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;15657:16:25;;;;;;:12;:16;;;;;:29;;15678:7;15657:20;:29::i;:::-;-1:-1:-1;15696:21:25;;;;:12;:21;;;;;;:26;;-1:-1:-1;;;;;;15696:26:25;-1:-1:-1;;;;;15696:26:25;;;;;;;;15738:58;;15696:21;;;15738:58;;;;15747:10;;15784:5;;15791:4;;15738:58;:::i;:::-;;;;;;;;15868:21;15916:10;15948:1;15964:2;15980:7;16001:4;15892:123;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15868:147;;16025:41;16046:2;16050:5;16057:8;16025:20;:41::i;13781:165::-;13625:4;13648:21;;;:12;:21;;;;;;-1:-1:-1;;;;;13648:21:25;13854:86;;13898:31;;-1:-1:-1;;;13898:31:25;;;;;2367:25:33;;;2340:18;;13898:31:25;2221:177:33;10270:300:29;10333:16;10361:22;10386:19;10394:3;10386:7;:19::i;19792:1291:25:-;19958:18;19979:21;19992:7;19979:12;:21::i;:::-;19958:42;;20028:4;-1:-1:-1;;;;;20014:18:25;:10;-1:-1:-1;;;;;20014:18:25;;20010:100;;20055:44;;-1:-1:-1;;;20055:44:25;;-1:-1:-1;;;;;20527:15:33;;;20055:44:25;;;20509:34:33;20559:18;;;20552:34;;;20622:15;;20602:18;;;20595:43;20444:18;;20055:44:25;20269:375:33;20010:100:25;-1:-1:-1;;;;;20124:16:25;;20120:83;;20163:29;;-1:-1:-1;;;20163:29:25;;;;;;;;;;;20120:83;20364:25;20392:21;20405:7;20392:12;:21::i;:::-;20364:49;;20441:17;-1:-1:-1;;;;;20427:31:25;:10;-1:-1:-1;;;;;20427:31:25;;20423:192;;20481:123;;-1:-1:-1;;;20481:123:25;;;;;23722:25:33;;;-1:-1:-1;;;;;23821:15:33;;;23801:18;;;23794:43;23873:15;;23853:18;;;23846:43;23695:18;;20481:123:25;23520:375:33;20423:192:25;20625:30;20641:4;20647:7;20625:15;:30::i;:::-;-1:-1:-1;;;;;20666:18:25;;;;;;:12;:18;;;;;:34;;20692:7;20666:25;:34::i;:::-;-1:-1:-1;;;;;;20710:16:25;;;;;;:12;:16;;;;;:29;;20731:7;20710:20;:29::i;:::-;-1:-1:-1;20749:21:25;;;;:12;:21;;;;;;;:26;;-1:-1:-1;;;;;;20749:26:25;-1:-1:-1;;;;;20749:26:25;;;;;;;;;20791:52;;20749:21;;:26;20791:52;;;;;;;20800:10;;20831:5;;20838:4;;20791:52;:::i;:::-;;;;;;;;20909:21;20944:10;20956:4;20962:2;20966:7;20975:4;20933:47;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20909:71;;20991:34;21010:4;21016:8;20991:18;:34::i;:::-;21035:41;21056:2;21060:5;21067:8;21035:20;:41::i;:::-;19948:1135;;;19792:1291;;;;;:::o;4335:143:1:-;4456:15;;;;:6;:15;;;;;4449:22;;4415;;4456:15;4449:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4335:143;;;:::o;6650:115:29:-;6713:7;6739:19;6747:3;4556:18;;4474:107;1838:156:3;1908:10;1897:7;782;808:6;-1:-1:-1;;;;;808:6:3;;736:85;1897:7;-1:-1:-1;;;;;1897:21:3;;1893:95;;1941:36;;-1:-1:-1;;;1941:36:3;;1966:10;1941:36;;;5406:51:33;5379:18;;1941:36:3;5260:203:33;2133:194:3;782:7;808:6;-1:-1:-1;;;;;2201:19:3;;;808:6;;2201:19;2197:124;;2262:6;;;2241:38;;-1:-1:-1;;;;;2241:38:3;;;;2262:6;;;2241:38;;;2293:6;:17;;-1:-1:-1;;;;;2293:17:3;;-1:-1:-1;;;;;;2293:17:3;;;;;;2133:194;:::o;9435:373:24:-;9640:35;;;9636:103;;9698:30;;-1:-1:-1;;;9698:30:24;;;;;;;;;;;9636:103;9748:53;9782:7;9791:9;9748:33;:53::i;8316:150:29:-;8386:4;8409:50;8414:3;-1:-1:-1;;;;;8434:23:29;;8409:4;:50::i;24201:254:25:-;24321:127;24368:8;1064:66:22;24430:8:25;24321:33;:127::i;21496:254::-;21639:21;;;;:12;:21;;;;;;;;:30;;;;;;;;:42;21672:9;21639:30;:42;:::i;:::-;;21724:7;21715;21696:47;21733:9;21696:47;;;;;;:::i;:::-;;;;;;;;21496:254;;;:::o;11553:510::-;11760:14;11777:19;;;:10;:19;;;;;:36;;11804:8;11777:26;:36::i;:::-;11760:53;;11828:9;11823:65;;11846:42;;-1:-1:-1;;;11846:42:25;;-1:-1:-1;;;;;19101:32:33;;11846:42:25;;;19083:51:33;19150:18;;;19143:34;;;19056:18;;11846:42:25;18909:274:33;11823:65:25;11979:7;11955:10;-1:-1:-1;;;;;11904:152:25;11933:8;-1:-1:-1;;;;;11904:152:25;;12000:8;12022:24;11904:152;;;;;;;:::i;:::-;;;;;;;;11750:313;11553:510;;;;;:::o;5197:300:16:-;5358:94;;;-1:-1:-1;;;;;;26596:45:33;;5358:94:16;;;26584:58:33;5311:7:16;26658:12:33;;;26651:50;;;-1:-1:-1;;;;;;26731:44:33;;26717:12;;;26710:66;5311:7:16;;;26792:12:33;5358:94:16;;;;;;;;;;;;5330:122;;5477:12;5469:21;;;:::i;:::-;5462:28;5197:300;-1:-1:-1;;;;5197:300:16:o;5268:245:1:-;5384:4;-1:-1:-1;;;;;;5419:35:1;;-1:-1:-1;;;5419:35:1;;:87;;-1:-1:-1;;;;;;;;;;861:40:26;;;5470:36:1;762:146:26;4397:632:27;4568:56;;-1:-1:-1;;;;;;17044:33:33;;4568:56:27;;;17026:52:33;4499:4:27;;;;16999:18:33;;4568:56:27;;;-1:-1:-1;;4568:56:27;;;;;;;;;;;;;;;-1:-1:-1;;;;;4568:56:27;-1:-1:-1;;;4568:56:27;;;4832:20;;4568:56;;-1:-1:-1;;;;;;;4568:56:27;;-1:-1:-1;;4797:7:27;4790:5;4779:86;4768:97;;4892:16;4878:30;;4942:4;4936:11;4921:26;;4974:7;:29;;;;;4999:4;4985:10;:18;;4974:29;:48;;;;;5021:1;5007:11;:15;4974:48;4967:55;4397:632;-1:-1:-1;;;;;;;4397:632:27:o;8871:165:29:-;-1:-1:-1;;;;;9004:23:29;;8951:4;4360:21;;;:14;;;:21;;;;;;:26;;8974:55;4264:129;5930:123;6000:4;6023:23;6028:3;6040:5;6023:4;:23::i;26185:615:25:-;26336:115;26400:2;-1:-1:-1;;;26336:46:25;:115::i;:::-;26319:475;;;26476:67;;-1:-1:-1;;;26476:67:25;;-1:-1:-1;;;;;26476:27:25;;;;;:67;;901:66:22;;26534:8:25;;26476:67;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;26476:67:25;;;;;;;;;;;;:::i;26319:475::-;26565:5;26560:234;;-1:-1:-1;;;;;26590:14:25;;;:19;26586:198;;26636:55;;-1:-1:-1;;;26636:55:25;;-1:-1:-1;;;;;5424:32:33;;26636:55:25;;;5406:51:33;5379:18;;26636:55:25;5260:203:33;26586:198:25;26737:32;;-1:-1:-1;;;26737:32:25;;-1:-1:-1;;;;;5424:32:33;;26737::25;;;5406:51:33;5379:18;;26737:32:25;5260:203:33;5581:109:29;5637:16;5672:3;:11;;5665:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5581:109;;;:::o;12344:1030:25:-;12866:52;12921:41;;;:10;:41;;;;;;13002:28;12921:41;13002:26;:28::i;:::-;12973:57;;13040:16;13071:9;13066:302;13086:18;13082:1;:22;13066:302;;;13201:25;:19;13224:1;13201:22;:25::i;:::-;13190:36;;13240:57;13256:8;13266:10;13278:7;13287:5;13240:57;;;;;;;;;;;;:15;:57::i;:::-;13340:3;;13066:302;;6221:129:29;6294:4;6317:26;6325:3;6337:5;6317:7;:26::i;25052:243:25:-;25166:122;25213:4;735:66:22;25270:8:25;25166:33;:122::i;2008:224:18:-;2168:57;2206:7;2215:9;2168:37;:57::i;2241:406:29:-;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:29;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;2320:321;-1:-1:-1;2625:5:29;2618:12;;1352:361:12;1514:100;-1:-1:-1;;;;;1514:51:12;;-1:-1:-1;;;1514:51:12;:100::i;:::-;1497:210;;;1639:57;;-1:-1:-1;;;1639:57:12;;-1:-1:-1;;;;;1639:43:12;;;;;:57;;1683:6;;1691:4;;1639:57;;;:::i;8634:156:29:-;8707:4;8730:53;8738:3;-1:-1:-1;;;;;8758:23:29;;8730:7;:53::i;9574:156::-;9648:7;9698:22;9702:3;9714:5;9698:3;:22::i;2815:1368::-;2881:4;3010:21;;;:14;;;:21;;;;;;3046:13;;3042:1135;;3413:18;3434:12;3445:1;3434:8;:12;:::i;:::-;3480:18;;3413:33;;-1:-1:-1;3460:17:29;;3480:22;;3501:1;;3480:22;:::i;:::-;3460:42;;3535:9;3521:10;:23;3517:378;;3564:17;3584:3;:11;;3596:9;3584:22;;;;;;;;:::i;:::-;;;;;;;;;3564:42;;3731:9;3705:3;:11;;3717:10;3705:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;3844:25;;;:14;;;:25;;;;;:36;;;3517:378;3973:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4076:3;:14;;:21;4091:5;4076:21;;;;;;;;;;;4069:28;;;4119:4;4112:11;;;;;;;3042:1135;4161:5;4154:12;;;;;930:533:19;1051:31;;;1047:410;;1105:26;;-1:-1:-1;;;1105:26:19;;;;;;;;;;;1047:410;1152:33;;;1148:309;;1208:28;;-1:-1:-1;;;1208:28:19;;;;;;;;;;;1148:309;1257:31;;;1253:204;;1311:26;;-1:-1:-1;;;1311:26:19;;;;;;;;;;;1253:204;1368:15;;;;:6;:15;;;;;:27;1386:9;1368:15;:27;:::i;:::-;;1427:7;1415:31;1436:9;1415:31;;;;;;:::i;:::-;;;;;;;;930:533;;:::o;4923:118:29:-;4990:7;5016:3;:11;;5028:5;5016:18;;;;;;;;:::i;:::-;;;;;;;;;5009:25;;4923:118;;;;:::o;340:388:33:-;497:2;486:9;479:21;536:6;531:2;520:9;516:18;509:34;593:6;585;580:2;569:9;565:18;552:48;649:1;620:22;;;644:2;616:31;;;609:42;;;;712:2;691:15;;;-1:-1:-1;;687:29:33;672:45;668:54;;340:388;-1:-1:-1;340:388:33:o;733:286::-;791:6;844:2;832:9;823:7;819:23;815:32;812:52;;;860:1;857;850:12;812:52;886:23;;-1:-1:-1;;;;;;938:32:33;;928:43;;918:71;;985:1;982;975:12;1216:248;1284:6;1292;1345:2;1333:9;1324:7;1320:23;1316:32;1313:52;;;1361:1;1358;1351:12;1313:52;-1:-1:-1;;1384:23:33;;;1454:2;1439:18;;;1426:32;;-1:-1:-1;1216:248:33:o;1469:250::-;1554:1;1564:113;1578:6;1575:1;1572:13;1564:113;;;1654:11;;;1648:18;1635:11;;;1628:39;1600:2;1593:10;1564:113;;;-1:-1:-1;;1711:1:33;1693:16;;1686:27;1469:250::o;1724:270::-;1765:3;1803:5;1797:12;1830:6;1825:3;1818:19;1846:76;1915:6;1908:4;1903:3;1899:14;1892:4;1885:5;1881:16;1846:76;:::i;:::-;1976:2;1955:15;-1:-1:-1;;1951:29:33;1942:39;;;;1983:4;1938:50;;1724:270;-1:-1:-1;;1724:270:33:o;1999:217::-;2146:2;2135:9;2128:21;2109:4;2166:44;2206:2;2195:9;2191:18;2183:6;2166:44;:::i;2403:127::-;2464:10;2459:3;2455:20;2452:1;2445:31;2495:4;2492:1;2485:15;2519:4;2516:1;2509:15;2535:275;2606:2;2600:9;2671:2;2652:13;;-1:-1:-1;;2648:27:33;2636:40;;-1:-1:-1;;;;;2691:34:33;;2727:22;;;2688:62;2685:88;;;2753:18;;:::i;:::-;2789:2;2782:22;2535:275;;-1:-1:-1;2535:275:33:o;2815:183::-;2875:4;-1:-1:-1;;;;;2900:6:33;2897:30;2894:56;;;2930:18;;:::i;:::-;-1:-1:-1;2975:1:33;2971:14;2987:4;2967:25;;2815:183::o;3003:662::-;3057:5;3110:3;3103:4;3095:6;3091:17;3087:27;3077:55;;3128:1;3125;3118:12;3077:55;3164:6;3151:20;3190:4;3214:60;3230:43;3270:2;3230:43;:::i;:::-;3214:60;:::i;:::-;3308:15;;;3394:1;3390:10;;;;3378:23;;3374:32;;;3339:12;;;;3418:15;;;3415:35;;;3446:1;3443;3436:12;3415:35;3482:2;3474:6;3470:15;3494:142;3510:6;3505:3;3502:15;3494:142;;;3576:17;;3564:30;;3614:12;;;;3527;;3494:142;;;-1:-1:-1;3654:5:33;3003:662;-1:-1:-1;;;;;;3003:662:33:o;3670:595::-;3788:6;3796;3849:2;3837:9;3828:7;3824:23;3820:32;3817:52;;;3865:1;3862;3855:12;3817:52;3905:9;3892:23;-1:-1:-1;;;;;3975:2:33;3967:6;3964:14;3961:34;;;3991:1;3988;3981:12;3961:34;4014:61;4067:7;4058:6;4047:9;4043:22;4014:61;:::i;:::-;4004:71;;4128:2;4117:9;4113:18;4100:32;4084:48;;4157:2;4147:8;4144:16;4141:36;;;4173:1;4170;4163:12;4141:36;;4196:63;4251:7;4240:8;4229:9;4225:24;4196:63;:::i;:::-;4186:73;;;3670:595;;;;;:::o;4270:800::-;4430:4;4459:2;4499;4488:9;4484:18;4529:2;4518:9;4511:21;4552:6;4587;4581:13;4618:6;4610;4603:22;4656:2;4645:9;4641:18;4634:25;;4718:2;4708:6;4705:1;4701:14;4690:9;4686:30;4682:39;4668:53;;4756:2;4748:6;4744:15;4777:1;4787:254;4801:6;4798:1;4795:13;4787:254;;;4894:2;4890:7;4878:9;4870:6;4866:22;4862:36;4857:3;4850:49;4922:39;4954:6;4945;4939:13;4922:39;:::i;:::-;4912:49;-1:-1:-1;5019:12:33;;;;4984:15;;;;4823:1;4816:9;4787:254;;;-1:-1:-1;5058:6:33;;4270:800;-1:-1:-1;;;;;;;4270:800:33:o;5075:180::-;5134:6;5187:2;5175:9;5166:7;5162:23;5158:32;5155:52;;;5203:1;5200;5193:12;5155:52;-1:-1:-1;5226:23:33;;5075:180;-1:-1:-1;5075:180:33:o;5468:173::-;5536:20;;-1:-1:-1;;;;;5585:31:33;;5575:42;;5565:70;;5631:1;5628;5621:12;5565:70;5468:173;;;:::o;5646:254::-;5714:6;5722;5775:2;5763:9;5754:7;5750:23;5746:32;5743:52;;;5791:1;5788;5781:12;5743:52;5814:29;5833:9;5814:29;:::i;:::-;5804:39;5890:2;5875:18;;;;5862:32;;-1:-1:-1;;;5646:254:33:o;6164:658::-;6335:2;6387:21;;;6457:13;;6360:18;;;6479:22;;;6306:4;;6335:2;6558:15;;;;6532:2;6517:18;;;6306:4;6601:195;6615:6;6612:1;6609:13;6601:195;;;6680:13;;-1:-1:-1;;;;;6676:39:33;6664:52;;6771:15;;;;6736:12;;;;6712:1;6630:9;6601:195;;;-1:-1:-1;6813:3:33;;6164:658;-1:-1:-1;;;;;;6164:658:33:o;6827:160::-;6892:20;;6948:13;;6941:21;6931:32;;6921:60;;6977:1;6974;6967:12;6992:186;7040:4;-1:-1:-1;;;;;7065:6:33;7062:30;7059:56;;;7095:18;;:::i;:::-;-1:-1:-1;7161:2:33;7140:15;-1:-1:-1;;7136:29:33;7167:4;7132:40;;6992:186::o;7183:462::-;7225:5;7278:3;7271:4;7263:6;7259:17;7255:27;7245:55;;7296:1;7293;7286:12;7245:55;7332:6;7319:20;7363:48;7379:31;7407:2;7379:31;:::i;7363:48::-;7436:2;7427:7;7420:19;7482:3;7475:4;7470:2;7462:6;7458:15;7454:26;7451:35;7448:55;;;7499:1;7496;7489:12;7448:55;7564:2;7557:4;7549:6;7545:17;7538:4;7529:7;7525:18;7512:55;7612:1;7587:16;;;7605:4;7583:27;7576:38;;;;7591:7;7183:462;-1:-1:-1;;;7183:462:33:o;7650:606::-;7751:6;7759;7767;7775;7783;7836:3;7824:9;7815:7;7811:23;7807:33;7804:53;;;7853:1;7850;7843:12;7804:53;7876:29;7895:9;7876:29;:::i;:::-;7866:39;;7924:38;7958:2;7947:9;7943:18;7924:38;:::i;:::-;7914:48;;8009:2;7998:9;7994:18;7981:32;7971:42;;8032:35;8063:2;8052:9;8048:18;8032:35;:::i;:::-;8022:45;;8118:3;8107:9;8103:19;8090:33;-1:-1:-1;;;;;8138:6:33;8135:30;8132:50;;;8178:1;8175;8168:12;8132:50;8201:49;8242:7;8233:6;8222:9;8218:22;8201:49;:::i;:::-;8191:59;;;7650:606;;;;;;;;:::o;8261:626::-;8358:6;8366;8419:2;8407:9;8398:7;8394:23;8390:32;8387:52;;;8435:1;8432;8425:12;8387:52;8475:9;8462:23;-1:-1:-1;;;;;8545:2:33;8537:6;8534:14;8531:34;;;8561:1;8558;8551:12;8531:34;8599:6;8588:9;8584:22;8574:32;;8644:7;8637:4;8633:2;8629:13;8625:27;8615:55;;8666:1;8663;8656:12;8615:55;8706:2;8693:16;8732:2;8724:6;8721:14;8718:34;;;8748:1;8745;8738:12;8718:34;8801:7;8796:2;8786:6;8783:1;8779:14;8775:2;8771:23;8767:32;8764:45;8761:65;;;8822:1;8819;8812:12;8761:65;8853:2;8845:11;;;;;8875:6;;-1:-1:-1;8261:626:33;;-1:-1:-1;;;;8261:626:33:o;8892:186::-;8951:6;9004:2;8992:9;8983:7;8979:23;8975:32;8972:52;;;9020:1;9017;9010:12;8972:52;9043:29;9062:9;9043:29;:::i;9083:668::-;9137:5;9190:3;9183:4;9175:6;9171:17;9167:27;9157:55;;9208:1;9205;9198:12;9157:55;9244:6;9231:20;9270:4;9294:60;9310:43;9350:2;9310:43;:::i;9294:60::-;9388:15;;;9474:1;9470:10;;;;9458:23;;9454:32;;;9419:12;;;;9498:15;;;9495:35;;;9526:1;9523;9516:12;9495:35;9562:2;9554:6;9550:15;9574:148;9590:6;9585:3;9582:15;9574:148;;;9656:23;9675:3;9656:23;:::i;:::-;9644:36;;9700:12;;;;9607;;9574:148;;9756:662;9807:5;9860:3;9853:4;9845:6;9841:17;9837:27;9827:55;;9878:1;9875;9868:12;9827:55;9914:6;9901:20;9940:4;9964:60;9980:43;10020:2;9980:43;:::i;9964:60::-;10058:15;;;10144:1;10140:10;;;;10128:23;;10124:32;;;10089:12;;;;10168:15;;;10165:35;;;10196:1;10193;10186:12;10165:35;10232:2;10224:6;10220:15;10244:145;10260:6;10255:3;10252:15;10244:145;;;10326:20;10342:3;10326:20;:::i;:::-;10314:33;;10367:12;;;;10277;;10244:145;;10423:886;10475:5;10528:3;10521:4;10513:6;10509:17;10505:27;10495:55;;10546:1;10543;10536:12;10495:55;10582:6;10569:20;10608:4;10632:60;10648:43;10688:2;10648:43;:::i;10632:60::-;10726:15;;;10812:1;10808:10;;;;10796:23;;10792:32;;;10757:12;;;;10836:15;;;10833:35;;;10864:1;10861;10854:12;10833:35;10900:2;10892:6;10888:15;10912:368;10928:6;10923:3;10920:15;10912:368;;;11014:3;11001:17;-1:-1:-1;;;;;11037:11:33;11034:35;11031:125;;;11110:1;11139:2;11135;11128:14;11031:125;11181:56;11233:3;11228:2;11214:11;11206:6;11202:24;11198:33;11181:56;:::i;:::-;11169:69;;-1:-1:-1;11258:12:33;;;;10945;;10912:368;;11314:1276;11540:6;11548;11556;11564;11572;11625:3;11613:9;11604:7;11600:23;11596:33;11593:53;;;11642:1;11639;11632:12;11593:53;11682:9;11669:23;-1:-1:-1;;;;;11752:2:33;11744:6;11741:14;11738:34;;;11768:1;11765;11758:12;11738:34;11791:61;11844:7;11835:6;11824:9;11820:22;11791:61;:::i;:::-;11781:71;;11905:2;11894:9;11890:18;11877:32;11861:48;;11934:2;11924:8;11921:16;11918:36;;;11950:1;11947;11940:12;11918:36;11973:63;12028:7;12017:8;12006:9;12002:24;11973:63;:::i;:::-;11963:73;;12089:2;12078:9;12074:18;12061:32;12045:48;;12118:2;12108:8;12105:16;12102:36;;;12134:1;12131;12124:12;12102:36;12157:63;12212:7;12201:8;12190:9;12186:24;12157:63;:::i;:::-;12147:73;;12273:2;12262:9;12258:18;12245:32;12229:48;;12302:2;12292:8;12289:16;12286:36;;;12318:1;12315;12308:12;12286:36;12341:60;12393:7;12382:8;12371:9;12367:24;12341:60;:::i;:::-;12331:70;;12454:3;12443:9;12439:19;12426:33;12410:49;;12484:2;12474:8;12471:16;12468:36;;;12500:1;12497;12490:12;12468:36;;12523:61;12576:7;12565:8;12554:9;12550:24;12523:61;:::i;12595:388::-;12672:6;12680;12733:2;12721:9;12712:7;12708:23;12704:32;12701:52;;;12749:1;12746;12739:12;12701:52;12785:9;12772:23;12762:33;;12846:2;12835:9;12831:18;12818:32;-1:-1:-1;;;;;12865:6:33;12862:30;12859:50;;;12905:1;12902;12895:12;12859:50;12928:49;12969:7;12960:6;12949:9;12945:22;12928:49;:::i;12988:462::-;13074:6;13082;13090;13143:2;13131:9;13122:7;13118:23;13114:32;13111:52;;;13159:1;13156;13149:12;13111:52;13182:29;13201:9;13182:29;:::i;:::-;13172:39;;13258:2;13247:9;13243:18;13230:32;13220:42;;13313:2;13302:9;13298:18;13285:32;-1:-1:-1;;;;;13332:6:33;13329:30;13326:50;;;13372:1;13369;13362:12;13326:50;13395:49;13436:7;13427:6;13416:9;13412:22;13395:49;:::i;:::-;13385:59;;;12988:462;;;;;:::o;13455:602::-;13582:6;13590;13643:2;13631:9;13622:7;13618:23;13614:32;13611:52;;;13659:1;13656;13649:12;13611:52;13699:9;13686:23;-1:-1:-1;;;;;13769:2:33;13761:6;13758:14;13755:34;;;13785:1;13782;13775:12;13755:34;13808:61;13861:7;13852:6;13841:9;13837:22;13808:61;:::i;:::-;13798:71;;13922:2;13911:9;13907:18;13894:32;13878:48;;13951:2;13941:8;13938:16;13935:36;;;13967:1;13964;13957:12;13935:36;;13990:61;14043:7;14032:8;14021:9;14017:24;13990:61;:::i;14062:632::-;14233:2;14285:21;;;14355:13;;14258:18;;;14377:22;;;14204:4;;14233:2;14456:15;;;;14430:2;14415:18;;;14204:4;14499:169;14513:6;14510:1;14507:13;14499:169;;;14574:13;;14562:26;;14643:15;;;;14608:12;;;;14535:1;14528:9;14499:169;;14699:828;14860:6;14868;14876;14929:2;14917:9;14908:7;14904:23;14900:32;14897:52;;;14945:1;14942;14935:12;14897:52;14985:9;14972:23;-1:-1:-1;;;;;15055:2:33;15047:6;15044:14;15041:34;;;15071:1;15068;15061:12;15041:34;15094:61;15147:7;15138:6;15127:9;15123:22;15094:61;:::i;:::-;15084:71;;15208:2;15197:9;15193:18;15180:32;15164:48;;15237:2;15227:8;15224:16;15221:36;;;15253:1;15250;15243:12;15221:36;15276:63;15331:7;15320:8;15309:9;15305:24;15276:63;:::i;:::-;15266:73;;15392:2;15381:9;15377:18;15364:32;15348:48;;15421:2;15411:8;15408:16;15405:36;;;15437:1;15434;15427:12;15405:36;;15460:61;15513:7;15502:8;15491:9;15487:24;15460:61;:::i;15532:456::-;15618:6;15626;15634;15687:2;15675:9;15666:7;15662:23;15658:32;15655:52;;;15703:1;15700;15693:12;15655:52;15739:9;15726:23;15716:33;;15796:2;15785:9;15781:18;15768:32;15758:42;;15851:2;15840:9;15836:18;15823:32;-1:-1:-1;;;;;15870:6:33;15867:30;15864:50;;;15910:1;15907;15900:12;15993:531;16085:6;16093;16101;16109;16162:3;16150:9;16141:7;16137:23;16133:33;16130:53;;;16179:1;16176;16169:12;16130:53;16202:29;16221:9;16202:29;:::i;:::-;16192:39;;16278:2;16267:9;16263:18;16250:32;16240:42;;16301:35;16332:2;16321:9;16317:18;16301:35;:::i;:::-;16291:45;;16387:2;16376:9;16372:18;16359:32;-1:-1:-1;;;;;16406:6:33;16403:30;16400:50;;;16446:1;16443;16436:12;16400:50;16469:49;16510:7;16501:6;16490:9;16486:22;16469:49;:::i;:::-;16459:59;;;15993:531;;;;;;;:::o;16529:348::-;16613:6;16666:2;16654:9;16645:7;16641:23;16637:32;16634:52;;;16682:1;16679;16672:12;16634:52;16722:9;16709:23;-1:-1:-1;;;;;16747:6:33;16744:30;16741:50;;;16787:1;16784;16777:12;16741:50;16810:61;16863:7;16854:6;16843:9;16839:22;16810:61;:::i;17089:424::-;17328:6;17320;17315:3;17302:33;17398:2;17394:15;;;;-1:-1:-1;;;;;;17390:53:33;17354:16;;;;17379:65;;;17468:2;17460:11;;17453:27;;;;17504:2;17496:11;;17089:424;-1:-1:-1;17089:424:33:o;17518:287::-;17647:3;17685:6;17679:13;17701:66;17760:6;17755:3;17748:4;17740:6;17736:17;17701:66;:::i;:::-;17783:16;;;;;17518:287;-1:-1:-1;;17518:287:33:o;17810:127::-;17871:10;17866:3;17862:20;17859:1;17852:31;17902:4;17899:1;17892:15;17926:4;17923:1;17916:15;18124:127;18185:10;18180:3;18176:20;18173:1;18166:31;18216:4;18213:1;18206:15;18240:4;18237:1;18230:15;18256:125;18321:9;;;18342:10;;;18339:36;;;18355:18;;:::i;18386:168::-;18459:9;;;18490;;18507:15;;;18501:22;;18487:37;18477:71;;18528:18;;:::i;18559:135::-;18598:3;18619:17;;;18616:43;;18639:18;;:::i;:::-;-1:-1:-1;18686:1:33;18675:13;;18559:135::o;19467:521::-;19544:4;19550:6;19610:11;19597:25;19704:2;19700:7;19689:8;19673:14;19669:29;19665:43;19645:18;19641:68;19631:96;;19723:1;19720;19713:12;19631:96;19750:33;;19802:20;;;-1:-1:-1;;;;;;19834:30:33;;19831:50;;;19877:1;19874;19867:12;19831:50;19910:4;19898:17;;-1:-1:-1;19941:14:33;19937:27;;;19927:38;;19924:58;;;19978:1;19975;19968:12;19924:58;19467:521;;;;;:::o;19993:271::-;20176:6;20168;20163:3;20150:33;20132:3;20202:16;;20227:13;;;20202:16;19993:271;-1:-1:-1;19993:271:33:o;20928:468::-;21182:1;21178;21173:3;21169:11;21165:19;21157:6;21153:32;21142:9;21135:51;21222:6;21217:2;21206:9;21202:18;21195:34;21279:6;21272:14;21265:22;21260:2;21249:9;21245:18;21238:50;21324:3;21319:2;21308:9;21304:18;21297:31;21116:4;21345:45;21385:3;21374:9;21370:19;21362:6;21345:45;:::i;:::-;21337:53;20928:468;-1:-1:-1;;;;;;20928:468:33:o;21781:375::-;21899:12;;21947:4;21936:16;;21930:23;-1:-1:-1;;;;;;22021:11:33;;;;21899:12;21930:23;22055:2;22044:14;;22041:109;;;22137:2;22131;22121:6;22117:2;22113:15;22110:1;22106:23;22102:32;22098:2;22094:41;22090:50;22081:59;;22041:109;;;;21781:375;;;:::o;22161:380::-;22240:1;22236:12;;;;22283;;;22304:61;;22358:4;22350:6;22346:17;22336:27;;22304:61;22411:2;22403:6;22400:14;22380:18;22377:38;22374:161;;22457:10;22452:3;22448:20;22445:1;22438:31;22492:4;22489:1;22482:15;22520:4;22517:1;22510:15;22546:395;-1:-1:-1;;;;;22743:32:33;;22725:51;;22819:14;;22812:22;22807:2;22792:18;;22785:50;22871:2;22866;22851:18;;22844:30;;;-1:-1:-1;;22891:44:33;;22916:18;;22908:6;22891:44;:::i;:::-;22883:52;22546:395;-1:-1:-1;;;;;22546:395:33:o;22946:569::-;-1:-1:-1;;;;;23243:15:33;;;23225:34;;23295:15;;;23290:2;23275:18;;23268:43;23347:15;;23342:2;23327:18;;23320:43;23394:2;23379:18;;23372:34;;;23205:3;23437;23422:19;;23415:32;;;23168:4;;23464:45;;23489:19;;23481:6;23464:45;:::i;24025:544::-;24126:2;24121:3;24118:11;24115:448;;;24162:1;24187:5;24183:2;24176:17;24232:4;24228:2;24218:19;24302:2;24290:10;24286:19;24283:1;24279:27;24273:4;24269:38;24338:4;24326:10;24323:20;24320:47;;;-1:-1:-1;24361:4:33;24320:47;24416:2;24411:3;24407:12;24404:1;24400:20;24394:4;24390:31;24380:41;;24471:82;24489:2;24482:5;24479:13;24471:82;;;24534:17;;;24515:1;24504:13;24471:82;;24745:1348;24869:3;24863:10;-1:-1:-1;;;;;24888:6:33;24885:30;24882:56;;;24918:18;;:::i;:::-;24947:96;25036:6;24996:38;25028:4;25022:11;24996:38;:::i;:::-;24990:4;24947:96;:::i;:::-;25098:4;;25162:2;25151:14;;25179:1;25174:662;;;;25880:1;25897:6;25894:89;;;-1:-1:-1;25949:19:33;;;25943:26;25894:89;-1:-1:-1;;24702:1:33;24698:11;;;24694:24;24690:29;24680:40;24726:1;24722:11;;;24677:57;25996:81;;25144:943;;25174:662;23972:1;23965:14;;;24009:4;23996:18;;-1:-1:-1;;25210:20:33;;;25327:236;25341:7;25338:1;25335:14;25327:236;;;25430:19;;;25424:26;25409:42;;25522:27;;;;25490:1;25478:14;;;;25357:19;;25327:236;;;25331:3;25591:6;25582:7;25579:19;25576:201;;;25652:19;;;25646:26;-1:-1:-1;;25735:1:33;25731:14;;;25747:3;25727:24;25723:37;25719:42;25704:58;25689:74;;25576:201;-1:-1:-1;;;;;25823:1:33;25807:14;;;25803:22;25790:36;;-1:-1:-1;24745:1348:33:o;26098:298::-;26281:6;26274:14;26267:22;26256:9;26249:41;26326:2;26321;26310:9;26306:18;26299:30;26230:4;26346:44;26386:2;26375:9;26371:18;26363:6;26346:44;:::i;26815:297::-;26933:12;;26980:4;26969:16;;;26963:23;;26933:12;26998:16;;26995:111;;;-1:-1:-1;;27072:4:33;27068:17;;;;27065:1;27061:25;27057:38;27046:50;;26815:297;-1:-1:-1;26815:297:33:o;27117:288::-;27292:6;27281:9;27274:25;27335:2;27330;27319:9;27315:18;27308:30;27255:4;27355:44;27395:2;27384:9;27380:18;27372:6;27355:44;:::i;27410:647::-;27489:6;27542:2;27530:9;27521:7;27517:23;27513:32;27510:52;;;27558:1;27555;27548:12;27510:52;27591:9;27585:16;-1:-1:-1;;;;;27616:6:33;27613:30;27610:50;;;27656:1;27653;27646:12;27610:50;27679:22;;27732:4;27724:13;;27720:27;-1:-1:-1;27710:55:33;;27761:1;27758;27751:12;27710:55;27790:2;27784:9;27815:48;27831:31;27859:2;27831:31;:::i;27815:48::-;27886:2;27879:5;27872:17;27926:7;27921:2;27916;27912;27908:11;27904:20;27901:33;27898:53;;;27947:1;27944;27937:12;27898:53;27960:67;28024:2;28019;28012:5;28008:14;28003:2;27999;27995:11;27960:67;:::i;28062:128::-;28129:9;;;28150:11;;;28147:37;;;28164:18;;:::i;28195:127::-;28256:10;28251:3;28247:20;28244:1;28237:31;28287:4;28284:1;28277:15;28311:4;28308:1;28301:15"},"gasEstimates":{"creation":{"codeDepositCost":"2367200","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","MAX_MINT()":"283","MAX_SUPPLY()":"307","authorizeOperator(address,bytes32,bytes)":"infinite","balanceOf(address)":"infinite","batchCalls(bytes[])":"infinite","getData(bytes32)":"infinite","getDataBatch(bytes32[])":"infinite","getDataBatchForTokenIds(bytes32[],bytes32[])":"infinite","getDataForTokenId(bytes32,bytes32)":"infinite","getOperatorsOf(bytes32)":"infinite","getPrice()":"infinite","getPrizePool()":"infinite","isOperatorFor(address,bytes32)":"infinite","mint(address,uint256)":"infinite","owner()":"2398","renounceOwnership()":"infinite","revokeOperator(address,bytes32,bool,bytes)":"infinite","setData(bytes32,bytes)":"infinite","setDataBatch(bytes32[],bytes[])":"infinite","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"infinite","setDataForTokenId(bytes32,bytes32,bytes)":"infinite","supportsInterface(bytes4)":"infinite","tokenIdsOf(address)":"infinite","tokenOwnerOf(bytes32)":"2581","totalSupply()":"2372","transfer(address,address,bytes32,bool,bytes)":"infinite","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"infinite","transferOwnership(address)":"32738"}},"methodIdentifiers":{"MAX_MINT()":"f0292a03","MAX_SUPPLY()":"32cb6b0c","authorizeOperator(address,bytes32,bytes)":"86a10ddd","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getDataBatchForTokenIds(bytes32[],bytes32[])":"1d26fce6","getDataForTokenId(bytes32,bytes32)":"16e023b3","getOperatorsOf(bytes32)":"49a6078d","getPrice()":"98d5fdca","getPrizePool()":"884bf67c","isOperatorFor(address,bytes32)":"2a3654a4","mint(address,uint256)":"40c10f19","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revokeOperator(address,bytes32,bool,bytes)":"db8c9663","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":"be9f0e6f","setDataForTokenId(bytes32,bytes32,bytes)":"d6c1407c","supportsInterface(bytes4)":"01ffc9a7","tokenIdsOf(address)":"a3b261f2","tokenOwnerOf(bytes32)":"217b2270","totalSupply()":"18160ddd","transfer(address,address,bytes32,bool,bytes)":"511b6952","transferBatch(address[],address[],bytes32[],bool[],bytes[])":"7e87632c","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"storedData\",\"type\":\"bytes\"}],\"name\":\"InvalidExtensionAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP8BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistingOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8OperatorAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenContractCannotHoldValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8TokenIdAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdFormatNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LSP8TokenOwnerChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"NoExtensionFoundForFunctionSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"}],\"name\":\"OwnableCallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ShirtsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"InvalidExtensionAddress(bytes)\":[{\"details\":\"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\"}],\"InvalidFunctionSelector(bytes)\":[{\"details\":\"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP8BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP8CannotSendToAddressZero()\":[{\"details\":\"Reverts when trying to send token to the zero address.\"}],\"LSP8CannotUseAddressZeroAsOperator()\":[{\"details\":\"Reverts when trying to set the zero address as an operator.\"}],\"LSP8InvalidTransferBatch()\":[{\"details\":\"Reverts when the parameters used for `transferBatch` have different lengths.\"}],\"LSP8NonExistentTokenId(bytes32)\":[{\"details\":\"Reverts when `tokenId` has not been minted.\"}],\"LSP8NonExistingOperator(address,bytes32)\":[{\"details\":\"Reverts when `operator` is not an operator for the `tokenId`.\"}],\"LSP8NotTokenOperator(bytes32,address)\":[{\"details\":\"Reverts when `caller` is not an allowed operator for `tokenId`.\"}],\"LSP8NotTokenOwner(address,bytes32,address)\":[{\"details\":\"Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\"}],\"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8OperatorAlreadyAuthorized(address,bytes32)\":[{\"details\":\"Reverts when `operator` is already authorized for the `tokenId`.\"}],\"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"details\":\"Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\"}],\"LSP8TokenIdAlreadyMinted(bytes32)\":[{\"details\":\"Reverts when `tokenId` has already been minted.\"}],\"LSP8TokenIdFormatNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\"}],\"LSP8TokenIdsDataEmptyArray()\":[{\"details\":\"Reverts when empty arrays is passed to the function\"}],\"LSP8TokenIdsDataLengthMismatch()\":[{\"details\":\"Reverts when the length of the token IDs data arrays is not equal\"}],\"LSP8TokenOwnerCannotBeOperator()\":[{\"details\":\"Reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"LSP8TokenOwnerChanged(bytes32,address,address)\":[{\"details\":\"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\"}],\"NoExtensionFoundForFunctionSelector(bytes4)\":[{\"details\":\"reverts when there is no extension for the function selector being called with\"}],\"OwnableCallerNotTheOwner(address)\":[{\"details\":\"Reverts when only the owner is allowed to call the function.\",\"params\":{\"callerAddress\":\"The address that tried to make the call.\"}}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,bytes32,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\",\"params\":{\"operator\":\"The address authorized as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` address has access on behalf of `tokenOwner`.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"OperatorRevoked(address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from the operator array ({getOperatorsOf}).\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\",\"tokenOwner\":\"The owner of the `tokenId`.\"}},\"TokenIdDataChanged(bytes32,bytes32,bytes)\":{\"details\":\"Emitted when setting data for `tokenId`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The tokenId which data is set for.\"}},\"Transfer(address,address,address,bytes32,bool,bytes)\":{\"details\":\"Emitted when `tokenId` token is transferred from the `from` to the `to` address.\",\"params\":{\"data\":\"Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The previous owner of the `tokenId`\",\"operator\":\"The address of operator that sent the `tokenId`\",\"to\":\"The new owner of `tokenId`\",\"tokenId\":\"The tokenId that was transferred\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValue\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,bytes32,bool,bytes)\":{\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any addres. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"LSP8BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"notice\":\"LSP8 contract cannot receive native tokens.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Shirts.sol\":\"Shirts\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n// errors\\nimport {OwnableCannotSetZeroAddressAsOwner} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        OwnableUnset._setOwner(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4cb23ef9c2c93d881737c47cd0eebd63dcb39828484fda1fd3a5ce9971df3ef7\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y sub-standard, a general data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value\\n     * (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     *  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90670a99b91307ed47851fcc72cee06f246f49a1810307c9e2f978116bbabfc4\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// errors\\nimport {\\n    OwnableCannotSetZeroAddressAsOwner,\\n    OwnableCallerNotTheOwner\\n} from \\\"../errors.sol\\\";\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableCallerNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            emit OwnershipTransferred(_owner, newOwner);\\n            _owner = newOwner;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c83adb0239b86c0ff6251a03bc70115470c7ae10eb99276d6dd33636054b36\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract,\\n * initializing it or transferring ownership of the contract.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\\n/**\\n * @dev Reverts when only the owner is allowed to call the function.\\n * @param callerAddress The address that tried to make the call.\\n */\\nerror OwnableCallerNotTheOwner(address callerAddress);\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\",\"keccak256\":\"0xaafdb4370450b8874224b3c0b2b712149da97a50c9a47f56e4b654aa57eb87c5\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\\\";\\n\",\"keccak256\":\"0x8e74b1641a18f28523b07198d9a0c78aecbe1643c0a22bf31df974b48b183823\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0xf24c0f30ffdc2540755ae809effdba80029f8418e2b0c9f72b878aad50ba1b72\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\\\";\\n\",\"keccak256\":\"0xa2991269c572f88fa8221063526eee5e16469a49d67f69b1761f62541f9bbf83\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\\\";\\n\",\"keccak256\":\"0x592c53c23d21eb3cbc4e453db0fe1fdcbe1ac9dd740d09309b836d118a8ecf34\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_)that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve informations related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overrided.\\n     * Up to the implementor contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5983e916a4cb604a45b585d7f745f5ac8bf69ef51fbc78cf8e70408e29e008c2\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadataCore} from \\\"./LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is\\n    ERC725Y,\\n    LSP4DigitalAssetMetadataCore\\n{\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725YCore._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725YCore._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725YCore._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725YCore._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override(ERC725YCore, LSP4DigitalAssetMetadataCore) {\\n        LSP4DigitalAssetMetadataCore._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd120529845267176d7658eb3b610fd9412012ce58cfde05a42f7fcee1c371dce\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadataCore is ERC725YCore {\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc442e52d34bb98acc1494675856b1f1d124af1375d8e23a9bfcc3b6c1865e1fc\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any addres.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x16dccaeb35168c4e61763a2c35b075eeed7505661b10fc9c16194af6eb3751ad\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\\n\\n// --- ERC725Y Data Keys\\n\\n// keccak256('LSP8TokenIdFormat')\\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\\n\\n// keccak256('LSP8TokenMetadataBaseURI')\\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\\n\\n// keccak256('LSP8ReferenceContract')\\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\\n\\n// keccak256('LSP8Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\\n\\n// keccak256('LSP8Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\\n\\n// --- Token IDs Format\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\\n\",\"keccak256\":\"0x2372e7ec422a13ce3e7968e5fbb081b67816b5de974bd76ec61cfed787abbe1b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev Reverts when `tokenId` has not been minted.\\n */\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\\n */\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\\n */\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\\n */\\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when trying to set the zero address as an operator.\\n */\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev Reverts when trying to send token to the zero address.\\n */\\nerror LSP8CannotSendToAddressZero();\\n\\n/**\\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\\n */\\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `tokenId` has already been minted.\\n */\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\\n */\\nerror LSP8InvalidTransferBatch();\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` is an EOA\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP8TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP8 contract cannot receive native tokens.\\n */\\nerror LSP8TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\\n */\\nerror LSP8TokenIdFormatNotEditable();\\n\\n/**\\n * @dev Reverts when the length of the token IDs data arrays is not equal\\n */\\nerror LSP8TokenIdsDataLengthMismatch();\\n\\n/**\\n * @dev Reverts when empty arrays is passed to the function\\n */\\nerror LSP8TokenIdsDataEmptyArray();\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP8BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\\n */\\nerror LSP8TokenOwnerChanged(\\n    bytes32 tokenId,\\n    address oldOwner,\\n    address newOwner\\n);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP8RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    bytes32 tokenId\\n);\\n\",\"keccak256\":\"0xff2c1791043272eb4a7c05bc77fa0a0234678991b0700f84d92edbd31fefd905\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {\\n    LSP8IdentifiableDigitalAssetCore\\n} from \\\"./LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport {\\n    LSP4DigitalAssetMetadata\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\n\\nimport {\\n    LSP4DigitalAssetMetadataCore\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\\\";\\n\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP8, _LSP8_TOKENID_FORMAT_KEY} from \\\"./LSP8Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP8TokenContractCannotHoldValue,\\n    LSP8TokenIdFormatNotEditable\\n} from \\\"./LSP8Errors.sol\\\";\\n\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\n\\n// errors\\n\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Standard implementation contract of the LSP8 standard.\\n *\\n * Minting and transferring are done by providing a unique `tokenId`.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP8IdentifiableDigitalAsset is\\n    LSP4DigitalAssetMetadata,\\n    LSP8IdentifiableDigitalAssetCore,\\n    LSP17Extendable\\n{\\n    /**\\n     * @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\\n     * with tokenId format `lsp8TokenIdFormat_`.\\n     *\\n     * @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\\n     * This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\\n     *\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\\n     *\\n     * @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\\n     * and cannot be changed in the ERC725Y storage after the contract has been deployed.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        uint256 lsp8TokenIdFormat_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        LSP4DigitalAssetMetadata._setData(\\n            _LSP8_TOKENID_FORMAT_KEY,\\n            abi.encode(lsp8TokenIdFormat_)\\n        );\\n    }\\n\\n    // fallback function\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\\n     * @notice LSP8 contract cannot receive native tokens.\\n     */\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP8TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = ERC725YCore._getData(\\n            mappedExtensionDataKey\\n        );\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore, LSP17Extendable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP8 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP4DigitalAssetMetadata\\n     * @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\\n     * once the identifiable digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    )\\n        internal\\n        virtual\\n        override(LSP4DigitalAssetMetadata, LSP4DigitalAssetMetadataCore)\\n    {\\n        if (dataKey == _LSP8_TOKENID_FORMAT_KEY) {\\n            revert LSP8TokenIdFormatNotEditable();\\n        }\\n        LSP4DigitalAssetMetadata._setData(dataKey, dataValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe8cc62169bfbf1e6472e217ab5833428dc8234a1db77f7cc65e360bea7ff89c9\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {\\n    ILSP8IdentifiableDigitalAsset\\n} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// modules\\n\\nimport {\\n    LSP4DigitalAssetMetadataCore\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadataCore.sol\\\";\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\n\\n// errors\\nimport {\\n    LSP8NonExistentTokenId,\\n    LSP8NotTokenOwner,\\n    LSP8CannotUseAddressZeroAsOperator,\\n    LSP8TokenOwnerCannotBeOperator,\\n    LSP8OperatorAlreadyAuthorized,\\n    LSP8NotTokenOperator,\\n    LSP8InvalidTransferBatch,\\n    LSP8NonExistingOperator,\\n    LSP8CannotSendToAddressZero,\\n    LSP8TokenIdAlreadyMinted,\\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP8NotifyTokenReceiverIsEOA,\\n    LSP8TokenIdsDataLengthMismatch,\\n    LSP8TokenIdsDataEmptyArray,\\n    LSP8BatchCallFailed,\\n    LSP8TokenOwnerChanged,\\n    LSP8RevokeOperatorNotAuthorized\\n} from \\\"./LSP8Errors.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _TYPEID_LSP8_TOKENOPERATOR,\\n    _TYPEID_LSP8_TOKENSSENDER,\\n    _TYPEID_LSP8_TOKENSRECIPIENT\\n} from \\\"./LSP8Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetCore is\\n    LSP4DigitalAssetMetadataCore,\\n    ILSP8IdentifiableDigitalAsset\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    // Mapping from `tokenId` to `dataKey` to `dataValue`\\n    mapping(bytes32 => mapping(bytes32 => bytes)) internal _tokenIdData;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getDataForTokenId(tokenId, dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        if (tokenIds.length != dataKeys.length) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        dataValues = new bytes[](tokenIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public virtual override onlyOwner {\\n        _setDataForTokenId(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public virtual override onlyOwner {\\n        if (\\n            tokenIds.length != dataKeys.length ||\\n            dataKeys.length != dataValues.length\\n        ) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        if (tokenIds.length == 0) {\\n            revert LSP8TokenIdsDataEmptyArray();\\n        }\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP8BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (tokenOwner != msg.sender) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        bool isAdded = _operators[tokenId].add(operator);\\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\\n\\n        emit OperatorAuthorizationChanged(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenId,\\n            true, // authorized\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (msg.sender != tokenOwner) {\\n            if (operator != msg.sender) {\\n                revert LSP8RevokeOperatorNotAuthorized(\\n                    msg.sender,\\n                    tokenOwner,\\n                    tokenId\\n                );\\n            }\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        _revokeOperator(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                tokenId,\\n                false, // unauthorized\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address[] memory) {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    /**\\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\\n     * @return true if `caller` is either operator or owner\\n     */\\n    function _isOperatorOrOwner(\\n        address caller,\\n        bytes32 tokenId\\n    ) internal view virtual returns (bool) {\\n        return (caller == tokenOwnerOf(tokenId) ||\\n            _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != tokenId.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes `operator` from the list of operators for the `tokenId`\\n     */\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        bool isRemoved = _operators[tokenId].remove(operator);\\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\\n\\n        emit OperatorRevoked(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notified,\\n            operatorNotificationData\\n        );\\n    }\\n\\n    /**\\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\\n     *\\n     * @param tokenOwner The address that is the owner of the `tokenId`.\\n     * @param tokenId The token to remove the associated operators for.\\n     */\\n    function _clearOperators(\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // here is a good example of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        address operator;\\n        for (uint256 i; i < operatorListLength; ) {\\n            // we are emptying the list, always remove from index 0\\n            operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId, false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address that will receive the minted `tokenId`.\\n     * @param tokenId The token ID to create (= mint).\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must not exist and not have been already minted.\\n     * - `to` cannot be the zero address.\\n\\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        // Check that `tokenId` is not already minted\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, data);\\n\\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        // token being minted\\n        ++_existingTokens;\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            tokenId,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\\n     * This will also clear all the operators allowed to transfer the `tokenId`.\\n     *\\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\\n     *\\n     * @param tokenId The token to burn.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\\n     *\\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        // Re-fetch and update `tokenOwner` in case `tokenId`\\n        // was transferred inside the `_beforeTokenTransfer` hook\\n        tokenOwner = tokenOwnerOf(tokenId);\\n\\n        // token being burned\\n        --_existingTokens;\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\\n\\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenOwner,\\n            address(0),\\n            tokenId,\\n            data\\n        );\\n\\n        _notifyTokenSender(tokenOwner, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\\n     *\\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param tokenId The token to transfer.\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * @custom:events {Transfer} event.\\n     *\\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, data);\\n\\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\\n        address currentTokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != currentTokenOwner) {\\n            revert LSP8TokenOwnerChanged(\\n                tokenId,\\n                tokenOwner,\\n                currentTokenOwner\\n            );\\n        }\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\\n\\n        _afterTokenTransfer(from, to, tokenId, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function _setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _tokenIdData[tokenId][dataKey] = dataValue;\\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValues) {\\n        return _tokenIdData[tokenId][dataKey];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifiying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifiying sender/recipient via LSP1** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP8_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP8_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe536b1021d51a20951a3d1446aee234c3ea558a008d023343a30c8d2fb83f4ad\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/interfaces/IShirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP8IdentifiableDigitalAsset as ILSP8} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\ninterface IShirts is ILSP8 {\\n    event ShirtsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n    \\n    function getPrizePool() external view returns (address prizePool);\\n\\n    function getPrice() external view returns (uint256 price);\\n}\",\"keccak256\":\"0x4e3bf68e661345d6da97b438b69e498842a75f160579b20c32306eb755407a0e\",\"license\":\"MIT\"},\"contracts/tokens/Shirts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {LSP8IdentifiableDigitalAsset as LSP8} from '@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol';\\nimport {_LSP4_TOKEN_TYPE_NFT} from '@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol';\\nimport {_LSP8_TOKENID_FORMAT_NUMBER, _LSP8_TOKEN_METADATA_BASE_URI} from '@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol';\\nimport {IShirts} from '../interfaces/IShirts.sol';\\nimport '../utils/Errors.sol';\\n\\ncontract Shirts is IShirts, LSP8 {\\n    uint256 public constant MAX_SUPPLY = 100;\\n    uint256 public constant MAX_MINT = 5;\\n    address private immutable i_prizePool;\\n    uint256 private immutable i_price; \\n    \\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner,\\n        address _prizePool,\\n        uint256 _price\\n    ) LSP8(\\n        _name,\\n        _symbol,\\n        _owner,\\n        _LSP4_TOKEN_TYPE_NFT,\\n        _LSP8_TOKENID_FORMAT_NUMBER\\n    ) {\\n        i_prizePool = _prizePool;\\n        i_price = _price;\\n    }\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable {\\n        if(_existingTokens + _amount > MAX_SUPPLY) revert MintLimitExceeded();\\n        if(balanceOf(_recipient) + _amount > MAX_MINT) revert MintLimitExceeded();\\n        if(msg.value != i_price * _amount) revert InvalidMintPrice();\\n\\n        for(uint256 i; i < _amount; i++) {\\n            uint256 tokenId = _existingTokens + 1;\\n            _mint(_recipient, bytes32(tokenId), false, '');\\n        }\\n\\n        (bool success,) = i_prizePool.call{value: msg.value}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit ShirtsMinted(_recipient, _amount);\\n    }\\n\\n    function getPrizePool() external view returns (address prizePool) {\\n        return i_prizePool;\\n    }\\n\\n    function getPrice() external view returns (uint256 price) {\\n        return i_price;\\n    }\\n}\",\"keccak256\":\"0xbafb8ea8b017a93fe3f2fc9ae88c7fe3ed8813fa7e5a3a7f8dda0ed007cf1657\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisTicket();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoTickets();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\\n\\nerror MintClosed();\",\"keccak256\":\"0xca7fe76b15de655ab37149643a2d706aa305b8a4a2becb0b878b42bd246d964e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":301,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":63,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_store","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":2437,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_existingTokens","offset":0,"slot":"2","type":"t_uint256"},{"astId":2441,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_tokenOwners","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_address)"},{"astId":2446,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_ownedTokens","offset":0,"slot":"4","type":"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)"},{"astId":2451,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_operators","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)"},{"astId":2457,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_tokenIdData","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_struct(Bytes32Set)4173_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSet.Bytes32Set)","numberOfBytes":"32","value":"t_struct(Bytes32Set)4173_storage"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_bytes32,t_struct(AddressSet)4294_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4294_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4294_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4293,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Bytes32Set)4173_storage":{"encoding":"inplace","label":"struct EnumerableSet.Bytes32Set","members":[{"astId":4172,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)3979_storage"}],"numberOfBytes":"64"},"t_struct(Set)3979_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":3974,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":3978,"contract":"contracts/tokens/Shirts.sol:Shirts","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"LSP8BatchCallFailed(uint256)":[{"notice":"Batch call failed."}],"LSP8TokenContractCannotHoldValue()":[{"notice":"LSP8 contract cannot receive native tokens."}]},"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"getDataBatchForTokenIds(bytes32[],bytes32[])":{"notice":"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."},"getDataForTokenId(bytes32,bytes32)":{"notice":"Retrieves data for a specific `tokenId` and `dataKey`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."},"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])":{"notice":"Sets data in batch for multiple `tokenId` and `dataKey` pairs."},"setDataForTokenId(bytes32,bytes32,bytes)":{"notice":"Sets data for a specific `tokenId` and `dataKey`."}},"version":1}}}}}}