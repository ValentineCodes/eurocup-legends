{"id":"4379175b4587ebf467747e1a2924e1e7","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"content":"// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n     * @param dataKey The data key for which a bytes value is set.\n     * @param dataValue The value to set for the given data key.\n     */\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n     * @param dataKey The data key for which to retrieve the value.\n     * @return dataValue The bytes value stored under the specified data key.\n     */\n    function getData(\n        bytes32 dataKey\n    ) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getDataBatch(\n        bytes32[] memory dataKeys\n    ) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n     *\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\n     * a fee mechanism for setting specific data.\n     *\n     * @param dataKey The data key for which to set a new value.\n     * @param dataValue The new bytes value to set.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\n\n    /**\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n     *\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n     *\n     * @param dataKeys An array of data keys to set bytes values for.\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\n     */\n    function setDataBatch(\n        bytes32[] memory dataKeys,\n        bytes[] memory dataValues\n    ) external payable;\n}\n"},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.4;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {\n    IERC725Y\n} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\n */\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\n     * @param operator The address of the operator that executed the transfer.\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\n     * @param to The address that received the tokens (balance increased by `+amount`).\n     * @param amount The amount of tokens transferred.\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\n     */\n    event Transfer(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n     * @param operator The address authorized as an operator\n     * @param tokenOwner The token owner\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorAuthorizationChanged(\n        address indexed operator,\n        address indexed tokenOwner,\n        uint256 indexed amount,\n        bytes operatorNotificationData\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\n     * @param operator The address revoked from operating\n     * @param tokenOwner The token owner\n     * @param notified Bool indicating whether the operator has been notified or not\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     */\n    event OperatorRevoked(\n        address indexed operator,\n        address indexed tokenOwner,\n        bool indexed notified,\n        bytes operatorNotificationData\n    );\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\n     *\n     * @custom:notice This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {balanceOf} and {transfer}.\n     *\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the number of existing tokens that have been minted in this contract.\n     * @return The number of existing tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Get the number of tokens owned by `tokenOwner`.\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\n     *\n     * _Example:_\n     *\n     * ```\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\n     * ```\n     *\n     * @param tokenOwner The address of the token holder to query the balance for.\n     * @return The amount of tokens owned by `tokenOwner`.\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    // --- Operator functionality\n\n    /**\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The address to authorize as an operator.\n     * @param amount The allowance amount of tokens operator has access to.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\n     * an existing operator's allowance is updated.\n     */\n    function authorizeOperator(\n        address operator,\n        uint256 amount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\n     * This function also allows the `operator` to remove itself if it is the caller of this function\n     *\n     * @param operator The address to revoke as an operator.\n     * @param tokenOwner The address of the token owner.\n     * @param notify Boolean indicating whether to notify the operator or not.\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\n     *\n     * @custom:requirements\n     * - caller MUST be `operator` or `tokenOwner`\n     * - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\n     */\n    function revokeOperator(\n        address operator,\n        address tokenOwner,\n        bool notify,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n     * against double spending allowance vulnerability.\n     *\n     * @notice Increase the allowance of `operator` by +`addedAmount`\n     *\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n     * for the double spending allowance problem.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @param operator The operator to increase the allowance for `msg.sender`\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\n     *\n     * @custom:requirements\n     *  - `operator` cannot be the same address as `msg.sender`\n     *  - `operator` cannot be the zero address.\n     *\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\n     */\n    function increaseAllowance(\n        address operator,\n        uint256 addedAmount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n     * against the double spending allowance vulnerability.\n     *\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\n     *\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n     * for the double spending allowance problem.\n     * Notify the operator based on the LSP1-UniversalReceiver standard\n     *\n     * @custom:events\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\n     *\n     * @param operator The operator to decrease allowance for `msg.sender`\n     * @param tokenOwner The address of the token owner.\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\n     *\n     * @custom:requirements\n     *  - `operator` cannot be the zero address.\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\n     */\n    function decreaseAllowance(\n        address operator,\n        address tokenOwner,\n        uint256 subtractedAmount,\n        bytes memory operatorNotificationData\n    ) external;\n\n    /**\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\n     * Operators can send and burn tokens on behalf of their owners.\n     *\n     * @param operator The operator's address to query the authorized amount for.\n     * @param tokenOwner The token owner that `operator` has allowance on.\n     *\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\n     *\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\n     * (since a tokenOwner is its own operator).\n     */\n    function authorizedAmountFor(\n        address operator,\n        address tokenOwner\n    ) external view returns (uint256);\n\n    /**\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\n     *\n     * @param tokenOwner The token owner to get the operators for.\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\n     */\n    function getOperatorsOf(\n        address tokenOwner\n    ) external view returns (address[] memory);\n\n    // --- Transfer functionality\n\n    /**\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\n     * has been completed (See {authorizedAmountFor}).\n     *\n     * @param from The sender address.\n     * @param to The recipient address.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\n     * - `from` MUST have a balance of at least `amount` tokens.\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\n     *\n     * @custom:events\n     * - {Transfer} event when tokens get successfully transferred.\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\n     * event will be emitted if the operator has no more allowance left.\n     *\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n     *\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n     *\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n     * This even if the `force` was set to `true`.\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\n     *\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\n     *\n     * @param from An array of sending addresses.\n     * @param to An array of receiving addresses.\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @custom:requirements\n     * - `from`, `to`, `amount` lists MUST be of the same length.\n     * - no values in `from` can be the zero address.\n     * - no values in `to` can be the zero address.\n     * - each `amount` tokens MUST be owned by `from`.\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\n     *\n     * @custom:events {Transfer} event **for each token transfer**.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool[] memory force,\n        bytes[] memory data\n    ) external;\n\n    /**\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n     *\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n     * @param data An array of ABI encoded function calls to be called on the contract.\n     * @return results An array of abi-encoded data returned by the functions executed.\n     */\n    function batchCalls(\n        bytes[] calldata data\n    ) external returns (bytes[] memory results);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/EurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IEurocupLegends} from \"./interfaces/IEurocupLegends.sol\";\nimport {ITickets} from \"./interfaces/ITickets.sol\";\nimport \"./utils/Errors.sol\";\n\ncontract EurocupLegends is IEurocupLegends, Ownable {\n    uint256 public constant FEE_PERCENTAGE = 25;\n    uint256 public constant SHARE_PRECISION = 100;\n    uint256 public constant MAX_WINNERS = 3;\n\n    Creator[] private s_creators;\n    address[3] private s_winners;\n\n    mapping(address ticket => uint256 prize) private s_prizes;\n    mapping(address user => mapping(address ticket => bool isClaimed)) private s_isClaimed;\n\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\n        for(uint256 i; i < _creators.length; i++) {\n            s_creators.push(_creators[i]);\n        }\n    }\n\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _share) external onlyOwner {\n        uint256 winnersLength = s_winners.length;\n        uint256 totalPrize = address(this).balance;\n\n        if(winnersLength != MAX_WINNERS) revert NoWinnersYet();\n\n        for(uint256 i; i < MAX_WINNERS; i++) {\n            address winner = _winners[i];\n            uint256 prize = (totalPrize * _share[i]) / SHARE_PRECISION;\n\n            s_winners[i] = winner;\n            s_prizes[winner] = prize;\n        }\n\n        emit WinnersSet(_winners);\n    }\n\n    function claimPrize(address _ticket) external {\n        if(_ticket == address(0)) revert ZeroAddress();\n        if(s_prizes[_ticket] == 0) revert NoPrizeForThisTicket();\n        if(s_isClaimed[msg.sender][_ticket]) revert AlreadyClaimedPrize();\n\n        uint256 prize = getPrize(msg.sender, _ticket);\n\n        s_prizes[_ticket] = s_prizes[_ticket] - prize;\n        s_isClaimed[msg.sender][_ticket] = true;\n\n        (bool success, ) = msg.sender.call{value: prize}('');\n        if(!success) revert TransferFailed();\n\n        emit PrizeClaimed(msg.sender, prize);\n    }\n\n    function isClaimed(address _user, address _ticket) external view returns (bool) {\n        return s_isClaimed[_user][_ticket];\n    }\n\n    function getCreators() external view returns (Creator[] memory) {\n        return s_creators;\n    }\n\n    function getWinners() external view returns (address[3] memory) {\n        return s_winners;\n    }\n\n    function getPrize(address _user, address _ticket) public view returns (uint256) {\n        uint256 ticketPrize = s_prizes[_ticket];\n        uint256 userTickets = ITickets(_ticket).balanceOf(_user);\n        uint256 totalTickets = ITickets(_ticket).totalSupply();\n\n        if(userTickets == 0) revert NoTickets();\n\n        return (userTickets * ticketPrize) / totalTickets;\n    }\n\n    function getTicketPrize(address _ticket) public view returns (uint256) {\n        return s_prizes[_ticket];\n    }\n\n    function _handleDeposit(uint256 _amount) private {\n        // 25% of deposits\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\n\n        uint256 creatorsLength = s_creators.length;\n\n        // transfer fee to creators\n        for(uint256 i; i < creatorsLength; i++) {\n            Creator memory creator = s_creators[i];\n\n            uint256 feeCut = (fees * creator.share) / SHARE_PRECISION;\n\n            (bool success,) = creator.creator.call{value: feeCut}(\"\");\n            if(!success) revert FeeTransferFailed(creator.creator, feeCut);\n        }\n    }\n\n    receive() external payable {\n        _handleDeposit(msg.value);\n    }\n\n    fallback() external payable {\n        _handleDeposit(msg.value);\n    }\n}"},"contracts/interfaces/IEurocupLegends.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IEurocupLegends {\n    struct Creator {\n        address creator;\n        uint256 share;\n    }\n\n    event WinnersSet(address[3] winners);\n    event PrizeClaimed(address owner, uint256 prize);\n}"},"contracts/interfaces/ITickets.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ILSP7DigitalAsset} from \"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\";\ninterface ITickets is ILSP7DigitalAsset {\n    event TicketsMinted(address _recipient, uint256 _amount);\n\n    function mint(\n        address _recipient,\n        uint256 _amount\n    ) external payable;\n}"},"contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nerror MintLimitExceeded();\n\nerror InvalidMintPrice();\n\nerror NoPrizeForThisTicket();\n\nerror AlreadyClaimedPrize();\n\nerror NoTickets();\n\nerror ZeroAddress();\n\nerror ZeroAmount();\n\nerror TransferFailed();\n\nerror FeeTransferFailed(address _creators, uint256 _amount);\n\nerror NoWinnersYet();"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"ast":{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","exportedSymbols":{"IERC165":[415],"IERC725Y":[50]},"id":51,"license":"CC0-1.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"36:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":51,"sourceUnit":416,"src":"75:80:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"83:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IERC165","nameLocations":["502:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":415,"src":"502:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"502:7:0"}],"canonicalName":"IERC725Y","contractDependencies":[],"contractKind":"interface","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"157:322:0","text":" @title The interface for ERC725Y sub-standard, a generic data key/value store.\n @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\n It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage."},"fullyImplemented":false,"id":50,"linearizedBaseContracts":[50,415],"name":"IERC725Y","nameLocation":"490:8:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"516:373:0","text":" @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\n @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\n @param dataKey The data key for which a bytes value is set.\n @param dataValue The value to set for the given data key."},"eventSelector":"ece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2","id":13,"name":"DataChanged","nameLocation":"900:11:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"dataKey","nameLocation":"928:7:0","nodeType":"VariableDeclaration","scope":13,"src":"912:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":false,"mutability":"mutable","name":"dataValue","nameLocation":"943:9:0","nodeType":"VariableDeclaration","scope":13,"src":"937:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":10,"name":"bytes","nodeType":"ElementaryTypeName","src":"937:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:42:0"},"src":"894:60:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"960:361:0","text":" @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\n @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\n @param dataKey The data key for which to retrieve the value.\n @return dataValue The bytes value stored under the specified data key."},"functionSelector":"54f6127f","id":21,"implemented":false,"kind":"function","modifiers":[],"name":"getData","nameLocation":"1335:7:0","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"dataKey","nameLocation":"1360:7:0","nodeType":"VariableDeclaration","scope":21,"src":"1352:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":15,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1352:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1342:31:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"dataValue","nameLocation":"1410:9:0","nodeType":"VariableDeclaration","scope":21,"src":"1397:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":18,"name":"bytes","nodeType":"ElementaryTypeName","src":"1397:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1396:24:0"},"scope":50,"src":"1326:95:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"1427:353:0","text":" @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\n @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\n @param dataKeys The array of keys which values to retrieve\n @return dataValues The array of data stored at multiple keys"},"functionSelector":"dedff9c6","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"getDataBatch","nameLocation":"1794:12:0","nodeType":"FunctionDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"dataKeys","nameLocation":"1833:8:0","nodeType":"VariableDeclaration","scope":31,"src":"1816:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1816:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":24,"nodeType":"ArrayTypeName","src":"1816:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1806:41:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"dataValues","nameLocation":"1886:10:0","nodeType":"VariableDeclaration","scope":31,"src":"1871:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":27,"name":"bytes","nodeType":"ElementaryTypeName","src":"1871:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":28,"nodeType":"ArrayTypeName","src":"1871:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1870:27:0"},"scope":50,"src":"1785:113:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1904:536:0","text":" @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\n @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\n The function is marked as payable to enable flexibility on child contracts. For instance to implement\n a fee mechanism for setting specific data.\n @param dataKey The data key for which to set a new value.\n @param dataValue The new bytes value to set."},"functionSelector":"7f23690c","id":39,"implemented":false,"kind":"function","modifiers":[],"name":"setData","nameLocation":"2454:7:0","nodeType":"FunctionDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"dataKey","nameLocation":"2470:7:0","nodeType":"VariableDeclaration","scope":39,"src":"2462:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":33,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2462:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"dataValue","nameLocation":"2492:9:0","nodeType":"VariableDeclaration","scope":39,"src":"2479:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":35,"name":"bytes","nodeType":"ElementaryTypeName","src":"2479:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2461:41:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"2519:0:0"},"scope":50,"src":"2445:75:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"2526:478:0","text":" @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\n @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\n @param dataKeys An array of data keys to set bytes values for.\n @param dataValues An array of bytes values to set for each `dataKeys`."},"functionSelector":"97902421","id":49,"implemented":false,"kind":"function","modifiers":[],"name":"setDataBatch","nameLocation":"3018:12:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"dataKeys","nameLocation":"3057:8:0","nodeType":"VariableDeclaration","scope":49,"src":"3040:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":41,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3040:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":42,"nodeType":"ArrayTypeName","src":"3040:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"dataValues","nameLocation":"3090:10:0","nodeType":"VariableDeclaration","scope":49,"src":"3075:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":44,"name":"bytes","nodeType":"ElementaryTypeName","src":"3075:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":45,"nodeType":"ArrayTypeName","src":"3075:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3030:76:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"3123:0:0"},"scope":50,"src":"3009:115:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":51,"src":"480:2646:0","usedErrors":[],"usedEvents":[13]}],"src":"36:3091:0"},"id":0},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"ast":{"absolutePath":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","exportedSymbols":{"IERC165":[415],"IERC725Y":[50],"ILSP7DigitalAsset":[225]},"id":226,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":52,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"40:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":54,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":226,"sourceUnit":416,"src":"79:80:1","symbolAliases":[{"foreign":{"id":53,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"87:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","file":"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol","id":56,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":226,"sourceUnit":51,"src":"160:89:1","symbolAliases":[{"foreign":{"id":55,"name":"IERC725Y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"173:8:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":58,"name":"IERC165","nameLocations":["374:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":415,"src":"374:7:1"},"id":59,"nodeType":"InheritanceSpecifier","src":"374:7:1"},{"baseName":{"id":60,"name":"IERC725Y","nameLocations":["383:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":50,"src":"383:8:1"},"id":61,"nodeType":"InheritanceSpecifier","src":"383:8:1"}],"canonicalName":"ILSP7DigitalAsset","contractDependencies":[],"contractKind":"interface","documentation":{"id":57,"nodeType":"StructuredDocumentation","src":"251:91:1","text":" @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset."},"fullyImplemented":false,"id":225,"linearizedBaseContracts":[225,50,415],"name":"ILSP7DigitalAsset","nameLocation":"353:17:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":62,"nodeType":"StructuredDocumentation","src":"417:693:1","text":" @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\n @param operator The address of the operator that executed the transfer.\n @param from The address which tokens were sent from (balance decreased by `-amount`).\n @param to The address that received the tokens (balance increased by `+amount`).\n @param amount The amount of tokens transferred.\n @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\n @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses."},"eventSelector":"3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6","id":76,"name":"Transfer","nameLocation":"1121:8:1","nodeType":"EventDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1155:8:1","nodeType":"VariableDeclaration","scope":76,"src":"1139:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"1139:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":66,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1189:4:1","nodeType":"VariableDeclaration","scope":76,"src":"1173:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1219:2:1","nodeType":"VariableDeclaration","scope":76,"src":"1203:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"1203:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":70,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1239:6:1","nodeType":"VariableDeclaration","scope":76,"src":"1231:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":72,"indexed":false,"mutability":"mutable","name":"force","nameLocation":"1260:5:1","nodeType":"VariableDeclaration","scope":76,"src":"1255:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":71,"name":"bool","nodeType":"ElementaryTypeName","src":"1255:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":74,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1281:4:1","nodeType":"VariableDeclaration","scope":76,"src":"1275:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":73,"name":"bytes","nodeType":"ElementaryTypeName","src":"1275:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1129:162:1"},"src":"1115:177:1"},{"anonymous":false,"documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"1298:371:1","text":" @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n @param operator The address authorized as an operator\n @param tokenOwner The token owner\n @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"f772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d","id":87,"name":"OperatorAuthorizationChanged","nameLocation":"1680:28:1","nodeType":"EventDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1734:8:1","nodeType":"VariableDeclaration","scope":87,"src":"1718:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"1718:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":81,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"1768:10:1","nodeType":"VariableDeclaration","scope":87,"src":"1752:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"1752:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":83,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1804:6:1","nodeType":"VariableDeclaration","scope":87,"src":"1788:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"1788:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":85,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"1826:24:1","nodeType":"VariableDeclaration","scope":87,"src":"1820:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":84,"name":"bytes","nodeType":"ElementaryTypeName","src":"1820:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:148:1"},"src":"1674:183:1"},{"anonymous":false,"documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"1863:409:1","text":" @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\n @param operator The address revoked from operating\n @param tokenOwner The token owner\n @param notified Bool indicating whether the operator has been notified or not\n @param operatorNotificationData The data to notify the operator about via LSP1."},"eventSelector":"0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167","id":98,"name":"OperatorRevoked","nameLocation":"2283:15:1","nodeType":"EventDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2324:8:1","nodeType":"VariableDeclaration","scope":98,"src":"2308:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"2308:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":92,"indexed":true,"mutability":"mutable","name":"tokenOwner","nameLocation":"2358:10:1","nodeType":"VariableDeclaration","scope":98,"src":"2342:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2342:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"indexed":true,"mutability":"mutable","name":"notified","nameLocation":"2391:8:1","nodeType":"VariableDeclaration","scope":98,"src":"2378:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":93,"name":"bool","nodeType":"ElementaryTypeName","src":"2378:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":96,"indexed":false,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"2415:24:1","nodeType":"VariableDeclaration","scope":98,"src":"2409:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95,"name":"bytes","nodeType":"ElementaryTypeName","src":"2409:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2298:147:1"},"src":"2277:169:1"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2478:578:1","text":" @dev Returns the number of decimals used to get its user representation.\n If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\n the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\n @custom:notice This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {balanceOf} and {transfer}.\n @return the number of decimals. If `0` is returned, the asset is non-divisible."},"functionSelector":"313ce567","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3070:8:1","nodeType":"FunctionDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3078:2:1"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":104,"src":"3104:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":101,"name":"uint8","nodeType":"ElementaryTypeName","src":"3104:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3103:7:1"},"scope":225,"src":"3061:50:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"3117:147:1","text":" @dev Returns the number of existing tokens that have been minted in this contract.\n @return The number of existing tokens."},"functionSelector":"18160ddd","id":110,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3278:11:1","nodeType":"FunctionDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[],"src":"3289:2:1"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":110,"src":"3315:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"3315:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3314:9:1"},"scope":225,"src":"3269:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"3362:546:1","text":" @dev Get the number of tokens owned by `tokenOwner`.\n If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\n by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\n _Example:_\n ```\n balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\n ```\n @param tokenOwner The address of the token holder to query the balance for.\n @return The amount of tokens owned by `tokenOwner`."},"functionSelector":"70a08231","id":118,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3922:9:1","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"tokenOwner","nameLocation":"3940:10:1","nodeType":"VariableDeclaration","scope":118,"src":"3932:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"3932:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3931:20:1"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":118,"src":"3975:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"3975:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3974:9:1"},"scope":225,"src":"3913:71:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"4025:692:1","text":" @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The address to authorize as an operator.\n @param amount The allowance amount of tokens operator has access to.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\n an existing operator's allowance is updated."},"functionSelector":"b49506fd","id":128,"implemented":false,"kind":"function","modifiers":[],"name":"authorizeOperator","nameLocation":"4731:17:1","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"operator","nameLocation":"4766:8:1","nodeType":"VariableDeclaration","scope":128,"src":"4758:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"4758:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"amount","nameLocation":"4792:6:1","nodeType":"VariableDeclaration","scope":128,"src":"4784:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"4784:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"4821:24:1","nodeType":"VariableDeclaration","scope":128,"src":"4808:37:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":124,"name":"bytes","nodeType":"ElementaryTypeName","src":"4808:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4748:103:1"},"returnParameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"4860:0:1"},"scope":225,"src":"4722:139:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"4867:794:1","text":" @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\n This function also allows the `operator` to remove itself if it is the caller of this function\n @param operator The address to revoke as an operator.\n @param tokenOwner The address of the token owner.\n @param notify Boolean indicating whether to notify the operator or not.\n @param operatorNotificationData The data to notify the operator about via LSP1.\n @custom:requirements\n - caller MUST be `operator` or `tokenOwner`\n - `operator` cannot be the zero address.\n @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder)."},"functionSelector":"30d0dc37","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOperator","nameLocation":"5675:14:1","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"operator","nameLocation":"5707:8:1","nodeType":"VariableDeclaration","scope":140,"src":"5699:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"5699:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"tokenOwner","nameLocation":"5733:10:1","nodeType":"VariableDeclaration","scope":140,"src":"5725:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"5725:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"notify","nameLocation":"5758:6:1","nodeType":"VariableDeclaration","scope":140,"src":"5753:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":134,"name":"bool","nodeType":"ElementaryTypeName","src":"5753:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"5787:24:1","nodeType":"VariableDeclaration","scope":140,"src":"5774:37:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":136,"name":"bytes","nodeType":"ElementaryTypeName","src":"5774:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5689:128:1"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"5826:0:1"},"scope":225,"src":"5666:161:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"5833:970:1","text":" @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n against double spending allowance vulnerability.\n @notice Increase the allowance of `operator` by +`addedAmount`\n @dev Atomically increases the allowance granted to `operator` by the caller.\n This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n for the double spending allowance problem.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @param operator The operator to increase the allowance for `msg.sender`\n @param addedAmount The additional amount to add on top of the current operator's allowance\n @custom:requirements\n  - `operator` cannot be the same address as `msg.sender`\n  - `operator` cannot be the zero address.\n @custom:events {OperatorAuthorizationChanged} indicating the updated allowance"},"functionSelector":"2bc1da82","id":150,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6817:17:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"operator","nameLocation":"6852:8:1","nodeType":"VariableDeclaration","scope":150,"src":"6844:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"6844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"addedAmount","nameLocation":"6878:11:1","nodeType":"VariableDeclaration","scope":150,"src":"6870:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":144,"name":"uint256","nodeType":"ElementaryTypeName","src":"6870:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":147,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"6912:24:1","nodeType":"VariableDeclaration","scope":150,"src":"6899:37:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":146,"name":"bytes","nodeType":"ElementaryTypeName","src":"6899:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6834:108:1"},"returnParameters":{"id":149,"nodeType":"ParameterList","parameters":[],"src":"6951:0:1"},"scope":225,"src":"6808:144:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"6958:1262:1","text":" @custom:info This function in the LSP7 contract can be used as a prevention mechanism\n against the double spending allowance vulnerability.\n @notice Decrease the allowance of `operator` by -`subtractedAmount`\n @dev Atomically decreases the allowance granted to `operator` by the caller.\n This is an alternative approach to {authorizeOperator} that can be used as a mitigation\n for the double spending allowance problem.\n Notify the operator based on the LSP1-UniversalReceiver standard\n @custom:events\n  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\n  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\n    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\n @param operator The operator to decrease allowance for `msg.sender`\n @param tokenOwner The address of the token owner.\n @param subtractedAmount The amount to decrease by in the operator's allowance.\n @custom:requirements\n  - `operator` cannot be the zero address.\n  - `operator` must have allowance for the caller of at least `subtractedAmount`."},"functionSelector":"78381670","id":162,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"8234:17:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"operator","nameLocation":"8269:8:1","nodeType":"VariableDeclaration","scope":162,"src":"8261:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"8261:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"tokenOwner","nameLocation":"8295:10:1","nodeType":"VariableDeclaration","scope":162,"src":"8287:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"8287:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"subtractedAmount","nameLocation":"8323:16:1","nodeType":"VariableDeclaration","scope":162,"src":"8315:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"8315:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"operatorNotificationData","nameLocation":"8362:24:1","nodeType":"VariableDeclaration","scope":162,"src":"8349:37:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":158,"name":"bytes","nodeType":"ElementaryTypeName","src":"8349:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8251:141:1"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"8401:0:1"},"scope":225,"src":"8225:177:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"8408:648:1","text":" @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\n Operators can send and burn tokens on behalf of their owners.\n @param operator The operator's address to query the authorized amount for.\n @param tokenOwner The token owner that `operator` has allowance on.\n @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\n @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\n (since a tokenOwner is its own operator)."},"functionSelector":"65aeaa95","id":172,"implemented":false,"kind":"function","modifiers":[],"name":"authorizedAmountFor","nameLocation":"9070:19:1","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"operator","nameLocation":"9107:8:1","nodeType":"VariableDeclaration","scope":172,"src":"9099:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"9099:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"tokenOwner","nameLocation":"9133:10:1","nodeType":"VariableDeclaration","scope":172,"src":"9125:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"9125:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9089:60:1"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":172,"src":"9173:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"9173:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9172:9:1"},"scope":225,"src":"9061:121:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"9188:293:1","text":" @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\n @param tokenOwner The token owner to get the operators for.\n @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."},"functionSelector":"d72fc29a","id":181,"implemented":false,"kind":"function","modifiers":[],"name":"getOperatorsOf","nameLocation":"9495:14:1","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"tokenOwner","nameLocation":"9527:10:1","nodeType":"VariableDeclaration","scope":181,"src":"9519:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"9519:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9509:34:1"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":181,"src":"9567:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"9567:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":178,"nodeType":"ArrayTypeName","src":"9567:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9566:18:1"},"scope":225,"src":"9486:99:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"9626:2317:1","text":" @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\n If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\n has been completed (See {authorizedAmountFor}).\n @param from The sender address.\n @param to The recipient address.\n @param amount The amount of tokens to transfer.\n @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\n @custom:requirements\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\n - `from` MUST have a balance of at least `amount` tokens.\n - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\n @custom:events\n - {Transfer} event when tokens get successfully transferred.\n - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\n event will be emitted if the operator has no more allowance left.\n @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\n or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\n @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\n @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\n This even if the `force` was set to `true`."},"functionSelector":"760d9bba","id":195,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"11957:8:1","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"from","nameLocation":"11983:4:1","nodeType":"VariableDeclaration","scope":195,"src":"11975:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":183,"name":"address","nodeType":"ElementaryTypeName","src":"11975:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"to","nameLocation":"12005:2:1","nodeType":"VariableDeclaration","scope":195,"src":"11997:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"11997:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"amount","nameLocation":"12025:6:1","nodeType":"VariableDeclaration","scope":195,"src":"12017:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"12017:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"force","nameLocation":"12046:5:1","nodeType":"VariableDeclaration","scope":195,"src":"12041:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":189,"name":"bool","nodeType":"ElementaryTypeName","src":"12041:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"data","nameLocation":"12074:4:1","nodeType":"VariableDeclaration","scope":195,"src":"12061:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":191,"name":"bytes","nodeType":"ElementaryTypeName","src":"12061:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11965:119:1"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"12093:0:1"},"scope":225,"src":"11948:146:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"12100:1246:1","text":" @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\n @custom:info If any transfer in the batch fail or revert, the whole call will revert.\n @param from An array of sending addresses.\n @param to An array of receiving addresses.\n @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\n @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\n @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n @custom:requirements\n - `from`, `to`, `amount` lists MUST be of the same length.\n - no values in `from` can be the zero address.\n - no values in `to` can be the zero address.\n - each `amount` tokens MUST be owned by `from`.\n - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\n @custom:events {Transfer} event **for each token transfer**."},"functionSelector":"2d7667c9","id":214,"implemented":false,"kind":"function","modifiers":[],"name":"transferBatch","nameLocation":"13360:13:1","nodeType":"FunctionDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"from","nameLocation":"13400:4:1","nodeType":"VariableDeclaration","scope":214,"src":"13383:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"13383:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":198,"nodeType":"ArrayTypeName","src":"13383:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":202,"mutability":"mutable","name":"to","nameLocation":"13431:2:1","nodeType":"VariableDeclaration","scope":214,"src":"13414:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"13414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":201,"nodeType":"ArrayTypeName","src":"13414:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"amount","nameLocation":"13460:6:1","nodeType":"VariableDeclaration","scope":214,"src":"13443:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"13443:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":204,"nodeType":"ArrayTypeName","src":"13443:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"force","nameLocation":"13490:5:1","nodeType":"VariableDeclaration","scope":214,"src":"13476:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":206,"name":"bool","nodeType":"ElementaryTypeName","src":"13476:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":207,"nodeType":"ArrayTypeName","src":"13476:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"data","nameLocation":"13520:4:1","nodeType":"VariableDeclaration","scope":214,"src":"13505:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":209,"name":"bytes","nodeType":"ElementaryTypeName","src":"13505:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":210,"nodeType":"ArrayTypeName","src":"13505:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"13373:157:1"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"13539:0:1"},"scope":225,"src":"13351:189:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"13546:460:1","text":" @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\n @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\n @param data An array of ABI encoded function calls to be called on the contract.\n @return results An array of abi-encoded data returned by the functions executed."},"functionSelector":"6963d438","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"batchCalls","nameLocation":"14020:10:1","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"data","nameLocation":"14057:4:1","nodeType":"VariableDeclaration","scope":224,"src":"14040:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":216,"name":"bytes","nodeType":"ElementaryTypeName","src":"14040:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":217,"nodeType":"ArrayTypeName","src":"14040:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14030:37:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"results","nameLocation":"14101:7:1","nodeType":"VariableDeclaration","scope":224,"src":"14086:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":220,"name":"bytes","nodeType":"ElementaryTypeName","src":"14086:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":221,"nodeType":"ArrayTypeName","src":"14086:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"14085:24:1"},"scope":225,"src":"14011:99:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":226,"src":"343:13769:1","usedErrors":[],"usedEvents":[13,76,87,98]}],"src":"40:14073:1"},"id":1},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[403],"Ownable":[373]},"id":374,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":227,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:2"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":229,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":374,"sourceUnit":404,"src":"128:45:2","symbolAliases":[{"foreign":{"id":228,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"136:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":231,"name":"Context","nameLocations":["692:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":403,"src":"692:7:2"},"id":232,"nodeType":"InheritanceSpecifier","src":"692:7:2"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"175:487:2","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":373,"linearizedBaseContracts":[373,403],"name":"Ownable","nameLocation":"681:7:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":234,"mutability":"mutable","name":"_owner","nameLocation":"722:6:2","nodeType":"VariableDeclaration","scope":373,"src":"706:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"735:85:2","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":239,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:2","nodeType":"ErrorDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"account","nameLocation":"866:7:2","nodeType":"VariableDeclaration","scope":239,"src":"858:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:2"},"src":"825:50:2"},{"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"881:82:2","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":244,"name":"OwnableInvalidOwner","nameLocation":"974:19:2","nodeType":"ErrorDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"owner","nameLocation":"1002:5:2","nodeType":"VariableDeclaration","scope":244,"src":"994:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:2"},"src":"968:41:2"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":250,"name":"OwnershipTransferred","nameLocation":"1021:20:2","nodeType":"EventDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:2","nodeType":"VariableDeclaration","scope":250,"src":"1042:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":245,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":248,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:2","nodeType":"VariableDeclaration","scope":250,"src":"1073:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:2"},"src":"1015:84:2"},{"body":{"id":275,"nodeType":"Block","src":"1259:153:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":256,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"1273:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:2","typeDescriptions":{}}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":270,"nodeType":"IfStatement","src":"1269:95:2","trueBody":{"id":269,"nodeType":"Block","src":"1301:63:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:2","typeDescriptions":{}}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":262,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"1322:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":268,"nodeType":"RevertStatement","src":"1315:38:2"}]}},{"expression":{"arguments":[{"id":272,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"1392:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":271,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1373:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":274,"nodeType":"ExpressionStatement","src":"1373:32:2"}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"1105:115:2","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":276,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:2","nodeType":"VariableDeclaration","scope":276,"src":"1237:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:2"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"1259:0:2"},"scope":373,"src":"1225:187:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":283,"nodeType":"Block","src":"1521:41:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":279,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1531:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":281,"nodeType":"ExpressionStatement","src":"1531:13:2"},{"id":282,"nodeType":"PlaceholderStatement","src":"1554:1:2"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"1418:77:2","text":" @dev Throws if called by any account other than the owner."},"id":284,"name":"onlyOwner","nameLocation":"1509:9:2","nodeType":"ModifierDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[],"src":"1518:2:2"},"src":"1500:62:2","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"1693:30:2","statements":[{"expression":{"id":290,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"1710:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":289,"id":291,"nodeType":"Return","src":"1703:13:2"}]},"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"1568:65:2","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":293,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:2","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[],"src":"1652:2:2"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"1684:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:2"},"scope":373,"src":"1638:85:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":309,"nodeType":"Block","src":"1841:117:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1855:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":299,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"1866:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":308,"nodeType":"IfStatement","src":"1851:101:2","trueBody":{"id":307,"nodeType":"Block","src":"1880:72:2","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":303,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"1928:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":302,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"1901:26:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":306,"nodeType":"RevertStatement","src":"1894:47:2"}]}}]},"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"1729:62:2","text":" @dev Throws if the sender is not the owner."},"id":310,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:2","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"1816:2:2"},"returnParameters":{"id":296,"nodeType":"ParameterList","parameters":[],"src":"1841:0:2"},"scope":373,"src":"1796:162:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":323,"nodeType":"Block","src":"2347:47:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:2","typeDescriptions":{}}},"id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":316,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"2357:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"ExpressionStatement","src":"2357:30:2"}]},"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"1964:324:2","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":324,"implemented":true,"kind":"function","modifiers":[{"id":314,"kind":"modifierInvocation","modifierName":{"id":313,"name":"onlyOwner","nameLocations":["2337:9:2"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"2337:9:2"},"nodeType":"ModifierInvocation","src":"2337:9:2"}],"name":"renounceOwnership","nameLocation":"2302:17:2","nodeType":"FunctionDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[],"src":"2319:2:2"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[],"src":"2347:0:2"},"scope":373,"src":"2293:101:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":351,"nodeType":"Block","src":"2613:145:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":332,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2627:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:2","typeDescriptions":{}}},"id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":346,"nodeType":"IfStatement","src":"2623:91:2","trueBody":{"id":345,"nodeType":"Block","src":"2651:63:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:2","typeDescriptions":{}}},"id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":338,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"2672:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"RevertStatement","src":"2665:38:2"}]}},{"expression":{"arguments":[{"id":348,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2742:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":347,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"2723:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":350,"nodeType":"ExpressionStatement","src":"2723:28:2"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"2400:138:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":352,"implemented":true,"kind":"function","modifiers":[{"id":330,"kind":"modifierInvocation","modifierName":{"id":329,"name":"onlyOwner","nameLocations":["2603:9:2"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"2603:9:2"},"nodeType":"ModifierInvocation","src":"2603:9:2"}],"name":"transferOwnership","nameLocation":"2552:17:2","nodeType":"FunctionDefinition","parameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:2","nodeType":"VariableDeclaration","scope":352,"src":"2570:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:2"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[],"src":"2613:0:2"},"scope":373,"src":"2543:215:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":371,"nodeType":"Block","src":"2975:124:2","statements":[{"assignments":[359],"declarations":[{"constant":false,"id":359,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:2","nodeType":"VariableDeclaration","scope":371,"src":"2985:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":361,"initialValue":{"id":360,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"3004:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:2"},{"expression":{"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":362,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"3020:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":363,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"3029:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":365,"nodeType":"ExpressionStatement","src":"3020:17:2"},{"eventCall":{"arguments":[{"id":367,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"3073:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":368,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"3083:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":366,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"3052:20:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":370,"nodeType":"EmitStatement","src":"3047:45:2"}]},"documentation":{"id":353,"nodeType":"StructuredDocumentation","src":"2764:143:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:2","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:2","nodeType":"VariableDeclaration","scope":372,"src":"2940:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:2"},"returnParameters":{"id":357,"nodeType":"ParameterList","parameters":[],"src":"2975:0:2"},"scope":373,"src":"2912:187:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":374,"src":"663:2438:2","usedErrors":[239,244],"usedEvents":[250]}],"src":"102:3000:2"},"id":2},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[403]},"id":404,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":375,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:3"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"127:496:3","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":403,"linearizedBaseContracts":[403],"name":"Context","nameLocation":"642:7:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":384,"nodeType":"Block","src":"718:34:3","statements":[{"expression":{"expression":{"id":381,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:3","memberName":"sender","nodeType":"MemberAccess","src":"735:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":380,"id":383,"nodeType":"Return","src":"728:17:3"}]},"id":385,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:3","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[],"src":"675:2:3"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":385,"src":"709:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:3"},"scope":403,"src":"656:96:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":393,"nodeType":"Block","src":"825:32:3","statements":[{"expression":{"expression":{"id":390,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:3","memberName":"data","nodeType":"MemberAccess","src":"842:8:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":389,"id":392,"nodeType":"Return","src":"835:15:3"}]},"id":394,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:3","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"775:2:3"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":394,"src":"809:14:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":387,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:3"},"scope":403,"src":"758:99:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"935:25:3","statements":[{"expression":{"hexValue":"30","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":398,"id":400,"nodeType":"Return","src":"945:8:3"}]},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:3","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"892:2:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"926:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":396,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:3"},"scope":403,"src":"863:97:3","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":404,"src":"624:338:3","usedErrors":[],"usedEvents":[]}],"src":"101:862:3"},"id":3},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[415]},"id":416,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":405,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"141:279:4","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":415,"linearizedBaseContracts":[415],"name":"IERC165","nameLocation":"431:7:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"445:340:4","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":414,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:4","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:4","nodeType":"VariableDeclaration","scope":414,"src":"817:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":408,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:4"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":414,"src":"860:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":411,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:4"},"scope":415,"src":"790:76:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":416,"src":"421:447:4","usedErrors":[],"usedEvents":[]}],"src":"115:754:4"},"id":4},"contracts/EurocupLegends.sol":{"ast":{"absolutePath":"contracts/EurocupLegends.sol","exportedSymbols":{"AlreadyClaimedPrize":[881],"EurocupLegends":[831],"FeeTransferFailed":[895],"IEurocupLegends":[851],"ITickets":[871],"InvalidMintPrice":[877],"MintLimitExceeded":[875],"NoPrizeForThisTicket":[879],"NoTickets":[883],"NoWinnersYet":[897],"Ownable":[373],"TransferFailed":[889],"ZeroAddress":[885],"ZeroAmount":[887]},"id":832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":417,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":419,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":832,"sourceUnit":374,"src":"57:67:5","symbolAliases":[{"foreign":{"id":418,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"65:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","file":"./interfaces/IEurocupLegends.sol","id":421,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":832,"sourceUnit":852,"src":"125:65:5","symbolAliases":[{"foreign":{"id":420,"name":"IEurocupLegends","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"133:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ITickets.sol","file":"./interfaces/ITickets.sol","id":423,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":832,"sourceUnit":872,"src":"191:51:5","symbolAliases":[{"foreign":{"id":422,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"199:8:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"./utils/Errors.sol","id":424,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":832,"sourceUnit":898,"src":"243:28:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":425,"name":"IEurocupLegends","nameLocations":["300:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":851,"src":"300:15:5"},"id":426,"nodeType":"InheritanceSpecifier","src":"300:15:5"},{"baseName":{"id":427,"name":"Ownable","nameLocations":["317:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"317:7:5"},"id":428,"nodeType":"InheritanceSpecifier","src":"317:7:5"}],"canonicalName":"EurocupLegends","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":831,"linearizedBaseContracts":[831,373,403,851],"name":"EurocupLegends","nameLocation":"282:14:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"000b46f8","id":431,"mutability":"constant","name":"FEE_PERCENTAGE","nameLocation":"355:14:5","nodeType":"VariableDeclaration","scope":831,"src":"331:43:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"331:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"372:2:5","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"5fc5e020","id":434,"mutability":"constant","name":"SHARE_PRECISION","nameLocation":"404:15:5","nodeType":"VariableDeclaration","scope":831,"src":"380:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:3:5","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"29a62a76","id":437,"mutability":"constant","name":"MAX_WINNERS","nameLocation":"455:11:5","nodeType":"VariableDeclaration","scope":831,"src":"431:39:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":435,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"469:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"id":441,"mutability":"mutable","name":"s_creators","nameLocation":"495:10:5","nodeType":"VariableDeclaration","scope":831,"src":"477:28:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":439,"nodeType":"UserDefinedTypeName","pathNode":{"id":438,"name":"Creator","nameLocations":["477:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"477:7:5"},"referencedDeclaration":838,"src":"477:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":440,"nodeType":"ArrayTypeName","src":"477:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"private"},{"constant":false,"id":445,"mutability":"mutable","name":"s_winners","nameLocation":"530:9:5","nodeType":"VariableDeclaration","scope":831,"src":"511:28:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3]"},"typeName":{"baseType":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":444,"length":{"hexValue":"33","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"519:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"511:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"private"},{"constant":false,"id":449,"mutability":"mutable","name":"s_prizes","nameLocation":"595:8:5","nodeType":"VariableDeclaration","scope":831,"src":"546:57:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":448,"keyName":"ticket","keyNameLocation":"562:6:5","keyType":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"546:40:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"prize","valueNameLocation":"580:5:5","valueType":{"id":447,"name":"uint256","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":455,"mutability":"mutable","name":"s_isClaimed","nameLocation":"684:11:5","nodeType":"VariableDeclaration","scope":831,"src":"609:86:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":454,"keyName":"user","keyNameLocation":"625:4:5","keyType":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"617:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"609:66:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":453,"keyName":"ticket","keyNameLocation":"649:6:5","keyType":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"641:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"633:41:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"isClaimed","valueNameLocation":"664:9:5","valueType":{"id":452,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":487,"nodeType":"Block","src":"774:112:5","statements":[{"body":{"id":485,"nodeType":"Block","src":"826:54:5","statements":[{"expression":{"arguments":[{"baseExpression":{"id":480,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"856:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":482,"indexExpression":{"id":481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"866:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"856:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}],"expression":{"id":477,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"840:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"851:4:5","memberName":"push","nodeType":"MemberAccess","src":"840:15:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Creator_$838_storage_$dyn_storage_ptr_$_t_struct$_Creator_$838_storage_$returns$__$attached_to$_t_array$_t_struct$_Creator_$838_storage_$dyn_storage_ptr_$","typeString":"function (struct IEurocupLegends.Creator storage ref[] storage pointer,struct IEurocupLegends.Creator storage ref)"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"840:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":484,"nodeType":"ExpressionStatement","src":"840:29:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":470,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"799:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":471,"name":"_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"803:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator memory[] memory"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"813:6:5","memberName":"length","nodeType":"MemberAccess","src":"803:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"799:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":486,"initializationExpression":{"assignments":[468],"declarations":[{"constant":false,"id":468,"mutability":"mutable","name":"i","nameLocation":"796:1:5","nodeType":"VariableDeclaration","scope":486,"src":"788:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":467,"name":"uint256","nodeType":"ElementaryTypeName","src":"788:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":469,"nodeType":"VariableDeclarationStatement","src":"788:9:5"},"loopExpression":{"expression":{"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"821:3:5","subExpression":{"id":474,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"821:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":476,"nodeType":"ExpressionStatement","src":"821:3:5"},"nodeType":"ForStatement","src":"784:96:5"}]},"id":488,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":464,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"766:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":465,"kind":"baseConstructorSpecifier","modifierName":{"id":463,"name":"Ownable","nameLocations":["758:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"758:7:5"},"nodeType":"ModifierInvocation","src":"758:15:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"_creators","nameLocation":"731:9:5","nodeType":"VariableDeclaration","scope":488,"src":"714:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":457,"nodeType":"UserDefinedTypeName","pathNode":{"id":456,"name":"Creator","nameLocations":["714:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"714:7:5"},"referencedDeclaration":838,"src":"714:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":458,"nodeType":"ArrayTypeName","src":"714:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"},{"constant":false,"id":461,"mutability":"mutable","name":"_owner","nameLocation":"750:6:5","nodeType":"VariableDeclaration","scope":488,"src":"742:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"742:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"713:44:5"},"returnParameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"774:0:5"},"scope":831,"src":"702:184:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":565,"nodeType":"Block","src":"1009:456:5","statements":[{"assignments":[502],"declarations":[{"constant":false,"id":502,"mutability":"mutable","name":"winnersLength","nameLocation":"1027:13:5","nodeType":"VariableDeclaration","scope":565,"src":"1019:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"1019:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":505,"initialValue":{"expression":{"id":503,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"1043:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1053:6:5","memberName":"length","nodeType":"MemberAccess","src":"1043:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1019:40:5"},{"assignments":[507],"declarations":[{"constant":false,"id":507,"mutability":"mutable","name":"totalPrize","nameLocation":"1077:10:5","nodeType":"VariableDeclaration","scope":565,"src":"1069:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":513,"initialValue":{"expression":{"arguments":[{"id":510,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1098:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_EurocupLegends_$831","typeString":"contract EurocupLegends"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EurocupLegends_$831","typeString":"contract EurocupLegends"}],"id":509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1090:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"1090:7:5","typeDescriptions":{}}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1090:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1104:7:5","memberName":"balance","nodeType":"MemberAccess","src":"1090:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1069:42:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":514,"name":"winnersLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1125:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":515,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"1142:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1125:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":520,"nodeType":"IfStatement","src":"1122:54:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":517,"name":"NoWinnersYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"1162:12:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":519,"nodeType":"RevertStatement","src":"1155:21:5"}},{"body":{"id":559,"nodeType":"Block","src":"1224:199:5","statements":[{"assignments":[531],"declarations":[{"constant":false,"id":531,"mutability":"mutable","name":"winner","nameLocation":"1246:6:5","nodeType":"VariableDeclaration","scope":559,"src":"1238:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":535,"initialValue":{"baseExpression":{"id":532,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"1255:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}},"id":534,"indexExpression":{"id":533,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1264:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1255:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1238:28:5"},{"assignments":[537],"declarations":[{"constant":false,"id":537,"mutability":"mutable","name":"prize","nameLocation":"1288:5:5","nodeType":"VariableDeclaration","scope":559,"src":"1280:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":536,"name":"uint256","nodeType":"ElementaryTypeName","src":"1280:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":546,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":538,"name":"totalPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"1297:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"baseExpression":{"id":539,"name":"_share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"1310:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3] calldata"}},"id":541,"indexExpression":{"id":540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1317:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1310:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1297:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1296:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":544,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"1323:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1296:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1280:58:5"},{"expression":{"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":547,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"1353:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"id":549,"indexExpression":{"id":548,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1363:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1353:12:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":550,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"1368:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1353:21:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":552,"nodeType":"ExpressionStatement","src":"1353:21:5"},{"expression":{"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":553,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1388:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":555,"indexExpression":{"id":554,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"1397:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1388:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":556,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1407:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1388:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":558,"nodeType":"ExpressionStatement","src":"1388:24:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":524,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1202:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":525,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"1206:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1202:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":560,"initializationExpression":{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"i","nameLocation":"1199:1:5","nodeType":"VariableDeclaration","scope":560,"src":"1191:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":523,"nodeType":"VariableDeclarationStatement","src":"1191:9:5"},"loopExpression":{"expression":{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1219:3:5","subExpression":{"id":527,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1219:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":529,"nodeType":"ExpressionStatement","src":"1219:3:5"},"nodeType":"ForStatement","src":"1187:236:5"},{"eventCall":{"arguments":[{"id":562,"name":"_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"1449:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3] calldata"}],"id":561,"name":"WinnersSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"1438:10:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_address_$3_memory_ptr_$returns$__$","typeString":"function (address[3] memory)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":564,"nodeType":"EmitStatement","src":"1433:25:5"}]},"functionSelector":"76602f2f","id":566,"implemented":true,"kind":"function","modifiers":[{"id":499,"kind":"modifierInvocation","modifierName":{"id":498,"name":"onlyOwner","nameLocations":["999:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"999:9:5"},"nodeType":"ModifierInvocation","src":"999:9:5"}],"name":"setWinners","nameLocation":"901:10:5","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"_winners","nameLocation":"942:8:5","nodeType":"VariableDeclaration","scope":566,"src":"912:38:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_calldata_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":491,"length":{"id":490,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"920:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"912:20:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"_share","nameLocation":"982:6:5","nodeType":"VariableDeclaration","scope":566,"src":"952:36:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_calldata_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"952:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":495,"length":{"id":494,"name":"MAX_WINNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"960:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"ArrayTypeName","src":"952:20:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"911:78:5"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"1009:0:5"},"scope":831,"src":"892:573:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":649,"nodeType":"Block","src":"1517:521:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":571,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1530:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1549:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1541:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"1541:7:5","typeDescriptions":{}}},"id":575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1541:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1530:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":580,"nodeType":"IfStatement","src":"1527:46:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":577,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"1560:11:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1560:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":579,"nodeType":"RevertStatement","src":"1553:20:5"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":581,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1586:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":583,"indexExpression":{"id":582,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1595:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1586:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1607:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1586:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"1583:56:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":586,"name":"NoPrizeForThisTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"1617:20:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1617:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"RevertStatement","src":"1610:29:5"}},{"condition":{"baseExpression":{"baseExpression":{"id":590,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1652:11:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":593,"indexExpression":{"expression":{"id":591,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1664:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1668:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1664:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1652:23:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":595,"indexExpression":{"id":594,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1676:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1652:32:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":599,"nodeType":"IfStatement","src":"1649:65:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":596,"name":"AlreadyClaimedPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"1693:19:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1693:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":598,"nodeType":"RevertStatement","src":"1686:28:5"}},{"assignments":[601],"declarations":[{"constant":false,"id":601,"mutability":"mutable","name":"prize","nameLocation":"1733:5:5","nodeType":"VariableDeclaration","scope":649,"src":"1725:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":607,"initialValue":{"arguments":[{"expression":{"id":603,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1750:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1754:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1750:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":605,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1762:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":602,"name":"getPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1741:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1741:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:45:5"},{"expression":{"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":608,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1781:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":610,"indexExpression":{"id":609,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1790:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1781:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":611,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1801:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":613,"indexExpression":{"id":612,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1810:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1801:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":614,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1821:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1801:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:45:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":617,"nodeType":"ExpressionStatement","src":"1781:45:5"},{"expression":{"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":618,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1836:11:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":622,"indexExpression":{"expression":{"id":619,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1848:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1848:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1836:23:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":623,"indexExpression":{"id":621,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1860:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1836:32:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1871:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1836:39:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":626,"nodeType":"ExpressionStatement","src":"1836:39:5"},{"assignments":[628,null],"declarations":[{"constant":false,"id":628,"mutability":"mutable","name":"success","nameLocation":"1892:7:5","nodeType":"VariableDeclaration","scope":649,"src":"1887:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"1887:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":636,"initialValue":{"arguments":[{"hexValue":"","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1935:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":629,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1905:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1909:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1905:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1916:4:5","memberName":"call","nodeType":"MemberAccess","src":"1905:15:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":632,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1928:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1905:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1905:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1886:52:5"},{"condition":{"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1951:8:5","subExpression":{"id":637,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"1952:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":642,"nodeType":"IfStatement","src":"1948:36:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":639,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1968:14:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1968:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":641,"nodeType":"RevertStatement","src":"1961:23:5"}},{"eventCall":{"arguments":[{"expression":{"id":644,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2013:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2017:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2013:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":646,"name":"prize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2025:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":643,"name":"PrizeClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"2000:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2000:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":648,"nodeType":"EmitStatement","src":"1995:36:5"}]},"functionSelector":"e5e9b661","id":650,"implemented":true,"kind":"function","modifiers":[],"name":"claimPrize","nameLocation":"1480:10:5","nodeType":"FunctionDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"_ticket","nameLocation":"1499:7:5","nodeType":"VariableDeclaration","scope":650,"src":"1491:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1490:17:5"},"returnParameters":{"id":570,"nodeType":"ParameterList","parameters":[],"src":"1517:0:5"},"scope":831,"src":"1471:567:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":665,"nodeType":"Block","src":"2124:51:5","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":659,"name":"s_isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2141:11:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":661,"indexExpression":{"id":660,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"2153:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2141:18:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":663,"indexExpression":{"id":662,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2160:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2141:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":658,"id":664,"nodeType":"Return","src":"2134:34:5"}]},"functionSelector":"a4df0758","id":666,"implemented":true,"kind":"function","modifiers":[],"name":"isClaimed","nameLocation":"2053:9:5","nodeType":"FunctionDefinition","parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"_user","nameLocation":"2071:5:5","nodeType":"VariableDeclaration","scope":666,"src":"2063:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"2063:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"_ticket","nameLocation":"2086:7:5","nodeType":"VariableDeclaration","scope":666,"src":"2078:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"2078:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2062:32:5"},"returnParameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":666,"src":"2118:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":656,"name":"bool","nodeType":"ElementaryTypeName","src":"2118:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2117:6:5"},"scope":831,"src":"2044:131:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":675,"nodeType":"Block","src":"2245:34:5","statements":[{"expression":{"id":673,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2262:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"functionReturnParameters":672,"id":674,"nodeType":"Return","src":"2255:17:5"}]},"functionSelector":"e6adc1ee","id":676,"implemented":true,"kind":"function","modifiers":[],"name":"getCreators","nameLocation":"2190:11:5","nodeType":"FunctionDefinition","parameters":{"id":667,"nodeType":"ParameterList","parameters":[],"src":"2201:2:5"},"returnParameters":{"id":672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":676,"src":"2227:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr","typeString":"struct IEurocupLegends.Creator[]"},"typeName":{"baseType":{"id":669,"nodeType":"UserDefinedTypeName","pathNode":{"id":668,"name":"Creator","nameLocations":["2227:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"2227:7:5"},"referencedDeclaration":838,"src":"2227:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"id":670,"nodeType":"ArrayTypeName","src":"2227:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage_ptr","typeString":"struct IEurocupLegends.Creator[]"}},"visibility":"internal"}],"src":"2226:18:5"},"scope":831,"src":"2181:98:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":685,"nodeType":"Block","src":"2349:33:5","statements":[{"expression":{"id":683,"name":"s_winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"2366:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage","typeString":"address[3] storage ref"}},"functionReturnParameters":682,"id":684,"nodeType":"Return","src":"2359:16:5"}]},"functionSelector":"df15c37e","id":686,"implemented":true,"kind":"function","modifiers":[],"name":"getWinners","nameLocation":"2294:10:5","nodeType":"FunctionDefinition","parameters":{"id":677,"nodeType":"ParameterList","parameters":[],"src":"2304:2:5"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":686,"src":"2330:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"2330:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":680,"length":{"hexValue":"33","id":679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2338:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2330:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"2329:19:5"},"scope":831,"src":"2285:97:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":732,"nodeType":"Block","src":"2468:296:5","statements":[{"assignments":[696],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"ticketPrize","nameLocation":"2486:11:5","nodeType":"VariableDeclaration","scope":732,"src":"2478:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":695,"name":"uint256","nodeType":"ElementaryTypeName","src":"2478:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":700,"initialValue":{"baseExpression":{"id":697,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2500:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":699,"indexExpression":{"id":698,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"2509:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2500:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2478:39:5"},{"assignments":[702],"declarations":[{"constant":false,"id":702,"mutability":"mutable","name":"userTickets","nameLocation":"2535:11:5","nodeType":"VariableDeclaration","scope":732,"src":"2527:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"2527:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":709,"initialValue":{"arguments":[{"id":707,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"2577:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":704,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"2558:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":703,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"2549:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITickets_$871_$","typeString":"type(contract ITickets)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2549:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITickets_$871","typeString":"contract ITickets"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2567:9:5","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":118,"src":"2549:27:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2549:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2527:56:5"},{"assignments":[711],"declarations":[{"constant":false,"id":711,"mutability":"mutable","name":"totalTickets","nameLocation":"2601:12:5","nodeType":"VariableDeclaration","scope":732,"src":"2593:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2593:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":717,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":713,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"2625:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":712,"name":"ITickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"2616:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITickets_$871_$","typeString":"type(contract ITickets)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITickets_$871","typeString":"contract ITickets"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2634:11:5","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":110,"src":"2616:29:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2593:54:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":718,"name":"userTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2661:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2676:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2661:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":724,"nodeType":"IfStatement","src":"2658:39:5","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":721,"name":"NoTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2686:9:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2686:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":723,"nodeType":"RevertStatement","src":"2679:18:5"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":725,"name":"userTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2716:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":726,"name":"ticketPrize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"2730:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2716:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2715:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":729,"name":"totalTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"2745:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2715:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":694,"id":731,"nodeType":"Return","src":"2708:49:5"}]},"functionSelector":"7eef2509","id":733,"implemented":true,"kind":"function","modifiers":[],"name":"getPrize","nameLocation":"2397:8:5","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"_user","nameLocation":"2414:5:5","nodeType":"VariableDeclaration","scope":733,"src":"2406:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"2406:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"_ticket","nameLocation":"2429:7:5","nodeType":"VariableDeclaration","scope":733,"src":"2421:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2405:32:5"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":733,"src":"2459:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2459:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2458:9:5"},"scope":831,"src":"2388:376:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":744,"nodeType":"Block","src":"2841:41:5","statements":[{"expression":{"baseExpression":{"id":740,"name":"s_prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2858:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":742,"indexExpression":{"id":741,"name":"_ticket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"2867:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2858:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":739,"id":743,"nodeType":"Return","src":"2851:24:5"}]},"functionSelector":"9966db94","id":745,"implemented":true,"kind":"function","modifiers":[],"name":"getTicketPrize","nameLocation":"2779:14:5","nodeType":"FunctionDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"_ticket","nameLocation":"2802:7:5","nodeType":"VariableDeclaration","scope":745,"src":"2794:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":734,"name":"address","nodeType":"ElementaryTypeName","src":"2794:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2793:17:5"},"returnParameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":745,"src":"2832:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"2832:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2831:9:5"},"scope":831,"src":"2770:112:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":811,"nodeType":"Block","src":"2937:525:5","statements":[{"assignments":[751],"declarations":[{"constant":false,"id":751,"mutability":"mutable","name":"fees","nameLocation":"2982:4:5","nodeType":"VariableDeclaration","scope":811,"src":"2974:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"2974:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":758,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"2990:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":753,"name":"FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"3000:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2990:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":755,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2989:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":756,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"3018:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2989:44:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2974:59:5"},{"assignments":[760],"declarations":[{"constant":false,"id":760,"mutability":"mutable","name":"creatorsLength","nameLocation":"3052:14:5","nodeType":"VariableDeclaration","scope":811,"src":"3044:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"3044:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":763,"initialValue":{"expression":{"id":761,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"3069:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3080:6:5","memberName":"length","nodeType":"MemberAccess","src":"3069:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3044:42:5"},{"body":{"id":809,"nodeType":"Block","src":"3173:283:5","statements":[{"assignments":[775],"declarations":[{"constant":false,"id":775,"mutability":"mutable","name":"creator","nameLocation":"3202:7:5","nodeType":"VariableDeclaration","scope":809,"src":"3187:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator"},"typeName":{"id":774,"nodeType":"UserDefinedTypeName","pathNode":{"id":773,"name":"Creator","nameLocations":["3187:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"3187:7:5"},"referencedDeclaration":838,"src":"3187:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_storage_ptr","typeString":"struct IEurocupLegends.Creator"}},"visibility":"internal"}],"id":779,"initialValue":{"baseExpression":{"id":776,"name":"s_creators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"3212:10:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Creator_$838_storage_$dyn_storage","typeString":"struct IEurocupLegends.Creator storage ref[] storage ref"}},"id":778,"indexExpression":{"id":777,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"3223:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3212:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_storage","typeString":"struct IEurocupLegends.Creator storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3187:38:5"},{"assignments":[781],"declarations":[{"constant":false,"id":781,"mutability":"mutable","name":"feeCut","nameLocation":"3248:6:5","nodeType":"VariableDeclaration","scope":809,"src":"3240:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"3240:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":789,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":782,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"3258:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":783,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3265:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":784,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3273:5:5","memberName":"share","nodeType":"MemberAccess","referencedDeclaration":837,"src":"3265:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3258:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3257:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":787,"name":"SHARE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"3282:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:40:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3240:57:5"},{"assignments":[791,null],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"success","nameLocation":"3318:7:5","nodeType":"VariableDeclaration","scope":809,"src":"3313:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":790,"name":"bool","nodeType":"ElementaryTypeName","src":"3313:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":799,"initialValue":{"arguments":[{"hexValue":"","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3366:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":792,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3330:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3338:7:5","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":835,"src":"3330:15:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3346:4:5","memberName":"call","nodeType":"MemberAccess","src":"3330:20:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":795,"name":"feeCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"3358:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3330:35:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3330:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3312:57:5"},{"condition":{"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3386:8:5","subExpression":{"id":800,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"3387:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":808,"nodeType":"IfStatement","src":"3383:62:5","trueBody":{"errorCall":{"arguments":[{"expression":{"id":803,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3421:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Creator_$838_memory_ptr","typeString":"struct IEurocupLegends.Creator memory"}},"id":804,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3429:7:5","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":835,"src":"3421:15:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":805,"name":"feeCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"3438:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":802,"name":"FeeTransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"3403:17:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3403:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":807,"nodeType":"RevertStatement","src":"3396:49:5"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":767,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"3148:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":768,"name":"creatorsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"3152:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3148:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":810,"initializationExpression":{"assignments":[765],"declarations":[{"constant":false,"id":765,"mutability":"mutable","name":"i","nameLocation":"3145:1:5","nodeType":"VariableDeclaration","scope":810,"src":"3137:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"3137:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":766,"nodeType":"VariableDeclarationStatement","src":"3137:9:5"},"loopExpression":{"expression":{"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3168:3:5","subExpression":{"id":770,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"3168:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ExpressionStatement","src":"3168:3:5"},"nodeType":"ForStatement","src":"3133:323:5"}]},"id":812,"implemented":true,"kind":"function","modifiers":[],"name":"_handleDeposit","nameLocation":"2897:14:5","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"_amount","nameLocation":"2920:7:5","nodeType":"VariableDeclaration","scope":812,"src":"2912:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":746,"name":"uint256","nodeType":"ElementaryTypeName","src":"2912:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2911:17:5"},"returnParameters":{"id":749,"nodeType":"ParameterList","parameters":[],"src":"2937:0:5"},"scope":831,"src":"2888:574:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":820,"nodeType":"Block","src":"3495:42:5","statements":[{"expression":{"arguments":[{"expression":{"id":816,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3520:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3524:5:5","memberName":"value","nodeType":"MemberAccess","src":"3520:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":815,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"3505:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3505:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":819,"nodeType":"ExpressionStatement","src":"3505:25:5"}]},"id":821,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"3475:2:5"},"returnParameters":{"id":814,"nodeType":"ParameterList","parameters":[],"src":"3495:0:5"},"scope":831,"src":"3468:69:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":829,"nodeType":"Block","src":"3571:42:5","statements":[{"expression":{"arguments":[{"expression":{"id":825,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3596:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3600:5:5","memberName":"value","nodeType":"MemberAccess","src":"3596:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":824,"name":"_handleDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"3581:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3581:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":828,"nodeType":"ExpressionStatement","src":"3581:25:5"}]},"id":830,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[],"src":"3551:2:5"},"returnParameters":{"id":823,"nodeType":"ParameterList","parameters":[],"src":"3571:0:5"},"scope":831,"src":"3543:70:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":832,"src":"273:3342:5","usedErrors":[239,244,879,881,883,885,889,895,897],"usedEvents":[250,844,850]}],"src":"32:3583:5"},"id":5},"contracts/interfaces/IEurocupLegends.sol":{"ast":{"absolutePath":"contracts/interfaces/IEurocupLegends.sol","exportedSymbols":{"IEurocupLegends":[851]},"id":852,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":833,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IEurocupLegends","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":851,"linearizedBaseContracts":[851],"name":"IEurocupLegends","nameLocation":"67:15:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IEurocupLegends.Creator","id":838,"members":[{"constant":false,"id":835,"mutability":"mutable","name":"creator","nameLocation":"122:7:6","nodeType":"VariableDeclaration","scope":838,"src":"114:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":834,"name":"address","nodeType":"ElementaryTypeName","src":"114:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":837,"mutability":"mutable","name":"share","nameLocation":"147:5:6","nodeType":"VariableDeclaration","scope":838,"src":"139:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"139:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Creator","nameLocation":"96:7:6","nodeType":"StructDefinition","scope":851,"src":"89:70:6","visibility":"public"},{"anonymous":false,"eventSelector":"60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea","id":844,"name":"WinnersSet","nameLocation":"171:10:6","nodeType":"EventDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"indexed":false,"mutability":"mutable","name":"winners","nameLocation":"193:7:6","nodeType":"VariableDeclaration","scope":844,"src":"182:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_memory_ptr","typeString":"address[3]"},"typeName":{"baseType":{"id":839,"name":"address","nodeType":"ElementaryTypeName","src":"182:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":841,"length":{"hexValue":"33","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"190:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"182:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$3_storage_ptr","typeString":"address[3]"}},"visibility":"internal"}],"src":"181:20:6"},"src":"165:37:6"},{"anonymous":false,"eventSelector":"95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770","id":850,"name":"PrizeClaimed","nameLocation":"213:12:6","nodeType":"EventDefinition","parameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"234:5:6","nodeType":"VariableDeclaration","scope":850,"src":"226:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":845,"name":"address","nodeType":"ElementaryTypeName","src":"226:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":848,"indexed":false,"mutability":"mutable","name":"prize","nameLocation":"249:5:6","nodeType":"VariableDeclaration","scope":850,"src":"241:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":847,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"225:30:6"},"src":"207:49:6"}],"scope":852,"src":"57:201:6","usedErrors":[],"usedEvents":[844,850]}],"src":"32:226:6"},"id":6},"contracts/interfaces/ITickets.sol":{"ast":{"absolutePath":"contracts/interfaces/ITickets.sol","exportedSymbols":{"ILSP7DigitalAsset":[225],"ITickets":[871]},"id":872,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":853,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","file":"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol","id":855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":872,"sourceUnit":226,"src":"57:88:7","symbolAliases":[{"foreign":{"id":854,"name":"ILSP7DigitalAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"65:17:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":856,"name":"ILSP7DigitalAsset","nameLocations":["168:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"168:17:7"},"id":857,"nodeType":"InheritanceSpecifier","src":"168:17:7"}],"canonicalName":"ITickets","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":871,"linearizedBaseContracts":[871,225,50,415],"name":"ITickets","nameLocation":"156:8:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"64f70b72cc0e9e53852e2481e43068b546390216d3d062dbe11d9ecf7580835f","id":863,"name":"TicketsMinted","nameLocation":"198:13:7","nodeType":"EventDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"indexed":false,"mutability":"mutable","name":"_recipient","nameLocation":"220:10:7","nodeType":"VariableDeclaration","scope":863,"src":"212:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"212:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":861,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"240:7:7","nodeType":"VariableDeclaration","scope":863,"src":"232:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":860,"name":"uint256","nodeType":"ElementaryTypeName","src":"232:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"211:37:7"},"src":"192:57:7"},{"functionSelector":"40c10f19","id":870,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"264:4:7","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"_recipient","nameLocation":"286:10:7","nodeType":"VariableDeclaration","scope":870,"src":"278:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"278:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"_amount","nameLocation":"314:7:7","nodeType":"VariableDeclaration","scope":870,"src":"306:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"306:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"268:59:7"},"returnParameters":{"id":869,"nodeType":"ParameterList","parameters":[],"src":"344:0:7"},"scope":871,"src":"255:90:7","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":872,"src":"146:201:7","usedErrors":[],"usedEvents":[13,76,87,98,863]}],"src":"32:315:7"},"id":7},"contracts/utils/Errors.sol":{"ast":{"absolutePath":"contracts/utils/Errors.sol","exportedSymbols":{"AlreadyClaimedPrize":[881],"FeeTransferFailed":[895],"InvalidMintPrice":[877],"MintLimitExceeded":[875],"NoPrizeForThisTicket":[879],"NoTickets":[883],"NoWinnersYet":[897],"TransferFailed":[889],"ZeroAddress":[885],"ZeroAmount":[887]},"id":898,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":873,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:8"},{"errorSelector":"b643bfa6","id":875,"name":"MintLimitExceeded","nameLocation":"63:17:8","nodeType":"ErrorDefinition","parameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"80:2:8"},"src":"57:26:8"},{"errorSelector":"0416bc16","id":877,"name":"InvalidMintPrice","nameLocation":"91:16:8","nodeType":"ErrorDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[],"src":"107:2:8"},"src":"85:25:8"},{"errorSelector":"d937573f","id":879,"name":"NoPrizeForThisTicket","nameLocation":"118:20:8","nodeType":"ErrorDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[],"src":"138:2:8"},"src":"112:29:8"},{"errorSelector":"48798a90","id":881,"name":"AlreadyClaimedPrize","nameLocation":"149:19:8","nodeType":"ErrorDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[],"src":"168:2:8"},"src":"143:28:8"},{"errorSelector":"66f3ef9b","id":883,"name":"NoTickets","nameLocation":"179:9:8","nodeType":"ErrorDefinition","parameters":{"id":882,"nodeType":"ParameterList","parameters":[],"src":"188:2:8"},"src":"173:18:8"},{"errorSelector":"d92e233d","id":885,"name":"ZeroAddress","nameLocation":"199:11:8","nodeType":"ErrorDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[],"src":"210:2:8"},"src":"193:20:8"},{"errorSelector":"1f2a2005","id":887,"name":"ZeroAmount","nameLocation":"221:10:8","nodeType":"ErrorDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"231:2:8"},"src":"215:19:8"},{"errorSelector":"90b8ec18","id":889,"name":"TransferFailed","nameLocation":"242:14:8","nodeType":"ErrorDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[],"src":"256:2:8"},"src":"236:23:8"},{"errorSelector":"6e74fa86","id":895,"name":"FeeTransferFailed","nameLocation":"267:17:8","nodeType":"ErrorDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"_creators","nameLocation":"293:9:8","nodeType":"VariableDeclaration","scope":895,"src":"285:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"_amount","nameLocation":"312:7:8","nodeType":"VariableDeclaration","scope":895,"src":"304:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"304:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"284:36:8"},"src":"261:60:8"},{"errorSelector":"1bb8ccd6","id":897,"name":"NoWinnersYet","nameLocation":"329:12:8","nodeType":"ErrorDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[],"src":"341:2:8"},"src":"323:21:8"}],"src":"32:312:8"},"id":8}},"contracts":{"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol":{"IERC725Y":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.","events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}}},"kind":"dev","methods":{"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"The interface for ERC725Y sub-standard, a generic data key/value store.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\",\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}}},\"kind\":\"dev\",\"methods\":{\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725Y sub-standard, a generic data key/value store.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":\"IERC725Y\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol":{"ILSP7DigitalAsset":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.","custom:requirements":"- `operator` cannot be the zero address.","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"custom:info":"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).","details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"custom:notice":"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.","details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"custom:events":"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.","details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} indicating the updated allowance","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.","details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"revokeOperator(address,address,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).","custom:requirements":"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.","details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"custom:events":"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"custom:events":"{Transfer} event **for each token transfer**.","custom:info":"If any transfer in the batch fail or revert, the whole call will revert.","custom:requirements":"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.","details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}}},"title":"Interface of the LSP7 - Digital Asset standard, a fungible digital asset.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.\",\"custom:requirements\":\"- `operator` cannot be the zero address.\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"custom:info\":\"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).\",\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"custom:notice\":\"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"custom:events\":\"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.\",\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} indicating the updated allowance\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"revokeOperator(address,address,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\",\"custom:requirements\":\"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.\",\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"custom:events\":\"{Transfer} event **for each token transfer**.\",\"custom:info\":\"If any transfer in the batch fail or revert, the whole call will revert.\",\"custom:requirements\":\"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\",\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}}},\"title\":\"Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":\"ILSP7DigitalAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":234,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/EurocupLegends.sol":{"EurocupLegends":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"_creators","type":"tuple[]"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyClaimedPrize","type":"error"},{"inputs":[{"internalType":"address","name":"_creators","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"FeeTransferFailed","type":"error"},{"inputs":[],"name":"NoPrizeForThisTicket","type":"error"},{"inputs":[],"name":"NoTickets","type":"error"},{"inputs":[],"name":"NoWinnersYet","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WINNERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHARE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_ticket","type":"address"}],"name":"claimPrize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCreators","outputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"internalType":"struct IEurocupLegends.Creator[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_ticket","type":"address"}],"name":"getPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_ticket","type":"address"}],"name":"getTicketPrize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWinners","outputs":[{"internalType":"address[3]","name":"","type":"address[3]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_ticket","type":"address"}],"name":"isClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[3]","name":"_winners","type":"address[3]"},{"internalType":"uint256[3]","name":"_share","type":"uint256[3]"}],"name":"setWinners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":0},"@_488":{"entryPoint":null,"id":488,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_372":{"entryPoint":251,"id":372,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":447,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptrt_address_fromMemory":{"entryPoint":476,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":396,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_575":{"entryPoint":353,"id":null,"parameterSlots":0,"returnSlots":1},"increment_t_uint256":{"entryPoint":743,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":721,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":331,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2786:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:9"},"nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:9"},"nodeType":"YulFunctionCall","src":"56:31:9"},"nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:9"},"nodeType":"YulFunctionCall","src":"96:15:9"},"nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:9"},"nodeType":"YulFunctionCall","src":"120:15:9"},"nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nodeType":"YulBlock","src":"191:205:9","statements":[{"nodeType":"YulAssignment","src":"201:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:9"},"nodeType":"YulFunctionCall","src":"211:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"229:33:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"259:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:9"},"nodeType":"YulFunctionCall","src":"247:15:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"337:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"339:16:9"},"nodeType":"YulFunctionCall","src":"339:18:9"},"nodeType":"YulExpressionStatement","src":"339:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"280:10:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"304:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"296:3:9"},"nodeType":"YulFunctionCall","src":"296:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"308:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"292:3:9"},"nodeType":"YulFunctionCall","src":"292:18:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"277:2:9"},"nodeType":"YulFunctionCall","src":"277:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"316:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"328:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"313:2:9"},"nodeType":"YulFunctionCall","src":"313:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"274:2:9"},"nodeType":"YulFunctionCall","src":"274:62:9"},"nodeType":"YulIf","src":"271:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"375:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"379:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"368:6:9"},"nodeType":"YulFunctionCall","src":"368:22:9"},"nodeType":"YulExpressionStatement","src":"368:22:9"}]},"name":"allocate_memory_575","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:9","type":""}],"src":"146:250:9"},{"body":{"nodeType":"YulBlock","src":"446:230:9","statements":[{"nodeType":"YulAssignment","src":"456:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"472:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"466:5:9"},"nodeType":"YulFunctionCall","src":"466:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"456:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"484:58:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"506:6:9"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"522:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"518:3:9"},"nodeType":"YulFunctionCall","src":"518:13:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"533:3:9"},"nodeType":"YulFunctionCall","src":"533:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"514:3:9"},"nodeType":"YulFunctionCall","src":"514:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:9"},"nodeType":"YulFunctionCall","src":"502:40:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"488:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"617:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"619:16:9"},"nodeType":"YulFunctionCall","src":"619:18:9"},"nodeType":"YulExpressionStatement","src":"619:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"560:10:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"580:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"584:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"576:3:9"},"nodeType":"YulFunctionCall","src":"576:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"588:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"572:3:9"},"nodeType":"YulFunctionCall","src":"572:18:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"557:2:9"},"nodeType":"YulFunctionCall","src":"557:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"596:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"608:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"593:2:9"},"nodeType":"YulFunctionCall","src":"593:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"554:2:9"},"nodeType":"YulFunctionCall","src":"554:62:9"},"nodeType":"YulIf","src":"551:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"655:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"659:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:9"},"nodeType":"YulFunctionCall","src":"648:22:9"},"nodeType":"YulExpressionStatement","src":"648:22:9"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"426:4:9","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"435:6:9","type":""}],"src":"401:275:9"},{"body":{"nodeType":"YulBlock","src":"741:117:9","statements":[{"nodeType":"YulAssignment","src":"751:22:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"766:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"760:5:9"},"nodeType":"YulFunctionCall","src":"760:13:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"751:5:9"}]},{"body":{"nodeType":"YulBlock","src":"836:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"845:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"848:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"838:6:9"},"nodeType":"YulFunctionCall","src":"838:12:9"},"nodeType":"YulExpressionStatement","src":"838:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"795:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"806:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"821:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"826:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"817:3:9"},"nodeType":"YulFunctionCall","src":"817:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"830:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"813:3:9"},"nodeType":"YulFunctionCall","src":"813:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"802:3:9"},"nodeType":"YulFunctionCall","src":"802:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"792:2:9"},"nodeType":"YulFunctionCall","src":"792:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"785:6:9"},"nodeType":"YulFunctionCall","src":"785:50:9"},"nodeType":"YulIf","src":"782:70:9"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"720:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"731:5:9","type":""}],"src":"681:177:9"},{"body":{"nodeType":"YulBlock","src":"1010:1197:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1020:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1030:2:9","type":"","value":"64"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1024:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1077:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1086:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1089:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1079:6:9"},"nodeType":"YulFunctionCall","src":"1079:12:9"},"nodeType":"YulExpressionStatement","src":"1079:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1052:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1061:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1048:3:9"},"nodeType":"YulFunctionCall","src":"1048:23:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1073:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1044:3:9"},"nodeType":"YulFunctionCall","src":"1044:32:9"},"nodeType":"YulIf","src":"1041:52:9"},{"nodeType":"YulVariableDeclaration","src":"1102:30:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1122:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1116:5:9"},"nodeType":"YulFunctionCall","src":"1116:16:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1106:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1141:28:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1159:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1163:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1155:3:9"},"nodeType":"YulFunctionCall","src":"1155:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1151:3:9"},"nodeType":"YulFunctionCall","src":"1151:18:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1145:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1196:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1205:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1208:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1198:6:9"},"nodeType":"YulFunctionCall","src":"1198:12:9"},"nodeType":"YulExpressionStatement","src":"1198:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1184:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"1192:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1181:2:9"},"nodeType":"YulFunctionCall","src":"1181:14:9"},"nodeType":"YulIf","src":"1178:34:9"},{"nodeType":"YulVariableDeclaration","src":"1221:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1235:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"1246:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1231:3:9"},"nodeType":"YulFunctionCall","src":"1231:22:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1225:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1301:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1310:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1313:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1303:6:9"},"nodeType":"YulFunctionCall","src":"1303:12:9"},"nodeType":"YulExpressionStatement","src":"1303:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1280:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"1284:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1276:3:9"},"nodeType":"YulFunctionCall","src":"1276:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1291:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1272:3:9"},"nodeType":"YulFunctionCall","src":"1272:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1265:6:9"},"nodeType":"YulFunctionCall","src":"1265:35:9"},"nodeType":"YulIf","src":"1262:55:9"},{"nodeType":"YulVariableDeclaration","src":"1326:19:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1342:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1336:5:9"},"nodeType":"YulFunctionCall","src":"1336:9:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1330:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1354:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1364:4:9","type":"","value":"0x20"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1358:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1391:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1393:16:9"},"nodeType":"YulFunctionCall","src":"1393:18:9"},"nodeType":"YulExpressionStatement","src":"1393:18:9"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1383:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"1387:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1380:2:9"},"nodeType":"YulFunctionCall","src":"1380:10:9"},"nodeType":"YulIf","src":"1377:36:9"},{"nodeType":"YulVariableDeclaration","src":"1422:47:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1457:1:9","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1460:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1453:3:9"},"nodeType":"YulFunctionCall","src":"1453:10:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1465:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1449:3:9"},"nodeType":"YulFunctionCall","src":"1449:19:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1433:15:9"},"nodeType":"YulFunctionCall","src":"1433:36:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1426:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1478:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"1491:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1482:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1510:3:9"},{"name":"_4","nodeType":"YulIdentifier","src":"1515:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1503:6:9"},"nodeType":"YulFunctionCall","src":"1503:15:9"},"nodeType":"YulExpressionStatement","src":"1503:15:9"},{"nodeType":"YulAssignment","src":"1527:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1538:3:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1543:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1534:3:9"},"nodeType":"YulFunctionCall","src":"1534:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1527:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"1555:42:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1577:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1585:1:9","type":"","value":"6"},{"name":"_4","nodeType":"YulIdentifier","src":"1588:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1581:3:9"},"nodeType":"YulFunctionCall","src":"1581:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1573:3:9"},"nodeType":"YulFunctionCall","src":"1573:19:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1594:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1569:3:9"},"nodeType":"YulFunctionCall","src":"1569:28:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1559:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1629:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1638:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1641:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1631:6:9"},"nodeType":"YulFunctionCall","src":"1631:12:9"},"nodeType":"YulExpressionStatement","src":"1631:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1612:6:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1620:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1609:2:9"},"nodeType":"YulFunctionCall","src":"1609:19:9"},"nodeType":"YulIf","src":"1606:39:9"},{"nodeType":"YulVariableDeclaration","src":"1654:22:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1669:2:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1673:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1665:3:9"},"nodeType":"YulFunctionCall","src":"1665:11:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1658:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1741:368:9","statements":[{"body":{"nodeType":"YulBlock","src":"1797:74:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1815:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1825:1:9","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"1819:2:9","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"1850:2:9"},{"name":"_6","nodeType":"YulIdentifier","src":"1854:2:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1843:6:9"},"nodeType":"YulFunctionCall","src":"1843:14:9"},"nodeType":"YulExpressionStatement","src":"1843:14:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1766:7:9"},{"name":"src","nodeType":"YulIdentifier","src":"1775:3:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1762:3:9"},"nodeType":"YulFunctionCall","src":"1762:17:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1781:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1758:3:9"},"nodeType":"YulFunctionCall","src":"1758:26:9"},"nodeType":"YulIf","src":"1755:116:9"},{"nodeType":"YulVariableDeclaration","src":"1884:34:9","value":{"arguments":[],"functionName":{"name":"allocate_memory_575","nodeType":"YulIdentifier","src":"1897:19:9"},"nodeType":"YulFunctionCall","src":"1897:21:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1888:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1938:5:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1975:3:9"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1945:29:9"},"nodeType":"YulFunctionCall","src":"1945:34:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1931:6:9"},"nodeType":"YulFunctionCall","src":"1931:49:9"},"nodeType":"YulExpressionStatement","src":"1931:49:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2004:5:9"},{"name":"_5","nodeType":"YulIdentifier","src":"2011:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2000:3:9"},"nodeType":"YulFunctionCall","src":"2000:14:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2026:3:9"},{"name":"_5","nodeType":"YulIdentifier","src":"2031:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2022:3:9"},"nodeType":"YulFunctionCall","src":"2022:12:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2016:5:9"},"nodeType":"YulFunctionCall","src":"2016:19:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1993:6:9"},"nodeType":"YulFunctionCall","src":"1993:43:9"},"nodeType":"YulExpressionStatement","src":"1993:43:9"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2056:3:9"},{"name":"value","nodeType":"YulIdentifier","src":"2061:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2049:6:9"},"nodeType":"YulFunctionCall","src":"2049:18:9"},"nodeType":"YulExpressionStatement","src":"2049:18:9"},{"nodeType":"YulAssignment","src":"2080:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2091:3:9"},{"name":"_5","nodeType":"YulIdentifier","src":"2096:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2087:3:9"},"nodeType":"YulFunctionCall","src":"2087:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2080:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1696:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1701:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1693:2:9"},"nodeType":"YulFunctionCall","src":"1693:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1709:23:9","statements":[{"nodeType":"YulAssignment","src":"1711:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1722:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1727:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1718:3:9"},"nodeType":"YulFunctionCall","src":"1718:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1711:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"1689:3:9","statements":[]},"src":"1685:424:9"},{"nodeType":"YulAssignment","src":"2118:15:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2128:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2118:6:9"}]},{"nodeType":"YulAssignment","src":"2142:59:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2186:9:9"},{"name":"_5","nodeType":"YulIdentifier","src":"2197:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2182:3:9"},"nodeType":"YulFunctionCall","src":"2182:18:9"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2152:29:9"},"nodeType":"YulFunctionCall","src":"2152:49:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2142:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptrt_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"968:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"979:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"991:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"999:6:9","type":""}],"src":"863:1344:9"},{"body":{"nodeType":"YulBlock","src":"2313:102:9","statements":[{"nodeType":"YulAssignment","src":"2323:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2335:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2346:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:9"},"nodeType":"YulFunctionCall","src":"2331:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2323:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2365:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2380:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2396:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2401:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2392:3:9"},"nodeType":"YulFunctionCall","src":"2392:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"2405:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2388:3:9"},"nodeType":"YulFunctionCall","src":"2388:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2376:3:9"},"nodeType":"YulFunctionCall","src":"2376:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2358:6:9"},"nodeType":"YulFunctionCall","src":"2358:51:9"},"nodeType":"YulExpressionStatement","src":"2358:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2282:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2293:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2304:4:9","type":""}],"src":"2212:203:9"},{"body":{"nodeType":"YulBlock","src":"2452:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2469:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2476:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2481:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2472:3:9"},"nodeType":"YulFunctionCall","src":"2472:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2462:6:9"},"nodeType":"YulFunctionCall","src":"2462:31:9"},"nodeType":"YulExpressionStatement","src":"2462:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2509:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2512:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2502:6:9"},"nodeType":"YulFunctionCall","src":"2502:15:9"},"nodeType":"YulExpressionStatement","src":"2502:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2533:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2536:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2526:6:9"},"nodeType":"YulFunctionCall","src":"2526:15:9"},"nodeType":"YulExpressionStatement","src":"2526:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2420:127:9"},{"body":{"nodeType":"YulBlock","src":"2599:185:9","statements":[{"body":{"nodeType":"YulBlock","src":"2638:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2659:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2666:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2671:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2662:3:9"},"nodeType":"YulFunctionCall","src":"2662:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2652:6:9"},"nodeType":"YulFunctionCall","src":"2652:31:9"},"nodeType":"YulExpressionStatement","src":"2652:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2706:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2696:6:9"},"nodeType":"YulFunctionCall","src":"2696:15:9"},"nodeType":"YulExpressionStatement","src":"2696:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2731:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2734:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2724:6:9"},"nodeType":"YulFunctionCall","src":"2724:15:9"},"nodeType":"YulExpressionStatement","src":"2724:15:9"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2615:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2626:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2622:3:9"},"nodeType":"YulFunctionCall","src":"2622:6:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2612:2:9"},"nodeType":"YulFunctionCall","src":"2612:17:9"},"nodeType":"YulIf","src":"2609:140:9"},{"nodeType":"YulAssignment","src":"2758:20:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2769:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"2776:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2765:3:9"},"nodeType":"YulFunctionCall","src":"2765:13:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2758:3:9"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2581:5:9","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2591:3:9","type":""}],"src":"2552:232:9"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_575() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := 64\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        let _5 := 0x20\n        if gt(_4, _2) { panic_error_0x41() }\n        let dst := allocate_memory(add(shl(5, _4), _5))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _5)\n        let srcEnd := add(add(_3, shl(6, _4)), _5)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _5)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            if slt(sub(dataEnd, src), _1)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            let value := allocate_memory_575()\n            mstore(value, abi_decode_address_fromMemory(src))\n            mstore(add(value, _5), mload(add(src, _5)))\n            mstore(dst, value)\n            dst := add(dst, _5)\n        }\n        value0 := dst_1\n        value1 := abi_decode_address_fromMemory(add(headStart, _5))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000efc38038062000efc8339810160408190526200003491620001dc565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f81620000fb565b5060005b8251811015620000f2576001838281518110620000945762000094620002d1565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117815591015191015580620000e981620002e7565b91505062000073565b5050506200030f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200018657620001866200014b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620001b757620001b76200014b565b604052919050565b80516001600160a01b0381168114620001d757600080fd5b919050565b6000806040808486031215620001f157600080fd5b83516001600160401b03808211156200020957600080fd5b818601915086601f8301126200021e57600080fd5b81516020828211156200023557620002356200014b565b62000245818360051b016200018c565b828152818101935060069290921b8401810191898311156200026657600080fd5b938101935b82851015620002b45785858b031215620002855760008081fd5b6200028f62000161565b6200029a86620001bf565b81528583015183820152845293850193928101926200026b565b9650620002c3888201620001bf565b955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200030857634e487b7160e01b600052601160045260246000fd5b5060010190565b610bdd806200031f6000396000f3fe6080604052600436106100c55760003560e01c80638da5cb5b1161007f578063df15c37e11610059578063df15c37e1461023c578063e5e9b6611461025e578063e6adc1ee1461027e578063f2fde38b146102a0576100d5565b80638da5cb5b146101855780639966db94146101ad578063a4df0758146101e3576100d5565b80620b46f8146100de57806329a62a76146101065780635fc5e0201461011b578063715018a61461013057806376602f2f146101455780637eef250914610165576100d5565b366100d5576100d3346102c0565b005b6100d3346102c0565b3480156100ea57600080fd5b506100f3601981565b6040519081526020015b60405180910390f35b34801561011257600080fd5b506100f3600381565b34801561012757600080fd5b506100f3606481565b34801561013c57600080fd5b506100d36103fa565b34801561015157600080fd5b506100d3610160366004610995565b61040e565b34801561017157600080fd5b506100f36101803660046109e6565b610512565b34801561019157600080fd5b506000546040516001600160a01b0390911681526020016100fd565b3480156101b957600080fd5b506100f36101c8366004610a10565b6001600160a01b031660009081526005602052604090205490565b3480156101ef57600080fd5b5061022c6101fe3660046109e6565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60405190151581526020016100fd565b34801561024857600080fd5b5061025161063b565b6040516100fd9190610a32565b34801561026a57600080fd5b506100d3610279366004610a10565b610680565b34801561028a57600080fd5b50610293610836565b6040516100fd9190610a6c565b3480156102ac57600080fd5b506100d36102bb366004610a10565b6108ab565b600060646102cf601984610ada565b6102d99190610af1565b60015490915060005b818110156103f4576000600182815481106102ff576102ff610b13565b600091825260208083206040805180820190915260029093020180546001600160a01b03168352600101549082018190529092506064906103409087610ada565b61034a9190610af1565b9050600082600001516001600160a01b03168260405160006040518083038185875af1925050503d806000811461039d576040519150601f19603f3d011682016040523d82523d6000602084013e6103a2565b606091505b50509050806103de57825160405163373a7d4360e11b81526001600160a01b039091166004820152602481018390526044015b60405180910390fd5b50505080806103ec90610b29565b9150506102e2565b50505050565b6104026108e9565b61040c6000610916565b565b6104166108e9565b60034760005b60038110156104d457600085826003811061043957610439610b13565b60200201602081019061044c9190610a10565b90506000606486846003811061046457610464610b13565b6020020135856104749190610ada565b61047e9190610af1565b9050816002846003811061049457610494610b13565b0180546001600160a01b0319166001600160a01b0392831617905591909116600090815260056020526040902055806104cc81610b29565b91505061041c565b507f60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea846040516105049190610b42565b60405180910390a150505050565b6001600160a01b038181166000818152600560205260408082205490516370a0823160e01b815293861660048501529092909183916370a0823190602401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190610b7b565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190610b7b565b90508160000361061a576040516366f3ef9b60e01b815260040160405180910390fd5b806106258484610ada565b61062f9190610af1565b93505050505b92915050565b610643610966565b6040805160608101918290529060029060039082845b81546001600160a01b03168152600190910190602001808311610659575050505050905090565b6001600160a01b0381166106a75760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526005602052604081205490036106df5760405163d937573f60e01b815260040160405180910390fd5b3360009081526006602090815260408083206001600160a01b038516845290915290205460ff16156107245760405163048798a960e41b815260040160405180910390fd5b60006107303383610512565b6001600160a01b038316600090815260056020526040902054909150610757908290610b94565b6001600160a01b0383166000818152600560209081526040808320949094553380835260068252848320938352929052828120805460ff19166001179055915183908381818185875af1925050503d80600081146107d1576040519150601f19603f3d011682016040523d82523d6000602084013e6107d6565b606091505b50509050806107f8576040516312171d8360e31b815260040160405180910390fd5b60408051338152602081018490527f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770910160405180910390a1505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156108a2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161085a565b50505050905090565b6108b36108e9565b6001600160a01b0381166108dd57604051631e4fbdf760e01b8152600060048201526024016103d5565b6108e681610916565b50565b6000546001600160a01b0316331461040c5760405163118cdaa760e01b81523360048201526024016103d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b806060810183101561063557600080fd5b60008060c083850312156109a857600080fd5b6109b28484610984565b91506109c18460608501610984565b90509250929050565b80356001600160a01b03811681146109e157600080fd5b919050565b600080604083850312156109f957600080fd5b610a02836109ca565b91506109c1602084016109ca565b600060208284031215610a2257600080fd5b610a2b826109ca565b9392505050565b60608101818360005b6003811015610a635781516001600160a01b0316835260209283019290910190600101610a3b565b50505092915050565b602080825282518282018190526000919060409081850190868401855b82811015610ab757815180516001600160a01b03168552860151868501529284019290850190600101610a89565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063557610635610ac4565b600082610b0e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610b3b57610b3b610ac4565b5060010190565b60608101818360005b6003811015610a63576001600160a01b03610b65836109ca565b1683526020928301929190910190600101610b4b565b600060208284031215610b8d57600080fd5b5051919050565b8181038181111561063557610635610ac456fea26469706673582212209cb4fa9e666f02d1a59f99a2dc0981ad05c0b0a897a4d0f29990a9e83f8eb94d64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xEFC CODESIZE SUB DUP1 PUSH3 0xEFC DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DC JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x6F DUP2 PUSH3 0xFB JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0xF2 JUMPI PUSH1 0x1 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x94 JUMPI PUSH3 0x94 PUSH3 0x2D1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE SWAP4 DUP4 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x2 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP2 ADD MLOAD SWAP2 ADD SSTORE DUP1 PUSH3 0xE9 DUP2 PUSH3 0x2E7 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x73 JUMP JUMPDEST POP POP POP PUSH3 0x30F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x186 JUMPI PUSH3 0x186 PUSH3 0x14B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1B7 JUMPI PUSH3 0x1B7 PUSH3 0x14B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP1 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x235 JUMPI PUSH3 0x235 PUSH3 0x14B JUMP JUMPDEST PUSH3 0x245 DUP2 DUP4 PUSH1 0x5 SHL ADD PUSH3 0x18C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP4 POP PUSH1 0x6 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH3 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x2B4 JUMPI DUP6 DUP6 DUP12 SUB SLT ISZERO PUSH3 0x285 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH3 0x28F PUSH3 0x161 JUMP JUMPDEST PUSH3 0x29A DUP7 PUSH3 0x1BF JUMP JUMPDEST DUP2 MSTORE DUP6 DUP4 ADD MLOAD DUP4 DUP3 ADD MSTORE DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH3 0x26B JUMP JUMPDEST SWAP7 POP PUSH3 0x2C3 DUP9 DUP3 ADD PUSH3 0x1BF JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x308 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBDD DUP1 PUSH3 0x31F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE5E9B661 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A0 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x9966DB94 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xA4DF0758 EQ PUSH2 0x1E3 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x165 JUMPI PUSH2 0xD5 JUMP JUMPDEST CALLDATASIZE PUSH2 0xD5 JUMPI PUSH2 0xD3 CALLVALUE PUSH2 0x2C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 CALLVALUE PUSH2 0x2C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x3FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x995 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E6 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22C PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xA32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xA6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2CF PUSH1 0x19 DUP5 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x2D9 SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2FF JUMPI PUSH2 0x2FF PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x340 SWAP1 DUP8 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x34A SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3DE JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x3EC SWAP1 PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x402 PUSH2 0x8E9 JUMP JUMPDEST PUSH2 0x40C PUSH1 0x0 PUSH2 0x916 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x416 PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x3 SELFBALANCE PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP6 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x439 JUMPI PUSH2 0x439 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x44C SWAP2 SWAP1 PUSH2 0xA10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP7 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x464 JUMPI PUSH2 0x464 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 PUSH2 0x474 SWAP2 SWAP1 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x47E SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x2 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x494 JUMPI PUSH2 0x494 PUSH2 0xB13 JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x4CC DUP2 PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41C JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP5 PUSH1 0x40 MLOAD PUSH2 0x504 SWAP2 SWAP1 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP7 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP1 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x591 SWAP2 SWAP1 PUSH2 0xB7B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0xB7B JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F3EF9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x625 DUP5 DUP5 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x62F SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x3 SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x659 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH4 0xD937573F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x724 JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x730 CALLER DUP4 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x757 SWAP1 DUP3 SWAP1 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE CALLER DUP1 DUP4 MSTORE PUSH1 0x6 DUP3 MSTORE DUP5 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP3 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 MLOAD DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x85A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8B3 PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3D5 JUMP JUMPDEST PUSH2 0x8E6 DUP2 PUSH2 0x916 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x40C JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3D5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B2 DUP5 DUP5 PUSH2 0x984 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C1 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x984 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA02 DUP4 PUSH2 0x9CA JUMP JUMPDEST SWAP2 POP PUSH2 0x9C1 PUSH1 0x20 DUP5 ADD PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA2B DUP3 PUSH2 0x9CA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xA63 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA3B JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAB7 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA89 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB0E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xB3B JUMPI PUSH2 0xB3B PUSH2 0xAC4 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xA63 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB65 DUP4 PUSH2 0x9CA JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0xAC4 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xB4 STATICCALL SWAP15 PUSH7 0x6F02D1A59F99A2 0xDC MULMOD DUP2 0xAD SDIV 0xC0 0xB0 0xA8 SWAP8 LOG4 0xD0 CALLCODE SWAP10 SWAP1 0xA9 0xE8 EXTCODEHASH DUP15 0xB9 0x4D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"273:3342:5:-:0;;;702:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;766:6;-1:-1:-1;;;;;1273:26:2;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:2;;1350:1;1322:31;;;2358:51:9;2331:18;;1322:31:2;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;788:9:5::1;784:96;803:9;:16;799:1;:20;784:96;;;840:10;856:9;866:1;856:12;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;840:29;;::::1;::::0;;::::1;::::0;;-1:-1:-1;840:29:5;;;;;;;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;;;;;;840:29:5::1;-1:-1:-1::0;;;;;840:29:5;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;821:3;::::1;::::0;::::1;:::i;:::-;;;;784:96;;;;702:184:::0;;273:3342;;2912:187:2;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:2;;;-1:-1:-1;;;;;;3020:17:2;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;217:2;211:9;;;247:15;;-1:-1:-1;;;;;277:34:9;;313:22;;;274:62;271:88;;;339:18;;:::i;:::-;375:2;368:22;146:250;:::o;401:275::-;472:2;466:9;537:2;518:13;;-1:-1:-1;;514:27:9;502:40;;-1:-1:-1;;;;;557:34:9;;593:22;;;554:62;551:88;;;619:18;;:::i;:::-;655:2;648:22;401:275;;-1:-1:-1;401:275:9:o;681:177::-;760:13;;-1:-1:-1;;;;;802:31:9;;792:42;;782:70;;848:1;845;838:12;782:70;681:177;;;:::o;863:1344::-;991:6;999;1030:2;1073;1061:9;1052:7;1048:23;1044:32;1041:52;;;1089:1;1086;1079:12;1041:52;1116:16;;-1:-1:-1;;;;;1181:14:9;;;1178:34;;;1208:1;1205;1198:12;1178:34;1246:6;1235:9;1231:22;1221:32;;1291:7;1284:4;1280:2;1276:13;1272:27;1262:55;;1313:1;1310;1303:12;1262:55;1342:2;1336:9;1364:4;1387:2;1383;1380:10;1377:36;;;1393:18;;:::i;:::-;1433:36;1465:2;1460;1457:1;1453:10;1449:19;1433:36;:::i;:::-;1503:15;;;1534:12;;;;-1:-1:-1;1585:1:9;1581:10;;;;1573:19;;1569:28;;;1609:19;;;1606:39;;;1641:1;1638;1631:12;1606:39;1665:11;;;;1685:424;1701:6;1696:3;1693:15;1685:424;;;1781:2;1775:3;1766:7;1762:17;1758:26;1755:116;;;1825:1;1854:2;1850;1843:14;1755:116;1897:21;;:::i;:::-;1945:34;1975:3;1945:34;:::i;:::-;1931:49;;2022:12;;;2016:19;2000:14;;;1993:43;2049:18;;1718:12;;;;2087;;;;1685:424;;;2128:5;-1:-1:-1;2152:49:9;2182:18;;;2152:49;:::i;:::-;2142:59;;;;;;;863:1344;;;;;:::o;2420:127::-;2481:10;2476:3;2472:20;2469:1;2462:31;2512:4;2509:1;2502:15;2536:4;2533:1;2526:15;2552:232;2591:3;2612:17;;;2609:140;;2671:10;2666:3;2662:20;2659:1;2652:31;2706:4;2703:1;2696:15;2734:4;2731:1;2724:15;2609:140;-1:-1:-1;2776:1:9;2765:13;;2552:232::o;:::-;273:3342:5;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_PERCENTAGE_431":{"entryPoint":null,"id":431,"parameterSlots":0,"returnSlots":0},"@MAX_WINNERS_437":{"entryPoint":null,"id":437,"parameterSlots":0,"returnSlots":0},"@SHARE_PRECISION_434":{"entryPoint":null,"id":434,"parameterSlots":0,"returnSlots":0},"@_821":{"entryPoint":null,"id":821,"parameterSlots":0,"returnSlots":0},"@_830":{"entryPoint":null,"id":830,"parameterSlots":0,"returnSlots":0},"@_checkOwner_310":{"entryPoint":2281,"id":310,"parameterSlots":0,"returnSlots":0},"@_handleDeposit_812":{"entryPoint":704,"id":812,"parameterSlots":1,"returnSlots":0},"@_msgSender_385":{"entryPoint":null,"id":385,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_372":{"entryPoint":2326,"id":372,"parameterSlots":1,"returnSlots":0},"@claimPrize_650":{"entryPoint":1664,"id":650,"parameterSlots":1,"returnSlots":0},"@getCreators_676":{"entryPoint":2102,"id":676,"parameterSlots":0,"returnSlots":1},"@getPrize_733":{"entryPoint":1298,"id":733,"parameterSlots":2,"returnSlots":1},"@getTicketPrize_745":{"entryPoint":null,"id":745,"parameterSlots":1,"returnSlots":1},"@getWinners_686":{"entryPoint":1595,"id":686,"parameterSlots":0,"returnSlots":1},"@isClaimed_666":{"entryPoint":null,"id":666,"parameterSlots":2,"returnSlots":1},"@owner_293":{"entryPoint":null,"id":293,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_324":{"entryPoint":1018,"id":324,"parameterSlots":0,"returnSlots":0},"@setWinners_566":{"entryPoint":1038,"id":566,"parameterSlots":2,"returnSlots":0},"@transferOwnership_352":{"entryPoint":2219,"id":352,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2506,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_calldata":{"entryPoint":2436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2576,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2534,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr":{"entryPoint":2453,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2939,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":2882,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed":{"entryPoint":2610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2668,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":2801,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2778,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2964,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":2857,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2756,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2835,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5247:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:9","statements":[{"nodeType":"YulAssignment","src":"125:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:9"},"nodeType":"YulFunctionCall","src":"133:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:9"},"nodeType":"YulFunctionCall","src":"160:25:9"},"nodeType":"YulExpressionStatement","src":"160:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:9","type":""}],"src":"14:177:9"},{"body":{"nodeType":"YulBlock","src":"268:87:9","statements":[{"nodeType":"YulAssignment","src":"278:18:9","value":{"name":"offset","nodeType":"YulIdentifier","src":"290:6:9"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"278:8:9"}]},{"body":{"nodeType":"YulBlock","src":"333:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"345:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:9"},"nodeType":"YulFunctionCall","src":"335:12:9"},"nodeType":"YulExpressionStatement","src":"335:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"315:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"323:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:9"},"nodeType":"YulFunctionCall","src":"311:15:9"},{"name":"end","nodeType":"YulIdentifier","src":"328:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"308:2:9"},"nodeType":"YulFunctionCall","src":"308:24:9"},"nodeType":"YulIf","src":"305:44:9"}]},"name":"abi_decode_array_address_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"239:6:9","type":""},{"name":"end","nodeType":"YulTypedName","src":"247:3:9","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"255:8:9","type":""}],"src":"196:159:9"},{"body":{"nodeType":"YulBlock","src":"497:222:9","statements":[{"body":{"nodeType":"YulBlock","src":"544:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"553:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"556:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"546:6:9"},"nodeType":"YulFunctionCall","src":"546:12:9"},"nodeType":"YulExpressionStatement","src":"546:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"518:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"527:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"514:3:9"},"nodeType":"YulFunctionCall","src":"514:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"539:3:9","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"510:3:9"},"nodeType":"YulFunctionCall","src":"510:33:9"},"nodeType":"YulIf","src":"507:53:9"},{"nodeType":"YulAssignment","src":"569:63:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"613:9:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"624:7:9"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"579:33:9"},"nodeType":"YulFunctionCall","src":"579:53:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"569:6:9"}]},{"nodeType":"YulAssignment","src":"641:72:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"689:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"700:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"685:3:9"},"nodeType":"YulFunctionCall","src":"685:18:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"705:7:9"}],"functionName":{"name":"abi_decode_array_address_calldata","nodeType":"YulIdentifier","src":"651:33:9"},"nodeType":"YulFunctionCall","src":"651:62:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"641:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"455:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"466:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"478:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"486:6:9","type":""}],"src":"360:359:9"},{"body":{"nodeType":"YulBlock","src":"773:124:9","statements":[{"nodeType":"YulAssignment","src":"783:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"805:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"792:12:9"},"nodeType":"YulFunctionCall","src":"792:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"783:5:9"}]},{"body":{"nodeType":"YulBlock","src":"875:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"884:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"887:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"877:6:9"},"nodeType":"YulFunctionCall","src":"877:12:9"},"nodeType":"YulExpressionStatement","src":"877:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"834:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"845:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"860:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"865:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"856:3:9"},"nodeType":"YulFunctionCall","src":"856:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"869:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"852:3:9"},"nodeType":"YulFunctionCall","src":"852:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"841:3:9"},"nodeType":"YulFunctionCall","src":"841:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"831:2:9"},"nodeType":"YulFunctionCall","src":"831:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"824:6:9"},"nodeType":"YulFunctionCall","src":"824:50:9"},"nodeType":"YulIf","src":"821:70:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"752:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"763:5:9","type":""}],"src":"724:173:9"},{"body":{"nodeType":"YulBlock","src":"989:173:9","statements":[{"body":{"nodeType":"YulBlock","src":"1035:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1044:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1047:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1037:6:9"},"nodeType":"YulFunctionCall","src":"1037:12:9"},"nodeType":"YulExpressionStatement","src":"1037:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1010:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1019:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1006:3:9"},"nodeType":"YulFunctionCall","src":"1006:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1031:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1002:3:9"},"nodeType":"YulFunctionCall","src":"1002:32:9"},"nodeType":"YulIf","src":"999:52:9"},{"nodeType":"YulAssignment","src":"1060:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1070:18:9"},"nodeType":"YulFunctionCall","src":"1070:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1060:6:9"}]},{"nodeType":"YulAssignment","src":"1108:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1141:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1152:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:9"},"nodeType":"YulFunctionCall","src":"1137:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1118:18:9"},"nodeType":"YulFunctionCall","src":"1118:38:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1108:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"947:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"958:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"970:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"978:6:9","type":""}],"src":"902:260:9"},{"body":{"nodeType":"YulBlock","src":"1268:102:9","statements":[{"nodeType":"YulAssignment","src":"1278:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1290:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1301:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1286:3:9"},"nodeType":"YulFunctionCall","src":"1286:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1278:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1320:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1335:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1351:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1356:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1347:3:9"},"nodeType":"YulFunctionCall","src":"1347:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1360:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1343:3:9"},"nodeType":"YulFunctionCall","src":"1343:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1331:3:9"},"nodeType":"YulFunctionCall","src":"1331:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1313:6:9"},"nodeType":"YulFunctionCall","src":"1313:51:9"},"nodeType":"YulExpressionStatement","src":"1313:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1237:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1248:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1259:4:9","type":""}],"src":"1167:203:9"},{"body":{"nodeType":"YulBlock","src":"1445:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"1491:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1500:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1503:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1493:6:9"},"nodeType":"YulFunctionCall","src":"1493:12:9"},"nodeType":"YulExpressionStatement","src":"1493:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1466:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1475:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1462:3:9"},"nodeType":"YulFunctionCall","src":"1462:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1487:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1458:3:9"},"nodeType":"YulFunctionCall","src":"1458:32:9"},"nodeType":"YulIf","src":"1455:52:9"},{"nodeType":"YulAssignment","src":"1516:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1545:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1526:18:9"},"nodeType":"YulFunctionCall","src":"1526:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1516:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1411:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1422:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1434:6:9","type":""}],"src":"1375:186:9"},{"body":{"nodeType":"YulBlock","src":"1661:92:9","statements":[{"nodeType":"YulAssignment","src":"1671:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:9"},"nodeType":"YulFunctionCall","src":"1679:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1671:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1713:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1738:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1731:6:9"},"nodeType":"YulFunctionCall","src":"1731:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1724:6:9"},"nodeType":"YulFunctionCall","src":"1724:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1706:6:9"},"nodeType":"YulFunctionCall","src":"1706:41:9"},"nodeType":"YulExpressionStatement","src":"1706:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1630:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1641:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1652:4:9","type":""}],"src":"1566:187:9"},{"body":{"nodeType":"YulBlock","src":"1905:373:9","statements":[{"nodeType":"YulAssignment","src":"1915:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1927:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1938:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1923:3:9"},"nodeType":"YulFunctionCall","src":"1923:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1915:4:9"}]},{"nodeType":"YulVariableDeclaration","src":"1950:20:9","value":{"name":"headStart","nodeType":"YulIdentifier","src":"1961:9:9"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"1954:3:9","type":""}]},{"nodeType":"YulAssignment","src":"1979:16:9","value":{"name":"headStart","nodeType":"YulIdentifier","src":"1986:9:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1979:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"2004:20:9","value":{"name":"value0","nodeType":"YulIdentifier","src":"2018:6:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2008:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2033:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2042:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2037:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2099:173:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2120:3:9"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2135:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2129:5:9"},"nodeType":"YulFunctionCall","src":"2129:13:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2152:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2157:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2148:3:9"},"nodeType":"YulFunctionCall","src":"2148:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"2161:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2144:3:9"},"nodeType":"YulFunctionCall","src":"2144:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2125:3:9"},"nodeType":"YulFunctionCall","src":"2125:39:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2113:6:9"},"nodeType":"YulFunctionCall","src":"2113:52:9"},"nodeType":"YulExpressionStatement","src":"2113:52:9"},{"nodeType":"YulVariableDeclaration","src":"2178:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2188:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2182:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2205:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2216:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2221:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2212:3:9"},"nodeType":"YulFunctionCall","src":"2212:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2205:3:9"}]},{"nodeType":"YulAssignment","src":"2237:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2251:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2259:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2247:3:9"},"nodeType":"YulFunctionCall","src":"2247:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2237:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2063:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"2066:4:9","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2060:2:9"},"nodeType":"YulFunctionCall","src":"2060:11:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2072:18:9","statements":[{"nodeType":"YulAssignment","src":"2074:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2083:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"2086:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2079:3:9"},"nodeType":"YulFunctionCall","src":"2079:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2074:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2056:3:9","statements":[]},"src":"2052:220:9"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1874:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1885:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:9","type":""}],"src":"1758:520:9"},{"body":{"nodeType":"YulBlock","src":"2482:613:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2492:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2502:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2496:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2513:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2531:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2542:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2527:3:9"},"nodeType":"YulFunctionCall","src":"2527:18:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2517:6:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2561:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2572:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2554:6:9"},"nodeType":"YulFunctionCall","src":"2554:21:9"},"nodeType":"YulExpressionStatement","src":"2554:21:9"},{"nodeType":"YulVariableDeclaration","src":"2584:17:9","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2595:6:9"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2588:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2610:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2630:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2624:5:9"},"nodeType":"YulFunctionCall","src":"2624:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2614:6:9","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2653:6:9"},{"name":"length","nodeType":"YulIdentifier","src":"2661:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2646:6:9"},"nodeType":"YulFunctionCall","src":"2646:22:9"},"nodeType":"YulExpressionStatement","src":"2646:22:9"},{"nodeType":"YulVariableDeclaration","src":"2677:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2687:2:9","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2681:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2698:25:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2709:9:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2720:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2705:3:9"},"nodeType":"YulFunctionCall","src":"2705:18:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2698:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"2732:29:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2750:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2758:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2746:3:9"},"nodeType":"YulFunctionCall","src":"2746:15:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2736:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2770:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2779:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2774:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2838:231:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2852:23:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2868:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2862:5:9"},"nodeType":"YulFunctionCall","src":"2862:13:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2856:2:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2895:3:9"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2910:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2904:5:9"},"nodeType":"YulFunctionCall","src":"2904:9:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2923:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2928:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2919:3:9"},"nodeType":"YulFunctionCall","src":"2919:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"2932:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2915:3:9"},"nodeType":"YulFunctionCall","src":"2915:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2900:3:9"},"nodeType":"YulFunctionCall","src":"2900:35:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2888:6:9"},"nodeType":"YulFunctionCall","src":"2888:48:9"},"nodeType":"YulExpressionStatement","src":"2888:48:9"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2960:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2965:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2956:3:9"},"nodeType":"YulFunctionCall","src":"2956:12:9"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2980:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2984:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2976:3:9"},"nodeType":"YulFunctionCall","src":"2976:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2970:5:9"},"nodeType":"YulFunctionCall","src":"2970:18:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2949:6:9"},"nodeType":"YulFunctionCall","src":"2949:40:9"},"nodeType":"YulExpressionStatement","src":"2949:40:9"},{"nodeType":"YulAssignment","src":"3002:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3013:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3018:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3009:3:9"},"nodeType":"YulFunctionCall","src":"3009:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3002:3:9"}]},{"nodeType":"YulAssignment","src":"3034:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3048:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3056:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3044:3:9"},"nodeType":"YulFunctionCall","src":"3044:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3034:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2800:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"2803:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2797:2:9"},"nodeType":"YulFunctionCall","src":"2797:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2811:18:9","statements":[{"nodeType":"YulAssignment","src":"2813:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2822:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"2825:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2818:3:9"},"nodeType":"YulFunctionCall","src":"2818:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2813:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2793:3:9","statements":[]},"src":"2789:280:9"},{"nodeType":"YulAssignment","src":"3078:11:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"3086:3:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3078:4:9"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2451:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2462:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2473:4:9","type":""}],"src":"2283:812:9"},{"body":{"nodeType":"YulBlock","src":"3132:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3149:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3156:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3161:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3152:3:9"},"nodeType":"YulFunctionCall","src":"3152:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3142:6:9"},"nodeType":"YulFunctionCall","src":"3142:31:9"},"nodeType":"YulExpressionStatement","src":"3142:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3192:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3182:6:9"},"nodeType":"YulFunctionCall","src":"3182:15:9"},"nodeType":"YulExpressionStatement","src":"3182:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3213:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3216:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3206:6:9"},"nodeType":"YulFunctionCall","src":"3206:15:9"},"nodeType":"YulExpressionStatement","src":"3206:15:9"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3100:127:9"},{"body":{"nodeType":"YulBlock","src":"3284:116:9","statements":[{"nodeType":"YulAssignment","src":"3294:20:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3309:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3312:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3305:3:9"},"nodeType":"YulFunctionCall","src":"3305:9:9"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3294:7:9"}]},{"body":{"nodeType":"YulBlock","src":"3372:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3374:16:9"},"nodeType":"YulFunctionCall","src":"3374:18:9"},"nodeType":"YulExpressionStatement","src":"3374:18:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3343:1:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3336:6:9"},"nodeType":"YulFunctionCall","src":"3336:9:9"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3350:1:9"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3357:7:9"},{"name":"x","nodeType":"YulIdentifier","src":"3366:1:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3353:3:9"},"nodeType":"YulFunctionCall","src":"3353:15:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3347:2:9"},"nodeType":"YulFunctionCall","src":"3347:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3333:2:9"},"nodeType":"YulFunctionCall","src":"3333:37:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3326:6:9"},"nodeType":"YulFunctionCall","src":"3326:45:9"},"nodeType":"YulIf","src":"3323:71:9"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3263:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"3266:1:9","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3272:7:9","type":""}],"src":"3232:168:9"},{"body":{"nodeType":"YulBlock","src":"3451:171:9","statements":[{"body":{"nodeType":"YulBlock","src":"3482:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3503:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3510:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3515:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3506:3:9"},"nodeType":"YulFunctionCall","src":"3506:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3496:6:9"},"nodeType":"YulFunctionCall","src":"3496:31:9"},"nodeType":"YulExpressionStatement","src":"3496:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3547:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3550:4:9","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3540:6:9"},"nodeType":"YulFunctionCall","src":"3540:15:9"},"nodeType":"YulExpressionStatement","src":"3540:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3575:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3578:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3568:6:9"},"nodeType":"YulFunctionCall","src":"3568:15:9"},"nodeType":"YulExpressionStatement","src":"3568:15:9"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3471:1:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3464:6:9"},"nodeType":"YulFunctionCall","src":"3464:9:9"},"nodeType":"YulIf","src":"3461:132:9"},{"nodeType":"YulAssignment","src":"3602:14:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3611:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3614:1:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3607:3:9"},"nodeType":"YulFunctionCall","src":"3607:9:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3602:1:9"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3436:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"3439:1:9","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"3445:1:9","type":""}],"src":"3405:217:9"},{"body":{"nodeType":"YulBlock","src":"3659:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3676:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3683:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3688:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3679:3:9"},"nodeType":"YulFunctionCall","src":"3679:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3669:6:9"},"nodeType":"YulFunctionCall","src":"3669:31:9"},"nodeType":"YulExpressionStatement","src":"3669:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3716:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3719:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3709:6:9"},"nodeType":"YulFunctionCall","src":"3709:15:9"},"nodeType":"YulExpressionStatement","src":"3709:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3740:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3743:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3733:6:9"},"nodeType":"YulFunctionCall","src":"3733:15:9"},"nodeType":"YulExpressionStatement","src":"3733:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3627:127:9"},{"body":{"nodeType":"YulBlock","src":"3950:14:9","statements":[{"nodeType":"YulAssignment","src":"3952:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"3959:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3952:3:9"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3934:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3942:3:9","type":""}],"src":"3759:205:9"},{"body":{"nodeType":"YulBlock","src":"4098:145:9","statements":[{"nodeType":"YulAssignment","src":"4108:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4120:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4131:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4116:3:9"},"nodeType":"YulFunctionCall","src":"4116:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4108:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4150:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4165:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4181:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4186:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4177:3:9"},"nodeType":"YulFunctionCall","src":"4177:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"4190:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4173:3:9"},"nodeType":"YulFunctionCall","src":"4173:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4161:3:9"},"nodeType":"YulFunctionCall","src":"4161:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4143:6:9"},"nodeType":"YulFunctionCall","src":"4143:51:9"},"nodeType":"YulExpressionStatement","src":"4143:51:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4214:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4225:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4210:3:9"},"nodeType":"YulFunctionCall","src":"4210:18:9"},{"name":"value1","nodeType":"YulIdentifier","src":"4230:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4203:6:9"},"nodeType":"YulFunctionCall","src":"4203:34:9"},"nodeType":"YulExpressionStatement","src":"4203:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4059:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4070:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4078:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4089:4:9","type":""}],"src":"3969:274:9"},{"body":{"nodeType":"YulBlock","src":"4295:88:9","statements":[{"body":{"nodeType":"YulBlock","src":"4326:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4328:16:9"},"nodeType":"YulFunctionCall","src":"4328:18:9"},"nodeType":"YulExpressionStatement","src":"4328:18:9"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4311:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4322:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4318:3:9"},"nodeType":"YulFunctionCall","src":"4318:6:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4308:2:9"},"nodeType":"YulFunctionCall","src":"4308:17:9"},"nodeType":"YulIf","src":"4305:43:9"},{"nodeType":"YulAssignment","src":"4357:20:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4368:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"4375:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4364:3:9"},"nodeType":"YulFunctionCall","src":"4364:13:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4357:3:9"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4277:5:9","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4287:3:9","type":""}],"src":"4248:135:9"},{"body":{"nodeType":"YulBlock","src":"4537:386:9","statements":[{"nodeType":"YulAssignment","src":"4547:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4559:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4570:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4555:3:9"},"nodeType":"YulFunctionCall","src":"4555:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4547:4:9"}]},{"nodeType":"YulVariableDeclaration","src":"4582:20:9","value":{"name":"headStart","nodeType":"YulIdentifier","src":"4593:9:9"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4586:3:9","type":""}]},{"nodeType":"YulAssignment","src":"4611:16:9","value":{"name":"headStart","nodeType":"YulIdentifier","src":"4618:9:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4611:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"4636:20:9","value":{"name":"value0","nodeType":"YulIdentifier","src":"4650:6:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4640:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4665:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4674:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4669:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4731:186:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4752:3:9"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4780:6:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4761:18:9"},"nodeType":"YulFunctionCall","src":"4761:26:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4797:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4802:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4793:3:9"},"nodeType":"YulFunctionCall","src":"4793:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"4806:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4789:3:9"},"nodeType":"YulFunctionCall","src":"4789:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4757:3:9"},"nodeType":"YulFunctionCall","src":"4757:52:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4745:6:9"},"nodeType":"YulFunctionCall","src":"4745:65:9"},"nodeType":"YulExpressionStatement","src":"4745:65:9"},{"nodeType":"YulVariableDeclaration","src":"4823:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4833:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4827:2:9","type":""}]},{"nodeType":"YulAssignment","src":"4850:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4861:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4866:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4857:3:9"},"nodeType":"YulFunctionCall","src":"4857:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4850:3:9"}]},{"nodeType":"YulAssignment","src":"4882:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4896:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4904:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4892:3:9"},"nodeType":"YulFunctionCall","src":"4892:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4882:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4695:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"4698:4:9","type":"","value":"0x03"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4692:2:9"},"nodeType":"YulFunctionCall","src":"4692:11:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4704:18:9","statements":[{"nodeType":"YulAssignment","src":"4706:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4715:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"4718:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4711:3:9"},"nodeType":"YulFunctionCall","src":"4711:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4706:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"4688:3:9","statements":[]},"src":"4684:233:9"}]},"name":"abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4506:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4517:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4528:4:9","type":""}],"src":"4388:535:9"},{"body":{"nodeType":"YulBlock","src":"5009:103:9","statements":[{"body":{"nodeType":"YulBlock","src":"5055:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5064:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5067:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5057:6:9"},"nodeType":"YulFunctionCall","src":"5057:12:9"},"nodeType":"YulExpressionStatement","src":"5057:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5030:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"5039:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5026:3:9"},"nodeType":"YulFunctionCall","src":"5026:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"5051:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5022:3:9"},"nodeType":"YulFunctionCall","src":"5022:32:9"},"nodeType":"YulIf","src":"5019:52:9"},{"nodeType":"YulAssignment","src":"5080:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5096:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5090:5:9"},"nodeType":"YulFunctionCall","src":"5090:16:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5080:6:9"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4975:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4986:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4998:6:9","type":""}],"src":"4928:184:9"},{"body":{"nodeType":"YulBlock","src":"5166:79:9","statements":[{"nodeType":"YulAssignment","src":"5176:17:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5188:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"5191:1:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5184:3:9"},"nodeType":"YulFunctionCall","src":"5184:9:9"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5176:4:9"}]},{"body":{"nodeType":"YulBlock","src":"5217:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5219:16:9"},"nodeType":"YulFunctionCall","src":"5219:18:9"},"nodeType":"YulExpressionStatement","src":"5219:18:9"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5208:4:9"},{"name":"x","nodeType":"YulIdentifier","src":"5214:1:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5205:2:9"},"nodeType":"YulFunctionCall","src":"5205:11:9"},"nodeType":"YulIf","src":"5202:37:9"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5148:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"5151:1:9","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5157:4:9","type":""}],"src":"5117:128:9"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_address_calldata(offset, end) -> arrayPos\n    {\n        arrayPos := offset\n        if gt(add(offset, 96), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$3_calldata_ptrt_array$_t_uint256_$3_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_array_address_calldata(headStart, dataEnd)\n        value1 := abi_decode_array_address_calldata(add(headStart, 96), dataEnd)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_memory_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Creator_$838_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, and(mload(_3), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_address_$3_calldata_ptr__to_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let pos := headStart\n        pos := headStart\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100c55760003560e01c80638da5cb5b1161007f578063df15c37e11610059578063df15c37e1461023c578063e5e9b6611461025e578063e6adc1ee1461027e578063f2fde38b146102a0576100d5565b80638da5cb5b146101855780639966db94146101ad578063a4df0758146101e3576100d5565b80620b46f8146100de57806329a62a76146101065780635fc5e0201461011b578063715018a61461013057806376602f2f146101455780637eef250914610165576100d5565b366100d5576100d3346102c0565b005b6100d3346102c0565b3480156100ea57600080fd5b506100f3601981565b6040519081526020015b60405180910390f35b34801561011257600080fd5b506100f3600381565b34801561012757600080fd5b506100f3606481565b34801561013c57600080fd5b506100d36103fa565b34801561015157600080fd5b506100d3610160366004610995565b61040e565b34801561017157600080fd5b506100f36101803660046109e6565b610512565b34801561019157600080fd5b506000546040516001600160a01b0390911681526020016100fd565b3480156101b957600080fd5b506100f36101c8366004610a10565b6001600160a01b031660009081526005602052604090205490565b3480156101ef57600080fd5b5061022c6101fe3660046109e6565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60405190151581526020016100fd565b34801561024857600080fd5b5061025161063b565b6040516100fd9190610a32565b34801561026a57600080fd5b506100d3610279366004610a10565b610680565b34801561028a57600080fd5b50610293610836565b6040516100fd9190610a6c565b3480156102ac57600080fd5b506100d36102bb366004610a10565b6108ab565b600060646102cf601984610ada565b6102d99190610af1565b60015490915060005b818110156103f4576000600182815481106102ff576102ff610b13565b600091825260208083206040805180820190915260029093020180546001600160a01b03168352600101549082018190529092506064906103409087610ada565b61034a9190610af1565b9050600082600001516001600160a01b03168260405160006040518083038185875af1925050503d806000811461039d576040519150601f19603f3d011682016040523d82523d6000602084013e6103a2565b606091505b50509050806103de57825160405163373a7d4360e11b81526001600160a01b039091166004820152602481018390526044015b60405180910390fd5b50505080806103ec90610b29565b9150506102e2565b50505050565b6104026108e9565b61040c6000610916565b565b6104166108e9565b60034760005b60038110156104d457600085826003811061043957610439610b13565b60200201602081019061044c9190610a10565b90506000606486846003811061046457610464610b13565b6020020135856104749190610ada565b61047e9190610af1565b9050816002846003811061049457610494610b13565b0180546001600160a01b0319166001600160a01b0392831617905591909116600090815260056020526040902055806104cc81610b29565b91505061041c565b507f60f4d73182a956a559d177842626b4743585a36652a74d3eb1500e4479ac06ea846040516105049190610b42565b60405180910390a150505050565b6001600160a01b038181166000818152600560205260408082205490516370a0823160e01b815293861660048501529092909183916370a0823190602401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190610b7b565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190610b7b565b90508160000361061a576040516366f3ef9b60e01b815260040160405180910390fd5b806106258484610ada565b61062f9190610af1565b93505050505b92915050565b610643610966565b6040805160608101918290529060029060039082845b81546001600160a01b03168152600190910190602001808311610659575050505050905090565b6001600160a01b0381166106a75760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526005602052604081205490036106df5760405163d937573f60e01b815260040160405180910390fd5b3360009081526006602090815260408083206001600160a01b038516845290915290205460ff16156107245760405163048798a960e41b815260040160405180910390fd5b60006107303383610512565b6001600160a01b038316600090815260056020526040902054909150610757908290610b94565b6001600160a01b0383166000818152600560209081526040808320949094553380835260068252848320938352929052828120805460ff19166001179055915183908381818185875af1925050503d80600081146107d1576040519150601f19603f3d011682016040523d82523d6000602084013e6107d6565b606091505b50509050806107f8576040516312171d8360e31b815260040160405180910390fd5b60408051338152602081018490527f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf770910160405180910390a1505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156108a2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161085a565b50505050905090565b6108b36108e9565b6001600160a01b0381166108dd57604051631e4fbdf760e01b8152600060048201526024016103d5565b6108e681610916565b50565b6000546001600160a01b0316331461040c5760405163118cdaa760e01b81523360048201526024016103d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180606001604052806003906020820280368337509192915050565b806060810183101561063557600080fd5b60008060c083850312156109a857600080fd5b6109b28484610984565b91506109c18460608501610984565b90509250929050565b80356001600160a01b03811681146109e157600080fd5b919050565b600080604083850312156109f957600080fd5b610a02836109ca565b91506109c1602084016109ca565b600060208284031215610a2257600080fd5b610a2b826109ca565b9392505050565b60608101818360005b6003811015610a635781516001600160a01b0316835260209283019290910190600101610a3b565b50505092915050565b602080825282518282018190526000919060409081850190868401855b82811015610ab757815180516001600160a01b03168552860151868501529284019290850190600101610a89565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063557610635610ac4565b600082610b0e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610b3b57610b3b610ac4565b5060010190565b60608101818360005b6003811015610a63576001600160a01b03610b65836109ca565b1683526020928301929190910190600101610b4b565b600060208284031215610b8d57600080fd5b5051919050565b8181038181111561063557610635610ac456fea26469706673582212209cb4fa9e666f02d1a59f99a2dc0981ad05c0b0a897a4d0f29990a9e83f8eb94d64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDF15C37E GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDF15C37E EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE5E9B661 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xE6ADC1EE EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A0 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x9966DB94 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xA4DF0758 EQ PUSH2 0x1E3 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH3 0xB46F8 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x29A62A76 EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0x5FC5E020 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x76602F2F EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x7EEF2509 EQ PUSH2 0x165 JUMPI PUSH2 0xD5 JUMP JUMPDEST CALLDATASIZE PUSH2 0xD5 JUMPI PUSH2 0xD3 CALLVALUE PUSH2 0x2C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 CALLVALUE PUSH2 0x2C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x3FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x995 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E6 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22C PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xA32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xA6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2CF PUSH1 0x19 DUP5 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x2D9 SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2FF JUMPI PUSH2 0x2FF PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x340 SWAP1 DUP8 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x34A SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3DE JUMPI DUP3 MLOAD PUSH1 0x40 MLOAD PUSH4 0x373A7D43 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x3EC SWAP1 PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x402 PUSH2 0x8E9 JUMP JUMPDEST PUSH2 0x40C PUSH1 0x0 PUSH2 0x916 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x416 PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x3 SELFBALANCE PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP6 DUP3 PUSH1 0x3 DUP2 LT PUSH2 0x439 JUMPI PUSH2 0x439 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x44C SWAP2 SWAP1 PUSH2 0xA10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP7 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x464 JUMPI PUSH2 0x464 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 PUSH2 0x474 SWAP2 SWAP1 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x47E SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x2 DUP5 PUSH1 0x3 DUP2 LT PUSH2 0x494 JUMPI PUSH2 0x494 PUSH2 0xB13 JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x4CC DUP2 PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41C JUMP JUMPDEST POP PUSH32 0x60F4D73182A956A559D177842626B4743585A36652A74D3EB1500E4479AC06EA DUP5 PUSH1 0x40 MLOAD PUSH2 0x504 SWAP2 SWAP1 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP7 AND PUSH1 0x4 DUP6 ADD MSTORE SWAP1 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x591 SWAP2 SWAP1 PUSH2 0xB7B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0xB7B JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F3EF9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x625 DUP5 DUP5 PUSH2 0xADA JUMP JUMPDEST PUSH2 0x62F SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x3 SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x659 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH4 0xD937573F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x724 JUMPI PUSH1 0x40 MLOAD PUSH4 0x48798A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x730 CALLER DUP4 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x757 SWAP1 DUP3 SWAP1 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE CALLER DUP1 DUP4 MSTORE PUSH1 0x6 DUP3 MSTORE DUP5 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP3 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 MLOAD DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x95681E512BC0FE659E195E06C283EADA494316F3D801213E48E7101AF92BF770 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP6 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SLOAD DUP3 DUP5 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x85A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8B3 PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3D5 JUMP JUMPDEST PUSH2 0x8E6 DUP2 PUSH2 0x916 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x40C JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3D5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 DUP2 ADD DUP4 LT ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B2 DUP5 DUP5 PUSH2 0x984 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C1 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x984 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA02 DUP4 PUSH2 0x9CA JUMP JUMPDEST SWAP2 POP PUSH2 0x9C1 PUSH1 0x20 DUP5 ADD PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA2B DUP3 PUSH2 0x9CA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xA63 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA3B JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAB7 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA89 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB0E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xB3B JUMPI PUSH2 0xB3B PUSH2 0xAC4 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP2 DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xA63 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB65 DUP4 PUSH2 0x9CA JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0xAC4 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xB4 STATICCALL SWAP15 PUSH7 0x6F02D1A59F99A2 0xDC MULMOD DUP2 0xAD SDIV 0xC0 0xB0 0xA8 SWAP8 LOG4 0xD0 CALLCODE SWAP10 SWAP1 0xA9 0xE8 EXTCODEHASH DUP15 0xB9 0x4D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"273:3342:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3505:25;3520:9;3505:14;:25::i;:::-;273:3342;;3581:25;3596:9;3581:14;:25::i;331:43::-;;;;;;;;;;;;372:2;331:43;;;;;160:25:9;;;148:2;133:18;331:43:5;;;;;;;;431:39;;;;;;;;;;;;469:1;431:39;;380:45;;;;;;;;;;;;422:3;380:45;;2293:101:2;;;;;;;;;;;;;:::i;892:573:5:-;;;;;;;;;;-1:-1:-1;892:573:5;;;;;:::i;:::-;;:::i;2388:376::-;;;;;;;;;;-1:-1:-1;2388:376:5;;;;;:::i;:::-;;:::i;1638:85:2:-;;;;;;;;;;-1:-1:-1;1684:7:2;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:2;;;1313:51:9;;1301:2;1286:18;1638:85:2;1167:203:9;2770:112:5;;;;;;;;;;-1:-1:-1;2770:112:5;;;;;:::i;:::-;-1:-1:-1;;;;;2858:17:5;2832:7;2858:17;;;:8;:17;;;;;;;2770:112;2044:131;;;;;;;;;;-1:-1:-1;2044:131:5;;;;;:::i;:::-;-1:-1:-1;;;;;2141:18:5;;;2118:4;2141:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;;2044:131;;;;1731:14:9;;1724:22;1706:41;;1694:2;1679:18;2044:131:5;1566:187:9;2285:97:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1471:567::-;;;;;;;;;;-1:-1:-1;1471:567:5;;;;;:::i;:::-;;:::i;2181:98::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2543:215:2:-;;;;;;;;;;-1:-1:-1;2543:215:2;;;;;:::i;:::-;;:::i;2888:574:5:-;2974:12;422:3;2990:24;372:2;2990:7;:24;:::i;:::-;2989:44;;;;:::i;:::-;3069:10;:17;2974:59;;-1:-1:-1;3044:22:5;3133:323;3152:14;3148:1;:18;3133:323;;;3187:22;3212:10;3223:1;3212:13;;;;;;;;:::i;:::-;;;;;;;;;3187:38;;;;;;;;;3212:13;;;;;3187:38;;-1:-1:-1;;;;;3187:38:5;;;;;;;;;;;;;;-1:-1:-1;422:3:5;;3258:20;;:4;:20;:::i;:::-;3257:40;;;;:::i;:::-;3240:57;;3313:12;3330:7;:15;;;-1:-1:-1;;;;;3330:20:5;3358:6;3330:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3312:57;;;3387:7;3383:62;;3421:15;;3403:42;;-1:-1:-1;;;3403:42:5;;-1:-1:-1;;;;;4161:32:9;;;3403:42:5;;;4143:51:9;4210:18;;;4203:34;;;4116:18;;3403:42:5;;;;;;;;3383:62;3173:283;;;3168:3;;;;;:::i;:::-;;;;3133:323;;;;2937:525;;2888:574;:::o;2293:101:2:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;892:573:5:-;1531:13:2;:11;:13::i;:::-;1043:16:5::1;1090:21;1191:9;1187:236;469:1;1202;:15;1187:236;;;1238:14;1255:8;1264:1;1255:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1238:28;;1280:13;422:3;1310:6;1317:1;1310:9;;;;;;;:::i;:::-;;;;;1297:10;:22;;;;:::i;:::-;1296:42;;;;:::i;:::-;1280:58;;1368:6;1353:9;1363:1;1353:12;;;;;;;:::i;:::-;;:21:::0;;-1:-1:-1;;;;;;1353:21:5::1;-1:-1:-1::0;;;;;1353:21:5;;::::1;;::::0;;1388:16;;;::::1;-1:-1:-1::0;1388:16:5;;;:8:::1;:16;::::0;;;;:24;1219:3;::::1;::::0;::::1;:::i;:::-;;;;1187:236;;;;1438:20;1449:8;1438:20;;;;;;:::i;:::-;;;;;;;;1009:456;;892:573:::0;;:::o;2388:376::-;-1:-1:-1;;;;;2500:17:5;;;2459:7;2500:17;;;:8;:17;;;;;;;2549:34;;-1:-1:-1;;;2549:34:5;;1331:32:9;;;2549:34:5;;;1313:51:9;2459:7:5;;2500:17;;2459:7;;2549:27;;1286:18:9;;2549:34:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2527:56;;2593:20;2625:7;-1:-1:-1;;;;;2616:29:5;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2593:54;;2661:11;2676:1;2661:16;2658:39;;2686:11;;-1:-1:-1;;;2686:11:5;;;;;;;;;;;2658:39;2745:12;2716:25;2730:11;2716;:25;:::i;:::-;2715:42;;;;:::i;:::-;2708:49;;;;;2388:376;;;;;:::o;2285:97::-;2330:17;;:::i;:::-;2359:16;;;;;;;;;;;2366:9;;2359:16;;2366:9;2359:16;;;;-1:-1:-1;;;;;2359:16:5;;;;;;;;;;;;;;;;;;;;;;2285:97;:::o;1471:567::-;-1:-1:-1;;;;;1530:21:5;;1527:46;;1560:13;;-1:-1:-1;;;1560:13:5;;;;;;;;;;;1527:46;-1:-1:-1;;;;;1586:17:5;;;;;;:8;:17;;;;;;:22;;1583:56;;1617:22;;-1:-1:-1;;;1617:22:5;;;;;;;;;;;1583:56;1664:10;1652:23;;;;:11;:23;;;;;;;;-1:-1:-1;;;;;1652:32:5;;;;;;;;;;;;1649:65;;;1693:21;;-1:-1:-1;;;1693:21:5;;;;;;;;;;;1649:65;1725:13;1741:29;1750:10;1762:7;1741:8;:29::i;:::-;-1:-1:-1;;;;;1801:17:5;;;;;;:8;:17;;;;;;1725:45;;-1:-1:-1;1801:25:5;;1725:45;;1801:25;:::i;:::-;-1:-1:-1;;;;;1781:17:5;;;;;;:8;:17;;;;;;;;:45;;;;1848:10;1836:23;;;:11;:23;;;;;:32;;;;;;;;;:39;;-1:-1:-1;;1836:39:5;1871:4;1836:39;;;1905:33;;1928:5;;1781:17;1905:33;1781:17;1905:33;1928:5;1848:10;1905:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1886:52;;;1952:7;1948:36;;1968:16;;-1:-1:-1;;;1968:16:5;;;;;;;;;;;1948:36;2000:31;;;2013:10;4143:51:9;;4225:2;4210:18;;4203:34;;;2000:31:5;;4116:18:9;2000:31:5;;;;;;;1517:521;;1471:567;:::o;2181:98::-;2227:16;2262:10;2255:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2255:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2181:98;:::o;2543:215:2:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:2;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:2;;2700:1:::1;2672:31;::::0;::::1;1313:51:9::0;1286:18;;2672:31:2::1;1167:203:9::0;2623:91:2::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:2;735:10:3;1855:23:2;1851:101;;1901:40;;-1:-1:-1;;;1901:40:2;;735:10:3;1901:40:2;;;1313:51:9;1286:18;;1901:40:2;1167:203:9;2912:187:2;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:2;;;-1:-1:-1;;;;;;3020:17:2;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;196:159:9:-;290:6;323:2;311:15;;308:24;-1:-1:-1;305:44:9;;;345:1;342;335:12;360:359;478:6;486;539:3;527:9;518:7;514:23;510:33;507:53;;;556:1;553;546:12;507:53;579;624:7;613:9;579:53;:::i;:::-;569:63;;651:62;705:7;700:2;689:9;685:18;651:62;:::i;:::-;641:72;;360:359;;;;;:::o;724:173::-;792:20;;-1:-1:-1;;;;;841:31:9;;831:42;;821:70;;887:1;884;877:12;821:70;724:173;;;:::o;902:260::-;970:6;978;1031:2;1019:9;1010:7;1006:23;1002:32;999:52;;;1047:1;1044;1037:12;999:52;1070:29;1089:9;1070:29;:::i;:::-;1060:39;;1118:38;1152:2;1141:9;1137:18;1118:38;:::i;1375:186::-;1434:6;1487:2;1475:9;1466:7;1462:23;1458:32;1455:52;;;1503:1;1500;1493:12;1455:52;1526:29;1545:9;1526:29;:::i;:::-;1516:39;1375:186;-1:-1:-1;;;1375:186:9:o;1758:520::-;1938:2;1923:18;;1927:9;2018:6;1896:4;2052:220;2066:4;2063:1;2060:11;2052:220;;;2129:13;;-1:-1:-1;;;;;2125:39:9;2113:52;;2188:4;2212:12;;;;2247:15;;;;2161:1;2079:9;2052:220;;;2056:3;;;1758:520;;;;:::o;2283:812::-;2502:2;2554:21;;;2624:13;;2527:18;;;2646:22;;;2473:4;;2502:2;2687;;2705:18;;;;2746:15;;;2473:4;2789:280;2803:6;2800:1;2797:13;2789:280;;;2862:13;;2904:9;;-1:-1:-1;;;;;2900:35:9;2888:48;;2976:11;;2970:18;2956:12;;;2949:40;3009:12;;;;3044:15;;;;2932:1;2818:9;2789:280;;;-1:-1:-1;3086:3:9;;2283:812;-1:-1:-1;;;;;;;2283:812:9:o;3100:127::-;3161:10;3156:3;3152:20;3149:1;3142:31;3192:4;3189:1;3182:15;3216:4;3213:1;3206:15;3232:168;3305:9;;;3336;;3353:15;;;3347:22;;3333:37;3323:71;;3374:18;;:::i;3405:217::-;3445:1;3471;3461:132;;3515:10;3510:3;3506:20;3503:1;3496:31;3550:4;3547:1;3540:15;3578:4;3575:1;3568:15;3461:132;-1:-1:-1;3607:9:9;;3405:217::o;3627:127::-;3688:10;3683:3;3679:20;3676:1;3669:31;3719:4;3716:1;3709:15;3743:4;3740:1;3733:15;4248:135;4287:3;4308:17;;;4305:43;;4328:18;;:::i;:::-;-1:-1:-1;4375:1:9;4364:13;;4248:135::o;4388:535::-;4570:2;4555:18;;4559:9;4650:6;4528:4;4684:233;4698:4;4695:1;4692:11;4684:233;;;-1:-1:-1;;;;;4761:26:9;4780:6;4761:26;:::i;:::-;4757:52;4745:65;;4833:4;4857:12;;;;4892:15;;;;;4718:1;4711:9;4684:233;;4928:184;4998:6;5051:2;5039:9;5030:7;5026:23;5022:32;5019:52;;;5067:1;5064;5057:12;5019:52;-1:-1:-1;5090:16:9;;4928:184;-1:-1:-1;4928:184:9:o;5117:128::-;5184:9;;;5205:11;;;5202:37;;;5219:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"607400","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite","FEE_PERCENTAGE()":"185","MAX_WINNERS()":"207","SHARE_PRECISION()":"229","claimPrize(address)":"infinite","getCreators()":"infinite","getPrize(address,address)":"infinite","getTicketPrize(address)":"2571","getWinners()":"infinite","isClaimed(address,address)":"infinite","owner()":"2324","renounceOwnership()":"infinite","setWinners(address[3],uint256[3])":"infinite","transferOwnership(address)":"28421"},"internal":{"_handleDeposit(uint256)":"infinite"}},"methodIdentifiers":{"FEE_PERCENTAGE()":"000b46f8","MAX_WINNERS()":"29a62a76","SHARE_PRECISION()":"5fc5e020","claimPrize(address)":"e5e9b661","getCreators()":"e6adc1ee","getPrize(address,address)":"7eef2509","getTicketPrize(address)":"9966db94","getWinners()":"df15c37e","isClaimed(address,address)":"a4df0758","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setWinners(address[3],uint256[3])":"76602f2f","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"_creators\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimedPrize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creators\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrizeForThisTicket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTickets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWinnersYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct IEurocupLegends.Creator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"getTicketPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_winners\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_share\",\"type\":\"uint256[3]\"}],\"name\":\"setWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EurocupLegends.sol\":\"EurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/EurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IEurocupLegends} from \\\"./interfaces/IEurocupLegends.sol\\\";\\nimport {ITickets} from \\\"./interfaces/ITickets.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract EurocupLegends is IEurocupLegends, Ownable {\\n    uint256 public constant FEE_PERCENTAGE = 25;\\n    uint256 public constant SHARE_PRECISION = 100;\\n    uint256 public constant MAX_WINNERS = 3;\\n\\n    Creator[] private s_creators;\\n    address[3] private s_winners;\\n\\n    mapping(address ticket => uint256 prize) private s_prizes;\\n    mapping(address user => mapping(address ticket => bool isClaimed)) private s_isClaimed;\\n\\n    constructor(Creator[] memory _creators, address _owner) Ownable(_owner) {\\n        for(uint256 i; i < _creators.length; i++) {\\n            s_creators.push(_creators[i]);\\n        }\\n    }\\n\\n    function setWinners(address[MAX_WINNERS] calldata _winners, uint256[MAX_WINNERS] calldata _share) external onlyOwner {\\n        uint256 winnersLength = s_winners.length;\\n        uint256 totalPrize = address(this).balance;\\n\\n        if(winnersLength != MAX_WINNERS) revert NoWinnersYet();\\n\\n        for(uint256 i; i < MAX_WINNERS; i++) {\\n            address winner = _winners[i];\\n            uint256 prize = (totalPrize * _share[i]) / SHARE_PRECISION;\\n\\n            s_winners[i] = winner;\\n            s_prizes[winner] = prize;\\n        }\\n\\n        emit WinnersSet(_winners);\\n    }\\n\\n    function claimPrize(address _ticket) external {\\n        if(_ticket == address(0)) revert ZeroAddress();\\n        if(s_prizes[_ticket] == 0) revert NoPrizeForThisTicket();\\n        if(s_isClaimed[msg.sender][_ticket]) revert AlreadyClaimedPrize();\\n\\n        uint256 prize = getPrize(msg.sender, _ticket);\\n\\n        s_prizes[_ticket] = s_prizes[_ticket] - prize;\\n        s_isClaimed[msg.sender][_ticket] = true;\\n\\n        (bool success, ) = msg.sender.call{value: prize}('');\\n        if(!success) revert TransferFailed();\\n\\n        emit PrizeClaimed(msg.sender, prize);\\n    }\\n\\n    function isClaimed(address _user, address _ticket) external view returns (bool) {\\n        return s_isClaimed[_user][_ticket];\\n    }\\n\\n    function getCreators() external view returns (Creator[] memory) {\\n        return s_creators;\\n    }\\n\\n    function getWinners() external view returns (address[3] memory) {\\n        return s_winners;\\n    }\\n\\n    function getPrize(address _user, address _ticket) public view returns (uint256) {\\n        uint256 ticketPrize = s_prizes[_ticket];\\n        uint256 userTickets = ITickets(_ticket).balanceOf(_user);\\n        uint256 totalTickets = ITickets(_ticket).totalSupply();\\n\\n        if(userTickets == 0) revert NoTickets();\\n\\n        return (userTickets * ticketPrize) / totalTickets;\\n    }\\n\\n    function getTicketPrize(address _ticket) public view returns (uint256) {\\n        return s_prizes[_ticket];\\n    }\\n\\n    function _handleDeposit(uint256 _amount) private {\\n        // 25% of deposits\\n        uint256 fees = (_amount * FEE_PERCENTAGE) / SHARE_PRECISION;\\n\\n        uint256 creatorsLength = s_creators.length;\\n\\n        // transfer fee to creators\\n        for(uint256 i; i < creatorsLength; i++) {\\n            Creator memory creator = s_creators[i];\\n\\n            uint256 feeCut = (fees * creator.share) / SHARE_PRECISION;\\n\\n            (bool success,) = creator.creator.call{value: feeCut}(\\\"\\\");\\n            if(!success) revert FeeTransferFailed(creator.creator, feeCut);\\n        }\\n    }\\n\\n    receive() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n\\n    fallback() external payable {\\n        _handleDeposit(msg.value);\\n    }\\n}\",\"keccak256\":\"0x0c6377a5e0a315fe4e553704896d1b9edff5c41b20638eb424afc27dcef26355\",\"license\":\"MIT\"},\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n}\",\"keccak256\":\"0x54711f412c03e4f710ed6229eb3361980076200151dd99cfaefdc82048a6415d\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP7DigitalAsset} from \\\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\\\";\\ninterface ITickets is ILSP7DigitalAsset {\\n    event TicketsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n}\",\"keccak256\":\"0x24e407930a7c7fba4ee021520bbdec17e27f1fa4d24b94700440a742de6a43f4\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror MintLimitExceeded();\\n\\nerror InvalidMintPrice();\\n\\nerror NoPrizeForThisTicket();\\n\\nerror AlreadyClaimedPrize();\\n\\nerror NoTickets();\\n\\nerror ZeroAddress();\\n\\nerror ZeroAmount();\\n\\nerror TransferFailed();\\n\\nerror FeeTransferFailed(address _creators, uint256 _amount);\\n\\nerror NoWinnersYet();\",\"keccak256\":\"0x6fe5ef8edd263ec19dbdcd4bec53b22874d15d80e0d9ac652ed37b884b027fb7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":234,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":441,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_creators","offset":0,"slot":"1","type":"t_array(t_struct(Creator)838_storage)dyn_storage"},{"astId":445,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_winners","offset":0,"slot":"2","type":"t_array(t_address)3_storage"},{"astId":449,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_prizes","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":455,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"s_isClaimed","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)3_storage":{"base":"t_address","encoding":"inplace","label":"address[3]","numberOfBytes":"96"},"t_array(t_struct(Creator)838_storage)dyn_storage":{"base":"t_struct(Creator)838_storage","encoding":"dynamic_array","label":"struct IEurocupLegends.Creator[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Creator)838_storage":{"encoding":"inplace","label":"struct IEurocupLegends.Creator","members":[{"astId":835,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"creator","offset":0,"slot":"0","type":"t_address"},{"astId":837,"contract":"contracts/EurocupLegends.sol:EurocupLegends","label":"share","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IEurocupLegends.sol":{"IEurocupLegends":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[3]","name":"winners","type":"address[3]"}],"name":"WinnersSet","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[3]\",\"name\":\"winners\",\"type\":\"address[3]\"}],\"name\":\"WinnersSet\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IEurocupLegends.sol\":\"IEurocupLegends\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IEurocupLegends.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IEurocupLegends {\\n    struct Creator {\\n        address creator;\\n        uint256 share;\\n    }\\n\\n    event WinnersSet(address[3] winners);\\n    event PrizeClaimed(address owner, uint256 prize);\\n}\",\"keccak256\":\"0x54711f412c03e4f710ed6229eb3361980076200151dd99cfaefdc82048a6415d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ITickets.sol":{"ITickets":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"DataChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorAuthorizationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOwner","type":"address"},{"indexed":true,"internalType":"bool","name":"notified","type":"bool"},{"indexed":false,"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"OperatorRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"TicketsMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"force","type":"bool"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"authorizedAmountFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"batchCalls","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"uint256","name":"subtractedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"decreaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"}],"name":"getData","outputs":[{"internalType":"bytes","name":"dataValue","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"}],"name":"getDataBatch","outputs":[{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"name":"getOperatorsOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"addedAmount","type":"uint256"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"increaseAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"bool","name":"notify","type":"bool"},{"internalType":"bytes","name":"operatorNotificationData","type":"bytes"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataKey","type":"bytes32"},{"internalType":"bytes","name":"dataValue","type":"bytes"}],"name":"setData","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"dataKeys","type":"bytes32[]"},{"internalType":"bytes[]","name":"dataValues","type":"bytes[]"}],"name":"setDataBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"bool[]","name":"force","type":"bool[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"transferBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DataChanged(bytes32,bytes)":{"details":"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.","params":{"dataKey":"The data key for which a bytes value is set.","dataValue":"The value to set for the given data key."}},"OperatorAuthorizationChanged(address,address,uint256,bytes)":{"details":"Emitted when `tokenOwner` enables `operator` for `amount` tokens.","params":{"amount":"The amount of tokens `operator` address has access to from `tokenOwner`","operator":"The address authorized as an operator","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"OperatorRevoked(address,address,bool,bytes)":{"details":"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.","params":{"notified":"Bool indicating whether the operator has been notified or not","operator":"The address revoked from operating","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The token owner"}},"Transfer(address,address,address,uint256,bool,bytes)":{"details":"Emitted when the `from` transferred successfully `amount` of tokens to `to`.","params":{"amount":"The amount of tokens transferred.","data":"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.","force":"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.","from":"The address which tokens were sent from (balance decreased by `-amount`).","operator":"The address of the operator that executed the transfer.","to":"The address that received the tokens (balance increased by `+amount`)."}}},"kind":"dev","methods":{"authorizeOperator(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.","custom:requirements":"- `operator` cannot be the zero address.","details":"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"amount":"The allowance amount of tokens operator has access to.","operator":"The address to authorize as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1."}},"authorizedAmountFor(address,address)":{"custom:info":"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).","details":"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.","params":{"operator":"The operator's address to query the authorized amount for.","tokenOwner":"The token owner that `operator` has allowance on."},"returns":{"_0":"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."}},"balanceOf(address)":{"details":"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```","params":{"tokenOwner":"The address of the token holder to query the balance for."},"returns":{"_0":"The amount of tokens owned by `tokenOwner`."}},"batchCalls(bytes[])":{"details":"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.","params":{"data":"An array of ABI encoded function calls to be called on the contract."},"returns":{"results":"An array of abi-encoded data returned by the functions executed."}},"decimals()":{"custom:notice":"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.","details":"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.","returns":{"_0":"the number of decimals. If `0` is returned, the asset is non-divisible."}},"decreaseAllowance(address,address,uint256,bytes)":{"custom:events":"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.","details":"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"operator":"The operator to decrease allowance for `msg.sender`","subtractedAmount":"The amount to decrease by in the operator's allowance.","tokenOwner":"The address of the token owner."}},"getData(bytes32)":{"details":"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.","params":{"dataKey":"The data key for which to retrieve the value."},"returns":{"dataValue":"The bytes value stored under the specified data key."}},"getDataBatch(bytes32[])":{"details":"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.","params":{"dataKeys":"The array of keys which values to retrieve"},"returns":{"dataValues":"The array of data stored at multiple keys"}},"getOperatorsOf(address)":{"details":"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.","params":{"tokenOwner":"The token owner to get the operators for."},"returns":{"_0":"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."}},"increaseAllowance(address,uint256,bytes)":{"custom:events":"{OperatorAuthorizationChanged} indicating the updated allowance","custom:info":"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.","custom:requirements":"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.","details":"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard","params":{"addedAmount":"The additional amount to add on top of the current operator's allowance","operator":"The operator to increase the allowance for `msg.sender`"}},"revokeOperator(address,address,bool,bytes)":{"custom:events":"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).","custom:requirements":"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.","details":"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function","params":{"notify":"Boolean indicating whether to notify the operator or not.","operator":"The address to revoke as an operator.","operatorNotificationData":"The data to notify the operator about via LSP1.","tokenOwner":"The address of the token owner."}},"setData(bytes32,bytes)":{"details":"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.","params":{"dataKey":"The data key for which to set a new value.","dataValue":"The new bytes value to set."}},"setDataBatch(bytes32[],bytes[])":{"details":"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.","params":{"dataKeys":"An array of data keys to set bytes values for.","dataValues":"An array of bytes values to set for each `dataKeys`."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the number of existing tokens that have been minted in this contract.","returns":{"_0":"The number of existing tokens."}},"transfer(address,address,uint256,bool,bytes)":{"custom:events":"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.","custom:hint":"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.","custom:info":"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.","custom:requirements":"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.","custom:warning":"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.","details":"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).","params":{"amount":"The amount of tokens to transfer.","data":"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.","force":"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"The sender address.","to":"The recipient address."}},"transferBatch(address[],address[],uint256[],bool[],bytes[])":{"custom:events":"{Transfer} event **for each token transfer**.","custom:info":"If any transfer in the batch fail or revert, the whole call will revert.","custom:requirements":"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.","details":"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.","params":{"amount":"An array of amount of tokens to transfer for each `from -> to` transfer.","data":"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.","force":"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.","from":"An array of sending addresses.","to":"An array of receiving addresses."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorizeOperator(address,uint256,bytes)":"b49506fd","authorizedAmountFor(address,address)":"65aeaa95","balanceOf(address)":"70a08231","batchCalls(bytes[])":"6963d438","decimals()":"313ce567","decreaseAllowance(address,address,uint256,bytes)":"78381670","getData(bytes32)":"54f6127f","getDataBatch(bytes32[])":"dedff9c6","getOperatorsOf(address)":"d72fc29a","increaseAllowance(address,uint256,bytes)":"2bc1da82","mint(address,uint256)":"40c10f19","revokeOperator(address,address,bool,bytes)":"30d0dc37","setData(bytes32,bytes)":"7f23690c","setDataBatch(bytes32[],bytes[])":"97902421","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,address,uint256,bool,bytes)":"760d9bba","transferBatch(address[],address[],uint256[],bool[],bytes[])":"2d7667c9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TicketsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"authorizedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"details\":\"Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\",\"params\":{\"dataKey\":\"The data key for which a bytes value is set.\",\"dataValue\":\"The value to set for the given data key.\"}},\"OperatorAuthorizationChanged(address,address,uint256,bytes)\":{\"details\":\"Emitted when `tokenOwner` enables `operator` for `amount` tokens.\",\"params\":{\"amount\":\"The amount of tokens `operator` address has access to from `tokenOwner`\",\"operator\":\"The address authorized as an operator\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"OperatorRevoked(address,address,bool,bytes)\":{\"details\":\"Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\",\"params\":{\"notified\":\"Bool indicating whether the operator has been notified or not\",\"operator\":\"The address revoked from operating\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The token owner\"}},\"Transfer(address,address,address,uint256,bool,bytes)\":{\"details\":\"Emitted when the `from` transferred successfully `amount` of tokens to `to`.\",\"params\":{\"amount\":\"The amount of tokens transferred.\",\"data\":\"Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\",\"force\":\"if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\",\"from\":\"The address which tokens were sent from (balance decreased by `-amount`).\",\"operator\":\"The address of the operator that executed the transfer.\",\"to\":\"The address that received the tokens (balance increased by `+amount`).\"}}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} when allowance is given to a new operator or an existing operator's allowance is updated.\",\"custom:requirements\":\"- `operator` cannot be the zero address.\",\"details\":\"Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"amount\":\"The allowance amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\"}},\"authorizedAmountFor(address,address)\":{\"custom:info\":\"If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance (since a tokenOwner is its own operator).\",\"details\":\"Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.\",\"params\":{\"operator\":\"The operator's address to query the authorized amount for.\",\"tokenOwner\":\"The token owner that `operator` has allowance on.\"},\"returns\":{\"_0\":\"The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```\",\"params\":{\"tokenOwner\":\"The address of the token holder to query the balance for.\"},\"returns\":{\"_0\":\"The amount of tokens owned by `tokenOwner`.\"}},\"batchCalls(bytes[])\":{\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"decimals()\":{\"custom:notice\":\"This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\",\"returns\":{\"_0\":\"the number of decimals. If `0` is returned, the asset is non-divisible.\"}},\"decreaseAllowance(address,address,uint256,bytes)\":{\"custom:events\":\"- {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against the double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the zero address.  - `operator` must have allowance for the caller of at least `subtractedAmount`.\",\"details\":\"Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The operator to decrease allowance for `msg.sender`\",\"subtractedAmount\":\"The amount to decrease by in the operator's allowance.\",\"tokenOwner\":\"The address of the token owner.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(address)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The token owner to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\"}},\"increaseAllowance(address,uint256,bytes)\":{\"custom:events\":\"{OperatorAuthorizationChanged} indicating the updated allowance\",\"custom:info\":\"This function in the LSP7 contract can be used as a prevention mechanism against double spending allowance vulnerability.\",\"custom:requirements\":\"- `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"addedAmount\":\"The additional amount to add on top of the current operator's allowance\",\"operator\":\"The operator to increase the allowance for `msg.sender`\"}},\"revokeOperator(address,address,bool,bytes)\":{\"custom:events\":\"{OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\",\"custom:requirements\":\"- caller MUST be `operator` or `tokenOwner` - `operator` cannot be the zero address.\",\"details\":\"Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not.\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenOwner\":\"The address of the token owner.\"}},\"setData(bytes32,bytes)\":{\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"custom:events\":\"- {Transfer} event when tokens get successfully transferred. - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked} event will be emitted if the operator has no more allowance left.\",\"custom:hint\":\"The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\",\"custom:info\":\"if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\",\"custom:requirements\":\"- `from` cannot be the zero address. - `to` cannot be the zero address. - `from` and `to` cannot be the same address (`from` cannot send tokens to itself). - `from` MUST have a balance of at least `amount` tokens. - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\",\"custom:warning\":\"Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified. This even if the `force` was set to `true`.\",\"details\":\"Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The sender address.\",\"to\":\"The recipient address.\"}},\"transferBatch(address[],address[],uint256[],bool[],bytes[])\":{\"custom:events\":\"{Transfer} event **for each token transfer**.\",\"custom:info\":\"If any transfer in the batch fail or revert, the whole call will revert.\",\"custom:requirements\":\"- `from`, `to`, `amount` lists MUST be of the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens MUST be owned by `from`. - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\",\"details\":\"Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\",\"params\":{\"amount\":\"An array of amount of tokens to transfer for each `from -> to` transfer.\",\"data\":\"An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of receiving addresses.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"decreaseAllowance(address,address,uint256,bytes)\":{\"notice\":\"Decrease the allowance of `operator` by -`subtractedAmount`\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"increaseAllowance(address,uint256,bytes)\":{\"notice\":\"Increase the allowance of `operator` by +`addedAmount`\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ITickets.sol\":\"ITickets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Interface of the LSP7 - Digital Asset standard, a fungible digital asset.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when the `from` transferred successfully `amount` of tokens to `to`.\\n     * @param operator The address of the operator that executed the transfer.\\n     * @param from The address which tokens were sent from (balance decreased by `-amount`).\\n     * @param to The address that received the tokens (balance increased by `+amount`).\\n     * @param amount The amount of tokens transferred.\\n     * @param force if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bool indexed notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in\\n     * the `constructor`, the decimals returned wiil be `0`. Otherwise `18` is the common value.\\n     *\\n     * @custom:notice This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     *\\n     * @return the number of decimals. If `0` is returned, the asset is non-divisible.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of tokens owned by `tokenOwner`.\\n     * If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided\\n     * by 1e18 to get a better picture of the actual balance of the `tokenOwner`.\\n     *\\n     * _Example:_\\n     *\\n     * ```\\n     * balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens\\n     * ```\\n     *\\n     * @param tokenOwner The address of the token holder to query the balance for.\\n     * @return The amount of tokens owned by `tokenOwner`.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The allowance amount of tokens operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} when allowance is given to a new operator or\\n     * an existing operator's allowance is updated.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        uint256 amount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf.\\n     * This function also allows the `operator` to remove itself if it is the caller of this function\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenOwner The address of the token owner.\\n     * @param notify Boolean indicating whether to notify the operator or not.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - caller MUST be `operator` or `tokenOwner`\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token holder).\\n     */\\n    function revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against double spending allowance vulnerability.\\n     *\\n     * @notice Increase the allowance of `operator` by +`addedAmount`\\n     *\\n     * @dev Atomically increases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The operator to increase the allowance for `msg.sender`\\n     * @param addedAmount The additional amount to add on top of the current operator's allowance\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the same address as `msg.sender`\\n     *  - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} indicating the updated allowance\\n     */\\n    function increaseAllowance(\\n        address operator,\\n        uint256 addedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @custom:info This function in the LSP7 contract can be used as a prevention mechanism\\n     * against the double spending allowance vulnerability.\\n     *\\n     * @notice Decrease the allowance of `operator` by -`subtractedAmount`\\n     *\\n     * @dev Atomically decreases the allowance granted to `operator` by the caller.\\n     * This is an alternative approach to {authorizeOperator} that can be used as a mitigation\\n     * for the double spending allowance problem.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @custom:events\\n     *  - {OperatorAuthorizationChanged} event indicating the updated allowance after decreasing it.\\n     *  - {OperatorRevoked} event if `subtractedAmount` is the full allowance,\\n     *    indicating `operator` does not have any alauthorizedAmountForlowance left for `msg.sender`.\\n     *\\n     * @param operator The operator to decrease allowance for `msg.sender`\\n     * @param tokenOwner The address of the token owner.\\n     * @param subtractedAmount The amount to decrease by in the operator's allowance.\\n     *\\n     * @custom:requirements\\n     *  - `operator` cannot be the zero address.\\n     *  - `operator` must have allowance for the caller of at least `subtractedAmount`.\\n     */\\n    function decreaseAllowance(\\n        address operator,\\n        address tokenOwner,\\n        uint256 subtractedAmount,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Get the amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners.\\n     *\\n     * @param operator The operator's address to query the authorized amount for.\\n     * @param tokenOwner The token owner that `operator` has allowance on.\\n     *\\n     * @return The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance.\\n     *\\n     * @custom:info If this function is called with the same address for `operator` and `tokenOwner`, it will simply read the `tokenOwner`'s balance\\n     * (since a tokenOwner is its own operator).\\n     */\\n    function authorizedAmountFor(\\n        address operator,\\n        address tokenOwner\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.\\n     *\\n     * @param tokenOwner The token owner to get the operators for.\\n     * @return An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`.\\n     */\\n    function getOperatorsOf(\\n        address tokenOwner\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function.\\n     * If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer\\n     * has been completed (See {authorizedAmountFor}).\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send tokens to itself).\\n     * - `from` MUST have a balance of at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with an allowance of at least `amount` of tokens.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when tokens get successfully transferred.\\n     * - if the transfer is triggered by an operator, either the {OperatorAuthorizationChanged} event will be emitted with the updated allowance or the {OperatorRevoked}\\n     * event will be emitted if the operator has no more allowance left.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.\\n     *\\n     * @custom:info If any transfer in the batch fail or revert, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of receiving addresses.\\n     * @param amount An array of amount of tokens to transfer for each `from -> to` transfer.\\n     * @param force For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from`, `to`, `amount` lists MUST be of the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens MUST be owned by `from`.\\n     * - for each transfer, if the caller is not `from`, it MUST be an operator for `from` with access to at least `amount` tokens.\\n     *\\n     * @custom:events {Transfer} event **for each token transfer**.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe809a376f430ba79bf7554b3274617103f1d0434546b2d4fe68019e3079a53d0\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ILSP7DigitalAsset} from \\\"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol\\\";\\ninterface ITickets is ILSP7DigitalAsset {\\n    event TicketsMinted(address _recipient, uint256 _amount);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable;\\n}\",\"keccak256\":\"0x24e407930a7c7fba4ee021520bbdec17e27f1fa4d24b94700440a742de6a43f4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DataChanged(bytes32,bytes)":{"notice":"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."}},"kind":"user","methods":{"batchCalls(bytes[])":{"notice":"Executing the following batch of abi-encoded function calls on the contract: `data`."},"decreaseAllowance(address,address,uint256,bytes)":{"notice":"Decrease the allowance of `operator` by -`subtractedAmount`"},"getData(bytes32)":{"notice":"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."},"getDataBatch(bytes32[])":{"notice":"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."},"increaseAllowance(address,uint256,bytes)":{"notice":"Increase the allowance of `operator` by +`addedAmount`"},"setData(bytes32,bytes)":{"notice":"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."},"setDataBatch(bytes32[],bytes[])":{"notice":"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."}},"version":1}}}}}}